
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0800b048  0800b048  0000c048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bef8  0800bef8  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bef8  0800bef8  0000cef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf00  0800bf00  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf00  0800bf00  0000cf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf04  0800bf04  0000cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800bf08  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1dc  2**0
                  CONTENTS
 10 .bss          000047d4  200001dc  200001dc  0000d1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200049b0  200049b0  0000d1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015024  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000340a  00000000  00000000  00022230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00025640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000faf  00000000  00000000  00026a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ec7  00000000  00000000  00027a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ced  00000000  00000000  0004b8ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d69ea  00000000  00000000  000625db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138fc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006564  00000000  00000000  00139008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0013f56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b02c 	.word	0x0800b02c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b02c 	.word	0x0800b02c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <vApplicationGetIdleTaskMemory+0x30>)
 8000eae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2280      	movs	r2, #128	@ 0x80
 8000eb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200001f8 	.word	0x200001f8
 8000ec8:	2000024c 	.word	0x2000024c

08000ecc <PID_Init>:
 * @param  Kd: Derivative gain.
 * @param  outputMin: Minimum output limit.
 * @param  outputMax: Maximum output limit.
 * @retval None
 */
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, int32_t outputMin, int32_t outputMax) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6178      	str	r0, [r7, #20]
 8000ed4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ed8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000edc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ee0:	6079      	str	r1, [r7, #4]
 8000ee2:	603a      	str	r2, [r7, #0]
    pid->Kp = Kp;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	609a      	str	r2, [r3, #8]
    pid->previousError = 0.0;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
    pid->outputMin = outputMin;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	615a      	str	r2, [r3, #20]
    pid->outputMax = outputMax;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	619a      	str	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <UART_Transmit>:

    return (uint32_t)output;
}


void UART_Transmit(char* message) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_IT(&huart3, (uint8_t*)message, strlen(message));
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff f9a3 	bl	8000270 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <UART_Transmit+0x24>)
 8000f34:	f003 fc2d 	bl	8004792 <HAL_UART_Transmit_IT>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000056c 	.word	0x2000056c

08000f44 <SetDir>:

void SetDir(bool right, bool forward){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	if (right){
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d01b      	beq.n	8000f92 <SetDir+0x4e>
		if(!forward){
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00a      	beq.n	8000f7c <SetDir+0x38>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2110      	movs	r1, #16
 8000f6a:	4819      	ldr	r0, [pc, #100]	@ (8000fd0 <SetDir+0x8c>)
 8000f6c:	f001 fe6a 	bl	8002c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2120      	movs	r1, #32
 8000f74:	4816      	ldr	r0, [pc, #88]	@ (8000fd0 <SetDir+0x8c>)
 8000f76:	f001 fe65 	bl	8002c44 <HAL_GPIO_WritePin>
		else{
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000f7a:	e025      	b.n	8000fc8 <SetDir+0x84>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2110      	movs	r1, #16
 8000f80:	4813      	ldr	r0, [pc, #76]	@ (8000fd0 <SetDir+0x8c>)
 8000f82:	f001 fe5f 	bl	8002c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4811      	ldr	r0, [pc, #68]	@ (8000fd0 <SetDir+0x8c>)
 8000f8c:	f001 fe5a 	bl	8002c44 <HAL_GPIO_WritePin>
}
 8000f90:	e01a      	b.n	8000fc8 <SetDir+0x84>
		if(!forward){
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	f083 0301 	eor.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00a      	beq.n	8000fb4 <SetDir+0x70>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <SetDir+0x8c>)
 8000fa4:	f001 fe4e 	bl	8002c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2104      	movs	r1, #4
 8000fac:	4808      	ldr	r0, [pc, #32]	@ (8000fd0 <SetDir+0x8c>)
 8000fae:	f001 fe49 	bl	8002c44 <HAL_GPIO_WritePin>
}
 8000fb2:	e009      	b.n	8000fc8 <SetDir+0x84>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <SetDir+0x8c>)
 8000fba:	f001 fe43 	bl	8002c44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <SetDir+0x8c>)
 8000fc4:	f001 fe3e 	bl	8002c44 <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <SetSpeed>:

void SetSpeed(bool right, uint32_t pwmVal){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
	if(right){
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d004      	beq.n	8000ff0 <SetSpeed+0x1c>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2,pwmVal);
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <SetSpeed+0x30>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1,pwmVal);
}
 8000fee:	e003      	b.n	8000ff8 <SetSpeed+0x24>
	else __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1,pwmVal);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <SetSpeed+0x30>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000524 	.word	0x20000524

08001008 <EncoderReset>:

void EncoderReset(bool right, EncoderDat EncoderData){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	71bb      	strb	r3, [r7, #6]
	if(right){
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d03b      	beq.n	8001096 <EncoderReset+0x8e>
		switch (EncoderData){
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <EncoderReset+0x22>
 8001024:	2b01      	cmp	r3, #1
 8001026:	d010      	beq.n	800104a <EncoderReset+0x42>
 8001028:	e01f      	b.n	800106a <EncoderReset+0x62>
		case POSITION:
			osMutexWait(EncoderRightMutexHandle, osWaitForever);
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <EncoderReset+0x110>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f04f 31ff 	mov.w	r1, #4294967295
 8001032:	4618      	mov	r0, r3
 8001034:	f004 fc08 	bl	8005848 <osMutexWait>
			encoderRight.position = 0;
 8001038:	4b38      	ldr	r3, [pc, #224]	@ (800111c <EncoderReset+0x114>)
 800103a:	2200      	movs	r2, #0
 800103c:	801a      	strh	r2, [r3, #0]
			osMutexRelease(EncoderRightMutexHandle);
 800103e:	4b36      	ldr	r3, [pc, #216]	@ (8001118 <EncoderReset+0x110>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f004 fc4e 	bl	80058e4 <osMutexRelease>
			break;
 8001048:	e061      	b.n	800110e <EncoderReset+0x106>
		case SPEED:
			osMutexWait(EncoderRightMutexHandle, osWaitForever);
 800104a:	4b33      	ldr	r3, [pc, #204]	@ (8001118 <EncoderReset+0x110>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f04f 31ff 	mov.w	r1, #4294967295
 8001052:	4618      	mov	r0, r3
 8001054:	f004 fbf8 	bl	8005848 <osMutexWait>
			encoderRight.speed = 0;
 8001058:	4b30      	ldr	r3, [pc, #192]	@ (800111c <EncoderReset+0x114>)
 800105a:	2200      	movs	r2, #0
 800105c:	805a      	strh	r2, [r3, #2]
			osMutexRelease(EncoderRightMutexHandle);
 800105e:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <EncoderReset+0x110>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fc3e 	bl	80058e4 <osMutexRelease>
			break;
 8001068:	e051      	b.n	800110e <EncoderReset+0x106>
		case ALL:
		default:
			osMutexWait(EncoderRightMutexHandle, osWaitForever);
 800106a:	4b2b      	ldr	r3, [pc, #172]	@ (8001118 <EncoderReset+0x110>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f04f 31ff 	mov.w	r1, #4294967295
 8001072:	4618      	mov	r0, r3
 8001074:	f004 fbe8 	bl	8005848 <osMutexWait>
			encoderRight.speed = 0;
 8001078:	4b28      	ldr	r3, [pc, #160]	@ (800111c <EncoderReset+0x114>)
 800107a:	2200      	movs	r2, #0
 800107c:	805a      	strh	r2, [r3, #2]
			encoderRight.position = 0;
 800107e:	4b27      	ldr	r3, [pc, #156]	@ (800111c <EncoderReset+0x114>)
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
			encoderRight.direction = 0;
 8001084:	4b25      	ldr	r3, [pc, #148]	@ (800111c <EncoderReset+0x114>)
 8001086:	2200      	movs	r2, #0
 8001088:	809a      	strh	r2, [r3, #4]
			osMutexRelease(EncoderRightMutexHandle);
 800108a:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <EncoderReset+0x110>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f004 fc28 	bl	80058e4 <osMutexRelease>
			break;
 8001094:	e03b      	b.n	800110e <EncoderReset+0x106>
		}
	}
	else{
		switch (EncoderData){
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <EncoderReset+0x9a>
 800109c:	2b01      	cmp	r3, #1
 800109e:	d010      	beq.n	80010c2 <EncoderReset+0xba>
 80010a0:	e01f      	b.n	80010e2 <EncoderReset+0xda>
			case POSITION:
				osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 80010a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <EncoderReset+0x118>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f04f 31ff 	mov.w	r1, #4294967295
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fbcc 	bl	8005848 <osMutexWait>
				encoderLeft.position = 0;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <EncoderReset+0x11c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	801a      	strh	r2, [r3, #0]
				osMutexRelease(EncoderLeftMutexHandle);
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <EncoderReset+0x118>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 fc12 	bl	80058e4 <osMutexRelease>
				break;
 80010c0:	e025      	b.n	800110e <EncoderReset+0x106>
			case SPEED:
				osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <EncoderReset+0x118>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 fbbc 	bl	8005848 <osMutexWait>
				encoderLeft.speed = 0;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <EncoderReset+0x11c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	805a      	strh	r2, [r3, #2]
				osMutexRelease(EncoderLeftMutexHandle);
 80010d6:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <EncoderReset+0x118>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fc02 	bl	80058e4 <osMutexRelease>
				break;
 80010e0:	e015      	b.n	800110e <EncoderReset+0x106>
			case ALL:
			default:
				osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <EncoderReset+0x118>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fbac 	bl	8005848 <osMutexWait>
				encoderLeft.speed = 0;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <EncoderReset+0x11c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	805a      	strh	r2, [r3, #2]
				encoderLeft.position = 0;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <EncoderReset+0x11c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	801a      	strh	r2, [r3, #0]
				encoderLeft.direction = 0;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <EncoderReset+0x11c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	809a      	strh	r2, [r3, #4]
				osMutexRelease(EncoderLeftMutexHandle);
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <EncoderReset+0x118>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f004 fbec 	bl	80058e4 <osMutexRelease>
				break;
 800110c:	bf00      	nop
		}
	}
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000614 	.word	0x20000614
 800111c:	20000668 	.word	0x20000668
 8001120:	200005c8 	.word	0x200005c8
 8001124:	20000660 	.word	0x20000660

08001128 <SetFacing>:

void SetFacing(DIRECTION direction) {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d010      	beq.n	800115a <SetFacing+0x32>
 8001138:	2b02      	cmp	r3, #2
 800113a:	dc13      	bgt.n	8001164 <SetFacing+0x3c>
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <SetFacing+0x1e>
 8001140:	2b01      	cmp	r3, #1
 8001142:	d005      	beq.n	8001150 <SetFacing+0x28>
 8001144:	e00e      	b.n	8001164 <SetFacing+0x3c>
	case STRAIGHT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,150);
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <SetFacing+0x54>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2296      	movs	r2, #150	@ 0x96
 800114c:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 800114e:	e00e      	b.n	800116e <SetFacing+0x46>
	case RIGHT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,200);
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <SetFacing+0x54>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	22c8      	movs	r2, #200	@ 0xc8
 8001156:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8001158:	e009      	b.n	800116e <SetFacing+0x46>
	case LEFT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,100);
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <SetFacing+0x54>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2264      	movs	r2, #100	@ 0x64
 8001160:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8001162:	e004      	b.n	800116e <SetFacing+0x46>
	default:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,150);
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <SetFacing+0x54>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2296      	movs	r2, #150	@ 0x96
 800116a:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 800116c:	bf00      	nop
	}
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000044c 	.word	0x2000044c

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b0a4      	sub	sp, #144	@ 0x90
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001186:	f001 f987 	bl	8002498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118a:	f000 f8ff 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f000 fb75 	bl	800187c <MX_GPIO_Init>
  MX_TIM8_Init();
 8001192:	f000 fa9f 	bl	80016d4 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001196:	f000 f9f5 	bl	8001584 <MX_TIM2_Init>
  MX_TIM3_Init();
 800119a:	f000 fa47 	bl	800162c <MX_TIM3_Init>
  MX_TIM1_Init();
 800119e:	f000 f953 	bl	8001448 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80011a2:	f000 fb41 	bl	8001828 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80011a6:	f007 f86d 	bl	8008284 <OLED_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	4960      	ldr	r1, [pc, #384]	@ (8001330 <main+0x1b0>)
 80011ae:	4861      	ldr	r0, [pc, #388]	@ (8001334 <main+0x1b4>)
 80011b0:	f003 fb25 	bl	80047fe <HAL_UART_Receive_IT>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80011b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001334 <main+0x1b4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001334 <main+0x1b4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	60da      	str	r2, [r3, #12]

//  HAL_UART_Transmit_IT(&huart3, (uint8_t *)aRxBuffer, 10);
  // Start Encoders
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 80011c4:	213c      	movs	r1, #60	@ 0x3c
 80011c6:	485c      	ldr	r0, [pc, #368]	@ (8001338 <main+0x1b8>)
 80011c8:	f002 fc06 	bl	80039d8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Right encoder
 80011cc:	213c      	movs	r1, #60	@ 0x3c
 80011ce:	485b      	ldr	r0, [pc, #364]	@ (800133c <main+0x1bc>)
 80011d0:	f002 fc02 	bl	80039d8 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0); // Left encoder
 80011d4:	4b58      	ldr	r3, [pc, #352]	@ (8001338 <main+0x1b8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim3, 0); // Right encoder
 80011dc:	4b57      	ldr	r3, [pc, #348]	@ (800133c <main+0x1bc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24

  // Start PWM for motors
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Left motor PWM
 80011e4:	2100      	movs	r1, #0
 80011e6:	4856      	ldr	r0, [pc, #344]	@ (8001340 <main+0x1c0>)
 80011e8:	f002 fa88 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); // Right motor PWM
 80011ec:	2104      	movs	r1, #4
 80011ee:	4854      	ldr	r0, [pc, #336]	@ (8001340 <main+0x1c0>)
 80011f0:	f002 fa84 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Servo motor PWM
 80011f4:	210c      	movs	r1, #12
 80011f6:	4853      	ldr	r0, [pc, #332]	@ (8001344 <main+0x1c4>)
 80011f8:	f002 fa80 	bl	80036fc <HAL_TIM_PWM_Start>
//  SetServo(150);
  // Initialize the PID controllers for each motor
  PID_Init(&leftPID, 7, 0.01, 0.01, 0, 1500);  // Set your PID constants and output limits
 80011fc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001200:	2100      	movs	r1, #0
 8001202:	ed9f 1a51 	vldr	s2, [pc, #324]	@ 8001348 <main+0x1c8>
 8001206:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8001348 <main+0x1c8>
 800120a:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 800120e:	484f      	ldr	r0, [pc, #316]	@ (800134c <main+0x1cc>)
 8001210:	f7ff fe5c 	bl	8000ecc <PID_Init>
  PID_Init(&rightPID, 4, 0.01, 0.01, 0, 1500); // Set your PID constants and output limits
 8001214:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001218:	2100      	movs	r1, #0
 800121a:	ed9f 1a4b 	vldr	s2, [pc, #300]	@ 8001348 <main+0x1c8>
 800121e:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8001348 <main+0x1c8>
 8001222:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8001226:	484a      	ldr	r0, [pc, #296]	@ (8001350 <main+0x1d0>)
 8001228:	f7ff fe50 	bl	8000ecc <PID_Init>

  SetDir(0,1);
 800122c:	2101      	movs	r1, #1
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fe88 	bl	8000f44 <SetDir>
  SetDir(1,1);
 8001234:	2101      	movs	r1, #1
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff fe84 	bl	8000f44 <SetDir>
//  SetFacing(RIGHT);
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of EncoderLeftMutex */
  osMutexStaticDef(EncoderLeftMutex, &EncoderLeftMutexControlBlock);
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001242:	4b44      	ldr	r3, [pc, #272]	@ (8001354 <main+0x1d4>)
 8001244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  EncoderLeftMutexHandle = osMutexCreate(osMutex(EncoderLeftMutex));
 8001248:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800124c:	4618      	mov	r0, r3
 800124e:	f004 fae2 	bl	8005816 <osMutexCreate>
 8001252:	4603      	mov	r3, r0
 8001254:	4a40      	ldr	r2, [pc, #256]	@ (8001358 <main+0x1d8>)
 8001256:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderRightMutex */
  osMutexStaticDef(EncoderRightMutex, &EncoderRightMutexControlBlock);
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800125e:	4b3f      	ldr	r3, [pc, #252]	@ (800135c <main+0x1dc>)
 8001260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  EncoderRightMutexHandle = osMutexCreate(osMutex(EncoderRightMutex));
 8001264:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001268:	4618      	mov	r0, r3
 800126a:	f004 fad4 	bl	8005816 <osMutexCreate>
 800126e:	4603      	mov	r3, r0
 8001270:	4a3b      	ldr	r2, [pc, #236]	@ (8001360 <main+0x1e0>)
 8001272:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of cmdQueue */
  osMessageQDef(cmdQueue, 16, uint8_t);
 8001274:	4b3b      	ldr	r3, [pc, #236]	@ (8001364 <main+0x1e4>)
 8001276:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800127a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cmdQueueHandle = osMessageCreate(osMessageQ(cmdQueue), NULL);
 8001280:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fb62 	bl	8005950 <osMessageCreate>
 800128c:	4603      	mov	r3, r0
 800128e:	4a36      	ldr	r2, [pc, #216]	@ (8001368 <main+0x1e8>)
 8001290:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001292:	4b36      	ldr	r3, [pc, #216]	@ (800136c <main+0x1ec>)
 8001294:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001298:	461d      	mov	r5, r3
 800129a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800129c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800129e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 fa52 	bl	8005756 <osThreadCreate>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001370 <main+0x1f0>)
 80012b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of show */
  osThreadDef(show, StartTask02, osPriorityIdle, 0, 128);
 80012b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <main+0x1f4>)
 80012ba:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80012be:	461d      	mov	r5, r3
 80012c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  showHandle = osThreadCreate(osThread(show), NULL);
 80012cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 fa3f 	bl	8005756 <osThreadCreate>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <main+0x1f8>)
 80012dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Encoder */
  osThreadDef(Encoder, EncoderTask, osPriorityIdle, 0, 128);
 80012de:	4b27      	ldr	r3, [pc, #156]	@ (800137c <main+0x1fc>)
 80012e0:	f107 041c 	add.w	r4, r7, #28
 80012e4:	461d      	mov	r5, r3
 80012e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderHandle = osThreadCreate(osThread(Encoder), NULL);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 fa2c 	bl	8005756 <osThreadCreate>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <main+0x200>)
 8001302:	6013      	str	r3, [r2, #0]
  /* definition and creation of MoveStraight */
//  osThreadDef(MoveStraight, StartStraight, osPriorityIdle, 0, 128);
//  MoveStraightHandle = osThreadCreate(osThread(MoveStraight), NULL);

  /* definition and creation of motorTask */
  osThreadDef(motorTask, MotorTask, osPriorityIdle, 0, 128);
 8001304:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <main+0x204>)
 8001306:	463c      	mov	r4, r7
 8001308:	461d      	mov	r5, r3
 800130a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8001316:	463b      	mov	r3, r7
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fa1b 	bl	8005756 <osThreadCreate>
 8001320:	4603      	mov	r3, r0
 8001322:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <main+0x208>)
 8001324:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001326:	f004 fa0f 	bl	8005748 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800132a:	bf00      	nop
 800132c:	e7fd      	b.n	800132a <main+0x1aa>
 800132e:	bf00      	nop
 8001330:	200006b0 	.word	0x200006b0
 8001334:	2000056c 	.word	0x2000056c
 8001338:	20000494 	.word	0x20000494
 800133c:	200004dc 	.word	0x200004dc
 8001340:	20000524 	.word	0x20000524
 8001344:	2000044c 	.word	0x2000044c
 8001348:	3c23d70a 	.word	0x3c23d70a
 800134c:	20000670 	.word	0x20000670
 8001350:	2000068c 	.word	0x2000068c
 8001354:	200005cc 	.word	0x200005cc
 8001358:	200005c8 	.word	0x200005c8
 800135c:	20000618 	.word	0x20000618
 8001360:	20000614 	.word	0x20000614
 8001364:	0800b048 	.word	0x0800b048
 8001368:	200005c4 	.word	0x200005c4
 800136c:	0800b064 	.word	0x0800b064
 8001370:	200005b4 	.word	0x200005b4
 8001374:	0800b088 	.word	0x0800b088
 8001378:	200005b8 	.word	0x200005b8
 800137c:	0800b0ac 	.word	0x0800b0ac
 8001380:	200005bc 	.word	0x200005bc
 8001384:	0800b0d4 	.word	0x0800b0d4
 8001388:	200005c0 	.word	0x200005c0

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	@ 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	2230      	movs	r2, #48	@ 0x30
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f007 fd7b 	bl	8008e96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	4b22      	ldr	r3, [pc, #136]	@ (8001440 <SystemClock_Config+0xb4>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <SystemClock_Config+0xb4>)
 80013ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013be:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <SystemClock_Config+0xb4>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <SystemClock_Config+0xb8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <SystemClock_Config+0xb8>)
 80013d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <SystemClock_Config+0xb8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f0:	2310      	movs	r3, #16
 80013f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 fc7d 	bl	8002cfc <HAL_RCC_OscConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001408:	f000 fd5e 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140c:	230f      	movs	r3, #15
 800140e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fee0 	bl	80031ec <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001432:	f000 fd49 	bl	8001ec8 <Error_Handler>
  }
}
 8001436:	bf00      	nop
 8001438:	3750      	adds	r7, #80	@ 0x50
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40007000 	.word	0x40007000

08001448 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b096      	sub	sp, #88	@ 0x58
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2220      	movs	r2, #32
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f007 fd08 	bl	8008e96 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001486:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <MX_TIM1_Init+0x134>)
 8001488:	4a3d      	ldr	r2, [pc, #244]	@ (8001580 <MX_TIM1_Init+0x138>)
 800148a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800148c:	4b3b      	ldr	r3, [pc, #236]	@ (800157c <MX_TIM1_Init+0x134>)
 800148e:	22a0      	movs	r2, #160	@ 0xa0
 8001490:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <MX_TIM1_Init+0x134>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8001498:	4b38      	ldr	r3, [pc, #224]	@ (800157c <MX_TIM1_Init+0x134>)
 800149a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800149e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b36      	ldr	r3, [pc, #216]	@ (800157c <MX_TIM1_Init+0x134>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a6:	4b35      	ldr	r3, [pc, #212]	@ (800157c <MX_TIM1_Init+0x134>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ac:	4b33      	ldr	r3, [pc, #204]	@ (800157c <MX_TIM1_Init+0x134>)
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b2:	4832      	ldr	r0, [pc, #200]	@ (800157c <MX_TIM1_Init+0x134>)
 80014b4:	f002 f87a 	bl	80035ac <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014be:	f000 fd03 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014cc:	4619      	mov	r1, r3
 80014ce:	482b      	ldr	r0, [pc, #172]	@ (800157c <MX_TIM1_Init+0x134>)
 80014d0:	f002 fbd2 	bl	8003c78 <HAL_TIM_ConfigClockSource>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014da:	f000 fcf5 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014de:	4827      	ldr	r0, [pc, #156]	@ (800157c <MX_TIM1_Init+0x134>)
 80014e0:	f002 f8b3 	bl	800364a <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014ea:	f000 fced 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014fa:	4619      	mov	r1, r3
 80014fc:	481f      	ldr	r0, [pc, #124]	@ (800157c <MX_TIM1_Init+0x134>)
 80014fe:	f002 ff9f 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001508:	f000 fcde 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150c:	2360      	movs	r3, #96	@ 0x60
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	220c      	movs	r2, #12
 800152a:	4619      	mov	r1, r3
 800152c:	4813      	ldr	r0, [pc, #76]	@ (800157c <MX_TIM1_Init+0x134>)
 800152e:	f002 fae1 	bl	8003af4 <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001538:	f000 fcc6 	bl	8001ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001554:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <MX_TIM1_Init+0x134>)
 8001560:	f002 ffea 	bl	8004538 <HAL_TIMEx_ConfigBreakDeadTime>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800156a:	f000 fcad 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <MX_TIM1_Init+0x134>)
 8001570:	f000 fdd4 	bl	800211c <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3758      	adds	r7, #88	@ 0x58
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000044c 	.word	0x2000044c
 8001580:	40010000 	.word	0x40010000

08001584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	@ 0x30
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	2224      	movs	r2, #36	@ 0x24
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f007 fc7f 	bl	8008e96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a0:	4b21      	ldr	r3, [pc, #132]	@ (8001628 <MX_TIM2_Init+0xa4>)
 80015a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <MX_TIM2_Init+0xa4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <MX_TIM2_Init+0xa4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <MX_TIM2_Init+0xa4>)
 80015b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <MX_TIM2_Init+0xa4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <MX_TIM2_Init+0xa4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015c8:	2303      	movs	r3, #3
 80015ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015d0:	2301      	movs	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80015d8:	230a      	movs	r3, #10
 80015da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015e0:	2301      	movs	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80015e8:	230a      	movs	r3, #10
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	@ (8001628 <MX_TIM2_Init+0xa4>)
 80015f4:	f002 f94a 	bl	800388c <HAL_TIM_Encoder_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80015fe:	f000 fc63 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <MX_TIM2_Init+0xa4>)
 8001610:	f002 ff16 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800161a:	f000 fc55 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3730      	adds	r7, #48	@ 0x30
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000494 	.word	0x20000494

0800162c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	@ 0x30
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2224      	movs	r2, #36	@ 0x24
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f007 fc2b 	bl	8008e96 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001648:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <MX_TIM3_Init+0xa0>)
 800164a:	4a21      	ldr	r2, [pc, #132]	@ (80016d0 <MX_TIM3_Init+0xa4>)
 800164c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800164e:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <MX_TIM3_Init+0xa0>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <MX_TIM3_Init+0xa0>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <MX_TIM3_Init+0xa0>)
 800165c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001660:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_TIM3_Init+0xa0>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <MX_TIM3_Init+0xa0>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800166e:	2301      	movs	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001676:	2301      	movs	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800167e:	230a      	movs	r3, #10
 8001680:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001686:	2301      	movs	r3, #1
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800168e:	230a      	movs	r3, #10
 8001690:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	4619      	mov	r1, r3
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <MX_TIM3_Init+0xa0>)
 800169a:	f002 f8f7 	bl	800388c <HAL_TIM_Encoder_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016a4:	f000 fc10 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_TIM3_Init+0xa0>)
 80016b6:	f002 fec3 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016c0:	f000 fc02 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3730      	adds	r7, #48	@ 0x30
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200004dc 	.word	0x200004dc
 80016d0:	40000400 	.word	0x40000400

080016d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b096      	sub	sp, #88	@ 0x58
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2220      	movs	r2, #32
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f007 fbc2 	bl	8008e96 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001712:	4b43      	ldr	r3, [pc, #268]	@ (8001820 <MX_TIM8_Init+0x14c>)
 8001714:	4a43      	ldr	r2, [pc, #268]	@ (8001824 <MX_TIM8_Init+0x150>)
 8001716:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001718:	4b41      	ldr	r3, [pc, #260]	@ (8001820 <MX_TIM8_Init+0x14c>)
 800171a:	2200      	movs	r2, #0
 800171c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b40      	ldr	r3, [pc, #256]	@ (8001820 <MX_TIM8_Init+0x14c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001724:	4b3e      	ldr	r3, [pc, #248]	@ (8001820 <MX_TIM8_Init+0x14c>)
 8001726:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800172a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <MX_TIM8_Init+0x14c>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001732:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <MX_TIM8_Init+0x14c>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <MX_TIM8_Init+0x14c>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800173e:	4838      	ldr	r0, [pc, #224]	@ (8001820 <MX_TIM8_Init+0x14c>)
 8001740:	f001 ff34 	bl	80035ac <HAL_TIM_Base_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800174a:	f000 fbbd 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001752:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001754:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001758:	4619      	mov	r1, r3
 800175a:	4831      	ldr	r0, [pc, #196]	@ (8001820 <MX_TIM8_Init+0x14c>)
 800175c:	f002 fa8c 	bl	8003c78 <HAL_TIM_ConfigClockSource>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001766:	f000 fbaf 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800176a:	482d      	ldr	r0, [pc, #180]	@ (8001820 <MX_TIM8_Init+0x14c>)
 800176c:	f001 ff6d 	bl	800364a <HAL_TIM_PWM_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001776:	f000 fba7 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001782:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001786:	4619      	mov	r1, r3
 8001788:	4825      	ldr	r0, [pc, #148]	@ (8001820 <MX_TIM8_Init+0x14c>)
 800178a:	f002 fe59 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001794:	f000 fb98 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001798:	2360      	movs	r3, #96	@ 0x60
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b8:	2200      	movs	r2, #0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4818      	ldr	r0, [pc, #96]	@ (8001820 <MX_TIM8_Init+0x14c>)
 80017be:	f002 f999 	bl	8003af4 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80017c8:	f000 fb7e 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d0:	2204      	movs	r2, #4
 80017d2:	4619      	mov	r1, r3
 80017d4:	4812      	ldr	r0, [pc, #72]	@ (8001820 <MX_TIM8_Init+0x14c>)
 80017d6:	f002 f98d 	bl	8003af4 <HAL_TIM_PWM_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80017e0:	f000 fb72 	bl	8001ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	@ (8001820 <MX_TIM8_Init+0x14c>)
 8001808:	f002 fe96 	bl	8004538 <HAL_TIMEx_ConfigBreakDeadTime>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001812:	f000 fb59 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3758      	adds	r7, #88	@ 0x58
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000524 	.word	0x20000524
 8001824:	40010400 	.word	0x40010400

08001828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <MX_USART3_UART_Init+0x4c>)
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <MX_USART3_UART_Init+0x50>)
 8001830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <MX_USART3_UART_Init+0x4c>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <MX_USART3_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <MX_USART3_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <MX_USART3_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <MX_USART3_UART_Init+0x4c>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <MX_USART3_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <MX_USART3_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	@ (8001874 <MX_USART3_UART_Init+0x4c>)
 8001860:	f002 febc 	bl	80045dc <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800186a:	f000 fb2d 	bl	8001ec8 <Error_Handler>
//  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
//  HAL_NVIC_EnableIRQ(USART3_IRQn);

  /* USER CODE END USART3_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000056c 	.word	0x2000056c
 8001878:	40004800 	.word	0x40004800

0800187c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	@ 0x28
 8001880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b31      	ldr	r3, [pc, #196]	@ (800195c <MX_GPIO_Init+0xe0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a30      	ldr	r2, [pc, #192]	@ (800195c <MX_GPIO_Init+0xe0>)
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a29      	ldr	r2, [pc, #164]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b27      	ldr	r3, [pc, #156]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b23      	ldr	r3, [pc, #140]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a22      	ldr	r2, [pc, #136]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a1b      	ldr	r2, [pc, #108]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b19      	ldr	r3, [pc, #100]	@ (800195c <MX_GPIO_Init+0xe0>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SCL_Pin|SDA_Pin|RESET_Pin|DC_Pin
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001908:	4815      	ldr	r0, [pc, #84]	@ (8001960 <MX_GPIO_Init+0xe4>)
 800190a:	f001 f99b 	bl	8002c44 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	213c      	movs	r1, #60	@ 0x3c
 8001912:	4814      	ldr	r0, [pc, #80]	@ (8001964 <MX_GPIO_Init+0xe8>)
 8001914:	f001 f996 	bl	8002c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SCL_Pin SDA_Pin RESET_Pin DC_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin|RESET_Pin|DC_Pin
 8001918:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 800191c:	617b      	str	r3, [r7, #20]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	480b      	ldr	r0, [pc, #44]	@ (8001960 <MX_GPIO_Init+0xe4>)
 8001932:	f000 ffeb 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001936:	233c      	movs	r3, #60	@ 0x3c
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	@ (8001964 <MX_GPIO_Init+0xe8>)
 800194e:	f000 ffdd 	bl	800290c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	@ 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40021000 	.word	0x40021000
 8001964:	40020000 	.word	0x40020000

08001968 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	circularBuffer[writeIndex] = aRxBuffer[0];  // Assuming a single byte command for simplicity
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_UART_RxCpltCallback+0x54>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <HAL_UART_RxCpltCallback+0x58>)
 800197a:	7819      	ldrb	r1, [r3, #0]
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <HAL_UART_RxCpltCallback+0x5c>)
 800197e:	5499      	strb	r1, [r3, r2]

	writeIndex = (writeIndex + 1) % BUFFER_SIZE;
 8001980:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <HAL_UART_RxCpltCallback+0x54>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	3301      	adds	r3, #1
 8001988:	425a      	negs	r2, r3
 800198a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800198e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001992:	bf58      	it	pl
 8001994:	4253      	negpl	r3, r2
 8001996:	b29a      	uxth	r2, r3
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_UART_RxCpltCallback+0x54>)
 800199a:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	2201      	movs	r2, #1
 80019a2:	4909      	ldr	r1, [pc, #36]	@ (80019c8 <HAL_UART_RxCpltCallback+0x60>)
 80019a4:	4809      	ldr	r0, [pc, #36]	@ (80019cc <HAL_UART_RxCpltCallback+0x64>)
 80019a6:	f002 fe69 	bl	800467c <HAL_UART_Transmit>
	// Re-enable UART reception for the next byte
	HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 80019aa:	2201      	movs	r2, #1
 80019ac:	4904      	ldr	r1, [pc, #16]	@ (80019c0 <HAL_UART_RxCpltCallback+0x58>)
 80019ae:	4807      	ldr	r0, [pc, #28]	@ (80019cc <HAL_UART_RxCpltCallback+0x64>)
 80019b0:	f002 ff25 	bl	80047fe <HAL_UART_Receive_IT>

}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000704 	.word	0x20000704
 80019c0:	200006b0 	.word	0x200006b0
 80019c4:	200006c4 	.word	0x200006c4
 80019c8:	20000000 	.word	0x20000000
 80019cc:	2000056c 	.word	0x2000056c

080019d0 <UpdateState>:
	BACKWARD,
	TURN
} STATE;


STATE UpdateState(uint8_t command, uint8_t degree) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	460a      	mov	r2, r1
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	4613      	mov	r3, r2
 80019de:	71bb      	strb	r3, [r7, #6]
  switch (command) {
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d87c      	bhi.n	8001ae0 <UpdateState+0x110>
 80019e6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ec <UpdateState+0x1c>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001a11 	.word	0x08001a11
 80019f4:	08001a47 	.word	0x08001a47
 80019f8:	08001a7d 	.word	0x08001a7d
    case 0x00:
    	SetSpeed(0,0);
 80019fc:	2100      	movs	r1, #0
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7ff fae8 	bl	8000fd4 <SetSpeed>
    	SetSpeed(1,0);
 8001a04:	2100      	movs	r1, #0
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7ff fae4 	bl	8000fd4 <SetSpeed>
      return STOP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e068      	b.n	8001ae2 <UpdateState+0x112>
      break;
    case 0x01:
      SetFacing(STRAIGHT);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fb89 	bl	8001128 <SetFacing>
      osDelay(500);
 8001a16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a1a:	f003 fee8 	bl	80057ee <osDelay>
      SetDir(0,1);
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fa8f 	bl	8000f44 <SetDir>
	    SetDir(1,1);
 8001a26:	2101      	movs	r1, #1
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7ff fa8b 	bl	8000f44 <SetDir>
      SetSpeed(0,1500);
 8001a2e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff face 	bl	8000fd4 <SetSpeed>
	    SetSpeed(1,1750);
 8001a38:	f240 61d6 	movw	r1, #1750	@ 0x6d6
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fac9 	bl	8000fd4 <SetSpeed>
      return FORWARD;
 8001a42:	2302      	movs	r3, #2
 8001a44:	e04d      	b.n	8001ae2 <UpdateState+0x112>
      break;
    case 0x02:
      SetFacing(STRAIGHT);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff fb6e 	bl	8001128 <SetFacing>
      osDelay(500);
 8001a4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a50:	f003 fecd 	bl	80057ee <osDelay>
      SetDir(0,0);
 8001a54:	2100      	movs	r1, #0
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fa74 	bl	8000f44 <SetDir>
	    SetDir(1,0);
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fa70 	bl	8000f44 <SetDir>
      SetSpeed(0,1500);
 8001a64:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff fab3 	bl	8000fd4 <SetSpeed>
	    SetSpeed(1,1750);
 8001a6e:	f240 61d6 	movw	r1, #1750	@ 0x6d6
 8001a72:	2001      	movs	r0, #1
 8001a74:	f7ff faae 	bl	8000fd4 <SetSpeed>
      return BACKWARD;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e032      	b.n	8001ae2 <UpdateState+0x112>
      break;
    case 0x03:
      if ((degree & 0x20) >> 5 == 0x01) SetFacing(RIGHT);
 8001a7c:	79bb      	ldrb	r3, [r7, #6]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <UpdateState+0xbe>
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7ff fb4e 	bl	8001128 <SetFacing>
 8001a8c:	e002      	b.n	8001a94 <UpdateState+0xc4>
      else SetFacing(LEFT);
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f7ff fb4a 	bl	8001128 <SetFacing>
      osDelay(500);
 8001a94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a98:	f003 fea9 	bl	80057ee <osDelay>
      if ((degree & 0x10) >> 4 == 0x01){
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <UpdateState+0xe8>
        SetDir(0,1);
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fa4b 	bl	8000f44 <SetDir>
	      SetDir(1,1);
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff fa47 	bl	8000f44 <SetDir>
 8001ab6:	e007      	b.n	8001ac8 <UpdateState+0xf8>
      }
      else {
        SetDir(0,0);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff fa42 	bl	8000f44 <SetDir>
	      SetDir(1,0);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7ff fa3e 	bl	8000f44 <SetDir>
      }
      SetSpeed(0,1500);
 8001ac8:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fa81 	bl	8000fd4 <SetSpeed>
	  SetSpeed(1,1650);
 8001ad2:	f240 6172 	movw	r1, #1650	@ 0x672
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fa7c 	bl	8000fd4 <SetSpeed>
      return TURN;
 8001adc:	2304      	movs	r3, #4
 8001ade:	e000      	b.n	8001ae2 <UpdateState+0x112>
      break;
    default:
      return WAIT;  // Default to WAIT if an unexpected value is received
 8001ae0:	2300      	movs	r3, #0
      break;
  }
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop

08001aec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t ch = 'A';
 8001af4:	2341      	movs	r3, #65	@ 0x41
 8001af6:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
//	  UART_Transmit((uint8_t *)&ch);
//	  if(ch < 'Z') ch++;
	  HAL_GPIO_TogglePin(GPIOE,LED_Pin);
 8001af8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001afc:	4804      	ldr	r0, [pc, #16]	@ (8001b10 <StartDefaultTask+0x24>)
 8001afe:	f001 f8ba 	bl	8002c76 <HAL_GPIO_TogglePin>
	  osDelay(5000);
 8001b02:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001b06:	f003 fe72 	bl	80057ee <osDelay>
	  HAL_GPIO_TogglePin(GPIOE,LED_Pin);
 8001b0a:	bf00      	nop
 8001b0c:	e7f4      	b.n	8001af8 <StartDefaultTask+0xc>
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000

08001b14 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//  sprintf(hello, "%02X", aRxBuffer);
//  OLED_ShowString(10,5,hello);
  OLED_Refresh_Gram();
 8001b1c:	f006 fa0c 	bl	8007f38 <OLED_Refresh_Gram>
  osDelay(2000);
 8001b20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b24:	f003 fe63 	bl	80057ee <osDelay>
  OLED_Refresh_Gram();
 8001b28:	bf00      	nop
 8001b2a:	e7f7      	b.n	8001b1c <StartTask02+0x8>

08001b2c <EncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderTask */
void EncoderTask(void const * argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	@ 0x30
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderTask */
  /* Infinite loop */
  char speedStr[20];
  last_encoder_read_time = HAL_GetTick();
 8001b34:	f000 fd16 	bl	8002564 <HAL_GetTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a31      	ldr	r2, [pc, #196]	@ (8001c00 <EncoderTask+0xd4>)
 8001b3c:	6013      	str	r3, [r2, #0]
  uint32_t position;
  uint16_t counter_current;
  for(;;)
  {
	  uint32_t current_time = HAL_GetTick();
 8001b3e:	f000 fd11 	bl	8002564 <HAL_GetTick>
 8001b42:	62b8      	str	r0, [r7, #40]	@ 0x28
	      if(__HAL_TIM_IS_TIM_COUNTING_DOWN (&htim2)) counter_current = __HAL_TIM_GET_COUNTER(&htim2) * -1;
 8001b44:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <EncoderTask+0xd8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b10      	cmp	r3, #16
 8001b50:	d106      	bne.n	8001b60 <EncoderTask+0x34>
 8001b52:	4b2c      	ldr	r3, [pc, #176]	@ (8001c04 <EncoderTask+0xd8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001b5e:	e003      	b.n	8001b68 <EncoderTask+0x3c>
	      else counter_current = __HAL_TIM_GET_COUNTER(&htim2);
 8001b60:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <EncoderTask+0xd8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b66:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	      // Calculate the elapsed time in milliseconds
	      uint32_t elapsed_time = current_time - last_encoder_read_time;
 8001b68:	4b25      	ldr	r3, [pc, #148]	@ (8001c00 <EncoderTask+0xd4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
	      if (elapsed_time >= T) {  // Every 20ms (T = 0.02s)
 8001b72:	2314      	movs	r3, #20
 8001b74:	461a      	mov	r2, r3
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d33d      	bcc.n	8001bf8 <EncoderTask+0xcc>
	          // Calculate the speed in ticks per second
	          uint16_t delta_ticks = (uint16_t)(counter_current);
 8001b7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001b7e:	847b      	strh	r3, [r7, #34]	@ 0x22
	          speed = (uint32_t)(delta_ticks) * 1000 / elapsed_time; // Speed in ticks per second
 8001b80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001b82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b86:	fb03 f202 	mul.w	r2, r3, r2
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b90:	4a1d      	ldr	r2, [pc, #116]	@ (8001c08 <EncoderTask+0xdc>)
 8001b92:	6013      	str	r3, [r2, #0]
            osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001b94:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <EncoderTask+0xe0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fe53 	bl	8005848 <osMutexWait>
            encoderLeft.speed = speed;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <EncoderTask+0xdc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <EncoderTask+0xe4>)
 8001baa:	805a      	strh	r2, [r3, #2]
            encoderLeft.position += counter_current;
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <EncoderTask+0xe4>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <EncoderTask+0xe4>)
 8001bba:	801a      	strh	r2, [r3, #0]
            position = encoderLeft.position;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <EncoderTask+0xe4>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	61fb      	str	r3, [r7, #28]
            osMutexRelease(EncoderLeftMutexHandle);
 8001bc4:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <EncoderTask+0xe0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 fe8b 	bl	80058e4 <osMutexRelease>
        
            sprintf(speedStr, "%.7d", position);
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	490f      	ldr	r1, [pc, #60]	@ (8001c14 <EncoderTask+0xe8>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f007 f8fa 	bl	8008dd0 <siprintf>
            OLED_ShowString(10,30,speedStr);
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	461a      	mov	r2, r3
 8001be2:	211e      	movs	r1, #30
 8001be4:	200a      	movs	r0, #10
 8001be6:	f006 fb1b 	bl	8008220 <OLED_ShowString>
	          // OLED_Refresh_Gram();
	          // Save the current time and encoder count for the next calculation
	          last_encoder_read_time = current_time;
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <EncoderTask+0xd4>)
 8001bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bee:	6013      	str	r3, [r2, #0]
	          // counter_prev = counter_current;

	          // Optionally reset encoder counter
	          __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001bf0:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <EncoderTask+0xd8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24
	      }
    osDelay(10);
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f003 fdf8 	bl	80057ee <osDelay>
  {
 8001bfe:	e79e      	b.n	8001b3e <EncoderTask+0x12>
 8001c00:	200006a8 	.word	0x200006a8
 8001c04:	20000494 	.word	0x20000494
 8001c08:	200006ac 	.word	0x200006ac
 8001c0c:	200005c8 	.word	0x200005c8
 8001c10:	20000660 	.word	0x20000660
 8001c14:	0800b0f0 	.word	0x0800b0f0

08001c18 <MotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MotorTask */
void MotorTask(void const * argument)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MotorTask */
  /* Infinite loop */
	SetDir(0,1);
 8001c20:	2101      	movs	r1, #1
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff f98e 	bl	8000f44 <SetDir>
	SetDir(1,1);
 8001c28:	2101      	movs	r1, #1
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff f98a 	bl	8000f44 <SetDir>
	SetSpeed(0,0);
 8001c30:	2100      	movs	r1, #0
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff f9ce 	bl	8000fd4 <SetSpeed>
	SetSpeed(1,0);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f7ff f9ca 	bl	8000fd4 <SetSpeed>
	uint8_t degree;
	uint8_t command;
	uint32_t dist;
	uint8_t showBuf;
	uint8_t buf;
	STATE CurrentState = WAIT;
 8001c40:	2300      	movs	r3, #0
 8001c42:	75bb      	strb	r3, [r7, #22]
	bool done;

	EncoderReset(false, POSITION);
 8001c44:	2100      	movs	r1, #0
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff f9de 	bl	8001008 <EncoderReset>
	SetFacing(LEFT);
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f7ff fa6b 	bl	8001128 <SetFacing>
	osDelay(500);
 8001c52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c56:	f003 fdca 	bl	80057ee <osDelay>
	SetFacing(RIGHT);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff fa64 	bl	8001128 <SetFacing>
	osDelay(500);
 8001c60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c64:	f003 fdc3 	bl	80057ee <osDelay>
	SetFacing(STRAIGHT);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fa5d 	bl	8001128 <SetFacing>
	osDelay(500);
 8001c6e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c72:	f003 fdbc 	bl	80057ee <osDelay>

  for(;;)
  {
	  
    switch (CurrentState)
 8001c76:	7dbb      	ldrb	r3, [r7, #22]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	f200 8108 	bhi.w	8001e8e <MotorTask+0x276>
 8001c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c84 <MotorTask+0x6c>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001c99 	.word	0x08001c99
 8001c88:	08001d0b 	.word	0x08001d0b
 8001c8c:	08001d2b 	.word	0x08001d2b
 8001c90:	08001d91 	.word	0x08001d91
 8001c94:	08001df5 	.word	0x08001df5
    {
    case WAIT:
    	SetFacing(STRAIGHT);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fa45 	bl	8001128 <SetFacing>
    	osDelay(500);
 8001c9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ca2:	f003 fda4 	bl	80057ee <osDelay>
    	if (readIndex != writeIndex) {
 8001ca6:	4b80      	ldr	r3, [pc, #512]	@ (8001ea8 <MotorTask+0x290>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b7f      	ldr	r3, [pc, #508]	@ (8001eac <MotorTask+0x294>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	f000 80ed 	beq.w	8001e92 <MotorTask+0x27a>
    		buf = circularBuffer[readIndex];
 8001cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8001ea8 <MotorTask+0x290>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8001eb0 <MotorTask+0x298>)
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	72bb      	strb	r3, [r7, #10]
    		readIndex = (readIndex + 1) % BUFFER_SIZE;
 8001cc6:	4b78      	ldr	r3, [pc, #480]	@ (8001ea8 <MotorTask+0x290>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	425a      	negs	r2, r3
 8001cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cd4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001cd8:	bf58      	it	pl
 8001cda:	4253      	negpl	r3, r2
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b72      	ldr	r3, [pc, #456]	@ (8001ea8 <MotorTask+0x290>)
 8001ce0:	801a      	strh	r2, [r3, #0]
    		command = (buf & 0xC0) >> 6;
 8001ce2:	7abb      	ldrb	r3, [r7, #10]
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	72fb      	strb	r3, [r7, #11]
    		degree = buf & 0x3F;
 8001ce8:	7abb      	ldrb	r3, [r7, #10]
 8001cea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cee:	75fb      	strb	r3, [r7, #23]
    		EncoderReset(false, POSITION);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff f988 	bl	8001008 <EncoderReset>
    		CurrentState = UpdateState(command,degree);
 8001cf8:	7dfa      	ldrb	r2, [r7, #23]
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fe66 	bl	80019d0 <UpdateState>
 8001d04:	4603      	mov	r3, r0
 8001d06:	75bb      	strb	r3, [r7, #22]
	    }
      break;
 8001d08:	e0c3      	b.n	8001e92 <MotorTask+0x27a>
    case STOP:
    	SetSpeed(0,0);
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff f961 	bl	8000fd4 <SetSpeed>
	    SetSpeed(1,0);
 8001d12:	2100      	movs	r1, #0
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff f95d 	bl	8000fd4 <SetSpeed>
	    CurrentState = WAIT;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75bb      	strb	r3, [r7, #22]
	    UART_Transmit(&buf);
 8001d1e:	f107 030a 	add.w	r3, r7, #10
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f8fa 	bl	8000f1c <UART_Transmit>
      break;
 8001d28:	e0ba      	b.n	8001ea0 <MotorTask+0x288>
    case FORWARD:
    	dist = (degree) / 5 * 300;
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	4a61      	ldr	r2, [pc, #388]	@ (8001eb4 <MotorTask+0x29c>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	613b      	str	r3, [r7, #16]
    	osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001d42:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb8 <MotorTask+0x2a0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fd7c 	bl	8005848 <osMutexWait>
    	currdist = encoderLeft.position;
 8001d50:	4b5a      	ldr	r3, [pc, #360]	@ (8001ebc <MotorTask+0x2a4>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	60fb      	str	r3, [r7, #12]
    	osMutexRelease(EncoderLeftMutexHandle);
 8001d58:	4b57      	ldr	r3, [pc, #348]	@ (8001eb8 <MotorTask+0x2a0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fdc1 	bl	80058e4 <osMutexRelease>
    	if (currdist >  dist ){
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	f240 8095 	bls.w	8001e96 <MotorTask+0x27e>
    		SetSpeed(0,0);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7ff f930 	bl	8000fd4 <SetSpeed>
    		SetSpeed(1,0);
 8001d74:	2100      	movs	r1, #0
 8001d76:	2001      	movs	r0, #1
 8001d78:	f7ff f92c 	bl	8000fd4 <SetSpeed>
    		CurrentState = WAIT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	75bb      	strb	r3, [r7, #22]
    		HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	2201      	movs	r2, #1
 8001d86:	494e      	ldr	r1, [pc, #312]	@ (8001ec0 <MotorTask+0x2a8>)
 8001d88:	484e      	ldr	r0, [pc, #312]	@ (8001ec4 <MotorTask+0x2ac>)
 8001d8a:	f002 fc77 	bl	800467c <HAL_UART_Transmit>
    	}
      break;
 8001d8e:	e082      	b.n	8001e96 <MotorTask+0x27e>
    case BACKWARD:
      dist = (degree) / 5 * 300;
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	4a48      	ldr	r2, [pc, #288]	@ (8001eb4 <MotorTask+0x29c>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	613b      	str	r3, [r7, #16]
      osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001da8:	4b43      	ldr	r3, [pc, #268]	@ (8001eb8 <MotorTask+0x2a0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fd49 	bl	8005848 <osMutexWait>
      currdist = encoderLeft.position;
 8001db6:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <MotorTask+0x2a4>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	60fb      	str	r3, [r7, #12]
      osMutexRelease(EncoderLeftMutexHandle);
 8001dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb8 <MotorTask+0x2a0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fd8e 	bl	80058e4 <osMutexRelease>
      if (currdist >  dist ){
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d964      	bls.n	8001e9a <MotorTask+0x282>
        SetSpeed(0,0);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff f8fe 	bl	8000fd4 <SetSpeed>
        SetSpeed(1,0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff f8fa 	bl	8000fd4 <SetSpeed>
        CurrentState = WAIT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75bb      	strb	r3, [r7, #22]
        HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
 8001de8:	2201      	movs	r2, #1
 8001dea:	4935      	ldr	r1, [pc, #212]	@ (8001ec0 <MotorTask+0x2a8>)
 8001dec:	4835      	ldr	r0, [pc, #212]	@ (8001ec4 <MotorTask+0x2ac>)
 8001dee:	f002 fc45 	bl	800467c <HAL_UART_Transmit>
      }
      break;
 8001df2:	e052      	b.n	8001e9a <MotorTask+0x282>
    case TURN:
      dist = (degree & 0x0F);
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	613b      	str	r3, [r7, #16]
      osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb8 <MotorTask+0x2a0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fd1f 	bl	8005848 <osMutexWait>
      currdist = encoderLeft.position;
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ebc <MotorTask+0x2a4>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	60fb      	str	r3, [r7, #12]
      osMutexRelease(EncoderLeftMutexHandle);
 8001e12:	4b29      	ldr	r3, [pc, #164]	@ (8001eb8 <MotorTask+0x2a0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fd64 	bl	80058e4 <osMutexRelease>
      if ((degree & 0x20) >> 5 == 0x01){
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d019      	beq.n	8001e5a <MotorTask+0x242>
        if (currdist >  4270 * dist ){
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f241 02ae 	movw	r2, #4270	@ 0x10ae
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d933      	bls.n	8001e9e <MotorTask+0x286>
		      SetSpeed(0,0);
 8001e36:	2100      	movs	r1, #0
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff f8cb 	bl	8000fd4 <SetSpeed>
		      SetSpeed(1,0);
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff f8c7 	bl	8000fd4 <SetSpeed>
          CurrentState = WAIT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75bb      	strb	r3, [r7, #22]
          HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	2201      	movs	r2, #1
 8001e50:	491b      	ldr	r1, [pc, #108]	@ (8001ec0 <MotorTask+0x2a8>)
 8001e52:	481c      	ldr	r0, [pc, #112]	@ (8001ec4 <MotorTask+0x2ac>)
 8001e54:	f002 fc12 	bl	800467c <HAL_UART_Transmit>
		      SetSpeed(1,0);
          CurrentState = WAIT;
          HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
	      }
      }
      break;
 8001e58:	e021      	b.n	8001e9e <MotorTask+0x286>
        if (currdist >  1700 * dist ){
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d919      	bls.n	8001e9e <MotorTask+0x286>
		      SetSpeed(0,0);
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff f8b1 	bl	8000fd4 <SetSpeed>
		      SetSpeed(1,0);
 8001e72:	2100      	movs	r1, #0
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7ff f8ad 	bl	8000fd4 <SetSpeed>
          CurrentState = WAIT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75bb      	strb	r3, [r7, #22]
          HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	2201      	movs	r2, #1
 8001e84:	490e      	ldr	r1, [pc, #56]	@ (8001ec0 <MotorTask+0x2a8>)
 8001e86:	480f      	ldr	r0, [pc, #60]	@ (8001ec4 <MotorTask+0x2ac>)
 8001e88:	f002 fbf8 	bl	800467c <HAL_UART_Transmit>
      break;
 8001e8c:	e007      	b.n	8001e9e <MotorTask+0x286>
    default:
      break;
 8001e8e:	bf00      	nop
 8001e90:	e006      	b.n	8001ea0 <MotorTask+0x288>
      break;
 8001e92:	bf00      	nop
 8001e94:	e004      	b.n	8001ea0 <MotorTask+0x288>
      break;
 8001e96:	bf00      	nop
 8001e98:	e002      	b.n	8001ea0 <MotorTask+0x288>
      break;
 8001e9a:	bf00      	nop
 8001e9c:	e000      	b.n	8001ea0 <MotorTask+0x288>
      break;
 8001e9e:	bf00      	nop
//		   SetSpeed(0,0);
//		   SetSpeed(1,0);
//		   SetFacing(STRAIGHT);
//	   }

    osDelay(10);
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	f003 fca4 	bl	80057ee <osDelay>
    switch (CurrentState)
 8001ea6:	e6e6      	b.n	8001c76 <MotorTask+0x5e>
 8001ea8:	20000706 	.word	0x20000706
 8001eac:	20000704 	.word	0x20000704
 8001eb0:	200006c4 	.word	0x200006c4
 8001eb4:	cccccccd 	.word	0xcccccccd
 8001eb8:	200005c8 	.word	0x200005c8
 8001ebc:	20000660 	.word	0x20000660
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	2000056c 	.word	0x2000056c

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <Error_Handler+0x8>

08001ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <HAL_MspInit+0x54>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	4a11      	ldr	r2, [pc, #68]	@ (8001f28 <HAL_MspInit+0x54>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eea:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <HAL_MspInit+0x54>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_MspInit+0x54>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_MspInit+0x54>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f06:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_MspInit+0x54>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	210f      	movs	r1, #15
 8001f16:	f06f 0001 	mvn.w	r0, #1
 8001f1a:	f000 fc2e 	bl	800277a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a23      	ldr	r2, [pc, #140]	@ (8001fd8 <HAL_TIM_Base_MspInit+0xac>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_TIM_Base_MspInit+0xb0>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <HAL_TIM_Base_MspInit+0xb0>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <HAL_TIM_Base_MspInit+0xb0>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f6a:	e030      	b.n	8001fce <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <HAL_TIM_Base_MspInit+0xb4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12b      	bne.n	8001fce <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_TIM_Base_MspInit+0xb0>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <HAL_TIM_Base_MspInit+0xb0>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_TIM_Base_MspInit+0xb0>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_TIM_Base_MspInit+0xb0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a10      	ldr	r2, [pc, #64]	@ (8001fdc <HAL_TIM_Base_MspInit+0xb0>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_TIM_Base_MspInit+0xb0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMLEFT_Pin|PWMRIGHT_Pin;
 8001fae:	23c0      	movs	r3, #192	@ 0xc0
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4806      	ldr	r0, [pc, #24]	@ (8001fe4 <HAL_TIM_Base_MspInit+0xb8>)
 8001fca:	f000 fc9f 	bl	800290c <HAL_GPIO_Init>
}
 8001fce:	bf00      	nop
 8001fd0:	3728      	adds	r7, #40	@ 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40010400 	.word	0x40010400
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	@ 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002008:	d14b      	bne.n	80020a2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	4b3f      	ldr	r3, [pc, #252]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	4a3e      	ldr	r2, [pc, #248]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40
 800201a:	4b3c      	ldr	r3, [pc, #240]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	4b38      	ldr	r3, [pc, #224]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a37      	ldr	r2, [pc, #220]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b35      	ldr	r3, [pc, #212]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	4b31      	ldr	r3, [pc, #196]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	4a30      	ldr	r2, [pc, #192]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6313      	str	r3, [r2, #48]	@ 0x30
 8002052:	4b2e      	ldr	r3, [pc, #184]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800205e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002070:	2301      	movs	r3, #1
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4619      	mov	r1, r3
 800207a:	4825      	ldr	r0, [pc, #148]	@ (8002110 <HAL_TIM_Encoder_MspInit+0x128>)
 800207c:	f000 fc46 	bl	800290c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002080:	2308      	movs	r3, #8
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002090:	2301      	movs	r3, #1
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	4619      	mov	r1, r3
 800209a:	481e      	ldr	r0, [pc, #120]	@ (8002114 <HAL_TIM_Encoder_MspInit+0x12c>)
 800209c:	f000 fc36 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020a0:	e030      	b.n	8002104 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_TIM_Encoder_MspInit+0x130>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d12b      	bne.n	8002104 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	4b16      	ldr	r3, [pc, #88]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	4a15      	ldr	r2, [pc, #84]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 80020b6:	f043 0302 	orr.w	r3, r3, #2
 80020ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80020bc:	4b13      	ldr	r3, [pc, #76]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	4a0e      	ldr	r2, [pc, #56]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <HAL_TIM_Encoder_MspInit+0x124>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e4:	23c0      	movs	r3, #192	@ 0xc0
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f4:	2302      	movs	r3, #2
 80020f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	4804      	ldr	r0, [pc, #16]	@ (8002110 <HAL_TIM_Encoder_MspInit+0x128>)
 8002100:	f000 fc04 	bl	800290c <HAL_GPIO_Init>
}
 8002104:	bf00      	nop
 8002106:	3730      	adds	r7, #48	@ 0x30
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40020000 	.word	0x40020000
 8002114:	40020400 	.word	0x40020400
 8002118:	40000400 	.word	0x40000400

0800211c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <HAL_TIM_MspPostInit+0x68>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d11e      	bne.n	800217c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_TIM_MspPostInit+0x6c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <HAL_TIM_MspPostInit+0x6c>)
 8002148:	f043 0310 	orr.w	r3, r3, #16
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_TIM_MspPostInit+0x6c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 800215a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800216c:	2301      	movs	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	@ (800218c <HAL_TIM_MspPostInit+0x70>)
 8002178:	f000 fbc8 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40010000 	.word	0x40010000
 8002188:	40023800 	.word	0x40023800
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002224 <HAL_UART_MspInit+0x94>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d134      	bne.n	800221c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <HAL_UART_MspInit+0x98>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002228 <HAL_UART_MspInit+0x98>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c2:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_UART_MspInit+0x98>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <HAL_UART_MspInit+0x98>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a14      	ldr	r2, [pc, #80]	@ (8002228 <HAL_UART_MspInit+0x98>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_UART_MspInit+0x98>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021fc:	2307      	movs	r3, #7
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	4809      	ldr	r0, [pc, #36]	@ (800222c <HAL_UART_MspInit+0x9c>)
 8002208:	f000 fb80 	bl	800290c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2105      	movs	r1, #5
 8002210:	2027      	movs	r0, #39	@ 0x27
 8002212:	f000 fab2 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002216:	2027      	movs	r0, #39	@ 0x27
 8002218:	f000 facb 	bl	80027b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	@ 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40004800 	.word	0x40004800
 8002228:	40023800 	.word	0x40023800
 800222c:	40020800 	.word	0x40020800

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <NMI_Handler+0x4>

08002238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <HardFault_Handler+0x4>

08002240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <MemManage_Handler+0x4>

08002248 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <BusFault_Handler+0x4>

08002250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <UsageFault_Handler+0x4>

08002258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226a:	f000 f967 	bl	800253c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800226e:	f004 fffd 	bl	800726c <xTaskGetSchedulerState>
 8002272:	4603      	mov	r3, r0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d001      	beq.n	800227c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002278:	f005 fbde 	bl	8007a38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <USART3_IRQHandler+0x10>)
 8002286:	f002 fadf 	bl	8004848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000056c 	.word	0x2000056c

08002294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return 1;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_kill>:

int _kill(int pid, int sig)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ae:	f006 fe45 	bl	8008f3c <__errno>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2216      	movs	r2, #22
 80022b6:	601a      	str	r2, [r3, #0]
  return -1;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_exit>:

void _exit (int status)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022cc:	f04f 31ff 	mov.w	r1, #4294967295
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ffe7 	bl	80022a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022d6:	bf00      	nop
 80022d8:	e7fd      	b.n	80022d6 <_exit+0x12>

080022da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e00a      	b.n	8002302 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ec:	f3af 8000 	nop.w
 80022f0:	4601      	mov	r1, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	60ba      	str	r2, [r7, #8]
 80022f8:	b2ca      	uxtb	r2, r1
 80022fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	dbf0      	blt.n	80022ec <_read+0x12>
  }

  return len;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e009      	b.n	800233a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	60ba      	str	r2, [r7, #8]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	dbf1      	blt.n	8002326 <_write+0x12>
  }
  return len;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_close>:

int _close(int file)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002374:	605a      	str	r2, [r3, #4]
  return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_isatty>:

int _isatty(int file)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800238c:	2301      	movs	r3, #1
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023bc:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <_sbrk+0x5c>)
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <_sbrk+0x60>)
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c8:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <_sbrk+0x64>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	@ (800241c <_sbrk+0x68>)
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d207      	bcs.n	80023f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e4:	f006 fdaa 	bl	8008f3c <__errno>
 80023e8:	4603      	mov	r3, r0
 80023ea:	220c      	movs	r2, #12
 80023ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e009      	b.n	8002408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fa:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	4a05      	ldr	r2, [pc, #20]	@ (8002418 <_sbrk+0x64>)
 8002404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20020000 	.word	0x20020000
 8002414:	00000400 	.word	0x00000400
 8002418:	20000708 	.word	0x20000708
 800241c:	200049b0 	.word	0x200049b0

08002420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <SystemInit+0x20>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242a:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <SystemInit+0x20>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800247c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002448:	f7ff ffea 	bl	8002420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800244c:	480c      	ldr	r0, [pc, #48]	@ (8002480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800244e:	490d      	ldr	r1, [pc, #52]	@ (8002484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002450:	4a0d      	ldr	r2, [pc, #52]	@ (8002488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002454:	e002      	b.n	800245c <LoopCopyDataInit>

08002456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245a:	3304      	adds	r3, #4

0800245c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800245c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002460:	d3f9      	bcc.n	8002456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002462:	4a0a      	ldr	r2, [pc, #40]	@ (800248c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002464:	4c0a      	ldr	r4, [pc, #40]	@ (8002490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002468:	e001      	b.n	800246e <LoopFillZerobss>

0800246a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800246c:	3204      	adds	r2, #4

0800246e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002470:	d3fb      	bcc.n	800246a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002472:	f006 fd69 	bl	8008f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002476:	f7fe fe83 	bl	8001180 <main>
  bx  lr    
 800247a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800247c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002484:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002488:	0800bf08 	.word	0x0800bf08
  ldr r2, =_sbss
 800248c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002490:	200049b0 	.word	0x200049b0

08002494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC_IRQHandler>
	...

08002498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800249c:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <HAL_Init+0x40>)
 80024a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a8:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <HAL_Init+0x40>)
 80024ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b4:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a07      	ldr	r2, [pc, #28]	@ (80024d8 <HAL_Init+0x40>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f000 f94f 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c6:	200f      	movs	r0, #15
 80024c8:	f000 f808 	bl	80024dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024cc:	f7ff fd02 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023c00 	.word	0x40023c00

080024dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e4:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_InitTick+0x54>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_InitTick+0x58>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f967 	bl	80027ce <HAL_SYSTICK_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e00e      	b.n	8002528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b0f      	cmp	r3, #15
 800250e:	d80a      	bhi.n	8002526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002510:	2200      	movs	r2, #0
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f000 f92f 	bl	800277a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800251c:	4a06      	ldr	r2, [pc, #24]	@ (8002538 <HAL_InitTick+0x5c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000004 	.word	0x20000004
 8002534:	2000000c 	.word	0x2000000c
 8002538:	20000008 	.word	0x20000008

0800253c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_IncTick+0x20>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_IncTick+0x24>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4413      	add	r3, r2
 800254c:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_IncTick+0x24>)
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000000c 	.word	0x2000000c
 8002560:	2000070c 	.word	0x2000070c

08002564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <HAL_GetTick+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	2000070c 	.word	0x2000070c

0800257c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff ffee 	bl	8002564 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d005      	beq.n	80025a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_Delay+0x44>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025a2:	bf00      	nop
 80025a4:	f7ff ffde 	bl	8002564 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8f7      	bhi.n	80025a4 <HAL_Delay+0x28>
  {
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000000c 	.word	0x2000000c

080025c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f6:	4a04      	ldr	r2, [pc, #16]	@ (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	60d3      	str	r3, [r2, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db0b      	blt.n	8002652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4907      	ldr	r1, [pc, #28]	@ (8002660 <__NVIC_EnableIRQ+0x38>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100

08002664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db0a      	blt.n	800268e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	490c      	ldr	r1, [pc, #48]	@ (80026b0 <__NVIC_SetPriority+0x4c>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	440b      	add	r3, r1
 8002688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800268c:	e00a      	b.n	80026a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4908      	ldr	r1, [pc, #32]	@ (80026b4 <__NVIC_SetPriority+0x50>)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3b04      	subs	r3, #4
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	440b      	add	r3, r1
 80026a2:	761a      	strb	r2, [r3, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	@ 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf28      	it	cs
 80026d6:	2304      	movcs	r3, #4
 80026d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3304      	adds	r3, #4
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d902      	bls.n	80026e8 <NVIC_EncodePriority+0x30>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	e000      	b.n	80026ea <NVIC_EncodePriority+0x32>
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002700:	f04f 31ff 	mov.w	r1, #4294967295
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43d9      	mvns	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	4313      	orrs	r3, r2
         );
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	@ 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff8e 	bl	8002664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff29 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff3e 	bl	800260c <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff8e 	bl	80026b8 <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5d 	bl	8002664 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff31 	bl	8002628 <__NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffa2 	bl	8002720 <SysTick_Config>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff feb6 	bl	8002564 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d008      	beq.n	8002818 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e052      	b.n	80028be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0216 	bic.w	r2, r2, #22
 8002826:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002836:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d103      	bne.n	8002848 <HAL_DMA_Abort+0x62>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0208 	bic.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002868:	e013      	b.n	8002892 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286a:	f7ff fe7b 	bl	8002564 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b05      	cmp	r3, #5
 8002876:	d90c      	bls.n	8002892 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2203      	movs	r2, #3
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e015      	b.n	80028be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e4      	bne.n	800286a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	223f      	movs	r2, #63	@ 0x3f
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d004      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2280      	movs	r2, #128	@ 0x80
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e00c      	b.n	80028fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2205      	movs	r2, #5
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e16b      	b.n	8002c00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002928:	2201      	movs	r2, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 815a 	bne.w	8002bfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d005      	beq.n	800295e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	2b02      	cmp	r3, #2
 800295c:	d130      	bne.n	80029c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002994:	2201      	movs	r2, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 0201 	and.w	r2, r3, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d017      	beq.n	80029fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d123      	bne.n	8002a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80b4 	beq.w	8002bfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b60      	ldr	r3, [pc, #384]	@ (8002c18 <HAL_GPIO_Init+0x30c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002c18 <HAL_GPIO_Init+0x30c>)
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c18 <HAL_GPIO_Init+0x30c>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aae:	4a5b      	ldr	r2, [pc, #364]	@ (8002c1c <HAL_GPIO_Init+0x310>)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	@ (8002c20 <HAL_GPIO_Init+0x314>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02b      	beq.n	8002b32 <HAL_GPIO_Init+0x226>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a51      	ldr	r2, [pc, #324]	@ (8002c24 <HAL_GPIO_Init+0x318>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d025      	beq.n	8002b2e <HAL_GPIO_Init+0x222>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	@ (8002c28 <HAL_GPIO_Init+0x31c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01f      	beq.n	8002b2a <HAL_GPIO_Init+0x21e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4f      	ldr	r2, [pc, #316]	@ (8002c2c <HAL_GPIO_Init+0x320>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d019      	beq.n	8002b26 <HAL_GPIO_Init+0x21a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4e      	ldr	r2, [pc, #312]	@ (8002c30 <HAL_GPIO_Init+0x324>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0x216>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a4d      	ldr	r2, [pc, #308]	@ (8002c34 <HAL_GPIO_Init+0x328>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00d      	beq.n	8002b1e <HAL_GPIO_Init+0x212>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a4c      	ldr	r2, [pc, #304]	@ (8002c38 <HAL_GPIO_Init+0x32c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <HAL_GPIO_Init+0x20e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002c3c <HAL_GPIO_Init+0x330>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_GPIO_Init+0x20a>
 8002b12:	2307      	movs	r3, #7
 8002b14:	e00e      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b16:	2308      	movs	r3, #8
 8002b18:	e00c      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b1a:	2306      	movs	r3, #6
 8002b1c:	e00a      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b1e:	2305      	movs	r3, #5
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x228>
 8002b32:	2300      	movs	r3, #0
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b44:	4935      	ldr	r1, [pc, #212]	@ (8002c1c <HAL_GPIO_Init+0x310>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b52:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <HAL_GPIO_Init+0x334>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b76:	4a32      	ldr	r2, [pc, #200]	@ (8002c40 <HAL_GPIO_Init+0x334>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b7c:	4b30      	ldr	r3, [pc, #192]	@ (8002c40 <HAL_GPIO_Init+0x334>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba0:	4a27      	ldr	r2, [pc, #156]	@ (8002c40 <HAL_GPIO_Init+0x334>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ba6:	4b26      	ldr	r3, [pc, #152]	@ (8002c40 <HAL_GPIO_Init+0x334>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bca:	4a1d      	ldr	r2, [pc, #116]	@ (8002c40 <HAL_GPIO_Init+0x334>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <HAL_GPIO_Init+0x334>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf4:	4a12      	ldr	r2, [pc, #72]	@ (8002c40 <HAL_GPIO_Init+0x334>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	f67f ae90 	bls.w	8002928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40021400 	.word	0x40021400
 8002c38:	40021800 	.word	0x40021800
 8002c3c:	40021c00 	.word	0x40021c00
 8002c40:	40013c00 	.word	0x40013c00

08002c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	807b      	strh	r3, [r7, #2]
 8002c50:	4613      	mov	r3, r2
 8002c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c54:	787b      	ldrb	r3, [r7, #1]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c5a:	887a      	ldrh	r2, [r7, #2]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c60:	e003      	b.n	8002c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c62:	887b      	ldrh	r3, [r7, #2]
 8002c64:	041a      	lsls	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	619a      	str	r2, [r3, #24]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c88:	887a      	ldrh	r2, [r7, #2]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	041a      	lsls	r2, r3, #16
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	400b      	ands	r3, r1
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_PWR_EnableBkUpAccess+0x20>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002cbe:	687b      	ldr	r3, [r7, #4]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	420e0020 	.word	0x420e0020
 8002cd0:	40007000 	.word	0x40007000

08002cd4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_PWR_DisableBkUpAccess+0x20>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_PWR_DisableBkUpAccess+0x24>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002ce6:	687b      	ldr	r3, [r7, #4]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	420e0020 	.word	0x420e0020
 8002cf8:	40007000 	.word	0x40007000

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e267      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d075      	beq.n	8002e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1a:	4b88      	ldr	r3, [pc, #544]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b85      	ldr	r3, [pc, #532]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b82      	ldr	r3, [pc, #520]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b7e      	ldr	r3, [pc, #504]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d157      	bne.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e242      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x74>
 8002d62:	4b76      	ldr	r3, [pc, #472]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b70      	ldr	r3, [pc, #448]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b6d      	ldr	r3, [pc, #436]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6c      	ldr	r2, [pc, #432]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d94:	4b69      	ldr	r3, [pc, #420]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a68      	ldr	r2, [pc, #416]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a65      	ldr	r2, [pc, #404]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7ff fbd6 	bl	8002564 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7ff fbd2 	bl	8002564 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	@ 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e207      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b5b      	ldr	r3, [pc, #364]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7ff fbc2 	bl	8002564 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7ff fbbe 	bl	8002564 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	@ 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1f3      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b51      	ldr	r3, [pc, #324]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e12:	4b4a      	ldr	r3, [pc, #296]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b47      	ldr	r3, [pc, #284]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d11c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b44      	ldr	r3, [pc, #272]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1c7      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4937      	ldr	r1, [pc, #220]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	e03a      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7ff fb77 	bl	8002564 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7ff fb73 	bl	8002564 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1a8      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b28      	ldr	r3, [pc, #160]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4925      	ldr	r1, [pc, #148]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b24      	ldr	r3, [pc, #144]	@ (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7ff fb56 	bl	8002564 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7ff fb52 	bl	8002564 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e187      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d036      	beq.n	8002f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7ff fb36 	bl	8002564 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efc:	f7ff fb32 	bl	8002564 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e167      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x200>
 8002f1a:	e01b      	b.n	8002f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7ff fb1f 	bl	8002564 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	e00e      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7ff fb1b 	bl	8002564 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d907      	bls.n	8002f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e150      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470000 	.word	0x42470000
 8002f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	4b88      	ldr	r3, [pc, #544]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ea      	bne.n	8002f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8097 	beq.w	8003090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b81      	ldr	r3, [pc, #516]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b7d      	ldr	r3, [pc, #500]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f82:	4b7a      	ldr	r3, [pc, #488]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b77      	ldr	r3, [pc, #476]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b74      	ldr	r3, [pc, #464]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a73      	ldr	r2, [pc, #460]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7ff fadb 	bl	8002564 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7ff fad7 	bl	8002564 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e10c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2ea>
 8002fd8:	4b64      	ldr	r3, [pc, #400]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a63      	ldr	r2, [pc, #396]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe4:	e01c      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x30c>
 8002fee:	4b5f      	ldr	r3, [pc, #380]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	4a5b      	ldr	r2, [pc, #364]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	@ 0x70
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8003008:	4b58      	ldr	r3, [pc, #352]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	4a57      	ldr	r2, [pc, #348]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70
 8003014:	4b55      	ldr	r3, [pc, #340]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	4a54      	ldr	r2, [pc, #336]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0304 	bic.w	r3, r3, #4
 800301e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7ff fa9c 	bl	8002564 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7ff fa98 	bl	8002564 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0cb      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	4b49      	ldr	r3, [pc, #292]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ee      	beq.n	8003030 <HAL_RCC_OscConfig+0x334>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7ff fa86 	bl	8002564 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7ff fa82 	bl	8002564 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0b5      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	4b3e      	ldr	r3, [pc, #248]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b39      	ldr	r3, [pc, #228]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	4a38      	ldr	r2, [pc, #224]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a1 	beq.w	80031dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309a:	4b34      	ldr	r3, [pc, #208]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d05c      	beq.n	8003160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d141      	bne.n	8003132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b31      	ldr	r3, [pc, #196]	@ (8003174 <HAL_RCC_OscConfig+0x478>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7ff fa56 	bl	8002564 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030bc:	f7ff fa52 	bl	8002564 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e087      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b27      	ldr	r3, [pc, #156]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	3b01      	subs	r3, #1
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	491b      	ldr	r1, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b1b      	ldr	r3, [pc, #108]	@ (8003174 <HAL_RCC_OscConfig+0x478>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7ff fa2b 	bl	8002564 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003112:	f7ff fa27 	bl	8002564 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e05c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x416>
 8003130:	e054      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <HAL_RCC_OscConfig+0x478>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7ff fa14 	bl	8002564 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003140:	f7ff fa10 	bl	8002564 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e045      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x444>
 800315e:	e03d      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e038      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000
 8003174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003178:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x4ec>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d028      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d121      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d11a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031a8:	4013      	ands	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d111      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0cc      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b68      	ldr	r3, [pc, #416]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d90c      	bls.n	8003228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b65      	ldr	r3, [pc, #404]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a58      	ldr	r2, [pc, #352]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800324a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a52      	ldr	r2, [pc, #328]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d044      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d119      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b3f      	ldr	r3, [pc, #252]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e067      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b37      	ldr	r3, [pc, #220]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4934      	ldr	r1, [pc, #208]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7ff f942 	bl	8002564 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7ff f93e 	bl	8002564 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2b      	ldr	r3, [pc, #172]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b25      	ldr	r3, [pc, #148]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d20c      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b22      	ldr	r3, [pc, #136]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335e:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f821 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	490a      	ldr	r1, [pc, #40]	@ (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f8a2 	bl	80024dc <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023c00 	.word	0x40023c00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	0800b10c 	.word	0x0800b10c
 80033b0:	20000004 	.word	0x20000004
 80033b4:	20000008 	.word	0x20000008

080033b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b090      	sub	sp, #64	@ 0x40
 80033be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80033c4:	2300      	movs	r3, #0
 80033c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033c8:	2300      	movs	r3, #0
 80033ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d0:	4b59      	ldr	r3, [pc, #356]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d00d      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x40>
 80033dc:	2b08      	cmp	r3, #8
 80033de:	f200 80a1 	bhi.w	8003524 <HAL_RCC_GetSysClockFreq+0x16c>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x34>
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ea:	e09b      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_GetSysClockFreq+0x184>)
 80033ee:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80033f0:	e09b      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f2:	4b53      	ldr	r3, [pc, #332]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033f6:	e098      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003400:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003402:	4b4d      	ldr	r3, [pc, #308]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d028      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b4a      	ldr	r3, [pc, #296]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	2200      	movs	r2, #0
 8003416:	623b      	str	r3, [r7, #32]
 8003418:	627a      	str	r2, [r7, #36]	@ 0x24
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003420:	2100      	movs	r1, #0
 8003422:	4b47      	ldr	r3, [pc, #284]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x188>)
 8003424:	fb03 f201 	mul.w	r2, r3, r1
 8003428:	2300      	movs	r3, #0
 800342a:	fb00 f303 	mul.w	r3, r0, r3
 800342e:	4413      	add	r3, r2
 8003430:	4a43      	ldr	r2, [pc, #268]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x188>)
 8003432:	fba0 1202 	umull	r1, r2, r0, r2
 8003436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003438:	460a      	mov	r2, r1
 800343a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800343c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800343e:	4413      	add	r3, r2
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	2200      	movs	r2, #0
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	61fa      	str	r2, [r7, #28]
 800344a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800344e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003452:	f7fd fba9 	bl	8000ba8 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4613      	mov	r3, r2
 800345c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800345e:	e053      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003460:	4b35      	ldr	r3, [pc, #212]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	099b      	lsrs	r3, r3, #6
 8003466:	2200      	movs	r2, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	617a      	str	r2, [r7, #20]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003472:	f04f 0b00 	mov.w	fp, #0
 8003476:	4652      	mov	r2, sl
 8003478:	465b      	mov	r3, fp
 800347a:	f04f 0000 	mov.w	r0, #0
 800347e:	f04f 0100 	mov.w	r1, #0
 8003482:	0159      	lsls	r1, r3, #5
 8003484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003488:	0150      	lsls	r0, r2, #5
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	ebb2 080a 	subs.w	r8, r2, sl
 8003492:	eb63 090b 	sbc.w	r9, r3, fp
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034aa:	ebb2 0408 	subs.w	r4, r2, r8
 80034ae:	eb63 0509 	sbc.w	r5, r3, r9
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	00eb      	lsls	r3, r5, #3
 80034bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c0:	00e2      	lsls	r2, r4, #3
 80034c2:	4614      	mov	r4, r2
 80034c4:	461d      	mov	r5, r3
 80034c6:	eb14 030a 	adds.w	r3, r4, sl
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	eb45 030b 	adc.w	r3, r5, fp
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034de:	4629      	mov	r1, r5
 80034e0:	028b      	lsls	r3, r1, #10
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e8:	4621      	mov	r1, r4
 80034ea:	028a      	lsls	r2, r1, #10
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f2:	2200      	movs	r2, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	60fa      	str	r2, [r7, #12]
 80034f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034fc:	f7fd fb54 	bl	8000ba8 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x180>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	3301      	adds	r3, #1
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003518:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800351a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003522:	e002      	b.n	800352a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCC_GetSysClockFreq+0x184>)
 8003526:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800352c:	4618      	mov	r0, r3
 800352e:	3740      	adds	r7, #64	@ 0x40
 8003530:	46bd      	mov	sp, r7
 8003532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	00f42400 	.word	0x00f42400
 8003540:	017d7840 	.word	0x017d7840

08003544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003548:	4b03      	ldr	r3, [pc, #12]	@ (8003558 <HAL_RCC_GetHCLKFreq+0x14>)
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000004 	.word	0x20000004

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003560:	f7ff fff0 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	0a9b      	lsrs	r3, r3, #10
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	@ (8003580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800
 8003580:	0800b11c 	.word	0x0800b11c

08003584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003588:	f7ff ffdc 	bl	8003544 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0b5b      	lsrs	r3, r3, #13
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	@ (80035a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	0800b11c 	.word	0x0800b11c

080035ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e041      	b.n	8003642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe fcaa 	bl	8001f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 fc0c 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e041      	b.n	80036e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f839 	bl	80036e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f000 fbbd 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_TIM_PWM_Start+0x24>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e022      	b.n	8003766 <HAL_TIM_PWM_Start+0x6a>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b04      	cmp	r3, #4
 8003724:	d109      	bne.n	800373a <HAL_TIM_PWM_Start+0x3e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	e015      	b.n	8003766 <HAL_TIM_PWM_Start+0x6a>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d109      	bne.n	8003754 <HAL_TIM_PWM_Start+0x58>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e008      	b.n	8003766 <HAL_TIM_PWM_Start+0x6a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e07c      	b.n	8003868 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <HAL_TIM_PWM_Start+0x82>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800377c:	e013      	b.n	80037a6 <HAL_TIM_PWM_Start+0xaa>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d104      	bne.n	800378e <HAL_TIM_PWM_Start+0x92>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800378c:	e00b      	b.n	80037a6 <HAL_TIM_PWM_Start+0xaa>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d104      	bne.n	800379e <HAL_TIM_PWM_Start+0xa2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800379c:	e003      	b.n	80037a6 <HAL_TIM_PWM_Start+0xaa>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	6839      	ldr	r1, [r7, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fe20 	bl	80043f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003870 <HAL_TIM_PWM_Start+0x174>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_TIM_PWM_Start+0xcc>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003874 <HAL_TIM_PWM_Start+0x178>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <HAL_TIM_PWM_Start+0xd0>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <HAL_TIM_PWM_Start+0xd2>
 80037cc:	2300      	movs	r3, #0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a22      	ldr	r2, [pc, #136]	@ (8003870 <HAL_TIM_PWM_Start+0x174>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_TIM_PWM_Start+0x136>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f4:	d01d      	beq.n	8003832 <HAL_TIM_PWM_Start+0x136>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003878 <HAL_TIM_PWM_Start+0x17c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_TIM_PWM_Start+0x136>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1d      	ldr	r2, [pc, #116]	@ (800387c <HAL_TIM_PWM_Start+0x180>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_TIM_PWM_Start+0x136>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1c      	ldr	r2, [pc, #112]	@ (8003880 <HAL_TIM_PWM_Start+0x184>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_TIM_PWM_Start+0x136>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a16      	ldr	r2, [pc, #88]	@ (8003874 <HAL_TIM_PWM_Start+0x178>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_TIM_PWM_Start+0x136>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a18      	ldr	r2, [pc, #96]	@ (8003884 <HAL_TIM_PWM_Start+0x188>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_TIM_PWM_Start+0x136>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a16      	ldr	r2, [pc, #88]	@ (8003888 <HAL_TIM_PWM_Start+0x18c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d111      	bne.n	8003856 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b06      	cmp	r3, #6
 8003842:	d010      	beq.n	8003866 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003854:	e007      	b.n	8003866 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40010000 	.word	0x40010000
 8003874:	40010400 	.word	0x40010400
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	40000c00 	.word	0x40000c00
 8003884:	40014000 	.word	0x40014000
 8003888:	40001800 	.word	0x40001800

0800388c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e097      	b.n	80039d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d106      	bne.n	80038ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fe fb97 	bl	8001fe8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038d0:	f023 0307 	bic.w	r3, r3, #7
 80038d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3304      	adds	r3, #4
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f000 fa91 	bl	8003e08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	4313      	orrs	r3, r2
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800392c:	f023 030c 	bic.w	r3, r3, #12
 8003930:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003938:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800393c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	4313      	orrs	r3, r2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	011a      	lsls	r2, r3, #4
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	031b      	lsls	r3, r3, #12
 800395c:	4313      	orrs	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	4313      	orrs	r3, r2
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d110      	bne.n	8003a2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d102      	bne.n	8003a14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a0e:	7b7b      	ldrb	r3, [r7, #13]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e069      	b.n	8003aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a28:	e031      	b.n	8003a8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d110      	bne.n	8003a52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a30:	7bbb      	ldrb	r3, [r7, #14]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a36:	7b3b      	ldrb	r3, [r7, #12]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d001      	beq.n	8003a40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e055      	b.n	8003aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a50:	e01d      	b.n	8003a8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d108      	bne.n	8003a6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a58:	7bbb      	ldrb	r3, [r7, #14]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a5e:	7b7b      	ldrb	r3, [r7, #13]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d102      	bne.n	8003a6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a64:	7b3b      	ldrb	r3, [r7, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d001      	beq.n	8003a6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e03e      	b.n	8003aec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_TIM_Encoder_Start+0xc4>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d008      	beq.n	8003aac <HAL_TIM_Encoder_Start+0xd4>
 8003a9a:	e00f      	b.n	8003abc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fca5 	bl	80043f4 <TIM_CCxChannelCmd>
      break;
 8003aaa:	e016      	b.n	8003ada <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fc9d 	bl	80043f4 <TIM_CCxChannelCmd>
      break;
 8003aba:	e00e      	b.n	8003ada <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fc95 	bl	80043f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	2104      	movs	r1, #4
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fc8e 	bl	80043f4 <TIM_CCxChannelCmd>
      break;
 8003ad8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e0ae      	b.n	8003c70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	f200 809f 	bhi.w	8003c60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b22:	a201      	add	r2, pc, #4	@ (adr r2, 8003b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003c61 	.word	0x08003c61
 8003b30:	08003c61 	.word	0x08003c61
 8003b34:	08003c61 	.word	0x08003c61
 8003b38:	08003b9d 	.word	0x08003b9d
 8003b3c:	08003c61 	.word	0x08003c61
 8003b40:	08003c61 	.word	0x08003c61
 8003b44:	08003c61 	.word	0x08003c61
 8003b48:	08003bdf 	.word	0x08003bdf
 8003b4c:	08003c61 	.word	0x08003c61
 8003b50:	08003c61 	.word	0x08003c61
 8003b54:	08003c61 	.word	0x08003c61
 8003b58:	08003c1f 	.word	0x08003c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f9fc 	bl	8003f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0208 	orr.w	r2, r2, #8
 8003b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0204 	bic.w	r2, r2, #4
 8003b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6999      	ldr	r1, [r3, #24]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	619a      	str	r2, [r3, #24]
      break;
 8003b9a:	e064      	b.n	8003c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fa4c 	bl	8004040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699a      	ldr	r2, [r3, #24]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6999      	ldr	r1, [r3, #24]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	021a      	lsls	r2, r3, #8
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	619a      	str	r2, [r3, #24]
      break;
 8003bdc:	e043      	b.n	8003c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 faa1 	bl	800412c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0208 	orr.w	r2, r2, #8
 8003bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0204 	bic.w	r2, r2, #4
 8003c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69d9      	ldr	r1, [r3, #28]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	61da      	str	r2, [r3, #28]
      break;
 8003c1c:	e023      	b.n	8003c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 faf5 	bl	8004214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69d9      	ldr	r1, [r3, #28]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	021a      	lsls	r2, r3, #8
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	61da      	str	r2, [r3, #28]
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
      break;
 8003c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIM_ConfigClockSource+0x1c>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e0b4      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x186>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ccc:	d03e      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xd4>
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cd2:	f200 8087 	bhi.w	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cda:	f000 8086 	beq.w	8003dea <HAL_TIM_ConfigClockSource+0x172>
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce2:	d87f      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b70      	cmp	r3, #112	@ 0x70
 8003ce6:	d01a      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0xa6>
 8003ce8:	2b70      	cmp	r3, #112	@ 0x70
 8003cea:	d87b      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b60      	cmp	r3, #96	@ 0x60
 8003cee:	d050      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x11a>
 8003cf0:	2b60      	cmp	r3, #96	@ 0x60
 8003cf2:	d877      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b50      	cmp	r3, #80	@ 0x50
 8003cf6:	d03c      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0xfa>
 8003cf8:	2b50      	cmp	r3, #80	@ 0x50
 8003cfa:	d873      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b40      	cmp	r3, #64	@ 0x40
 8003cfe:	d058      	beq.n	8003db2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d00:	2b40      	cmp	r3, #64	@ 0x40
 8003d02:	d86f      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b30      	cmp	r3, #48	@ 0x30
 8003d06:	d064      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d08:	2b30      	cmp	r3, #48	@ 0x30
 8003d0a:	d86b      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d060      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d867      	bhi.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d05c      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d05a      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d1c:	e062      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	f000 fb41 	bl	80043b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	609a      	str	r2, [r3, #8]
      break;
 8003d4a:	e04f      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	f000 fb2a 	bl	80043b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d6e:	609a      	str	r2, [r3, #8]
      break;
 8003d70:	e03c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f000 fa9e 	bl	80042c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2150      	movs	r1, #80	@ 0x50
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 faf7 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8003d90:	e02c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f000 fabd 	bl	800431e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2160      	movs	r1, #96	@ 0x60
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fae7 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8003db0:	e01c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f000 fa7e 	bl	80042c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2140      	movs	r1, #64	@ 0x40
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fad7 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8003dd0:	e00c      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f000 face 	bl	800437e <TIM_ITRx_SetConfig>
      break;
 8003de2:	e003      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e000      	b.n	8003dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a46      	ldr	r2, [pc, #280]	@ (8003f34 <TIM_Base_SetConfig+0x12c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d013      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e26:	d00f      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a43      	ldr	r2, [pc, #268]	@ (8003f38 <TIM_Base_SetConfig+0x130>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00b      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a42      	ldr	r2, [pc, #264]	@ (8003f3c <TIM_Base_SetConfig+0x134>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a41      	ldr	r2, [pc, #260]	@ (8003f40 <TIM_Base_SetConfig+0x138>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a40      	ldr	r2, [pc, #256]	@ (8003f44 <TIM_Base_SetConfig+0x13c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d108      	bne.n	8003e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a35      	ldr	r2, [pc, #212]	@ (8003f34 <TIM_Base_SetConfig+0x12c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d02b      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e68:	d027      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a32      	ldr	r2, [pc, #200]	@ (8003f38 <TIM_Base_SetConfig+0x130>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d023      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a31      	ldr	r2, [pc, #196]	@ (8003f3c <TIM_Base_SetConfig+0x134>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01f      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a30      	ldr	r2, [pc, #192]	@ (8003f40 <TIM_Base_SetConfig+0x138>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01b      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2f      	ldr	r2, [pc, #188]	@ (8003f44 <TIM_Base_SetConfig+0x13c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d017      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f48 <TIM_Base_SetConfig+0x140>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2d      	ldr	r2, [pc, #180]	@ (8003f4c <TIM_Base_SetConfig+0x144>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00f      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f50 <TIM_Base_SetConfig+0x148>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f54 <TIM_Base_SetConfig+0x14c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2a      	ldr	r2, [pc, #168]	@ (8003f58 <TIM_Base_SetConfig+0x150>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a29      	ldr	r2, [pc, #164]	@ (8003f5c <TIM_Base_SetConfig+0x154>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d108      	bne.n	8003ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a10      	ldr	r2, [pc, #64]	@ (8003f34 <TIM_Base_SetConfig+0x12c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_Base_SetConfig+0xf8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a12      	ldr	r2, [pc, #72]	@ (8003f44 <TIM_Base_SetConfig+0x13c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d103      	bne.n	8003f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f023 0201 	bic.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	611a      	str	r2, [r3, #16]
  }
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40010400 	.word	0x40010400
 8003f48:	40014000 	.word	0x40014000
 8003f4c:	40014400 	.word	0x40014400
 8003f50:	40014800 	.word	0x40014800
 8003f54:	40001800 	.word	0x40001800
 8003f58:	40001c00 	.word	0x40001c00
 8003f5c:	40002000 	.word	0x40002000

08003f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	f023 0201 	bic.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0302 	bic.w	r3, r3, #2
 8003fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a20      	ldr	r2, [pc, #128]	@ (8004038 <TIM_OC1_SetConfig+0xd8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC1_SetConfig+0x64>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800403c <TIM_OC1_SetConfig+0xdc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10c      	bne.n	8003fde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0308 	bic.w	r3, r3, #8
 8003fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f023 0304 	bic.w	r3, r3, #4
 8003fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	@ (8004038 <TIM_OC1_SetConfig+0xd8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d003      	beq.n	8003fee <TIM_OC1_SetConfig+0x8e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a14      	ldr	r2, [pc, #80]	@ (800403c <TIM_OC1_SetConfig+0xdc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d111      	bne.n	8004012 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40010000 	.word	0x40010000
 800403c:	40010400 	.word	0x40010400

08004040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 0210 	bic.w	r2, r3, #16
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800406e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0320 	bic.w	r3, r3, #32
 800408a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a22      	ldr	r2, [pc, #136]	@ (8004124 <TIM_OC2_SetConfig+0xe4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC2_SetConfig+0x68>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a21      	ldr	r2, [pc, #132]	@ (8004128 <TIM_OC2_SetConfig+0xe8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d10d      	bne.n	80040c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a17      	ldr	r2, [pc, #92]	@ (8004124 <TIM_OC2_SetConfig+0xe4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_OC2_SetConfig+0x94>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a16      	ldr	r2, [pc, #88]	@ (8004128 <TIM_OC2_SetConfig+0xe8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d113      	bne.n	80040fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40010400 	.word	0x40010400

0800412c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	021b      	lsls	r3, r3, #8
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a21      	ldr	r2, [pc, #132]	@ (800420c <TIM_OC3_SetConfig+0xe0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_OC3_SetConfig+0x66>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a20      	ldr	r2, [pc, #128]	@ (8004210 <TIM_OC3_SetConfig+0xe4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a16      	ldr	r2, [pc, #88]	@ (800420c <TIM_OC3_SetConfig+0xe0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC3_SetConfig+0x92>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <TIM_OC3_SetConfig+0xe4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d113      	bne.n	80041e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40010000 	.word	0x40010000
 8004210:	40010400 	.word	0x40010400

08004214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800425e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	031b      	lsls	r3, r3, #12
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a12      	ldr	r2, [pc, #72]	@ (80042b8 <TIM_OC4_SetConfig+0xa4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_OC4_SetConfig+0x68>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a11      	ldr	r2, [pc, #68]	@ (80042bc <TIM_OC4_SetConfig+0xa8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d109      	bne.n	8004290 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	019b      	lsls	r3, r3, #6
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010000 	.word	0x40010000
 80042bc:	40010400 	.word	0x40010400

080042c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f023 0201 	bic.w	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 030a 	bic.w	r3, r3, #10
 80042fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431e:	b480      	push	{r7}
 8004320:	b087      	sub	sp, #28
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f023 0210 	bic.w	r2, r3, #16
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800435a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	f043 0307 	orr.w	r3, r3, #7
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	609a      	str	r2, [r3, #8]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	021a      	lsls	r2, r3, #8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4313      	orrs	r3, r2
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	609a      	str	r2, [r3, #8]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2201      	movs	r2, #1
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1a      	ldr	r2, [r3, #32]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	43db      	mvns	r3, r3
 8004416:	401a      	ands	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	fa01 f303 	lsl.w	r3, r1, r3
 800442c:	431a      	orrs	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004454:	2302      	movs	r3, #2
 8004456:	e05a      	b.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	@ (800451c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d022      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a4:	d01d      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d018      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1a      	ldr	r2, [pc, #104]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00e      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a18      	ldr	r2, [pc, #96]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d009      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a15      	ldr	r2, [pc, #84]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10c      	bne.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40000c00 	.word	0x40000c00
 800452c:	40010400 	.word	0x40010400
 8004530:	40014000 	.word	0x40014000
 8004534:	40001800 	.word	0x40001800

08004538 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004550:	2302      	movs	r3, #2
 8004552:	e03d      	b.n	80045d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4313      	orrs	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e042      	b.n	8004674 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd fdc4 	bl	8002190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	@ 0x24
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800461e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fdf3 	bl	800520c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	@ 0x28
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b20      	cmp	r3, #32
 800469a:	d175      	bne.n	8004788 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_UART_Transmit+0x2c>
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e06e      	b.n	800478a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2221      	movs	r2, #33	@ 0x21
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ba:	f7fd ff53 	bl	8002564 <HAL_GetTick>
 80046be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	88fa      	ldrh	r2, [r7, #6]
 80046ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d4:	d108      	bne.n	80046e8 <HAL_UART_Transmit+0x6c>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e003      	b.n	80046f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046f0:	e02e      	b.n	8004750 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2180      	movs	r1, #128	@ 0x80
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fb55 	bl	8004dac <UART_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e03a      	b.n	800478a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	3302      	adds	r3, #2
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	e007      	b.n	8004742 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	3301      	adds	r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1cb      	bne.n	80046f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	2140      	movs	r1, #64	@ 0x40
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fb21 	bl	8004dac <UART_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e006      	b.n	800478a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	e000      	b.n	800478a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004788:	2302      	movs	r3, #2
  }
}
 800478a:	4618      	mov	r0, r3
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004792:	b480      	push	{r7}
 8004794:	b085      	sub	sp, #20
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	4613      	mov	r3, r2
 800479e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d121      	bne.n	80047f0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_UART_Transmit_IT+0x26>
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e01a      	b.n	80047f2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	88fa      	ldrh	r2, [r7, #6]
 80047c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2221      	movs	r2, #33	@ 0x21
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80047ea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b20      	cmp	r3, #32
 8004816:	d112      	bne.n	800483e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_UART_Receive_IT+0x26>
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e00b      	b.n	8004840 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	461a      	mov	r2, r3
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fb12 	bl	8004e5e <UART_Start_Receive_IT>
 800483a:	4603      	mov	r3, r0
 800483c:	e000      	b.n	8004840 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800483e:	2302      	movs	r3, #2
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b0ba      	sub	sp, #232	@ 0xe8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800486e:	2300      	movs	r3, #0
 8004870:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_UART_IRQHandler+0x66>
 800489a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fbf2 	bl	8005090 <UART_Receive_IT>
      return;
 80048ac:	e25b      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 80de 	beq.w	8004a74 <HAL_UART_IRQHandler+0x22c>
 80048b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d106      	bne.n	80048d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80d1 	beq.w	8004a74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_UART_IRQHandler+0xae>
 80048de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_UART_IRQHandler+0xd2>
 8004902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f043 0202 	orr.w	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_UART_IRQHandler+0xf6>
 8004926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004936:	f043 0204 	orr.w	r2, r3, #4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <HAL_UART_IRQHandler+0x126>
 800494a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004966:	f043 0208 	orr.w	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 81f2 	beq.w	8004d5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_UART_IRQHandler+0x14e>
 8004984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fb7d 	bl	8005090 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <HAL_UART_IRQHandler+0x17a>
 80049ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d04f      	beq.n	8004a62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa85 	bl	8004ed2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d2:	2b40      	cmp	r3, #64	@ 0x40
 80049d4:	d141      	bne.n	8004a5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3314      	adds	r3, #20
 80049dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3314      	adds	r3, #20
 80049fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1d9      	bne.n	80049d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d013      	beq.n	8004a52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c28 <HAL_UART_IRQHandler+0x3e0>)
 8004a30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fd ff45 	bl	80028c6 <HAL_DMA_Abort_IT>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d016      	beq.n	8004a70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	e00e      	b.n	8004a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f994 	bl	8004d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	e00a      	b.n	8004a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f990 	bl	8004d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a60:	e006      	b.n	8004a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f98c 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a6e:	e175      	b.n	8004d5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	bf00      	nop
    return;
 8004a72:	e173      	b.n	8004d5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f040 814f 	bne.w	8004d1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8148 	beq.w	8004d1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8141 	beq.w	8004d1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	2b40      	cmp	r3, #64	@ 0x40
 8004abc:	f040 80b6 	bne.w	8004c2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8145 	beq.w	8004d60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	f080 813e 	bcs.w	8004d60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af6:	f000 8088 	beq.w	8004c0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1d9      	bne.n	8004afa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3314      	adds	r3, #20
 8004b4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b58:	f023 0301 	bic.w	r3, r3, #1
 8004b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3314      	adds	r3, #20
 8004b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b76:	e841 2300 	strex	r3, r2, [r1]
 8004b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e1      	bne.n	8004b46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3314      	adds	r3, #20
 8004b88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3314      	adds	r3, #20
 8004ba2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ba6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e3      	bne.n	8004b82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bda:	f023 0310 	bic.w	r3, r3, #16
 8004bde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e3      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fd fdee 	bl	80027e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f8b7 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c26:	e09b      	b.n	8004d60 <HAL_UART_IRQHandler+0x518>
 8004c28:	08004f99 	.word	0x08004f99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 808e 	beq.w	8004d64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8089 	beq.w	8004d64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c76:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e3      	bne.n	8004c52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3314      	adds	r3, #20
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	623b      	str	r3, [r7, #32]
   return(result);
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cae:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e3      	bne.n	8004c8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0310 	bic.w	r3, r3, #16
 8004ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cf4:	61fa      	str	r2, [r7, #28]
 8004cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	69b9      	ldr	r1, [r7, #24]
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	617b      	str	r3, [r7, #20]
   return(result);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e3      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f83d 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d1a:	e023      	b.n	8004d64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <HAL_UART_IRQHandler+0x4f4>
 8004d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f943 	bl	8004fc0 <UART_Transmit_IT>
    return;
 8004d3a:	e014      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00e      	beq.n	8004d66 <HAL_UART_IRQHandler+0x51e>
 8004d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f983 	bl	8005060 <UART_EndTransmit_IT>
    return;
 8004d5a:	e004      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d5c:	bf00      	nop
 8004d5e:	e002      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d64:	bf00      	nop
  }
}
 8004d66:	37e8      	adds	r7, #232	@ 0xe8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dbc:	e03b      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d037      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fd fbcd 	bl	8002564 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	6a3a      	ldr	r2, [r7, #32]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e03a      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d023      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b80      	cmp	r3, #128	@ 0x80
 8004df2:	d020      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b40      	cmp	r3, #64	@ 0x40
 8004df8:	d01d      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d116      	bne.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f857 	bl	8004ed2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2208      	movs	r2, #8
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e00f      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d0b4      	beq.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b085      	sub	sp, #20
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	88fa      	ldrh	r2, [r7, #6]
 8004e76:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2222      	movs	r2, #34	@ 0x22
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ea2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0220 	orr.w	r2, r2, #32
 8004ec2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b095      	sub	sp, #84	@ 0x54
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004efa:	643a      	str	r2, [r7, #64]	@ 0x40
 8004efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d119      	bne.n	8004f7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f023 0310 	bic.w	r3, r3, #16
 8004f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f6a:	61ba      	str	r2, [r7, #24]
 8004f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6979      	ldr	r1, [r7, #20]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	613b      	str	r3, [r7, #16]
   return(result);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e5      	bne.n	8004f4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f8c:	bf00      	nop
 8004f8e:	3754      	adds	r7, #84	@ 0x54
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff fee4 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b21      	cmp	r3, #33	@ 0x21
 8004fd2:	d13e      	bne.n	8005052 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fdc:	d114      	bne.n	8005008 <UART_Transmit_IT+0x48>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d110      	bne.n	8005008 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ffa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]
 8005006:	e008      	b.n	800501a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6211      	str	r1, [r2, #32]
 8005012:	781a      	ldrb	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4619      	mov	r1, r3
 8005028:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10f      	bne.n	800504e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800503c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800504c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	e000      	b.n	8005054 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005052:	2302      	movs	r3, #2
  }
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005076:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff fe73 	bl	8004d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	@ 0x30
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b22      	cmp	r3, #34	@ 0x22
 80050a2:	f040 80ae 	bne.w	8005202 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ae:	d117      	bne.n	80050e0 <UART_Receive_IT+0x50>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d113      	bne.n	80050e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	1c9a      	adds	r2, r3, #2
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80050de:	e026      	b.n	800512e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f2:	d007      	beq.n	8005104 <UART_Receive_IT+0x74>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <UART_Receive_IT+0x82>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	b2da      	uxtb	r2, r3
 800510c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	e008      	b.n	8005124 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005122:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29b      	uxth	r3, r3
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4619      	mov	r1, r3
 800513c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800513e:	2b00      	cmp	r3, #0
 8005140:	d15d      	bne.n	80051fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0220 	bic.w	r2, r2, #32
 8005150:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005184:	2b01      	cmp	r3, #1
 8005186:	d135      	bne.n	80051f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	613b      	str	r3, [r7, #16]
   return(result);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f023 0310 	bic.w	r3, r3, #16
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ae:	623a      	str	r2, [r7, #32]
 80051b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	69f9      	ldr	r1, [r7, #28]
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e5      	bne.n	800518e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d10a      	bne.n	80051e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fdd1 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
 80051f2:	e002      	b.n	80051fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fc fbb7 	bl	8001968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e002      	b.n	8005204 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	e000      	b.n	8005204 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005202:	2302      	movs	r3, #2
  }
}
 8005204:	4618      	mov	r0, r3
 8005206:	3730      	adds	r7, #48	@ 0x30
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800520c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005210:	b0c0      	sub	sp, #256	@ 0x100
 8005212:	af00      	add	r7, sp, #0
 8005214:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005228:	68d9      	ldr	r1, [r3, #12]
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	ea40 0301 	orr.w	r3, r0, r1
 8005234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	431a      	orrs	r2, r3
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	431a      	orrs	r2, r3
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005264:	f021 010c 	bic.w	r1, r1, #12
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005272:	430b      	orrs	r3, r1
 8005274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005286:	6999      	ldr	r1, [r3, #24]
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	ea40 0301 	orr.w	r3, r0, r1
 8005292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b8f      	ldr	r3, [pc, #572]	@ (80054d8 <UART_SetConfig+0x2cc>)
 800529c:	429a      	cmp	r2, r3
 800529e:	d005      	beq.n	80052ac <UART_SetConfig+0xa0>
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b8d      	ldr	r3, [pc, #564]	@ (80054dc <UART_SetConfig+0x2d0>)
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d104      	bne.n	80052b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7fe f96a 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 80052b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052b4:	e003      	b.n	80052be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052b6:	f7fe f951 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 80052ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052c8:	f040 810c 	bne.w	80054e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052de:	4622      	mov	r2, r4
 80052e0:	462b      	mov	r3, r5
 80052e2:	1891      	adds	r1, r2, r2
 80052e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052e6:	415b      	adcs	r3, r3
 80052e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052ee:	4621      	mov	r1, r4
 80052f0:	eb12 0801 	adds.w	r8, r2, r1
 80052f4:	4629      	mov	r1, r5
 80052f6:	eb43 0901 	adc.w	r9, r3, r1
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800530a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800530e:	4690      	mov	r8, r2
 8005310:	4699      	mov	r9, r3
 8005312:	4623      	mov	r3, r4
 8005314:	eb18 0303 	adds.w	r3, r8, r3
 8005318:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800531c:	462b      	mov	r3, r5
 800531e:	eb49 0303 	adc.w	r3, r9, r3
 8005322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005332:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800533a:	460b      	mov	r3, r1
 800533c:	18db      	adds	r3, r3, r3
 800533e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005340:	4613      	mov	r3, r2
 8005342:	eb42 0303 	adc.w	r3, r2, r3
 8005346:	657b      	str	r3, [r7, #84]	@ 0x54
 8005348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800534c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005350:	f7fb fc2a 	bl	8000ba8 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4b61      	ldr	r3, [pc, #388]	@ (80054e0 <UART_SetConfig+0x2d4>)
 800535a:	fba3 2302 	umull	r2, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	011c      	lsls	r4, r3, #4
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005366:	2200      	movs	r2, #0
 8005368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800536c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	1891      	adds	r1, r2, r2
 800537a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800537c:	415b      	adcs	r3, r3
 800537e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005384:	4641      	mov	r1, r8
 8005386:	eb12 0a01 	adds.w	sl, r2, r1
 800538a:	4649      	mov	r1, r9
 800538c:	eb43 0b01 	adc.w	fp, r3, r1
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800539c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053a4:	4692      	mov	sl, r2
 80053a6:	469b      	mov	fp, r3
 80053a8:	4643      	mov	r3, r8
 80053aa:	eb1a 0303 	adds.w	r3, sl, r3
 80053ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053b2:	464b      	mov	r3, r9
 80053b4:	eb4b 0303 	adc.w	r3, fp, r3
 80053b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053d0:	460b      	mov	r3, r1
 80053d2:	18db      	adds	r3, r3, r3
 80053d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80053d6:	4613      	mov	r3, r2
 80053d8:	eb42 0303 	adc.w	r3, r2, r3
 80053dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80053de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053e6:	f7fb fbdf 	bl	8000ba8 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	4b3b      	ldr	r3, [pc, #236]	@ (80054e0 <UART_SetConfig+0x2d4>)
 80053f2:	fba3 2301 	umull	r2, r3, r3, r1
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2264      	movs	r2, #100	@ 0x64
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	1acb      	subs	r3, r1, r3
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005406:	4b36      	ldr	r3, [pc, #216]	@ (80054e0 <UART_SetConfig+0x2d4>)
 8005408:	fba3 2302 	umull	r2, r3, r3, r2
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005414:	441c      	add	r4, r3
 8005416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541a:	2200      	movs	r2, #0
 800541c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005420:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005428:	4642      	mov	r2, r8
 800542a:	464b      	mov	r3, r9
 800542c:	1891      	adds	r1, r2, r2
 800542e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005430:	415b      	adcs	r3, r3
 8005432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005438:	4641      	mov	r1, r8
 800543a:	1851      	adds	r1, r2, r1
 800543c:	6339      	str	r1, [r7, #48]	@ 0x30
 800543e:	4649      	mov	r1, r9
 8005440:	414b      	adcs	r3, r1
 8005442:	637b      	str	r3, [r7, #52]	@ 0x34
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005450:	4659      	mov	r1, fp
 8005452:	00cb      	lsls	r3, r1, #3
 8005454:	4651      	mov	r1, sl
 8005456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800545a:	4651      	mov	r1, sl
 800545c:	00ca      	lsls	r2, r1, #3
 800545e:	4610      	mov	r0, r2
 8005460:	4619      	mov	r1, r3
 8005462:	4603      	mov	r3, r0
 8005464:	4642      	mov	r2, r8
 8005466:	189b      	adds	r3, r3, r2
 8005468:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800546c:	464b      	mov	r3, r9
 800546e:	460a      	mov	r2, r1
 8005470:	eb42 0303 	adc.w	r3, r2, r3
 8005474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005484:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800548c:	460b      	mov	r3, r1
 800548e:	18db      	adds	r3, r3, r3
 8005490:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005492:	4613      	mov	r3, r2
 8005494:	eb42 0303 	adc.w	r3, r2, r3
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800549a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800549e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054a2:	f7fb fb81 	bl	8000ba8 <__aeabi_uldivmod>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <UART_SetConfig+0x2d4>)
 80054ac:	fba3 1302 	umull	r1, r3, r3, r2
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	2164      	movs	r1, #100	@ 0x64
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	3332      	adds	r3, #50	@ 0x32
 80054be:	4a08      	ldr	r2, [pc, #32]	@ (80054e0 <UART_SetConfig+0x2d4>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	f003 0207 	and.w	r2, r3, #7
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4422      	add	r2, r4
 80054d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054d4:	e106      	b.n	80056e4 <UART_SetConfig+0x4d8>
 80054d6:	bf00      	nop
 80054d8:	40011000 	.word	0x40011000
 80054dc:	40011400 	.word	0x40011400
 80054e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80054f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054f6:	4642      	mov	r2, r8
 80054f8:	464b      	mov	r3, r9
 80054fa:	1891      	adds	r1, r2, r2
 80054fc:	6239      	str	r1, [r7, #32]
 80054fe:	415b      	adcs	r3, r3
 8005500:	627b      	str	r3, [r7, #36]	@ 0x24
 8005502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005506:	4641      	mov	r1, r8
 8005508:	1854      	adds	r4, r2, r1
 800550a:	4649      	mov	r1, r9
 800550c:	eb43 0501 	adc.w	r5, r3, r1
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	00eb      	lsls	r3, r5, #3
 800551a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800551e:	00e2      	lsls	r2, r4, #3
 8005520:	4614      	mov	r4, r2
 8005522:	461d      	mov	r5, r3
 8005524:	4643      	mov	r3, r8
 8005526:	18e3      	adds	r3, r4, r3
 8005528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800552c:	464b      	mov	r3, r9
 800552e:	eb45 0303 	adc.w	r3, r5, r3
 8005532:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005542:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005552:	4629      	mov	r1, r5
 8005554:	008b      	lsls	r3, r1, #2
 8005556:	4621      	mov	r1, r4
 8005558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800555c:	4621      	mov	r1, r4
 800555e:	008a      	lsls	r2, r1, #2
 8005560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005564:	f7fb fb20 	bl	8000ba8 <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4b60      	ldr	r3, [pc, #384]	@ (80056f0 <UART_SetConfig+0x4e4>)
 800556e:	fba3 2302 	umull	r2, r3, r3, r2
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	011c      	lsls	r4, r3, #4
 8005576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557a:	2200      	movs	r2, #0
 800557c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005580:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	1891      	adds	r1, r2, r2
 800558e:	61b9      	str	r1, [r7, #24]
 8005590:	415b      	adcs	r3, r3
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005598:	4641      	mov	r1, r8
 800559a:	1851      	adds	r1, r2, r1
 800559c:	6139      	str	r1, [r7, #16]
 800559e:	4649      	mov	r1, r9
 80055a0:	414b      	adcs	r3, r1
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055b0:	4659      	mov	r1, fp
 80055b2:	00cb      	lsls	r3, r1, #3
 80055b4:	4651      	mov	r1, sl
 80055b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ba:	4651      	mov	r1, sl
 80055bc:	00ca      	lsls	r2, r1, #3
 80055be:	4610      	mov	r0, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	4642      	mov	r2, r8
 80055c6:	189b      	adds	r3, r3, r2
 80055c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055cc:	464b      	mov	r3, r9
 80055ce:	460a      	mov	r2, r1
 80055d0:	eb42 0303 	adc.w	r3, r2, r3
 80055d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80055f0:	4649      	mov	r1, r9
 80055f2:	008b      	lsls	r3, r1, #2
 80055f4:	4641      	mov	r1, r8
 80055f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055fa:	4641      	mov	r1, r8
 80055fc:	008a      	lsls	r2, r1, #2
 80055fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005602:	f7fb fad1 	bl	8000ba8 <__aeabi_uldivmod>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4611      	mov	r1, r2
 800560c:	4b38      	ldr	r3, [pc, #224]	@ (80056f0 <UART_SetConfig+0x4e4>)
 800560e:	fba3 2301 	umull	r2, r3, r3, r1
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2264      	movs	r2, #100	@ 0x64
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	1acb      	subs	r3, r1, r3
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	3332      	adds	r3, #50	@ 0x32
 8005620:	4a33      	ldr	r2, [pc, #204]	@ (80056f0 <UART_SetConfig+0x4e4>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800562c:	441c      	add	r4, r3
 800562e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005632:	2200      	movs	r2, #0
 8005634:	673b      	str	r3, [r7, #112]	@ 0x70
 8005636:	677a      	str	r2, [r7, #116]	@ 0x74
 8005638:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800563c:	4642      	mov	r2, r8
 800563e:	464b      	mov	r3, r9
 8005640:	1891      	adds	r1, r2, r2
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	415b      	adcs	r3, r3
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800564c:	4641      	mov	r1, r8
 800564e:	1851      	adds	r1, r2, r1
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	4649      	mov	r1, r9
 8005654:	414b      	adcs	r3, r1
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005664:	4659      	mov	r1, fp
 8005666:	00cb      	lsls	r3, r1, #3
 8005668:	4651      	mov	r1, sl
 800566a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800566e:	4651      	mov	r1, sl
 8005670:	00ca      	lsls	r2, r1, #3
 8005672:	4610      	mov	r0, r2
 8005674:	4619      	mov	r1, r3
 8005676:	4603      	mov	r3, r0
 8005678:	4642      	mov	r2, r8
 800567a:	189b      	adds	r3, r3, r2
 800567c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800567e:	464b      	mov	r3, r9
 8005680:	460a      	mov	r2, r1
 8005682:	eb42 0303 	adc.w	r3, r2, r3
 8005686:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	663b      	str	r3, [r7, #96]	@ 0x60
 8005692:	667a      	str	r2, [r7, #100]	@ 0x64
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056a0:	4649      	mov	r1, r9
 80056a2:	008b      	lsls	r3, r1, #2
 80056a4:	4641      	mov	r1, r8
 80056a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056aa:	4641      	mov	r1, r8
 80056ac:	008a      	lsls	r2, r1, #2
 80056ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056b2:	f7fb fa79 	bl	8000ba8 <__aeabi_uldivmod>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4b0d      	ldr	r3, [pc, #52]	@ (80056f0 <UART_SetConfig+0x4e4>)
 80056bc:	fba3 1302 	umull	r1, r3, r3, r2
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	2164      	movs	r1, #100	@ 0x64
 80056c4:	fb01 f303 	mul.w	r3, r1, r3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	3332      	adds	r3, #50	@ 0x32
 80056ce:	4a08      	ldr	r2, [pc, #32]	@ (80056f0 <UART_SetConfig+0x4e4>)
 80056d0:	fba2 2303 	umull	r2, r3, r2, r3
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	f003 020f 	and.w	r2, r3, #15
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4422      	add	r2, r4
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	bf00      	nop
 80056e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056ea:	46bd      	mov	sp, r7
 80056ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056f0:	51eb851f 	.word	0x51eb851f

080056f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005706:	2b84      	cmp	r3, #132	@ 0x84
 8005708:	d005      	beq.n	8005716 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800570a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	3303      	adds	r3, #3
 8005714:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800572a:	f3ef 8305 	mrs	r3, IPSR
 800572e:	607b      	str	r3, [r7, #4]
  return(result);
 8005730:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005732:	2b00      	cmp	r3, #0
 8005734:	bf14      	ite	ne
 8005736:	2301      	movne	r3, #1
 8005738:	2300      	moveq	r3, #0
 800573a:	b2db      	uxtb	r3, r3
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800574c:	f001 f984 	bl	8006a58 <vTaskStartScheduler>
  
  return osOK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	bd80      	pop	{r7, pc}

08005756 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005758:	b089      	sub	sp, #36	@ 0x24
 800575a:	af04      	add	r7, sp, #16
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d020      	beq.n	80057aa <osThreadCreate+0x54>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01c      	beq.n	80057aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685c      	ldr	r4, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691e      	ldr	r6, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff ffb6 	bl	80056f4 <makeFreeRtosPriority>
 8005788:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005792:	9202      	str	r2, [sp, #8]
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	9100      	str	r1, [sp, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	4632      	mov	r2, r6
 800579c:	4629      	mov	r1, r5
 800579e:	4620      	mov	r0, r4
 80057a0:	f000 ff8c 	bl	80066bc <xTaskCreateStatic>
 80057a4:	4603      	mov	r3, r0
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e01c      	b.n	80057e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685c      	ldr	r4, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057b6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff ff98 	bl	80056f4 <makeFreeRtosPriority>
 80057c4:	4602      	mov	r2, r0
 80057c6:	f107 030c 	add.w	r3, r7, #12
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	9200      	str	r2, [sp, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	4632      	mov	r2, r6
 80057d2:	4629      	mov	r1, r5
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 ffd1 	bl	800677c <xTaskCreate>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d001      	beq.n	80057e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80057e4:	68fb      	ldr	r3, [r7, #12]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <osDelay+0x16>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	e000      	b.n	8005806 <osDelay+0x18>
 8005804:	2301      	movs	r3, #1
 8005806:	4618      	mov	r0, r3
 8005808:	f001 f8f0 	bl	80069ec <vTaskDelay>
  
  return osOK;
 800580c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d007      	beq.n	8005836 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4619      	mov	r1, r3
 800582c:	2001      	movs	r0, #1
 800582e:	f000 fade 	bl	8005dee <xQueueCreateMutexStatic>
 8005832:	4603      	mov	r3, r0
 8005834:	e003      	b.n	800583e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005836:	2001      	movs	r0, #1
 8005838:	f000 fac1 	bl	8005dbe <xQueueCreateMutex>
 800583c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <osMutexWait+0x18>
    return osErrorParameter;
 800585c:	2380      	movs	r3, #128	@ 0x80
 800585e:	e03a      	b.n	80058d6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d103      	bne.n	8005874 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800586c:	f04f 33ff 	mov.w	r3, #4294967295
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	e009      	b.n	8005888 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d006      	beq.n	8005888 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <osMutexWait+0x40>
      ticks = 1;
 8005884:	2301      	movs	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005888:	f7ff ff4c 	bl	8005724 <inHandlerMode>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d017      	beq.n	80058c2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005892:	f107 0308 	add.w	r3, r7, #8
 8005896:	461a      	mov	r2, r3
 8005898:	2100      	movs	r1, #0
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fd64 	bl	8006368 <xQueueReceiveFromISR>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d001      	beq.n	80058aa <osMutexWait+0x62>
      return osErrorOS;
 80058a6:	23ff      	movs	r3, #255	@ 0xff
 80058a8:	e015      	b.n	80058d6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d011      	beq.n	80058d4 <osMutexWait+0x8c>
 80058b0:	4b0b      	ldr	r3, [pc, #44]	@ (80058e0 <osMutexWait+0x98>)
 80058b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	e008      	b.n	80058d4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fc3f 	bl	8006148 <xQueueSemaphoreTake>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d001      	beq.n	80058d4 <osMutexWait+0x8c>
    return osErrorOS;
 80058d0:	23ff      	movs	r3, #255	@ 0xff
 80058d2:	e000      	b.n	80058d6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80058f4:	f7ff ff16 	bl	8005724 <inHandlerMode>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058fe:	f107 0308 	add.w	r3, r7, #8
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fb8f 	bl	8006028 <xQueueGiveFromISR>
 800590a:	4603      	mov	r3, r0
 800590c:	2b01      	cmp	r3, #1
 800590e:	d001      	beq.n	8005914 <osMutexRelease+0x30>
      return osErrorOS;
 8005910:	23ff      	movs	r3, #255	@ 0xff
 8005912:	e017      	b.n	8005944 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d013      	beq.n	8005942 <osMutexRelease+0x5e>
 800591a:	4b0c      	ldr	r3, [pc, #48]	@ (800594c <osMutexRelease+0x68>)
 800591c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	e00a      	b.n	8005942 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800592c:	2300      	movs	r3, #0
 800592e:	2200      	movs	r2, #0
 8005930:	2100      	movs	r1, #0
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa76 	bl	8005e24 <xQueueGenericSend>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d001      	beq.n	8005942 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800593e:	23ff      	movs	r3, #255	@ 0xff
 8005940:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005942:	68fb      	ldr	r3, [r7, #12]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b085      	sub	sp, #20
 8005954:	af02      	add	r7, sp, #8
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d011      	beq.n	8005986 <osMessageCreate+0x36>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00d      	beq.n	8005986 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6859      	ldr	r1, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2400      	movs	r4, #0
 800597c:	9400      	str	r4, [sp, #0]
 800597e:	f000 f92d 	bl	8005bdc <xQueueGenericCreateStatic>
 8005982:	4603      	mov	r3, r0
 8005984:	e008      	b.n	8005998 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	4619      	mov	r1, r3
 8005992:	f000 f9a0 	bl	8005cd6 <xQueueGenericCreate>
 8005996:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bd90      	pop	{r4, r7, pc}

080059a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f103 0208 	add.w	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f04f 32ff 	mov.w	r2, #4294967295
 80059b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f103 0208 	add.w	r2, r3, #8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f103 0208 	add.w	r2, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	601a      	str	r2, [r3, #0]
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d103      	bne.n	8005a62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	e00c      	b.n	8005a7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3308      	adds	r3, #8
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e002      	b.n	8005a70 <vListInsert+0x2e>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d2f6      	bcs.n	8005a6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6892      	ldr	r2, [r2, #8]
 8005aca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6852      	ldr	r2, [r2, #4]
 8005ad4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d103      	bne.n	8005ae8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	1e5a      	subs	r2, r3, #1
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b2e:	bf00      	nop
 8005b30:	bf00      	nop
 8005b32:	e7fd      	b.n	8005b30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b34:	f001 fef0 	bl	8007918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b40:	68f9      	ldr	r1, [r7, #12]
 8005b42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b44:	fb01 f303 	mul.w	r3, r1, r3
 8005b48:	441a      	add	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b64:	3b01      	subs	r3, #1
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	441a      	add	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	22ff      	movs	r2, #255	@ 0xff
 8005b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	22ff      	movs	r2, #255	@ 0xff
 8005b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d114      	bne.n	8005bb4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01a      	beq.n	8005bc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3310      	adds	r3, #16
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 f9a8 	bl	8006eec <xTaskRemoveFromEventList>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d012      	beq.n	8005bc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <xQueueGenericReset+0xd0>)
 8005ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	e009      	b.n	8005bc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3310      	adds	r3, #16
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff fef1 	bl	80059a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3324      	adds	r3, #36	@ 0x24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff feec 	bl	80059a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bc8:	f001 fed8 	bl	800797c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bcc:	2301      	movs	r3, #1
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	@ 0x38
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	e7fd      	b.n	8005c04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	e7fd      	b.n	8005c22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <xQueueGenericCreateStatic+0x56>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <xQueueGenericCreateStatic+0x5a>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <xQueueGenericCreateStatic+0x5c>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	623b      	str	r3, [r7, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	e7fd      	b.n	8005c50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d102      	bne.n	8005c60 <xQueueGenericCreateStatic+0x84>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <xQueueGenericCreateStatic+0x88>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <xQueueGenericCreateStatic+0x8a>
 8005c64:	2300      	movs	r3, #0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10b      	bne.n	8005c82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	61fb      	str	r3, [r7, #28]
}
 8005c7c:	bf00      	nop
 8005c7e:	bf00      	nop
 8005c80:	e7fd      	b.n	8005c7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c82:	2348      	movs	r3, #72	@ 0x48
 8005c84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b48      	cmp	r3, #72	@ 0x48
 8005c8a:	d00b      	beq.n	8005ca4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	61bb      	str	r3, [r7, #24]
}
 8005c9e:	bf00      	nop
 8005ca0:	bf00      	nop
 8005ca2:	e7fd      	b.n	8005ca0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ca4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f840 	bl	8005d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3730      	adds	r7, #48	@ 0x30
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b08a      	sub	sp, #40	@ 0x28
 8005cda:	af02      	add	r7, sp, #8
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	613b      	str	r3, [r7, #16]
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	3348      	adds	r3, #72	@ 0x48
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 ff23 	bl	8007b5c <pvPortMalloc>
 8005d16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d011      	beq.n	8005d42 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	3348      	adds	r3, #72	@ 0x48
 8005d26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d30:	79fa      	ldrb	r2, [r7, #7]
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	4613      	mov	r3, r2
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f805 	bl	8005d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d42:	69bb      	ldr	r3, [r7, #24]
	}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e002      	b.n	8005d6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	69b8      	ldr	r0, [r7, #24]
 8005d7e:	f7ff fec3 	bl	8005b08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00e      	beq.n	8005db6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005daa:	2300      	movs	r3, #0
 8005dac:	2200      	movs	r2, #0
 8005dae:	2100      	movs	r1, #0
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f837 	bl	8005e24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b086      	sub	sp, #24
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6939      	ldr	r1, [r7, #16]
 8005dd6:	6978      	ldr	r0, [r7, #20]
 8005dd8:	f7ff ff7d 	bl	8005cd6 <xQueueGenericCreate>
 8005ddc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f7ff ffd3 	bl	8005d8a <prvInitialiseMutex>

		return xNewQueue;
 8005de4:	68fb      	ldr	r3, [r7, #12]
	}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b088      	sub	sp, #32
 8005df2:	af02      	add	r7, sp, #8
 8005df4:	4603      	mov	r3, r0
 8005df6:	6039      	str	r1, [r7, #0]
 8005df8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	6939      	ldr	r1, [r7, #16]
 8005e0c:	6978      	ldr	r0, [r7, #20]
 8005e0e:	f7ff fee5 	bl	8005bdc <xQueueGenericCreateStatic>
 8005e12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff ffb8 	bl	8005d8a <prvInitialiseMutex>

		return xNewQueue;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
	}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08e      	sub	sp, #56	@ 0x38
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10b      	bne.n	8005e58 <xQueueGenericSend+0x34>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e52:	bf00      	nop
 8005e54:	bf00      	nop
 8005e56:	e7fd      	b.n	8005e54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d103      	bne.n	8005e66 <xQueueGenericSend+0x42>
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <xQueueGenericSend+0x46>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <xQueueGenericSend+0x48>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10b      	bne.n	8005e88 <xQueueGenericSend+0x64>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	e7fd      	b.n	8005e84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d103      	bne.n	8005e96 <xQueueGenericSend+0x72>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <xQueueGenericSend+0x76>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <xQueueGenericSend+0x78>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10b      	bne.n	8005eb8 <xQueueGenericSend+0x94>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	623b      	str	r3, [r7, #32]
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	e7fd      	b.n	8005eb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eb8:	f001 f9d8 	bl	800726c <xTaskGetSchedulerState>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <xQueueGenericSend+0xa4>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <xQueueGenericSend+0xa8>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <xQueueGenericSend+0xaa>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10b      	bne.n	8005eea <xQueueGenericSend+0xc6>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	61fb      	str	r3, [r7, #28]
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop
 8005ee8:	e7fd      	b.n	8005ee6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eea:	f001 fd15 	bl	8007918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d302      	bcc.n	8005f00 <xQueueGenericSend+0xdc>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d129      	bne.n	8005f54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f06:	f000 fac9 	bl	800649c <prvCopyDataToQueue>
 8005f0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d010      	beq.n	8005f36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	3324      	adds	r3, #36	@ 0x24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 ffe7 	bl	8006eec <xTaskRemoveFromEventList>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d013      	beq.n	8005f4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f24:	4b3f      	ldr	r3, [pc, #252]	@ (8006024 <xQueueGenericSend+0x200>)
 8005f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	e00a      	b.n	8005f4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f3c:	4b39      	ldr	r3, [pc, #228]	@ (8006024 <xQueueGenericSend+0x200>)
 8005f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f4c:	f001 fd16 	bl	800797c <vPortExitCritical>
				return pdPASS;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e063      	b.n	800601c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f5a:	f001 fd0f 	bl	800797c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e05c      	b.n	800601c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f68:	f107 0314 	add.w	r3, r7, #20
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 f821 	bl	8006fb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f72:	2301      	movs	r3, #1
 8005f74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f76:	f001 fd01 	bl	800797c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f7a:	f000 fdcf 	bl	8006b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f7e:	f001 fccb 	bl	8007918 <vPortEnterCritical>
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f88:	b25b      	sxtb	r3, r3
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8e:	d103      	bne.n	8005f98 <xQueueGenericSend+0x174>
 8005f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f9e:	b25b      	sxtb	r3, r3
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d103      	bne.n	8005fae <xQueueGenericSend+0x18a>
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fae:	f001 fce5 	bl	800797c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fb2:	1d3a      	adds	r2, r7, #4
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	4611      	mov	r1, r2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 f810 	bl	8006fe0 <xTaskCheckForTimeOut>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d124      	bne.n	8006010 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fc8:	f000 fb60 	bl	800668c <prvIsQueueFull>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d018      	beq.n	8006004 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	3310      	adds	r3, #16
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 ff60 	bl	8006ea0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005fe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fe2:	f000 faeb 	bl	80065bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005fe6:	f000 fda7 	bl	8006b38 <xTaskResumeAll>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f47f af7c 	bne.w	8005eea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <xQueueGenericSend+0x200>)
 8005ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	e772      	b.n	8005eea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006006:	f000 fad9 	bl	80065bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800600a:	f000 fd95 	bl	8006b38 <xTaskResumeAll>
 800600e:	e76c      	b.n	8005eea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006012:	f000 fad3 	bl	80065bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006016:	f000 fd8f 	bl	8006b38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800601a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800601c:	4618      	mov	r0, r3
 800601e:	3738      	adds	r7, #56	@ 0x38
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	e000ed04 	.word	0xe000ed04

08006028 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08e      	sub	sp, #56	@ 0x38
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	623b      	str	r3, [r7, #32]
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	e7fd      	b.n	8006050 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	61fb      	str	r3, [r7, #28]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <xQueueGiveFromISR+0x5c>
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <xQueueGiveFromISR+0x60>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <xQueueGiveFromISR+0x62>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	61bb      	str	r3, [r7, #24]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060a6:	f001 fd17 	bl	8007ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060aa:	f3ef 8211 	mrs	r2, BASEPRI
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	617a      	str	r2, [r7, #20]
 80060c0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d22b      	bcs.n	800612e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f0:	d112      	bne.n	8006118 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d016      	beq.n	8006128 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	3324      	adds	r3, #36	@ 0x24
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fef4 	bl	8006eec <xTaskRemoveFromEventList>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00e      	beq.n	8006128 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e007      	b.n	8006128 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800611c:	3301      	adds	r3, #1
 800611e:	b2db      	uxtb	r3, r3
 8006120:	b25a      	sxtb	r2, r3
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006128:	2301      	movs	r3, #1
 800612a:	637b      	str	r3, [r7, #52]	@ 0x34
 800612c:	e001      	b.n	8006132 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800612e:	2300      	movs	r3, #0
 8006130:	637b      	str	r3, [r7, #52]	@ 0x34
 8006132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006134:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800613c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800613e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006140:	4618      	mov	r0, r3
 8006142:	3738      	adds	r7, #56	@ 0x38
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	@ 0x38
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800615a:	2300      	movs	r3, #0
 800615c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800615e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	623b      	str	r3, [r7, #32]
}
 8006176:	bf00      	nop
 8006178:	bf00      	nop
 800617a:	e7fd      	b.n	8006178 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800617c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	61fb      	str	r3, [r7, #28]
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800619c:	f001 f866 	bl	800726c <xTaskGetSchedulerState>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d102      	bne.n	80061ac <xQueueSemaphoreTake+0x64>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <xQueueSemaphoreTake+0x68>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <xQueueSemaphoreTake+0x6a>
 80061b0:	2300      	movs	r3, #0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10b      	bne.n	80061ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	61bb      	str	r3, [r7, #24]
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ce:	f001 fba3 	bl	8007918 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d024      	beq.n	8006228 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	1e5a      	subs	r2, r3, #1
 80061e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061ee:	f001 f9e9 	bl	80075c4 <pvTaskIncrementMutexHeldCount>
 80061f2:	4602      	mov	r2, r0
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006202:	3310      	adds	r3, #16
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fe71 	bl	8006eec <xTaskRemoveFromEventList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006210:	4b54      	ldr	r3, [pc, #336]	@ (8006364 <xQueueSemaphoreTake+0x21c>)
 8006212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006220:	f001 fbac 	bl	800797c <vPortExitCritical>
				return pdPASS;
 8006224:	2301      	movs	r3, #1
 8006226:	e098      	b.n	800635a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d112      	bne.n	8006254 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	617b      	str	r3, [r7, #20]
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800624c:	f001 fb96 	bl	800797c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006250:	2300      	movs	r3, #0
 8006252:	e082      	b.n	800635a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800625a:	f107 030c 	add.w	r3, r7, #12
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fea8 	bl	8006fb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006268:	f001 fb88 	bl	800797c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800626c:	f000 fc56 	bl	8006b1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006270:	f001 fb52 	bl	8007918 <vPortEnterCritical>
 8006274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006276:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d103      	bne.n	800628a <xQueueSemaphoreTake+0x142>
 8006282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006290:	b25b      	sxtb	r3, r3
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d103      	bne.n	80062a0 <xQueueSemaphoreTake+0x158>
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062a0:	f001 fb6c 	bl	800797c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062a4:	463a      	mov	r2, r7
 80062a6:	f107 030c 	add.w	r3, r7, #12
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fe97 	bl	8006fe0 <xTaskCheckForTimeOut>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d132      	bne.n	800631e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062ba:	f000 f9d1 	bl	8006660 <prvIsQueueEmpty>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d026      	beq.n	8006312 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80062cc:	f001 fb24 	bl	8007918 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 ffe7 	bl	80072a8 <xTaskPriorityInherit>
 80062da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062dc:	f001 fb4e 	bl	800797c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	3324      	adds	r3, #36	@ 0x24
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	4611      	mov	r1, r2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fdd9 	bl	8006ea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062f0:	f000 f964 	bl	80065bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062f4:	f000 fc20 	bl	8006b38 <xTaskResumeAll>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f47f af67 	bne.w	80061ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006300:	4b18      	ldr	r3, [pc, #96]	@ (8006364 <xQueueSemaphoreTake+0x21c>)
 8006302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	e75d      	b.n	80061ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006314:	f000 f952 	bl	80065bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006318:	f000 fc0e 	bl	8006b38 <xTaskResumeAll>
 800631c:	e757      	b.n	80061ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800631e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006320:	f000 f94c 	bl	80065bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006324:	f000 fc08 	bl	8006b38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800632a:	f000 f999 	bl	8006660 <prvIsQueueEmpty>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	f43f af4c 	beq.w	80061ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00d      	beq.n	8006358 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800633c:	f001 faec 	bl	8007918 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006340:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006342:	f000 f893 	bl	800646c <prvGetDisinheritPriorityAfterTimeout>
 8006346:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800634e:	4618      	mov	r0, r3
 8006350:	f001 f8a8 	bl	80074a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006354:	f001 fb12 	bl	800797c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006358:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800635a:	4618      	mov	r0, r3
 800635c:	3738      	adds	r7, #56	@ 0x38
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08e      	sub	sp, #56	@ 0x38
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	623b      	str	r3, [r7, #32]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d103      	bne.n	80063a4 <xQueueReceiveFromISR+0x3c>
 800639c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <xQueueReceiveFromISR+0x40>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <xQueueReceiveFromISR+0x42>
 80063a8:	2300      	movs	r3, #0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	61fb      	str	r3, [r7, #28]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063c6:	f001 fb87 	bl	8007ad8 <vPortValidateInterruptPriority>
	__asm volatile
 80063ca:	f3ef 8211 	mrs	r2, BASEPRI
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	61ba      	str	r2, [r7, #24]
 80063e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80063e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d02f      	beq.n	8006452 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006400:	f000 f8b6 	bl	8006570 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	1e5a      	subs	r2, r3, #1
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800640c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d112      	bne.n	800643c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d016      	beq.n	800644c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	3310      	adds	r3, #16
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fd62 	bl	8006eec <xTaskRemoveFromEventList>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00e      	beq.n	800644c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e007      	b.n	800644c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800643c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006440:	3301      	adds	r3, #1
 8006442:	b2db      	uxtb	r3, r3
 8006444:	b25a      	sxtb	r2, r3
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800644c:	2301      	movs	r3, #1
 800644e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006450:	e001      	b.n	8006456 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006452:	2300      	movs	r3, #0
 8006454:	637b      	str	r3, [r7, #52]	@ 0x34
 8006456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006458:	613b      	str	r3, [r7, #16]
	__asm volatile
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f383 8811 	msr	BASEPRI, r3
}
 8006460:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006464:	4618      	mov	r0, r3
 8006466:	3738      	adds	r7, #56	@ 0x38
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f1c3 0307 	rsb	r3, r3, #7
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e001      	b.n	800648e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800648e:	68fb      	ldr	r3, [r7, #12]
	}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10d      	bne.n	80064d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d14d      	bne.n	800655e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 ff64 	bl	8007394 <xTaskPriorityDisinherit>
 80064cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	e043      	b.n	800655e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d119      	bne.n	8006510 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6858      	ldr	r0, [r3, #4]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e4:	461a      	mov	r2, r3
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	f002 fd55 	bl	8008f96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	441a      	add	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	429a      	cmp	r2, r3
 8006504:	d32b      	bcc.n	800655e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	e026      	b.n	800655e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68d8      	ldr	r0, [r3, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	461a      	mov	r2, r3
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	f002 fd3b 	bl	8008f96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	425b      	negs	r3, r3
 800652a:	441a      	add	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d207      	bcs.n	800654c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006544:	425b      	negs	r3, r3
 8006546:	441a      	add	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d105      	bne.n	800655e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	3b01      	subs	r3, #1
 800655c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006566:	697b      	ldr	r3, [r7, #20]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d018      	beq.n	80065b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	441a      	add	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	429a      	cmp	r2, r3
 800659a:	d303      	bcc.n	80065a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68d9      	ldr	r1, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ac:	461a      	mov	r2, r3
 80065ae:	6838      	ldr	r0, [r7, #0]
 80065b0:	f002 fcf1 	bl	8008f96 <memcpy>
	}
}
 80065b4:	bf00      	nop
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065c4:	f001 f9a8 	bl	8007918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065d0:	e011      	b.n	80065f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d012      	beq.n	8006600 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3324      	adds	r3, #36	@ 0x24
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fc84 	bl	8006eec <xTaskRemoveFromEventList>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065ea:	f000 fd5d 	bl	80070a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dce9      	bgt.n	80065d2 <prvUnlockQueue+0x16>
 80065fe:	e000      	b.n	8006602 <prvUnlockQueue+0x46>
					break;
 8006600:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	22ff      	movs	r2, #255	@ 0xff
 8006606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800660a:	f001 f9b7 	bl	800797c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800660e:	f001 f983 	bl	8007918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006618:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800661a:	e011      	b.n	8006640 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d012      	beq.n	800664a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3310      	adds	r3, #16
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fc5f 	bl	8006eec <xTaskRemoveFromEventList>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006634:	f000 fd38 	bl	80070a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	3b01      	subs	r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006640:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dce9      	bgt.n	800661c <prvUnlockQueue+0x60>
 8006648:	e000      	b.n	800664c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800664a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	22ff      	movs	r2, #255	@ 0xff
 8006650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006654:	f001 f992 	bl	800797c <vPortExitCritical>
}
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006668:	f001 f956 	bl	8007918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	2b00      	cmp	r3, #0
 8006672:	d102      	bne.n	800667a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006674:	2301      	movs	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	e001      	b.n	800667e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800667e:	f001 f97d 	bl	800797c <vPortExitCritical>

	return xReturn;
 8006682:	68fb      	ldr	r3, [r7, #12]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006694:	f001 f940 	bl	8007918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d102      	bne.n	80066aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e001      	b.n	80066ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066ae:	f001 f965 	bl	800797c <vPortExitCritical>

	return xReturn;
 80066b2:	68fb      	ldr	r3, [r7, #12]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08e      	sub	sp, #56	@ 0x38
 80066c0:	af04      	add	r7, sp, #16
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10b      	bne.n	80066e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	623b      	str	r3, [r7, #32]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10b      	bne.n	8006706 <xTaskCreateStatic+0x4a>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	61fb      	str	r3, [r7, #28]
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006706:	2354      	movs	r3, #84	@ 0x54
 8006708:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b54      	cmp	r3, #84	@ 0x54
 800670e:	d00b      	beq.n	8006728 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	61bb      	str	r3, [r7, #24]
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006728:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01e      	beq.n	800676e <xTaskCreateStatic+0xb2>
 8006730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01b      	beq.n	800676e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800673e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006748:	2300      	movs	r3, #0
 800674a:	9303      	str	r3, [sp, #12]
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	9302      	str	r3, [sp, #8]
 8006750:	f107 0314 	add.w	r3, r7, #20
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f850 	bl	8006806 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006766:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006768:	f000 f8d6 	bl	8006918 <prvAddNewTaskToReadyList>
 800676c:	e001      	b.n	8006772 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006772:	697b      	ldr	r3, [r7, #20]
	}
 8006774:	4618      	mov	r0, r3
 8006776:	3728      	adds	r7, #40	@ 0x28
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800677c:	b580      	push	{r7, lr}
 800677e:	b08c      	sub	sp, #48	@ 0x30
 8006780:	af04      	add	r7, sp, #16
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800678c:	88fb      	ldrh	r3, [r7, #6]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4618      	mov	r0, r3
 8006792:	f001 f9e3 	bl	8007b5c <pvPortMalloc>
 8006796:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00e      	beq.n	80067bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800679e:	2054      	movs	r0, #84	@ 0x54
 80067a0:	f001 f9dc 	bl	8007b5c <pvPortMalloc>
 80067a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80067b2:	e005      	b.n	80067c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067b4:	6978      	ldr	r0, [r7, #20]
 80067b6:	f001 fa9f 	bl	8007cf8 <vPortFree>
 80067ba:	e001      	b.n	80067c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d017      	beq.n	80067f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067ce:	88fa      	ldrh	r2, [r7, #6]
 80067d0:	2300      	movs	r3, #0
 80067d2:	9303      	str	r3, [sp, #12]
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	9302      	str	r3, [sp, #8]
 80067d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 f80e 	bl	8006806 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067ea:	69f8      	ldr	r0, [r7, #28]
 80067ec:	f000 f894 	bl	8006918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067f0:	2301      	movs	r3, #1
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e002      	b.n	80067fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067f6:	f04f 33ff 	mov.w	r3, #4294967295
 80067fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067fc:	69bb      	ldr	r3, [r7, #24]
	}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b088      	sub	sp, #32
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800681e:	3b01      	subs	r3, #1
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f023 0307 	bic.w	r3, r3, #7
 800682c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	617b      	str	r3, [r7, #20]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01f      	beq.n	8006896 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006856:	2300      	movs	r3, #0
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	e012      	b.n	8006882 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	7819      	ldrb	r1, [r3, #0]
 8006864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	3334      	adds	r3, #52	@ 0x34
 800686c:	460a      	mov	r2, r1
 800686e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d006      	beq.n	800688a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	3301      	adds	r3, #1
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	2b0f      	cmp	r3, #15
 8006886:	d9e9      	bls.n	800685c <prvInitialiseNewTask+0x56>
 8006888:	e000      	b.n	800688c <prvInitialiseNewTask+0x86>
			{
				break;
 800688a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800688c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006894:	e003      	b.n	800689e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800689e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a0:	2b06      	cmp	r3, #6
 80068a2:	d901      	bls.n	80068a8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068a4:	2306      	movs	r3, #6
 80068a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068b2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80068b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b6:	2200      	movs	r2, #0
 80068b8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	3304      	adds	r3, #4
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff f88e 	bl	80059e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	3318      	adds	r3, #24
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff f889 	bl	80059e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	f1c3 0207 	rsb	r2, r3, #7
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068e2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	2200      	movs	r2, #0
 80068e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	68f9      	ldr	r1, [r7, #12]
 80068f6:	69b8      	ldr	r0, [r7, #24]
 80068f8:	f000 fede 	bl	80076b8 <pxPortInitialiseStack>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800690c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800690e:	bf00      	nop
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006920:	f000 fffa 	bl	8007918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006924:	4b2a      	ldr	r3, [pc, #168]	@ (80069d0 <prvAddNewTaskToReadyList+0xb8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	4a29      	ldr	r2, [pc, #164]	@ (80069d0 <prvAddNewTaskToReadyList+0xb8>)
 800692c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800692e:	4b29      	ldr	r3, [pc, #164]	@ (80069d4 <prvAddNewTaskToReadyList+0xbc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006936:	4a27      	ldr	r2, [pc, #156]	@ (80069d4 <prvAddNewTaskToReadyList+0xbc>)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800693c:	4b24      	ldr	r3, [pc, #144]	@ (80069d0 <prvAddNewTaskToReadyList+0xb8>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d110      	bne.n	8006966 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006944:	f000 fbd4 	bl	80070f0 <prvInitialiseTaskLists>
 8006948:	e00d      	b.n	8006966 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800694a:	4b23      	ldr	r3, [pc, #140]	@ (80069d8 <prvAddNewTaskToReadyList+0xc0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d109      	bne.n	8006966 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006952:	4b20      	ldr	r3, [pc, #128]	@ (80069d4 <prvAddNewTaskToReadyList+0xbc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695c:	429a      	cmp	r2, r3
 800695e:	d802      	bhi.n	8006966 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006960:	4a1c      	ldr	r2, [pc, #112]	@ (80069d4 <prvAddNewTaskToReadyList+0xbc>)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006966:	4b1d      	ldr	r3, [pc, #116]	@ (80069dc <prvAddNewTaskToReadyList+0xc4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	4a1b      	ldr	r2, [pc, #108]	@ (80069dc <prvAddNewTaskToReadyList+0xc4>)
 800696e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	2201      	movs	r2, #1
 8006976:	409a      	lsls	r2, r3
 8006978:	4b19      	ldr	r3, [pc, #100]	@ (80069e0 <prvAddNewTaskToReadyList+0xc8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4313      	orrs	r3, r2
 800697e:	4a18      	ldr	r2, [pc, #96]	@ (80069e0 <prvAddNewTaskToReadyList+0xc8>)
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4a15      	ldr	r2, [pc, #84]	@ (80069e4 <prvAddNewTaskToReadyList+0xcc>)
 8006990:	441a      	add	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3304      	adds	r3, #4
 8006996:	4619      	mov	r1, r3
 8006998:	4610      	mov	r0, r2
 800699a:	f7ff f82e 	bl	80059fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800699e:	f000 ffed 	bl	800797c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069a2:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <prvAddNewTaskToReadyList+0xc0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069aa:	4b0a      	ldr	r3, [pc, #40]	@ (80069d4 <prvAddNewTaskToReadyList+0xbc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d207      	bcs.n	80069c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069b8:	4b0b      	ldr	r3, [pc, #44]	@ (80069e8 <prvAddNewTaskToReadyList+0xd0>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20000810 	.word	0x20000810
 80069d4:	20000710 	.word	0x20000710
 80069d8:	2000081c 	.word	0x2000081c
 80069dc:	2000082c 	.word	0x2000082c
 80069e0:	20000818 	.word	0x20000818
 80069e4:	20000714 	.word	0x20000714
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d018      	beq.n	8006a30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069fe:	4b14      	ldr	r3, [pc, #80]	@ (8006a50 <vTaskDelay+0x64>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <vTaskDelay+0x32>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	60bb      	str	r3, [r7, #8]
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	e7fd      	b.n	8006a1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a1e:	f000 f87d 	bl	8006b1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a22:	2100      	movs	r1, #0
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fde1 	bl	80075ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a2a:	f000 f885 	bl	8006b38 <xTaskResumeAll>
 8006a2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d107      	bne.n	8006a46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a36:	4b07      	ldr	r3, [pc, #28]	@ (8006a54 <vTaskDelay+0x68>)
 8006a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20000838 	.word	0x20000838
 8006a54:	e000ed04 	.word	0xe000ed04

08006a58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	@ 0x28
 8006a5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a66:	463a      	mov	r2, r7
 8006a68:	1d39      	adds	r1, r7, #4
 8006a6a:	f107 0308 	add.w	r3, r7, #8
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fa fa12 	bl	8000e98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	9202      	str	r2, [sp, #8]
 8006a7c:	9301      	str	r3, [sp, #4]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9300      	str	r3, [sp, #0]
 8006a82:	2300      	movs	r3, #0
 8006a84:	460a      	mov	r2, r1
 8006a86:	491f      	ldr	r1, [pc, #124]	@ (8006b04 <vTaskStartScheduler+0xac>)
 8006a88:	481f      	ldr	r0, [pc, #124]	@ (8006b08 <vTaskStartScheduler+0xb0>)
 8006a8a:	f7ff fe17 	bl	80066bc <xTaskCreateStatic>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4a1e      	ldr	r2, [pc, #120]	@ (8006b0c <vTaskStartScheduler+0xb4>)
 8006a92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a94:	4b1d      	ldr	r3, [pc, #116]	@ (8006b0c <vTaskStartScheduler+0xb4>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e001      	b.n	8006aa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d116      	bne.n	8006ada <vTaskStartScheduler+0x82>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	613b      	str	r3, [r7, #16]
}
 8006abe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ac0:	4b13      	ldr	r3, [pc, #76]	@ (8006b10 <vTaskStartScheduler+0xb8>)
 8006ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ac8:	4b12      	ldr	r3, [pc, #72]	@ (8006b14 <vTaskStartScheduler+0xbc>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ace:	4b12      	ldr	r3, [pc, #72]	@ (8006b18 <vTaskStartScheduler+0xc0>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ad4:	f000 fe7c 	bl	80077d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ad8:	e00f      	b.n	8006afa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d10b      	bne.n	8006afa <vTaskStartScheduler+0xa2>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	60fb      	str	r3, [r7, #12]
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop
 8006af8:	e7fd      	b.n	8006af6 <vTaskStartScheduler+0x9e>
}
 8006afa:	bf00      	nop
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	0800b104 	.word	0x0800b104
 8006b08:	080070c1 	.word	0x080070c1
 8006b0c:	20000834 	.word	0x20000834
 8006b10:	20000830 	.word	0x20000830
 8006b14:	2000081c 	.word	0x2000081c
 8006b18:	20000814 	.word	0x20000814

08006b1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b20:	4b04      	ldr	r3, [pc, #16]	@ (8006b34 <vTaskSuspendAll+0x18>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	4a03      	ldr	r2, [pc, #12]	@ (8006b34 <vTaskSuspendAll+0x18>)
 8006b28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b2a:	bf00      	nop
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	20000838 	.word	0x20000838

08006b38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b46:	4b42      	ldr	r3, [pc, #264]	@ (8006c50 <xTaskResumeAll+0x118>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	603b      	str	r3, [r7, #0]
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	e7fd      	b.n	8006b62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b66:	f000 fed7 	bl	8007918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b6a:	4b39      	ldr	r3, [pc, #228]	@ (8006c50 <xTaskResumeAll+0x118>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	4a37      	ldr	r2, [pc, #220]	@ (8006c50 <xTaskResumeAll+0x118>)
 8006b72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b74:	4b36      	ldr	r3, [pc, #216]	@ (8006c50 <xTaskResumeAll+0x118>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d161      	bne.n	8006c40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b7c:	4b35      	ldr	r3, [pc, #212]	@ (8006c54 <xTaskResumeAll+0x11c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d05d      	beq.n	8006c40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b84:	e02e      	b.n	8006be4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b86:	4b34      	ldr	r3, [pc, #208]	@ (8006c58 <xTaskResumeAll+0x120>)
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3318      	adds	r3, #24
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe ff8e 	bl	8005ab4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe ff89 	bl	8005ab4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	409a      	lsls	r2, r3
 8006baa:	4b2c      	ldr	r3, [pc, #176]	@ (8006c5c <xTaskResumeAll+0x124>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c5c <xTaskResumeAll+0x124>)
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4a27      	ldr	r2, [pc, #156]	@ (8006c60 <xTaskResumeAll+0x128>)
 8006bc2:	441a      	add	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f7fe ff15 	bl	80059fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd4:	4b23      	ldr	r3, [pc, #140]	@ (8006c64 <xTaskResumeAll+0x12c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d302      	bcc.n	8006be4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bde:	4b22      	ldr	r3, [pc, #136]	@ (8006c68 <xTaskResumeAll+0x130>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006be4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c58 <xTaskResumeAll+0x120>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1cc      	bne.n	8006b86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bf2:	f000 fb1b 	bl	800722c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c6c <xTaskResumeAll+0x134>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d010      	beq.n	8006c24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c02:	f000 f837 	bl	8006c74 <xTaskIncrementTick>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c0c:	4b16      	ldr	r3, [pc, #88]	@ (8006c68 <xTaskResumeAll+0x130>)
 8006c0e:	2201      	movs	r2, #1
 8006c10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1f1      	bne.n	8006c02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c1e:	4b13      	ldr	r3, [pc, #76]	@ (8006c6c <xTaskResumeAll+0x134>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c24:	4b10      	ldr	r3, [pc, #64]	@ (8006c68 <xTaskResumeAll+0x130>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c30:	4b0f      	ldr	r3, [pc, #60]	@ (8006c70 <xTaskResumeAll+0x138>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c40:	f000 fe9c 	bl	800797c <vPortExitCritical>

	return xAlreadyYielded;
 8006c44:	68bb      	ldr	r3, [r7, #8]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20000838 	.word	0x20000838
 8006c54:	20000810 	.word	0x20000810
 8006c58:	200007d0 	.word	0x200007d0
 8006c5c:	20000818 	.word	0x20000818
 8006c60:	20000714 	.word	0x20000714
 8006c64:	20000710 	.word	0x20000710
 8006c68:	20000824 	.word	0x20000824
 8006c6c:	20000820 	.word	0x20000820
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8006dbc <xTaskIncrementTick+0x148>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f040 808f 	bne.w	8006da6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c88:	4b4d      	ldr	r3, [pc, #308]	@ (8006dc0 <xTaskIncrementTick+0x14c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c90:	4a4b      	ldr	r2, [pc, #300]	@ (8006dc0 <xTaskIncrementTick+0x14c>)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d121      	bne.n	8006ce0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c9c:	4b49      	ldr	r3, [pc, #292]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <xTaskIncrementTick+0x4a>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	603b      	str	r3, [r7, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	e7fd      	b.n	8006cba <xTaskIncrementTick+0x46>
 8006cbe:	4b41      	ldr	r3, [pc, #260]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	4b40      	ldr	r3, [pc, #256]	@ (8006dc8 <xTaskIncrementTick+0x154>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a3e      	ldr	r2, [pc, #248]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	4a3e      	ldr	r2, [pc, #248]	@ (8006dc8 <xTaskIncrementTick+0x154>)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8006dcc <xTaskIncrementTick+0x158>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8006dcc <xTaskIncrementTick+0x158>)
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	f000 faa6 	bl	800722c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd0 <xTaskIncrementTick+0x15c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d348      	bcc.n	8006d7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cea:	4b36      	ldr	r3, [pc, #216]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf4:	4b36      	ldr	r3, [pc, #216]	@ (8006dd0 <xTaskIncrementTick+0x15c>)
 8006cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfa:	601a      	str	r2, [r3, #0]
					break;
 8006cfc:	e03e      	b.n	8006d7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cfe:	4b31      	ldr	r3, [pc, #196]	@ (8006dc4 <xTaskIncrementTick+0x150>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d203      	bcs.n	8006d1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d16:	4a2e      	ldr	r2, [pc, #184]	@ (8006dd0 <xTaskIncrementTick+0x15c>)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d1c:	e02e      	b.n	8006d7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fec6 	bl	8005ab4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	3318      	adds	r3, #24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fe febd 	bl	8005ab4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	2201      	movs	r2, #1
 8006d40:	409a      	lsls	r2, r3
 8006d42:	4b24      	ldr	r3, [pc, #144]	@ (8006dd4 <xTaskIncrementTick+0x160>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	4a22      	ldr	r2, [pc, #136]	@ (8006dd4 <xTaskIncrementTick+0x160>)
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd8 <xTaskIncrementTick+0x164>)
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f7fe fe49 	bl	80059fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ddc <xTaskIncrementTick+0x168>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d3b9      	bcc.n	8006cea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d76:	2301      	movs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d7a:	e7b6      	b.n	8006cea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d7c:	4b17      	ldr	r3, [pc, #92]	@ (8006ddc <xTaskIncrementTick+0x168>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d82:	4915      	ldr	r1, [pc, #84]	@ (8006dd8 <xTaskIncrementTick+0x164>)
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d901      	bls.n	8006d98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d98:	4b11      	ldr	r3, [pc, #68]	@ (8006de0 <xTaskIncrementTick+0x16c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	e004      	b.n	8006db0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006da6:	4b0f      	ldr	r3, [pc, #60]	@ (8006de4 <xTaskIncrementTick+0x170>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3301      	adds	r3, #1
 8006dac:	4a0d      	ldr	r2, [pc, #52]	@ (8006de4 <xTaskIncrementTick+0x170>)
 8006dae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006db0:	697b      	ldr	r3, [r7, #20]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000838 	.word	0x20000838
 8006dc0:	20000814 	.word	0x20000814
 8006dc4:	200007c8 	.word	0x200007c8
 8006dc8:	200007cc 	.word	0x200007cc
 8006dcc:	20000828 	.word	0x20000828
 8006dd0:	20000830 	.word	0x20000830
 8006dd4:	20000818 	.word	0x20000818
 8006dd8:	20000714 	.word	0x20000714
 8006ddc:	20000710 	.word	0x20000710
 8006de0:	20000824 	.word	0x20000824
 8006de4:	20000820 	.word	0x20000820

08006de8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dee:	4b27      	ldr	r3, [pc, #156]	@ (8006e8c <vTaskSwitchContext+0xa4>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006df6:	4b26      	ldr	r3, [pc, #152]	@ (8006e90 <vTaskSwitchContext+0xa8>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dfc:	e040      	b.n	8006e80 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006dfe:	4b24      	ldr	r3, [pc, #144]	@ (8006e90 <vTaskSwitchContext+0xa8>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e04:	4b23      	ldr	r3, [pc, #140]	@ (8006e94 <vTaskSwitchContext+0xac>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	fab3 f383 	clz	r3, r3
 8006e10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	f1c3 031f 	rsb	r3, r3, #31
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	491f      	ldr	r1, [pc, #124]	@ (8006e98 <vTaskSwitchContext+0xb0>)
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	607b      	str	r3, [r7, #4]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <vTaskSwitchContext+0x5a>
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4a11      	ldr	r2, [pc, #68]	@ (8006e98 <vTaskSwitchContext+0xb0>)
 8006e52:	4413      	add	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	605a      	str	r2, [r3, #4]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	3308      	adds	r3, #8
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d104      	bne.n	8006e76 <vTaskSwitchContext+0x8e>
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4a07      	ldr	r2, [pc, #28]	@ (8006e9c <vTaskSwitchContext+0xb4>)
 8006e7e:	6013      	str	r3, [r2, #0]
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	20000838 	.word	0x20000838
 8006e90:	20000824 	.word	0x20000824
 8006e94:	20000818 	.word	0x20000818
 8006e98:	20000714 	.word	0x20000714
 8006e9c:	20000710 	.word	0x20000710

08006ea0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10b      	bne.n	8006ec8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60fb      	str	r3, [r7, #12]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ec8:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <vTaskPlaceOnEventList+0x48>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3318      	adds	r3, #24
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7fe fdb6 	bl	8005a42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	6838      	ldr	r0, [r7, #0]
 8006eda:	f000 fb87 	bl	80075ec <prvAddCurrentTaskToDelayedList>
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000710 	.word	0x20000710

08006eec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10b      	bne.n	8006f1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	60fb      	str	r3, [r7, #12]
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	e7fd      	b.n	8006f16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	3318      	adds	r3, #24
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fdc8 	bl	8005ab4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f24:	4b1d      	ldr	r3, [pc, #116]	@ (8006f9c <xTaskRemoveFromEventList+0xb0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d11c      	bne.n	8006f66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fdbf 	bl	8005ab4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	409a      	lsls	r2, r3
 8006f3e:	4b18      	ldr	r3, [pc, #96]	@ (8006fa0 <xTaskRemoveFromEventList+0xb4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	4a16      	ldr	r2, [pc, #88]	@ (8006fa0 <xTaskRemoveFromEventList+0xb4>)
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4a13      	ldr	r2, [pc, #76]	@ (8006fa4 <xTaskRemoveFromEventList+0xb8>)
 8006f56:	441a      	add	r2, r3
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f7fe fd4b 	bl	80059fa <vListInsertEnd>
 8006f64:	e005      	b.n	8006f72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3318      	adds	r3, #24
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	480e      	ldr	r0, [pc, #56]	@ (8006fa8 <xTaskRemoveFromEventList+0xbc>)
 8006f6e:	f7fe fd44 	bl	80059fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f76:	4b0d      	ldr	r3, [pc, #52]	@ (8006fac <xTaskRemoveFromEventList+0xc0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d905      	bls.n	8006f8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f80:	2301      	movs	r3, #1
 8006f82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f84:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb0 <xTaskRemoveFromEventList+0xc4>)
 8006f86:	2201      	movs	r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e001      	b.n	8006f90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f90:	697b      	ldr	r3, [r7, #20]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000838 	.word	0x20000838
 8006fa0:	20000818 	.word	0x20000818
 8006fa4:	20000714 	.word	0x20000714
 8006fa8:	200007d0 	.word	0x200007d0
 8006fac:	20000710 	.word	0x20000710
 8006fb0:	20000824 	.word	0x20000824

08006fb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fbc:	4b06      	ldr	r3, [pc, #24]	@ (8006fd8 <vTaskInternalSetTimeOutState+0x24>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fc4:	4b05      	ldr	r3, [pc, #20]	@ (8006fdc <vTaskInternalSetTimeOutState+0x28>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	605a      	str	r2, [r3, #4]
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	20000828 	.word	0x20000828
 8006fdc:	20000814 	.word	0x20000814

08006fe0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10b      	bne.n	8007008 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	613b      	str	r3, [r7, #16]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10b      	bne.n	8007026 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	60fb      	str	r3, [r7, #12]
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	e7fd      	b.n	8007022 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007026:	f000 fc77 	bl	8007918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800702a:	4b1d      	ldr	r3, [pc, #116]	@ (80070a0 <xTaskCheckForTimeOut+0xc0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d102      	bne.n	800704a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007044:	2300      	movs	r3, #0
 8007046:	61fb      	str	r3, [r7, #28]
 8007048:	e023      	b.n	8007092 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b15      	ldr	r3, [pc, #84]	@ (80070a4 <xTaskCheckForTimeOut+0xc4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d007      	beq.n	8007066 <xTaskCheckForTimeOut+0x86>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	429a      	cmp	r2, r3
 800705e:	d302      	bcc.n	8007066 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007060:	2301      	movs	r3, #1
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	e015      	b.n	8007092 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	429a      	cmp	r2, r3
 800706e:	d20b      	bcs.n	8007088 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7ff ff99 	bl	8006fb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007082:	2300      	movs	r3, #0
 8007084:	61fb      	str	r3, [r7, #28]
 8007086:	e004      	b.n	8007092 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800708e:	2301      	movs	r3, #1
 8007090:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007092:	f000 fc73 	bl	800797c <vPortExitCritical>

	return xReturn;
 8007096:	69fb      	ldr	r3, [r7, #28]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3720      	adds	r7, #32
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20000814 	.word	0x20000814
 80070a4:	20000828 	.word	0x20000828

080070a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070ac:	4b03      	ldr	r3, [pc, #12]	@ (80070bc <vTaskMissedYield+0x14>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
}
 80070b2:	bf00      	nop
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20000824 	.word	0x20000824

080070c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070c8:	f000 f852 	bl	8007170 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <prvIdleTask+0x28>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d9f9      	bls.n	80070c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070d4:	4b05      	ldr	r3, [pc, #20]	@ (80070ec <prvIdleTask+0x2c>)
 80070d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070e4:	e7f0      	b.n	80070c8 <prvIdleTask+0x8>
 80070e6:	bf00      	nop
 80070e8:	20000714 	.word	0x20000714
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070f6:	2300      	movs	r3, #0
 80070f8:	607b      	str	r3, [r7, #4]
 80070fa:	e00c      	b.n	8007116 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4a12      	ldr	r2, [pc, #72]	@ (8007150 <prvInitialiseTaskLists+0x60>)
 8007108:	4413      	add	r3, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fc48 	bl	80059a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3301      	adds	r3, #1
 8007114:	607b      	str	r3, [r7, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b06      	cmp	r3, #6
 800711a:	d9ef      	bls.n	80070fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800711c:	480d      	ldr	r0, [pc, #52]	@ (8007154 <prvInitialiseTaskLists+0x64>)
 800711e:	f7fe fc3f 	bl	80059a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007122:	480d      	ldr	r0, [pc, #52]	@ (8007158 <prvInitialiseTaskLists+0x68>)
 8007124:	f7fe fc3c 	bl	80059a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007128:	480c      	ldr	r0, [pc, #48]	@ (800715c <prvInitialiseTaskLists+0x6c>)
 800712a:	f7fe fc39 	bl	80059a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800712e:	480c      	ldr	r0, [pc, #48]	@ (8007160 <prvInitialiseTaskLists+0x70>)
 8007130:	f7fe fc36 	bl	80059a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007134:	480b      	ldr	r0, [pc, #44]	@ (8007164 <prvInitialiseTaskLists+0x74>)
 8007136:	f7fe fc33 	bl	80059a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800713a:	4b0b      	ldr	r3, [pc, #44]	@ (8007168 <prvInitialiseTaskLists+0x78>)
 800713c:	4a05      	ldr	r2, [pc, #20]	@ (8007154 <prvInitialiseTaskLists+0x64>)
 800713e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007140:	4b0a      	ldr	r3, [pc, #40]	@ (800716c <prvInitialiseTaskLists+0x7c>)
 8007142:	4a05      	ldr	r2, [pc, #20]	@ (8007158 <prvInitialiseTaskLists+0x68>)
 8007144:	601a      	str	r2, [r3, #0]
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000714 	.word	0x20000714
 8007154:	200007a0 	.word	0x200007a0
 8007158:	200007b4 	.word	0x200007b4
 800715c:	200007d0 	.word	0x200007d0
 8007160:	200007e4 	.word	0x200007e4
 8007164:	200007fc 	.word	0x200007fc
 8007168:	200007c8 	.word	0x200007c8
 800716c:	200007cc 	.word	0x200007cc

08007170 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007176:	e019      	b.n	80071ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007178:	f000 fbce 	bl	8007918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800717c:	4b10      	ldr	r3, [pc, #64]	@ (80071c0 <prvCheckTasksWaitingTermination+0x50>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3304      	adds	r3, #4
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fc93 	bl	8005ab4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800718e:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <prvCheckTasksWaitingTermination+0x54>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3b01      	subs	r3, #1
 8007194:	4a0b      	ldr	r2, [pc, #44]	@ (80071c4 <prvCheckTasksWaitingTermination+0x54>)
 8007196:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007198:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <prvCheckTasksWaitingTermination+0x58>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3b01      	subs	r3, #1
 800719e:	4a0a      	ldr	r2, [pc, #40]	@ (80071c8 <prvCheckTasksWaitingTermination+0x58>)
 80071a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071a2:	f000 fbeb 	bl	800797c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f810 	bl	80071cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071ac:	4b06      	ldr	r3, [pc, #24]	@ (80071c8 <prvCheckTasksWaitingTermination+0x58>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e1      	bne.n	8007178 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200007e4 	.word	0x200007e4
 80071c4:	20000810 	.word	0x20000810
 80071c8:	200007f8 	.word	0x200007f8

080071cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d108      	bne.n	80071f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fd88 	bl	8007cf8 <vPortFree>
				vPortFree( pxTCB );
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fd85 	bl	8007cf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071ee:	e019      	b.n	8007224 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d103      	bne.n	8007202 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fd7c 	bl	8007cf8 <vPortFree>
	}
 8007200:	e010      	b.n	8007224 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007208:	2b02      	cmp	r3, #2
 800720a:	d00b      	beq.n	8007224 <prvDeleteTCB+0x58>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60fb      	str	r3, [r7, #12]
}
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	e7fd      	b.n	8007220 <prvDeleteTCB+0x54>
	}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007232:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <prvResetNextTaskUnblockTime+0x38>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800723c:	4b0a      	ldr	r3, [pc, #40]	@ (8007268 <prvResetNextTaskUnblockTime+0x3c>)
 800723e:	f04f 32ff 	mov.w	r2, #4294967295
 8007242:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007244:	e008      	b.n	8007258 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007246:	4b07      	ldr	r3, [pc, #28]	@ (8007264 <prvResetNextTaskUnblockTime+0x38>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	4a04      	ldr	r2, [pc, #16]	@ (8007268 <prvResetNextTaskUnblockTime+0x3c>)
 8007256:	6013      	str	r3, [r2, #0]
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	200007c8 	.word	0x200007c8
 8007268:	20000830 	.word	0x20000830

0800726c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007272:	4b0b      	ldr	r3, [pc, #44]	@ (80072a0 <xTaskGetSchedulerState+0x34>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d102      	bne.n	8007280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800727a:	2301      	movs	r3, #1
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	e008      	b.n	8007292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007280:	4b08      	ldr	r3, [pc, #32]	@ (80072a4 <xTaskGetSchedulerState+0x38>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d102      	bne.n	800728e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007288:	2302      	movs	r3, #2
 800728a:	607b      	str	r3, [r7, #4]
 800728c:	e001      	b.n	8007292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800728e:	2300      	movs	r3, #0
 8007290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007292:	687b      	ldr	r3, [r7, #4]
	}
 8007294:	4618      	mov	r0, r3
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	2000081c 	.word	0x2000081c
 80072a4:	20000838 	.word	0x20000838

080072a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d05e      	beq.n	800737c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c2:	4b31      	ldr	r3, [pc, #196]	@ (8007388 <xTaskPriorityInherit+0xe0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d24e      	bcs.n	800736a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	db06      	blt.n	80072e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d4:	4b2c      	ldr	r3, [pc, #176]	@ (8007388 <xTaskPriorityInherit+0xe0>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	f1c3 0207 	rsb	r2, r3, #7
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6959      	ldr	r1, [r3, #20]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4a26      	ldr	r2, [pc, #152]	@ (800738c <xTaskPriorityInherit+0xe4>)
 80072f4:	4413      	add	r3, r2
 80072f6:	4299      	cmp	r1, r3
 80072f8:	d12f      	bne.n	800735a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fbd8 	bl	8005ab4 <uxListRemove>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730e:	2201      	movs	r2, #1
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	43da      	mvns	r2, r3
 8007316:	4b1e      	ldr	r3, [pc, #120]	@ (8007390 <xTaskPriorityInherit+0xe8>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4013      	ands	r3, r2
 800731c:	4a1c      	ldr	r2, [pc, #112]	@ (8007390 <xTaskPriorityInherit+0xe8>)
 800731e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007320:	4b19      	ldr	r3, [pc, #100]	@ (8007388 <xTaskPriorityInherit+0xe0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	2201      	movs	r2, #1
 8007330:	409a      	lsls	r2, r3
 8007332:	4b17      	ldr	r3, [pc, #92]	@ (8007390 <xTaskPriorityInherit+0xe8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4313      	orrs	r3, r2
 8007338:	4a15      	ldr	r2, [pc, #84]	@ (8007390 <xTaskPriorityInherit+0xe8>)
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4a10      	ldr	r2, [pc, #64]	@ (800738c <xTaskPriorityInherit+0xe4>)
 800734a:	441a      	add	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	3304      	adds	r3, #4
 8007350:	4619      	mov	r1, r3
 8007352:	4610      	mov	r0, r2
 8007354:	f7fe fb51 	bl	80059fa <vListInsertEnd>
 8007358:	e004      	b.n	8007364 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800735a:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <xTaskPriorityInherit+0xe0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	e008      	b.n	800737c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800736e:	4b06      	ldr	r3, [pc, #24]	@ (8007388 <xTaskPriorityInherit+0xe0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007374:	429a      	cmp	r2, r3
 8007376:	d201      	bcs.n	800737c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800737c:	68fb      	ldr	r3, [r7, #12]
	}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000710 	.word	0x20000710
 800738c:	20000714 	.word	0x20000714
 8007390:	20000818 	.word	0x20000818

08007394 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d070      	beq.n	800748c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007498 <xTaskPriorityDisinherit+0x104>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d00b      	beq.n	80073cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	60fb      	str	r3, [r7, #12]
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	e7fd      	b.n	80073c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10b      	bne.n	80073ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60bb      	str	r3, [r7, #8]
}
 80073e6:	bf00      	nop
 80073e8:	bf00      	nop
 80073ea:	e7fd      	b.n	80073e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073f0:	1e5a      	subs	r2, r3, #1
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fe:	429a      	cmp	r2, r3
 8007400:	d044      	beq.n	800748c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007406:	2b00      	cmp	r3, #0
 8007408:	d140      	bne.n	800748c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3304      	adds	r3, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fb50 	bl	8005ab4 <uxListRemove>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d115      	bne.n	8007446 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741e:	491f      	ldr	r1, [pc, #124]	@ (800749c <xTaskPriorityDisinherit+0x108>)
 8007420:	4613      	mov	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskPriorityDisinherit+0xb2>
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	2201      	movs	r2, #1
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	43da      	mvns	r2, r3
 800743c:	4b18      	ldr	r3, [pc, #96]	@ (80074a0 <xTaskPriorityDisinherit+0x10c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4013      	ands	r3, r2
 8007442:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <xTaskPriorityDisinherit+0x10c>)
 8007444:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	f1c3 0207 	rsb	r2, r3, #7
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	2201      	movs	r2, #1
 8007460:	409a      	lsls	r2, r3
 8007462:	4b0f      	ldr	r3, [pc, #60]	@ (80074a0 <xTaskPriorityDisinherit+0x10c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4313      	orrs	r3, r2
 8007468:	4a0d      	ldr	r2, [pc, #52]	@ (80074a0 <xTaskPriorityDisinherit+0x10c>)
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4a08      	ldr	r2, [pc, #32]	@ (800749c <xTaskPriorityDisinherit+0x108>)
 800747a:	441a      	add	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f7fe fab9 	bl	80059fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800748c:	697b      	ldr	r3, [r7, #20]
	}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000710 	.word	0x20000710
 800749c:	20000714 	.word	0x20000714
 80074a0:	20000818 	.word	0x20000818

080074a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074b2:	2301      	movs	r3, #1
 80074b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d079      	beq.n	80075b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10b      	bne.n	80074dc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	60fb      	str	r3, [r7, #12]
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	e7fd      	b.n	80074d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d902      	bls.n	80074ec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	e002      	b.n	80074f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d059      	beq.n	80075b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	429a      	cmp	r2, r3
 8007504:	d154      	bne.n	80075b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007506:	4b2c      	ldr	r3, [pc, #176]	@ (80075b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	429a      	cmp	r2, r3
 800750e:	d10b      	bne.n	8007528 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	60bb      	str	r3, [r7, #8]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	db04      	blt.n	8007546 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f1c3 0207 	rsb	r2, r3, #7
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	6959      	ldr	r1, [r3, #20]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a19      	ldr	r2, [pc, #100]	@ (80075bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007556:	4413      	add	r3, r2
 8007558:	4299      	cmp	r1, r3
 800755a:	d129      	bne.n	80075b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe faa7 	bl	8005ab4 <uxListRemove>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007570:	2201      	movs	r2, #1
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	43da      	mvns	r2, r3
 8007578:	4b11      	ldr	r3, [pc, #68]	@ (80075c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4013      	ands	r3, r2
 800757e:	4a10      	ldr	r2, [pc, #64]	@ (80075c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007580:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	2201      	movs	r2, #1
 8007588:	409a      	lsls	r2, r3
 800758a:	4b0d      	ldr	r3, [pc, #52]	@ (80075c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4313      	orrs	r3, r2
 8007590:	4a0b      	ldr	r2, [pc, #44]	@ (80075c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4a06      	ldr	r2, [pc, #24]	@ (80075bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075a2:	441a      	add	r2, r3
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f7fe fa25 	bl	80059fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075b0:	bf00      	nop
 80075b2:	3720      	adds	r7, #32
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20000710 	.word	0x20000710
 80075bc:	20000714 	.word	0x20000714
 80075c0:	20000818 	.word	0x20000818

080075c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075c8:	4b07      	ldr	r3, [pc, #28]	@ (80075e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075d0:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075d6:	3201      	adds	r2, #1
 80075d8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80075da:	4b03      	ldr	r3, [pc, #12]	@ (80075e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80075dc:	681b      	ldr	r3, [r3, #0]
	}
 80075de:	4618      	mov	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	20000710 	.word	0x20000710

080075ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075f6:	4b29      	ldr	r3, [pc, #164]	@ (800769c <prvAddCurrentTaskToDelayedList+0xb0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075fc:	4b28      	ldr	r3, [pc, #160]	@ (80076a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3304      	adds	r3, #4
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fa56 	bl	8005ab4 <uxListRemove>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10b      	bne.n	8007626 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800760e:	4b24      	ldr	r3, [pc, #144]	@ (80076a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	2201      	movs	r2, #1
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	43da      	mvns	r2, r3
 800761c:	4b21      	ldr	r3, [pc, #132]	@ (80076a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4013      	ands	r3, r2
 8007622:	4a20      	ldr	r2, [pc, #128]	@ (80076a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007624:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d10a      	bne.n	8007644 <prvAddCurrentTaskToDelayedList+0x58>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007634:	4b1a      	ldr	r3, [pc, #104]	@ (80076a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3304      	adds	r3, #4
 800763a:	4619      	mov	r1, r3
 800763c:	481a      	ldr	r0, [pc, #104]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800763e:	f7fe f9dc 	bl	80059fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007642:	e026      	b.n	8007692 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4413      	add	r3, r2
 800764a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800764c:	4b14      	ldr	r3, [pc, #80]	@ (80076a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	429a      	cmp	r2, r3
 800765a:	d209      	bcs.n	8007670 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800765c:	4b13      	ldr	r3, [pc, #76]	@ (80076ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3304      	adds	r3, #4
 8007666:	4619      	mov	r1, r3
 8007668:	4610      	mov	r0, r2
 800766a:	f7fe f9ea 	bl	8005a42 <vListInsert>
}
 800766e:	e010      	b.n	8007692 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007670:	4b0f      	ldr	r3, [pc, #60]	@ (80076b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	4b0a      	ldr	r3, [pc, #40]	@ (80076a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3304      	adds	r3, #4
 800767a:	4619      	mov	r1, r3
 800767c:	4610      	mov	r0, r2
 800767e:	f7fe f9e0 	bl	8005a42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007682:	4b0c      	ldr	r3, [pc, #48]	@ (80076b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	429a      	cmp	r2, r3
 800768a:	d202      	bcs.n	8007692 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800768c:	4a09      	ldr	r2, [pc, #36]	@ (80076b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	6013      	str	r3, [r2, #0]
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000814 	.word	0x20000814
 80076a0:	20000710 	.word	0x20000710
 80076a4:	20000818 	.word	0x20000818
 80076a8:	200007fc 	.word	0x200007fc
 80076ac:	200007cc 	.word	0x200007cc
 80076b0:	200007c8 	.word	0x200007c8
 80076b4:	20000830 	.word	0x20000830

080076b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3b04      	subs	r3, #4
 80076c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	f023 0201 	bic.w	r2, r3, #1
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3b04      	subs	r3, #4
 80076e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076e8:	4a0c      	ldr	r2, [pc, #48]	@ (800771c <pxPortInitialiseStack+0x64>)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3b14      	subs	r3, #20
 80076f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3b04      	subs	r3, #4
 80076fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f06f 0202 	mvn.w	r2, #2
 8007706:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3b20      	subs	r3, #32
 800770c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800770e:	68fb      	ldr	r3, [r7, #12]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	08007721 	.word	0x08007721

08007720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800772a:	4b13      	ldr	r3, [pc, #76]	@ (8007778 <prvTaskExitError+0x58>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007732:	d00b      	beq.n	800774c <prvTaskExitError+0x2c>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	60fb      	str	r3, [r7, #12]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <prvTaskExitError+0x28>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	60bb      	str	r3, [r7, #8]
}
 800775e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007760:	bf00      	nop
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0fc      	beq.n	8007762 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20000010 	.word	0x20000010
 800777c:	00000000 	.word	0x00000000

08007780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007780:	4b07      	ldr	r3, [pc, #28]	@ (80077a0 <pxCurrentTCBConst2>)
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	6808      	ldr	r0, [r1, #0]
 8007786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778a:	f380 8809 	msr	PSP, r0
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8811 	msr	BASEPRI, r0
 800779a:	4770      	bx	lr
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst2>:
 80077a0:	20000710 	.word	0x20000710
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop

080077a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077a8:	4808      	ldr	r0, [pc, #32]	@ (80077cc <prvPortStartFirstTask+0x24>)
 80077aa:	6800      	ldr	r0, [r0, #0]
 80077ac:	6800      	ldr	r0, [r0, #0]
 80077ae:	f380 8808 	msr	MSP, r0
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8814 	msr	CONTROL, r0
 80077ba:	b662      	cpsie	i
 80077bc:	b661      	cpsie	f
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	df00      	svc	0
 80077c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ca:	bf00      	nop
 80077cc:	e000ed08 	.word	0xe000ed08

080077d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077d6:	4b47      	ldr	r3, [pc, #284]	@ (80078f4 <xPortStartScheduler+0x124>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a47      	ldr	r2, [pc, #284]	@ (80078f8 <xPortStartScheduler+0x128>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10b      	bne.n	80077f8 <xPortStartScheduler+0x28>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077f8:	4b3e      	ldr	r3, [pc, #248]	@ (80078f4 <xPortStartScheduler+0x124>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a3f      	ldr	r2, [pc, #252]	@ (80078fc <xPortStartScheduler+0x12c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10b      	bne.n	800781a <xPortStartScheduler+0x4a>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60fb      	str	r3, [r7, #12]
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	e7fd      	b.n	8007816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800781a:	4b39      	ldr	r3, [pc, #228]	@ (8007900 <xPortStartScheduler+0x130>)
 800781c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	22ff      	movs	r2, #255	@ 0xff
 800782a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800783c:	b2da      	uxtb	r2, r3
 800783e:	4b31      	ldr	r3, [pc, #196]	@ (8007904 <xPortStartScheduler+0x134>)
 8007840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007842:	4b31      	ldr	r3, [pc, #196]	@ (8007908 <xPortStartScheduler+0x138>)
 8007844:	2207      	movs	r2, #7
 8007846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007848:	e009      	b.n	800785e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800784a:	4b2f      	ldr	r3, [pc, #188]	@ (8007908 <xPortStartScheduler+0x138>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3b01      	subs	r3, #1
 8007850:	4a2d      	ldr	r2, [pc, #180]	@ (8007908 <xPortStartScheduler+0x138>)
 8007852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	b2db      	uxtb	r3, r3
 800785c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007866:	2b80      	cmp	r3, #128	@ 0x80
 8007868:	d0ef      	beq.n	800784a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800786a:	4b27      	ldr	r3, [pc, #156]	@ (8007908 <xPortStartScheduler+0x138>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f1c3 0307 	rsb	r3, r3, #7
 8007872:	2b04      	cmp	r3, #4
 8007874:	d00b      	beq.n	800788e <xPortStartScheduler+0xbe>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60bb      	str	r3, [r7, #8]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800788e:	4b1e      	ldr	r3, [pc, #120]	@ (8007908 <xPortStartScheduler+0x138>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	4a1c      	ldr	r2, [pc, #112]	@ (8007908 <xPortStartScheduler+0x138>)
 8007896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007898:	4b1b      	ldr	r3, [pc, #108]	@ (8007908 <xPortStartScheduler+0x138>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078a0:	4a19      	ldr	r2, [pc, #100]	@ (8007908 <xPortStartScheduler+0x138>)
 80078a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078ac:	4b17      	ldr	r3, [pc, #92]	@ (800790c <xPortStartScheduler+0x13c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a16      	ldr	r2, [pc, #88]	@ (800790c <xPortStartScheduler+0x13c>)
 80078b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078b8:	4b14      	ldr	r3, [pc, #80]	@ (800790c <xPortStartScheduler+0x13c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a13      	ldr	r2, [pc, #76]	@ (800790c <xPortStartScheduler+0x13c>)
 80078be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078c4:	f000 f8da 	bl	8007a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078c8:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <xPortStartScheduler+0x140>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078ce:	f000 f8f9 	bl	8007ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078d2:	4b10      	ldr	r3, [pc, #64]	@ (8007914 <xPortStartScheduler+0x144>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007914 <xPortStartScheduler+0x144>)
 80078d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078de:	f7ff ff63 	bl	80077a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078e2:	f7ff fa81 	bl	8006de8 <vTaskSwitchContext>
	prvTaskExitError();
 80078e6:	f7ff ff1b 	bl	8007720 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	e000ed00 	.word	0xe000ed00
 80078f8:	410fc271 	.word	0x410fc271
 80078fc:	410fc270 	.word	0x410fc270
 8007900:	e000e400 	.word	0xe000e400
 8007904:	2000083c 	.word	0x2000083c
 8007908:	20000840 	.word	0x20000840
 800790c:	e000ed20 	.word	0xe000ed20
 8007910:	20000010 	.word	0x20000010
 8007914:	e000ef34 	.word	0xe000ef34

08007918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
}
 8007930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007932:	4b10      	ldr	r3, [pc, #64]	@ (8007974 <vPortEnterCritical+0x5c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	4a0e      	ldr	r2, [pc, #56]	@ (8007974 <vPortEnterCritical+0x5c>)
 800793a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800793c:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <vPortEnterCritical+0x5c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d110      	bne.n	8007966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007944:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <vPortEnterCritical+0x60>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00b      	beq.n	8007966 <vPortEnterCritical+0x4e>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	603b      	str	r3, [r7, #0]
}
 8007960:	bf00      	nop
 8007962:	bf00      	nop
 8007964:	e7fd      	b.n	8007962 <vPortEnterCritical+0x4a>
	}
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20000010 	.word	0x20000010
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007982:	4b12      	ldr	r3, [pc, #72]	@ (80079cc <vPortExitCritical+0x50>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <vPortExitCritical+0x26>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	607b      	str	r3, [r7, #4]
}
 800799c:	bf00      	nop
 800799e:	bf00      	nop
 80079a0:	e7fd      	b.n	800799e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079a2:	4b0a      	ldr	r3, [pc, #40]	@ (80079cc <vPortExitCritical+0x50>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	4a08      	ldr	r2, [pc, #32]	@ (80079cc <vPortExitCritical+0x50>)
 80079aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079ac:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <vPortExitCritical+0x50>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <vPortExitCritical+0x44>
 80079b4:	2300      	movs	r3, #0
 80079b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	f383 8811 	msr	BASEPRI, r3
}
 80079be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	20000010 	.word	0x20000010

080079d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079d0:	f3ef 8009 	mrs	r0, PSP
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	4b15      	ldr	r3, [pc, #84]	@ (8007a30 <pxCurrentTCBConst>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	f01e 0f10 	tst.w	lr, #16
 80079e0:	bf08      	it	eq
 80079e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	6010      	str	r0, [r2, #0]
 80079ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80079f4:	f380 8811 	msr	BASEPRI, r0
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f7ff f9f2 	bl	8006de8 <vTaskSwitchContext>
 8007a04:	f04f 0000 	mov.w	r0, #0
 8007a08:	f380 8811 	msr	BASEPRI, r0
 8007a0c:	bc09      	pop	{r0, r3}
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	6808      	ldr	r0, [r1, #0]
 8007a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a16:	f01e 0f10 	tst.w	lr, #16
 8007a1a:	bf08      	it	eq
 8007a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a20:	f380 8809 	msr	PSP, r0
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w

08007a30 <pxCurrentTCBConst>:
 8007a30:	20000710 	.word	0x20000710
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop

08007a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	607b      	str	r3, [r7, #4]
}
 8007a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a52:	f7ff f90f 	bl	8006c74 <xTaskIncrementTick>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a5c:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <xPortSysTickHandler+0x40>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	2300      	movs	r3, #0
 8007a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f383 8811 	msr	BASEPRI, r3
}
 8007a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a80:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a86:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab4 <vPortSetupTimerInterrupt+0x38>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab8 <vPortSetupTimerInterrupt+0x3c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a0a      	ldr	r2, [pc, #40]	@ (8007abc <vPortSetupTimerInterrupt+0x40>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	099b      	lsrs	r3, r3, #6
 8007a98:	4a09      	ldr	r2, [pc, #36]	@ (8007ac0 <vPortSetupTimerInterrupt+0x44>)
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a9e:	4b04      	ldr	r3, [pc, #16]	@ (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007aa0:	2207      	movs	r2, #7
 8007aa2:	601a      	str	r2, [r3, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	e000e010 	.word	0xe000e010
 8007ab4:	e000e018 	.word	0xe000e018
 8007ab8:	20000004 	.word	0x20000004
 8007abc:	10624dd3 	.word	0x10624dd3
 8007ac0:	e000e014 	.word	0xe000e014

08007ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ad4 <vPortEnableVFP+0x10>
 8007ac8:	6801      	ldr	r1, [r0, #0]
 8007aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ace:	6001      	str	r1, [r0, #0]
 8007ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed88 	.word	0xe000ed88

08007ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ade:	f3ef 8305 	mrs	r3, IPSR
 8007ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	d915      	bls.n	8007b16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aea:	4a18      	ldr	r2, [pc, #96]	@ (8007b4c <vPortValidateInterruptPriority+0x74>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007af4:	4b16      	ldr	r3, [pc, #88]	@ (8007b50 <vPortValidateInterruptPriority+0x78>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	7afa      	ldrb	r2, [r7, #11]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d20b      	bcs.n	8007b16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	607b      	str	r3, [r7, #4]
}
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
 8007b14:	e7fd      	b.n	8007b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <vPortValidateInterruptPriority+0x7c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b58 <vPortValidateInterruptPriority+0x80>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d90b      	bls.n	8007b3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	603b      	str	r3, [r7, #0]
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <vPortValidateInterruptPriority+0x62>
	}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	e000e3f0 	.word	0xe000e3f0
 8007b50:	2000083c 	.word	0x2000083c
 8007b54:	e000ed0c 	.word	0xe000ed0c
 8007b58:	20000840 	.word	0x20000840

08007b5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08a      	sub	sp, #40	@ 0x28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b68:	f7fe ffd8 	bl	8006b1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ce0 <pvPortMalloc+0x184>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b74:	f000 f924 	bl	8007dc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b78:	4b5a      	ldr	r3, [pc, #360]	@ (8007ce4 <pvPortMalloc+0x188>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f040 8095 	bne.w	8007cb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01e      	beq.n	8007bca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4413      	add	r3, r2
 8007b92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d015      	beq.n	8007bca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f023 0307 	bic.w	r3, r3, #7
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00b      	beq.n	8007bca <pvPortMalloc+0x6e>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	617b      	str	r3, [r7, #20]
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	e7fd      	b.n	8007bc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d06f      	beq.n	8007cb0 <pvPortMalloc+0x154>
 8007bd0:	4b45      	ldr	r3, [pc, #276]	@ (8007ce8 <pvPortMalloc+0x18c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d86a      	bhi.n	8007cb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bda:	4b44      	ldr	r3, [pc, #272]	@ (8007cec <pvPortMalloc+0x190>)
 8007bdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bde:	4b43      	ldr	r3, [pc, #268]	@ (8007cec <pvPortMalloc+0x190>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007be4:	e004      	b.n	8007bf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d903      	bls.n	8007c02 <pvPortMalloc+0xa6>
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f1      	bne.n	8007be6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c02:	4b37      	ldr	r3, [pc, #220]	@ (8007ce0 <pvPortMalloc+0x184>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d051      	beq.n	8007cb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2208      	movs	r2, #8
 8007c12:	4413      	add	r3, r2
 8007c14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	1ad2      	subs	r2, r2, r3
 8007c26:	2308      	movs	r3, #8
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d920      	bls.n	8007c70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4413      	add	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <pvPortMalloc+0xfc>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	613b      	str	r3, [r7, #16]
}
 8007c52:	bf00      	nop
 8007c54:	bf00      	nop
 8007c56:	e7fd      	b.n	8007c54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c6a:	69b8      	ldr	r0, [r7, #24]
 8007c6c:	f000 f90a 	bl	8007e84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce8 <pvPortMalloc+0x18c>)
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce8 <pvPortMalloc+0x18c>)
 8007c7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce8 <pvPortMalloc+0x18c>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf0 <pvPortMalloc+0x194>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d203      	bcs.n	8007c92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c8a:	4b17      	ldr	r3, [pc, #92]	@ (8007ce8 <pvPortMalloc+0x18c>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a18      	ldr	r2, [pc, #96]	@ (8007cf0 <pvPortMalloc+0x194>)
 8007c90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	4b13      	ldr	r3, [pc, #76]	@ (8007ce4 <pvPortMalloc+0x188>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ca6:	4b13      	ldr	r3, [pc, #76]	@ (8007cf4 <pvPortMalloc+0x198>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3301      	adds	r3, #1
 8007cac:	4a11      	ldr	r2, [pc, #68]	@ (8007cf4 <pvPortMalloc+0x198>)
 8007cae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cb0:	f7fe ff42 	bl	8006b38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <pvPortMalloc+0x17a>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	60fb      	str	r3, [r7, #12]
}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	e7fd      	b.n	8007cd2 <pvPortMalloc+0x176>
	return pvReturn;
 8007cd6:	69fb      	ldr	r3, [r7, #28]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3728      	adds	r7, #40	@ 0x28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	2000444c 	.word	0x2000444c
 8007ce4:	20004460 	.word	0x20004460
 8007ce8:	20004450 	.word	0x20004450
 8007cec:	20004444 	.word	0x20004444
 8007cf0:	20004454 	.word	0x20004454
 8007cf4:	20004458 	.word	0x20004458

08007cf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d04f      	beq.n	8007daa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d0a:	2308      	movs	r3, #8
 8007d0c:	425b      	negs	r3, r3
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	4413      	add	r3, r2
 8007d12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	4b25      	ldr	r3, [pc, #148]	@ (8007db4 <vPortFree+0xbc>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <vPortFree+0x46>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60fb      	str	r3, [r7, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00b      	beq.n	8007d5e <vPortFree+0x66>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60bb      	str	r3, [r7, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	e7fd      	b.n	8007d5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	4b14      	ldr	r3, [pc, #80]	@ (8007db4 <vPortFree+0xbc>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01e      	beq.n	8007daa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d11a      	bne.n	8007daa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	4b0e      	ldr	r3, [pc, #56]	@ (8007db4 <vPortFree+0xbc>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	43db      	mvns	r3, r3
 8007d7e:	401a      	ands	r2, r3
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d84:	f7fe feca 	bl	8006b1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007db8 <vPortFree+0xc0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4413      	add	r3, r2
 8007d92:	4a09      	ldr	r2, [pc, #36]	@ (8007db8 <vPortFree+0xc0>)
 8007d94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d96:	6938      	ldr	r0, [r7, #16]
 8007d98:	f000 f874 	bl	8007e84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d9c:	4b07      	ldr	r3, [pc, #28]	@ (8007dbc <vPortFree+0xc4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3301      	adds	r3, #1
 8007da2:	4a06      	ldr	r2, [pc, #24]	@ (8007dbc <vPortFree+0xc4>)
 8007da4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007da6:	f7fe fec7 	bl	8006b38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007daa:	bf00      	nop
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20004460 	.word	0x20004460
 8007db8:	20004450 	.word	0x20004450
 8007dbc:	2000445c 	.word	0x2000445c

08007dc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dc6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dcc:	4b27      	ldr	r3, [pc, #156]	@ (8007e6c <prvHeapInit+0xac>)
 8007dce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00c      	beq.n	8007df4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3307      	adds	r3, #7
 8007dde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0307 	bic.w	r3, r3, #7
 8007de6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	4a1f      	ldr	r2, [pc, #124]	@ (8007e6c <prvHeapInit+0xac>)
 8007df0:	4413      	add	r3, r2
 8007df2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007df8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e70 <prvHeapInit+0xb0>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8007e70 <prvHeapInit+0xb0>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	4413      	add	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1a9b      	subs	r3, r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4a15      	ldr	r2, [pc, #84]	@ (8007e74 <prvHeapInit+0xb4>)
 8007e20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e22:	4b14      	ldr	r3, [pc, #80]	@ (8007e74 <prvHeapInit+0xb4>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e2a:	4b12      	ldr	r3, [pc, #72]	@ (8007e74 <prvHeapInit+0xb4>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	1ad2      	subs	r2, r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e40:	4b0c      	ldr	r3, [pc, #48]	@ (8007e74 <prvHeapInit+0xb4>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e78 <prvHeapInit+0xb8>)
 8007e4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4a09      	ldr	r2, [pc, #36]	@ (8007e7c <prvHeapInit+0xbc>)
 8007e56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e58:	4b09      	ldr	r3, [pc, #36]	@ (8007e80 <prvHeapInit+0xc0>)
 8007e5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e5e:	601a      	str	r2, [r3, #0]
}
 8007e60:	bf00      	nop
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	20000844 	.word	0x20000844
 8007e70:	20004444 	.word	0x20004444
 8007e74:	2000444c 	.word	0x2000444c
 8007e78:	20004454 	.word	0x20004454
 8007e7c:	20004450 	.word	0x20004450
 8007e80:	20004460 	.word	0x20004460

08007e84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e8c:	4b28      	ldr	r3, [pc, #160]	@ (8007f30 <prvInsertBlockIntoFreeList+0xac>)
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	e002      	b.n	8007e98 <prvInsertBlockIntoFreeList+0x14>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d8f7      	bhi.n	8007e92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	4413      	add	r3, r2
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d108      	bne.n	8007ec6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	441a      	add	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d118      	bne.n	8007f0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4b15      	ldr	r3, [pc, #84]	@ (8007f34 <prvInsertBlockIntoFreeList+0xb0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d00d      	beq.n	8007f02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	441a      	add	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	e008      	b.n	8007f14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f02:	4b0c      	ldr	r3, [pc, #48]	@ (8007f34 <prvInsertBlockIntoFreeList+0xb0>)
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	e003      	b.n	8007f14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d002      	beq.n	8007f22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	20004444 	.word	0x20004444
 8007f34:	2000444c 	.word	0x2000444c

08007f38 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8007f3e:	2300      	movs	r3, #0
 8007f40:	71fb      	strb	r3, [r7, #7]
 8007f42:	e026      	b.n	8007f92 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	3b50      	subs	r3, #80	@ 0x50
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 f82b 	bl	8007fa8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8007f52:	2100      	movs	r1, #0
 8007f54:	2000      	movs	r0, #0
 8007f56:	f000 f827 	bl	8007fa8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	2010      	movs	r0, #16
 8007f5e:	f000 f823 	bl	8007fa8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8007f62:	2300      	movs	r3, #0
 8007f64:	71bb      	strb	r3, [r7, #6]
 8007f66:	e00d      	b.n	8007f84 <OLED_Refresh_Gram+0x4c>
 8007f68:	79ba      	ldrb	r2, [r7, #6]
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	490d      	ldr	r1, [pc, #52]	@ (8007fa4 <OLED_Refresh_Gram+0x6c>)
 8007f6e:	00d2      	lsls	r2, r2, #3
 8007f70:	440a      	add	r2, r1
 8007f72:	4413      	add	r3, r2
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2101      	movs	r1, #1
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 f815 	bl	8007fa8 <OLED_WR_Byte>
 8007f7e:	79bb      	ldrb	r3, [r7, #6]
 8007f80:	3301      	adds	r3, #1
 8007f82:	71bb      	strb	r3, [r7, #6]
 8007f84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	daed      	bge.n	8007f68 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8007f8c:	79fb      	ldrb	r3, [r7, #7]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	71fb      	strb	r3, [r7, #7]
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	2b07      	cmp	r3, #7
 8007f96:	d9d5      	bls.n	8007f44 <OLED_Refresh_Gram+0xc>
	}   
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20004464 	.word	0x20004464

08007fa8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	460a      	mov	r2, r1
 8007fb2:	71fb      	strb	r3, [r7, #7]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8007fb8:	79bb      	ldrb	r3, [r7, #6]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d006      	beq.n	8007fcc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007fc4:	481c      	ldr	r0, [pc, #112]	@ (8008038 <OLED_WR_Byte+0x90>)
 8007fc6:	f7fa fe3d 	bl	8002c44 <HAL_GPIO_WritePin>
 8007fca:	e005      	b.n	8007fd8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007fd2:	4819      	ldr	r0, [pc, #100]	@ (8008038 <OLED_WR_Byte+0x90>)
 8007fd4:	f7fa fe36 	bl	8002c44 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
 8007fdc:	e01e      	b.n	800801c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2120      	movs	r1, #32
 8007fe2:	4815      	ldr	r0, [pc, #84]	@ (8008038 <OLED_WR_Byte+0x90>)
 8007fe4:	f7fa fe2e 	bl	8002c44 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8007fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	da05      	bge.n	8007ffc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	2140      	movs	r1, #64	@ 0x40
 8007ff4:	4810      	ldr	r0, [pc, #64]	@ (8008038 <OLED_WR_Byte+0x90>)
 8007ff6:	f7fa fe25 	bl	8002c44 <HAL_GPIO_WritePin>
 8007ffa:	e004      	b.n	8008006 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2140      	movs	r1, #64	@ 0x40
 8008000:	480d      	ldr	r0, [pc, #52]	@ (8008038 <OLED_WR_Byte+0x90>)
 8008002:	f7fa fe1f 	bl	8002c44 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8008006:	2201      	movs	r2, #1
 8008008:	2120      	movs	r1, #32
 800800a:	480b      	ldr	r0, [pc, #44]	@ (8008038 <OLED_WR_Byte+0x90>)
 800800c:	f7fa fe1a 	bl	8002c44 <HAL_GPIO_WritePin>
		dat<<=1;   
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	3301      	adds	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	2b07      	cmp	r3, #7
 8008020:	d9dd      	bls.n	8007fde <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8008022:	2201      	movs	r2, #1
 8008024:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008028:	4803      	ldr	r0, [pc, #12]	@ (8008038 <OLED_WR_Byte+0x90>)
 800802a:	f7fa fe0b 	bl	8002c44 <HAL_GPIO_WritePin>
} 
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40021000 	.word	0x40021000

0800803c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008042:	2300      	movs	r3, #0
 8008044:	71fb      	strb	r3, [r7, #7]
 8008046:	e014      	b.n	8008072 <OLED_Clear+0x36>
 8008048:	2300      	movs	r3, #0
 800804a:	71bb      	strb	r3, [r7, #6]
 800804c:	e00a      	b.n	8008064 <OLED_Clear+0x28>
 800804e:	79ba      	ldrb	r2, [r7, #6]
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	490c      	ldr	r1, [pc, #48]	@ (8008084 <OLED_Clear+0x48>)
 8008054:	00d2      	lsls	r2, r2, #3
 8008056:	440a      	add	r2, r1
 8008058:	4413      	add	r3, r2
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	79bb      	ldrb	r3, [r7, #6]
 8008060:	3301      	adds	r3, #1
 8008062:	71bb      	strb	r3, [r7, #6]
 8008064:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008068:	2b00      	cmp	r3, #0
 800806a:	daf0      	bge.n	800804e <OLED_Clear+0x12>
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	3301      	adds	r3, #1
 8008070:	71fb      	strb	r3, [r7, #7]
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	2b07      	cmp	r3, #7
 8008076:	d9e7      	bls.n	8008048 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8008078:	f7ff ff5e 	bl	8007f38 <OLED_Refresh_Gram>
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20004464 	.word	0x20004464

08008088 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	71fb      	strb	r3, [r7, #7]
 8008092:	460b      	mov	r3, r1
 8008094:	71bb      	strb	r3, [r7, #6]
 8008096:	4613      	mov	r3, r2
 8008098:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800809e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	db41      	blt.n	800812a <OLED_DrawPoint+0xa2>
 80080a6:	79bb      	ldrb	r3, [r7, #6]
 80080a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80080aa:	d83e      	bhi.n	800812a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80080ac:	79bb      	ldrb	r3, [r7, #6]
 80080ae:	08db      	lsrs	r3, r3, #3
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	f1c3 0307 	rsb	r3, r3, #7
 80080b6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80080b8:	79bb      	ldrb	r3, [r7, #6]
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80080c0:	7b7b      	ldrb	r3, [r7, #13]
 80080c2:	f1c3 0307 	rsb	r3, r3, #7
 80080c6:	2201      	movs	r2, #1
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80080ce:	797b      	ldrb	r3, [r7, #5]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d012      	beq.n	80080fa <OLED_DrawPoint+0x72>
 80080d4:	79fa      	ldrb	r2, [r7, #7]
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	4917      	ldr	r1, [pc, #92]	@ (8008138 <OLED_DrawPoint+0xb0>)
 80080da:	00d2      	lsls	r2, r2, #3
 80080dc:	440a      	add	r2, r1
 80080de:	4413      	add	r3, r2
 80080e0:	7818      	ldrb	r0, [r3, #0]
 80080e2:	79fa      	ldrb	r2, [r7, #7]
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	7bf9      	ldrb	r1, [r7, #15]
 80080e8:	4301      	orrs	r1, r0
 80080ea:	b2c8      	uxtb	r0, r1
 80080ec:	4912      	ldr	r1, [pc, #72]	@ (8008138 <OLED_DrawPoint+0xb0>)
 80080ee:	00d2      	lsls	r2, r2, #3
 80080f0:	440a      	add	r2, r1
 80080f2:	4413      	add	r3, r2
 80080f4:	4602      	mov	r2, r0
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	e018      	b.n	800812c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80080fa:	79fa      	ldrb	r2, [r7, #7]
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	490e      	ldr	r1, [pc, #56]	@ (8008138 <OLED_DrawPoint+0xb0>)
 8008100:	00d2      	lsls	r2, r2, #3
 8008102:	440a      	add	r2, r1
 8008104:	4413      	add	r3, r2
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	b25a      	sxtb	r2, r3
 800810a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800810e:	43db      	mvns	r3, r3
 8008110:	b25b      	sxtb	r3, r3
 8008112:	4013      	ands	r3, r2
 8008114:	b259      	sxtb	r1, r3
 8008116:	79fa      	ldrb	r2, [r7, #7]
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	b2c8      	uxtb	r0, r1
 800811c:	4906      	ldr	r1, [pc, #24]	@ (8008138 <OLED_DrawPoint+0xb0>)
 800811e:	00d2      	lsls	r2, r2, #3
 8008120:	440a      	add	r2, r1
 8008122:	4413      	add	r3, r2
 8008124:	4602      	mov	r2, r0
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	e000      	b.n	800812c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800812a:	bf00      	nop
}
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	20004464 	.word	0x20004464

0800813c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800813c:	b590      	push	{r4, r7, lr}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	4611      	mov	r1, r2
 8008148:	461a      	mov	r2, r3
 800814a:	4623      	mov	r3, r4
 800814c:	71fb      	strb	r3, [r7, #7]
 800814e:	4603      	mov	r3, r0
 8008150:	71bb      	strb	r3, [r7, #6]
 8008152:	460b      	mov	r3, r1
 8008154:	717b      	strb	r3, [r7, #5]
 8008156:	4613      	mov	r3, r2
 8008158:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800815a:	79bb      	ldrb	r3, [r7, #6]
 800815c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800815e:	797b      	ldrb	r3, [r7, #5]
 8008160:	3b20      	subs	r3, #32
 8008162:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8008164:	2300      	movs	r3, #0
 8008166:	73bb      	strb	r3, [r7, #14]
 8008168:	e04d      	b.n	8008206 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800816a:	793b      	ldrb	r3, [r7, #4]
 800816c:	2b0c      	cmp	r3, #12
 800816e:	d10b      	bne.n	8008188 <OLED_ShowChar+0x4c>
 8008170:	797a      	ldrb	r2, [r7, #5]
 8008172:	7bb9      	ldrb	r1, [r7, #14]
 8008174:	4828      	ldr	r0, [pc, #160]	@ (8008218 <OLED_ShowChar+0xdc>)
 8008176:	4613      	mov	r3, r2
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4403      	add	r3, r0
 8008180:	440b      	add	r3, r1
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	73fb      	strb	r3, [r7, #15]
 8008186:	e007      	b.n	8008198 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8008188:	797a      	ldrb	r2, [r7, #5]
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	4923      	ldr	r1, [pc, #140]	@ (800821c <OLED_ShowChar+0xe0>)
 800818e:	0112      	lsls	r2, r2, #4
 8008190:	440a      	add	r2, r1
 8008192:	4413      	add	r3, r2
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8008198:	2300      	movs	r3, #0
 800819a:	737b      	strb	r3, [r7, #13]
 800819c:	e02d      	b.n	80081fa <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800819e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da07      	bge.n	80081b6 <OLED_ShowChar+0x7a>
 80081a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80081aa:	79b9      	ldrb	r1, [r7, #6]
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff ff6a 	bl	8008088 <OLED_DrawPoint>
 80081b4:	e00c      	b.n	80081d0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80081b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bf0c      	ite	eq
 80081be:	2301      	moveq	r3, #1
 80081c0:	2300      	movne	r3, #0
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	79b9      	ldrb	r1, [r7, #6]
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff ff5c 	bl	8008088 <OLED_DrawPoint>
			temp<<=1;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	73fb      	strb	r3, [r7, #15]
			y++;
 80081d6:	79bb      	ldrb	r3, [r7, #6]
 80081d8:	3301      	adds	r3, #1
 80081da:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80081dc:	79ba      	ldrb	r2, [r7, #6]
 80081de:	7b3b      	ldrb	r3, [r7, #12]
 80081e0:	1ad2      	subs	r2, r2, r3
 80081e2:	793b      	ldrb	r3, [r7, #4]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d105      	bne.n	80081f4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80081e8:	7b3b      	ldrb	r3, [r7, #12]
 80081ea:	71bb      	strb	r3, [r7, #6]
				x++;
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	3301      	adds	r3, #1
 80081f0:	71fb      	strb	r3, [r7, #7]
				break;
 80081f2:	e005      	b.n	8008200 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80081f4:	7b7b      	ldrb	r3, [r7, #13]
 80081f6:	3301      	adds	r3, #1
 80081f8:	737b      	strb	r3, [r7, #13]
 80081fa:	7b7b      	ldrb	r3, [r7, #13]
 80081fc:	2b07      	cmp	r3, #7
 80081fe:	d9ce      	bls.n	800819e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8008200:	7bbb      	ldrb	r3, [r7, #14]
 8008202:	3301      	adds	r3, #1
 8008204:	73bb      	strb	r3, [r7, #14]
 8008206:	7bba      	ldrb	r2, [r7, #14]
 8008208:	793b      	ldrb	r3, [r7, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d3ad      	bcc.n	800816a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	bd90      	pop	{r4, r7, pc}
 8008218:	0800b124 	.word	0x0800b124
 800821c:	0800b598 	.word	0x0800b598

08008220 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af02      	add	r7, sp, #8
 8008226:	4603      	mov	r3, r0
 8008228:	603a      	str	r2, [r7, #0]
 800822a:	71fb      	strb	r3, [r7, #7]
 800822c:	460b      	mov	r3, r1
 800822e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8008230:	e01f      	b.n	8008272 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	2b7a      	cmp	r3, #122	@ 0x7a
 8008236:	d904      	bls.n	8008242 <OLED_ShowString+0x22>
 8008238:	2300      	movs	r3, #0
 800823a:	71fb      	strb	r3, [r7, #7]
 800823c:	79bb      	ldrb	r3, [r7, #6]
 800823e:	3310      	adds	r3, #16
 8008240:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8008242:	79bb      	ldrb	r3, [r7, #6]
 8008244:	2b3a      	cmp	r3, #58	@ 0x3a
 8008246:	d905      	bls.n	8008254 <OLED_ShowString+0x34>
 8008248:	2300      	movs	r3, #0
 800824a:	71fb      	strb	r3, [r7, #7]
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	71bb      	strb	r3, [r7, #6]
 8008250:	f7ff fef4 	bl	800803c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	79b9      	ldrb	r1, [r7, #6]
 800825a:	79f8      	ldrb	r0, [r7, #7]
 800825c:	2301      	movs	r3, #1
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	230c      	movs	r3, #12
 8008262:	f7ff ff6b 	bl	800813c <OLED_ShowChar>
        x+=8;
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	3308      	adds	r3, #8
 800826a:	71fb      	strb	r3, [r7, #7]
        p++;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1db      	bne.n	8008232 <OLED_ShowString+0x12>
    }  
}	 
 800827a:	bf00      	nop
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <OLED_Init>:

void OLED_Init(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8008288:	f7fa fd10 	bl	8002cac <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800828c:	4b41      	ldr	r3, [pc, #260]	@ (8008394 <OLED_Init+0x110>)
 800828e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008290:	4a40      	ldr	r2, [pc, #256]	@ (8008394 <OLED_Init+0x110>)
 8008292:	f023 0301 	bic.w	r3, r3, #1
 8008296:	6713      	str	r3, [r2, #112]	@ 0x70
 8008298:	4b3e      	ldr	r3, [pc, #248]	@ (8008394 <OLED_Init+0x110>)
 800829a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829c:	4a3d      	ldr	r2, [pc, #244]	@ (8008394 <OLED_Init+0x110>)
 800829e:	f023 0304 	bic.w	r3, r3, #4
 80082a2:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80082a4:	f7fa fd16 	bl	8002cd4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80082a8:	2200      	movs	r2, #0
 80082aa:	2180      	movs	r1, #128	@ 0x80
 80082ac:	483a      	ldr	r0, [pc, #232]	@ (8008398 <OLED_Init+0x114>)
 80082ae:	f7fa fcc9 	bl	8002c44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80082b2:	2064      	movs	r0, #100	@ 0x64
 80082b4:	f7fa f962 	bl	800257c <HAL_Delay>
	OLED_RST_Set();
 80082b8:	2201      	movs	r2, #1
 80082ba:	2180      	movs	r1, #128	@ 0x80
 80082bc:	4836      	ldr	r0, [pc, #216]	@ (8008398 <OLED_Init+0x114>)
 80082be:	f7fa fcc1 	bl	8002c44 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80082c2:	2100      	movs	r1, #0
 80082c4:	20ae      	movs	r0, #174	@ 0xae
 80082c6:	f7ff fe6f 	bl	8007fa8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80082ca:	2100      	movs	r1, #0
 80082cc:	20d5      	movs	r0, #213	@ 0xd5
 80082ce:	f7ff fe6b 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80082d2:	2100      	movs	r1, #0
 80082d4:	2050      	movs	r0, #80	@ 0x50
 80082d6:	f7ff fe67 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80082da:	2100      	movs	r1, #0
 80082dc:	20a8      	movs	r0, #168	@ 0xa8
 80082de:	f7ff fe63 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80082e2:	2100      	movs	r1, #0
 80082e4:	203f      	movs	r0, #63	@ 0x3f
 80082e6:	f7ff fe5f 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80082ea:	2100      	movs	r1, #0
 80082ec:	20d3      	movs	r0, #211	@ 0xd3
 80082ee:	f7ff fe5b 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80082f2:	2100      	movs	r1, #0
 80082f4:	2000      	movs	r0, #0
 80082f6:	f7ff fe57 	bl	8007fa8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80082fa:	2100      	movs	r1, #0
 80082fc:	2040      	movs	r0, #64	@ 0x40
 80082fe:	f7ff fe53 	bl	8007fa8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8008302:	2100      	movs	r1, #0
 8008304:	208d      	movs	r0, #141	@ 0x8d
 8008306:	f7ff fe4f 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800830a:	2100      	movs	r1, #0
 800830c:	2014      	movs	r0, #20
 800830e:	f7ff fe4b 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8008312:	2100      	movs	r1, #0
 8008314:	2020      	movs	r0, #32
 8008316:	f7ff fe47 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800831a:	2100      	movs	r1, #0
 800831c:	2002      	movs	r0, #2
 800831e:	f7ff fe43 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8008322:	2100      	movs	r1, #0
 8008324:	20a1      	movs	r0, #161	@ 0xa1
 8008326:	f7ff fe3f 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800832a:	2100      	movs	r1, #0
 800832c:	20c0      	movs	r0, #192	@ 0xc0
 800832e:	f7ff fe3b 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8008332:	2100      	movs	r1, #0
 8008334:	20da      	movs	r0, #218	@ 0xda
 8008336:	f7ff fe37 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800833a:	2100      	movs	r1, #0
 800833c:	2012      	movs	r0, #18
 800833e:	f7ff fe33 	bl	8007fa8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8008342:	2100      	movs	r1, #0
 8008344:	2081      	movs	r0, #129	@ 0x81
 8008346:	f7ff fe2f 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800834a:	2100      	movs	r1, #0
 800834c:	20ef      	movs	r0, #239	@ 0xef
 800834e:	f7ff fe2b 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8008352:	2100      	movs	r1, #0
 8008354:	20d9      	movs	r0, #217	@ 0xd9
 8008356:	f7ff fe27 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800835a:	2100      	movs	r1, #0
 800835c:	20f1      	movs	r0, #241	@ 0xf1
 800835e:	f7ff fe23 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8008362:	2100      	movs	r1, #0
 8008364:	20db      	movs	r0, #219	@ 0xdb
 8008366:	f7ff fe1f 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800836a:	2100      	movs	r1, #0
 800836c:	2030      	movs	r0, #48	@ 0x30
 800836e:	f7ff fe1b 	bl	8007fa8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8008372:	2100      	movs	r1, #0
 8008374:	20a4      	movs	r0, #164	@ 0xa4
 8008376:	f7ff fe17 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800837a:	2100      	movs	r1, #0
 800837c:	20a6      	movs	r0, #166	@ 0xa6
 800837e:	f7ff fe13 	bl	8007fa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8008382:	2100      	movs	r1, #0
 8008384:	20af      	movs	r0, #175	@ 0xaf
 8008386:	f7ff fe0f 	bl	8007fa8 <OLED_WR_Byte>
	OLED_Clear(); 
 800838a:	f7ff fe57 	bl	800803c <OLED_Clear>
 800838e:	bf00      	nop
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40023800 	.word	0x40023800
 8008398:	40021000 	.word	0x40021000

0800839c <__cvt>:
 800839c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a0:	ec57 6b10 	vmov	r6, r7, d0
 80083a4:	2f00      	cmp	r7, #0
 80083a6:	460c      	mov	r4, r1
 80083a8:	4619      	mov	r1, r3
 80083aa:	463b      	mov	r3, r7
 80083ac:	bfbb      	ittet	lt
 80083ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80083b2:	461f      	movlt	r7, r3
 80083b4:	2300      	movge	r3, #0
 80083b6:	232d      	movlt	r3, #45	@ 0x2d
 80083b8:	700b      	strb	r3, [r1, #0]
 80083ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80083c0:	4691      	mov	r9, r2
 80083c2:	f023 0820 	bic.w	r8, r3, #32
 80083c6:	bfbc      	itt	lt
 80083c8:	4632      	movlt	r2, r6
 80083ca:	4616      	movlt	r6, r2
 80083cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083d0:	d005      	beq.n	80083de <__cvt+0x42>
 80083d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80083d6:	d100      	bne.n	80083da <__cvt+0x3e>
 80083d8:	3401      	adds	r4, #1
 80083da:	2102      	movs	r1, #2
 80083dc:	e000      	b.n	80083e0 <__cvt+0x44>
 80083de:	2103      	movs	r1, #3
 80083e0:	ab03      	add	r3, sp, #12
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	ab02      	add	r3, sp, #8
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	ec47 6b10 	vmov	d0, r6, r7
 80083ec:	4653      	mov	r3, sl
 80083ee:	4622      	mov	r2, r4
 80083f0:	f000 fe6a 	bl	80090c8 <_dtoa_r>
 80083f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80083f8:	4605      	mov	r5, r0
 80083fa:	d119      	bne.n	8008430 <__cvt+0x94>
 80083fc:	f019 0f01 	tst.w	r9, #1
 8008400:	d00e      	beq.n	8008420 <__cvt+0x84>
 8008402:	eb00 0904 	add.w	r9, r0, r4
 8008406:	2200      	movs	r2, #0
 8008408:	2300      	movs	r3, #0
 800840a:	4630      	mov	r0, r6
 800840c:	4639      	mov	r1, r7
 800840e:	f7f8 fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008412:	b108      	cbz	r0, 8008418 <__cvt+0x7c>
 8008414:	f8cd 900c 	str.w	r9, [sp, #12]
 8008418:	2230      	movs	r2, #48	@ 0x30
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	454b      	cmp	r3, r9
 800841e:	d31e      	bcc.n	800845e <__cvt+0xc2>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008424:	1b5b      	subs	r3, r3, r5
 8008426:	4628      	mov	r0, r5
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	b004      	add	sp, #16
 800842c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008430:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008434:	eb00 0904 	add.w	r9, r0, r4
 8008438:	d1e5      	bne.n	8008406 <__cvt+0x6a>
 800843a:	7803      	ldrb	r3, [r0, #0]
 800843c:	2b30      	cmp	r3, #48	@ 0x30
 800843e:	d10a      	bne.n	8008456 <__cvt+0xba>
 8008440:	2200      	movs	r2, #0
 8008442:	2300      	movs	r3, #0
 8008444:	4630      	mov	r0, r6
 8008446:	4639      	mov	r1, r7
 8008448:	f7f8 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800844c:	b918      	cbnz	r0, 8008456 <__cvt+0xba>
 800844e:	f1c4 0401 	rsb	r4, r4, #1
 8008452:	f8ca 4000 	str.w	r4, [sl]
 8008456:	f8da 3000 	ldr.w	r3, [sl]
 800845a:	4499      	add	r9, r3
 800845c:	e7d3      	b.n	8008406 <__cvt+0x6a>
 800845e:	1c59      	adds	r1, r3, #1
 8008460:	9103      	str	r1, [sp, #12]
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	e7d9      	b.n	800841a <__cvt+0x7e>

08008466 <__exponent>:
 8008466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008468:	2900      	cmp	r1, #0
 800846a:	bfba      	itte	lt
 800846c:	4249      	neglt	r1, r1
 800846e:	232d      	movlt	r3, #45	@ 0x2d
 8008470:	232b      	movge	r3, #43	@ 0x2b
 8008472:	2909      	cmp	r1, #9
 8008474:	7002      	strb	r2, [r0, #0]
 8008476:	7043      	strb	r3, [r0, #1]
 8008478:	dd29      	ble.n	80084ce <__exponent+0x68>
 800847a:	f10d 0307 	add.w	r3, sp, #7
 800847e:	461d      	mov	r5, r3
 8008480:	270a      	movs	r7, #10
 8008482:	461a      	mov	r2, r3
 8008484:	fbb1 f6f7 	udiv	r6, r1, r7
 8008488:	fb07 1416 	mls	r4, r7, r6, r1
 800848c:	3430      	adds	r4, #48	@ 0x30
 800848e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008492:	460c      	mov	r4, r1
 8008494:	2c63      	cmp	r4, #99	@ 0x63
 8008496:	f103 33ff 	add.w	r3, r3, #4294967295
 800849a:	4631      	mov	r1, r6
 800849c:	dcf1      	bgt.n	8008482 <__exponent+0x1c>
 800849e:	3130      	adds	r1, #48	@ 0x30
 80084a0:	1e94      	subs	r4, r2, #2
 80084a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084a6:	1c41      	adds	r1, r0, #1
 80084a8:	4623      	mov	r3, r4
 80084aa:	42ab      	cmp	r3, r5
 80084ac:	d30a      	bcc.n	80084c4 <__exponent+0x5e>
 80084ae:	f10d 0309 	add.w	r3, sp, #9
 80084b2:	1a9b      	subs	r3, r3, r2
 80084b4:	42ac      	cmp	r4, r5
 80084b6:	bf88      	it	hi
 80084b8:	2300      	movhi	r3, #0
 80084ba:	3302      	adds	r3, #2
 80084bc:	4403      	add	r3, r0
 80084be:	1a18      	subs	r0, r3, r0
 80084c0:	b003      	add	sp, #12
 80084c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80084c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80084cc:	e7ed      	b.n	80084aa <__exponent+0x44>
 80084ce:	2330      	movs	r3, #48	@ 0x30
 80084d0:	3130      	adds	r1, #48	@ 0x30
 80084d2:	7083      	strb	r3, [r0, #2]
 80084d4:	70c1      	strb	r1, [r0, #3]
 80084d6:	1d03      	adds	r3, r0, #4
 80084d8:	e7f1      	b.n	80084be <__exponent+0x58>
	...

080084dc <_printf_float>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	b08d      	sub	sp, #52	@ 0x34
 80084e2:	460c      	mov	r4, r1
 80084e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80084e8:	4616      	mov	r6, r2
 80084ea:	461f      	mov	r7, r3
 80084ec:	4605      	mov	r5, r0
 80084ee:	f000 fcdb 	bl	8008ea8 <_localeconv_r>
 80084f2:	6803      	ldr	r3, [r0, #0]
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7f7 feba 	bl	8000270 <strlen>
 80084fc:	2300      	movs	r3, #0
 80084fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008500:	f8d8 3000 	ldr.w	r3, [r8]
 8008504:	9005      	str	r0, [sp, #20]
 8008506:	3307      	adds	r3, #7
 8008508:	f023 0307 	bic.w	r3, r3, #7
 800850c:	f103 0208 	add.w	r2, r3, #8
 8008510:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008514:	f8d4 b000 	ldr.w	fp, [r4]
 8008518:	f8c8 2000 	str.w	r2, [r8]
 800851c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008520:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008524:	9307      	str	r3, [sp, #28]
 8008526:	f8cd 8018 	str.w	r8, [sp, #24]
 800852a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800852e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008532:	4b9c      	ldr	r3, [pc, #624]	@ (80087a4 <_printf_float+0x2c8>)
 8008534:	f04f 32ff 	mov.w	r2, #4294967295
 8008538:	f7f8 faf8 	bl	8000b2c <__aeabi_dcmpun>
 800853c:	bb70      	cbnz	r0, 800859c <_printf_float+0xc0>
 800853e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008542:	4b98      	ldr	r3, [pc, #608]	@ (80087a4 <_printf_float+0x2c8>)
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	f7f8 fad2 	bl	8000af0 <__aeabi_dcmple>
 800854c:	bb30      	cbnz	r0, 800859c <_printf_float+0xc0>
 800854e:	2200      	movs	r2, #0
 8008550:	2300      	movs	r3, #0
 8008552:	4640      	mov	r0, r8
 8008554:	4649      	mov	r1, r9
 8008556:	f7f8 fac1 	bl	8000adc <__aeabi_dcmplt>
 800855a:	b110      	cbz	r0, 8008562 <_printf_float+0x86>
 800855c:	232d      	movs	r3, #45	@ 0x2d
 800855e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008562:	4a91      	ldr	r2, [pc, #580]	@ (80087a8 <_printf_float+0x2cc>)
 8008564:	4b91      	ldr	r3, [pc, #580]	@ (80087ac <_printf_float+0x2d0>)
 8008566:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800856a:	bf94      	ite	ls
 800856c:	4690      	movls	r8, r2
 800856e:	4698      	movhi	r8, r3
 8008570:	2303      	movs	r3, #3
 8008572:	6123      	str	r3, [r4, #16]
 8008574:	f02b 0304 	bic.w	r3, fp, #4
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	f04f 0900 	mov.w	r9, #0
 800857e:	9700      	str	r7, [sp, #0]
 8008580:	4633      	mov	r3, r6
 8008582:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008584:	4621      	mov	r1, r4
 8008586:	4628      	mov	r0, r5
 8008588:	f000 f9d2 	bl	8008930 <_printf_common>
 800858c:	3001      	adds	r0, #1
 800858e:	f040 808d 	bne.w	80086ac <_printf_float+0x1d0>
 8008592:	f04f 30ff 	mov.w	r0, #4294967295
 8008596:	b00d      	add	sp, #52	@ 0x34
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	4642      	mov	r2, r8
 800859e:	464b      	mov	r3, r9
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	f7f8 fac2 	bl	8000b2c <__aeabi_dcmpun>
 80085a8:	b140      	cbz	r0, 80085bc <_printf_float+0xe0>
 80085aa:	464b      	mov	r3, r9
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bfbc      	itt	lt
 80085b0:	232d      	movlt	r3, #45	@ 0x2d
 80085b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80085b6:	4a7e      	ldr	r2, [pc, #504]	@ (80087b0 <_printf_float+0x2d4>)
 80085b8:	4b7e      	ldr	r3, [pc, #504]	@ (80087b4 <_printf_float+0x2d8>)
 80085ba:	e7d4      	b.n	8008566 <_printf_float+0x8a>
 80085bc:	6863      	ldr	r3, [r4, #4]
 80085be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80085c2:	9206      	str	r2, [sp, #24]
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	d13b      	bne.n	8008640 <_printf_float+0x164>
 80085c8:	2306      	movs	r3, #6
 80085ca:	6063      	str	r3, [r4, #4]
 80085cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80085d0:	2300      	movs	r3, #0
 80085d2:	6022      	str	r2, [r4, #0]
 80085d4:	9303      	str	r3, [sp, #12]
 80085d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80085d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80085dc:	ab09      	add	r3, sp, #36	@ 0x24
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	6861      	ldr	r1, [r4, #4]
 80085e2:	ec49 8b10 	vmov	d0, r8, r9
 80085e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80085ea:	4628      	mov	r0, r5
 80085ec:	f7ff fed6 	bl	800839c <__cvt>
 80085f0:	9b06      	ldr	r3, [sp, #24]
 80085f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085f4:	2b47      	cmp	r3, #71	@ 0x47
 80085f6:	4680      	mov	r8, r0
 80085f8:	d129      	bne.n	800864e <_printf_float+0x172>
 80085fa:	1cc8      	adds	r0, r1, #3
 80085fc:	db02      	blt.n	8008604 <_printf_float+0x128>
 80085fe:	6863      	ldr	r3, [r4, #4]
 8008600:	4299      	cmp	r1, r3
 8008602:	dd41      	ble.n	8008688 <_printf_float+0x1ac>
 8008604:	f1aa 0a02 	sub.w	sl, sl, #2
 8008608:	fa5f fa8a 	uxtb.w	sl, sl
 800860c:	3901      	subs	r1, #1
 800860e:	4652      	mov	r2, sl
 8008610:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008614:	9109      	str	r1, [sp, #36]	@ 0x24
 8008616:	f7ff ff26 	bl	8008466 <__exponent>
 800861a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800861c:	1813      	adds	r3, r2, r0
 800861e:	2a01      	cmp	r2, #1
 8008620:	4681      	mov	r9, r0
 8008622:	6123      	str	r3, [r4, #16]
 8008624:	dc02      	bgt.n	800862c <_printf_float+0x150>
 8008626:	6822      	ldr	r2, [r4, #0]
 8008628:	07d2      	lsls	r2, r2, #31
 800862a:	d501      	bpl.n	8008630 <_printf_float+0x154>
 800862c:	3301      	adds	r3, #1
 800862e:	6123      	str	r3, [r4, #16]
 8008630:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0a2      	beq.n	800857e <_printf_float+0xa2>
 8008638:	232d      	movs	r3, #45	@ 0x2d
 800863a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800863e:	e79e      	b.n	800857e <_printf_float+0xa2>
 8008640:	9a06      	ldr	r2, [sp, #24]
 8008642:	2a47      	cmp	r2, #71	@ 0x47
 8008644:	d1c2      	bne.n	80085cc <_printf_float+0xf0>
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1c0      	bne.n	80085cc <_printf_float+0xf0>
 800864a:	2301      	movs	r3, #1
 800864c:	e7bd      	b.n	80085ca <_printf_float+0xee>
 800864e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008652:	d9db      	bls.n	800860c <_printf_float+0x130>
 8008654:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008658:	d118      	bne.n	800868c <_printf_float+0x1b0>
 800865a:	2900      	cmp	r1, #0
 800865c:	6863      	ldr	r3, [r4, #4]
 800865e:	dd0b      	ble.n	8008678 <_printf_float+0x19c>
 8008660:	6121      	str	r1, [r4, #16]
 8008662:	b913      	cbnz	r3, 800866a <_printf_float+0x18e>
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	07d0      	lsls	r0, r2, #31
 8008668:	d502      	bpl.n	8008670 <_printf_float+0x194>
 800866a:	3301      	adds	r3, #1
 800866c:	440b      	add	r3, r1
 800866e:	6123      	str	r3, [r4, #16]
 8008670:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008672:	f04f 0900 	mov.w	r9, #0
 8008676:	e7db      	b.n	8008630 <_printf_float+0x154>
 8008678:	b913      	cbnz	r3, 8008680 <_printf_float+0x1a4>
 800867a:	6822      	ldr	r2, [r4, #0]
 800867c:	07d2      	lsls	r2, r2, #31
 800867e:	d501      	bpl.n	8008684 <_printf_float+0x1a8>
 8008680:	3302      	adds	r3, #2
 8008682:	e7f4      	b.n	800866e <_printf_float+0x192>
 8008684:	2301      	movs	r3, #1
 8008686:	e7f2      	b.n	800866e <_printf_float+0x192>
 8008688:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800868c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800868e:	4299      	cmp	r1, r3
 8008690:	db05      	blt.n	800869e <_printf_float+0x1c2>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	6121      	str	r1, [r4, #16]
 8008696:	07d8      	lsls	r0, r3, #31
 8008698:	d5ea      	bpl.n	8008670 <_printf_float+0x194>
 800869a:	1c4b      	adds	r3, r1, #1
 800869c:	e7e7      	b.n	800866e <_printf_float+0x192>
 800869e:	2900      	cmp	r1, #0
 80086a0:	bfd4      	ite	le
 80086a2:	f1c1 0202 	rsble	r2, r1, #2
 80086a6:	2201      	movgt	r2, #1
 80086a8:	4413      	add	r3, r2
 80086aa:	e7e0      	b.n	800866e <_printf_float+0x192>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	055a      	lsls	r2, r3, #21
 80086b0:	d407      	bmi.n	80086c2 <_printf_float+0x1e6>
 80086b2:	6923      	ldr	r3, [r4, #16]
 80086b4:	4642      	mov	r2, r8
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	d12b      	bne.n	8008718 <_printf_float+0x23c>
 80086c0:	e767      	b.n	8008592 <_printf_float+0xb6>
 80086c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086c6:	f240 80dd 	bls.w	8008884 <_printf_float+0x3a8>
 80086ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086ce:	2200      	movs	r2, #0
 80086d0:	2300      	movs	r3, #0
 80086d2:	f7f8 f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d033      	beq.n	8008742 <_printf_float+0x266>
 80086da:	4a37      	ldr	r2, [pc, #220]	@ (80087b8 <_printf_float+0x2dc>)
 80086dc:	2301      	movs	r3, #1
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	f43f af54 	beq.w	8008592 <_printf_float+0xb6>
 80086ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80086ee:	4543      	cmp	r3, r8
 80086f0:	db02      	blt.n	80086f8 <_printf_float+0x21c>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	07d8      	lsls	r0, r3, #31
 80086f6:	d50f      	bpl.n	8008718 <_printf_float+0x23c>
 80086f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086fc:	4631      	mov	r1, r6
 80086fe:	4628      	mov	r0, r5
 8008700:	47b8      	blx	r7
 8008702:	3001      	adds	r0, #1
 8008704:	f43f af45 	beq.w	8008592 <_printf_float+0xb6>
 8008708:	f04f 0900 	mov.w	r9, #0
 800870c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008710:	f104 0a1a 	add.w	sl, r4, #26
 8008714:	45c8      	cmp	r8, r9
 8008716:	dc09      	bgt.n	800872c <_printf_float+0x250>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	079b      	lsls	r3, r3, #30
 800871c:	f100 8103 	bmi.w	8008926 <_printf_float+0x44a>
 8008720:	68e0      	ldr	r0, [r4, #12]
 8008722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008724:	4298      	cmp	r0, r3
 8008726:	bfb8      	it	lt
 8008728:	4618      	movlt	r0, r3
 800872a:	e734      	b.n	8008596 <_printf_float+0xba>
 800872c:	2301      	movs	r3, #1
 800872e:	4652      	mov	r2, sl
 8008730:	4631      	mov	r1, r6
 8008732:	4628      	mov	r0, r5
 8008734:	47b8      	blx	r7
 8008736:	3001      	adds	r0, #1
 8008738:	f43f af2b 	beq.w	8008592 <_printf_float+0xb6>
 800873c:	f109 0901 	add.w	r9, r9, #1
 8008740:	e7e8      	b.n	8008714 <_printf_float+0x238>
 8008742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	dc39      	bgt.n	80087bc <_printf_float+0x2e0>
 8008748:	4a1b      	ldr	r2, [pc, #108]	@ (80087b8 <_printf_float+0x2dc>)
 800874a:	2301      	movs	r3, #1
 800874c:	4631      	mov	r1, r6
 800874e:	4628      	mov	r0, r5
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	f43f af1d 	beq.w	8008592 <_printf_float+0xb6>
 8008758:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800875c:	ea59 0303 	orrs.w	r3, r9, r3
 8008760:	d102      	bne.n	8008768 <_printf_float+0x28c>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	07d9      	lsls	r1, r3, #31
 8008766:	d5d7      	bpl.n	8008718 <_printf_float+0x23c>
 8008768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	f43f af0d 	beq.w	8008592 <_printf_float+0xb6>
 8008778:	f04f 0a00 	mov.w	sl, #0
 800877c:	f104 0b1a 	add.w	fp, r4, #26
 8008780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008782:	425b      	negs	r3, r3
 8008784:	4553      	cmp	r3, sl
 8008786:	dc01      	bgt.n	800878c <_printf_float+0x2b0>
 8008788:	464b      	mov	r3, r9
 800878a:	e793      	b.n	80086b4 <_printf_float+0x1d8>
 800878c:	2301      	movs	r3, #1
 800878e:	465a      	mov	r2, fp
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	47b8      	blx	r7
 8008796:	3001      	adds	r0, #1
 8008798:	f43f aefb 	beq.w	8008592 <_printf_float+0xb6>
 800879c:	f10a 0a01 	add.w	sl, sl, #1
 80087a0:	e7ee      	b.n	8008780 <_printf_float+0x2a4>
 80087a2:	bf00      	nop
 80087a4:	7fefffff 	.word	0x7fefffff
 80087a8:	0800bb88 	.word	0x0800bb88
 80087ac:	0800bb8c 	.word	0x0800bb8c
 80087b0:	0800bb90 	.word	0x0800bb90
 80087b4:	0800bb94 	.word	0x0800bb94
 80087b8:	0800bb98 	.word	0x0800bb98
 80087bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80087c2:	4553      	cmp	r3, sl
 80087c4:	bfa8      	it	ge
 80087c6:	4653      	movge	r3, sl
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	4699      	mov	r9, r3
 80087cc:	dc36      	bgt.n	800883c <_printf_float+0x360>
 80087ce:	f04f 0b00 	mov.w	fp, #0
 80087d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087d6:	f104 021a 	add.w	r2, r4, #26
 80087da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087dc:	9306      	str	r3, [sp, #24]
 80087de:	eba3 0309 	sub.w	r3, r3, r9
 80087e2:	455b      	cmp	r3, fp
 80087e4:	dc31      	bgt.n	800884a <_printf_float+0x36e>
 80087e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e8:	459a      	cmp	sl, r3
 80087ea:	dc3a      	bgt.n	8008862 <_printf_float+0x386>
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	07da      	lsls	r2, r3, #31
 80087f0:	d437      	bmi.n	8008862 <_printf_float+0x386>
 80087f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f4:	ebaa 0903 	sub.w	r9, sl, r3
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	ebaa 0303 	sub.w	r3, sl, r3
 80087fe:	4599      	cmp	r9, r3
 8008800:	bfa8      	it	ge
 8008802:	4699      	movge	r9, r3
 8008804:	f1b9 0f00 	cmp.w	r9, #0
 8008808:	dc33      	bgt.n	8008872 <_printf_float+0x396>
 800880a:	f04f 0800 	mov.w	r8, #0
 800880e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008812:	f104 0b1a 	add.w	fp, r4, #26
 8008816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008818:	ebaa 0303 	sub.w	r3, sl, r3
 800881c:	eba3 0309 	sub.w	r3, r3, r9
 8008820:	4543      	cmp	r3, r8
 8008822:	f77f af79 	ble.w	8008718 <_printf_float+0x23c>
 8008826:	2301      	movs	r3, #1
 8008828:	465a      	mov	r2, fp
 800882a:	4631      	mov	r1, r6
 800882c:	4628      	mov	r0, r5
 800882e:	47b8      	blx	r7
 8008830:	3001      	adds	r0, #1
 8008832:	f43f aeae 	beq.w	8008592 <_printf_float+0xb6>
 8008836:	f108 0801 	add.w	r8, r8, #1
 800883a:	e7ec      	b.n	8008816 <_printf_float+0x33a>
 800883c:	4642      	mov	r2, r8
 800883e:	4631      	mov	r1, r6
 8008840:	4628      	mov	r0, r5
 8008842:	47b8      	blx	r7
 8008844:	3001      	adds	r0, #1
 8008846:	d1c2      	bne.n	80087ce <_printf_float+0x2f2>
 8008848:	e6a3      	b.n	8008592 <_printf_float+0xb6>
 800884a:	2301      	movs	r3, #1
 800884c:	4631      	mov	r1, r6
 800884e:	4628      	mov	r0, r5
 8008850:	9206      	str	r2, [sp, #24]
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	f43f ae9c 	beq.w	8008592 <_printf_float+0xb6>
 800885a:	9a06      	ldr	r2, [sp, #24]
 800885c:	f10b 0b01 	add.w	fp, fp, #1
 8008860:	e7bb      	b.n	80087da <_printf_float+0x2fe>
 8008862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008866:	4631      	mov	r1, r6
 8008868:	4628      	mov	r0, r5
 800886a:	47b8      	blx	r7
 800886c:	3001      	adds	r0, #1
 800886e:	d1c0      	bne.n	80087f2 <_printf_float+0x316>
 8008870:	e68f      	b.n	8008592 <_printf_float+0xb6>
 8008872:	9a06      	ldr	r2, [sp, #24]
 8008874:	464b      	mov	r3, r9
 8008876:	4442      	add	r2, r8
 8008878:	4631      	mov	r1, r6
 800887a:	4628      	mov	r0, r5
 800887c:	47b8      	blx	r7
 800887e:	3001      	adds	r0, #1
 8008880:	d1c3      	bne.n	800880a <_printf_float+0x32e>
 8008882:	e686      	b.n	8008592 <_printf_float+0xb6>
 8008884:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008888:	f1ba 0f01 	cmp.w	sl, #1
 800888c:	dc01      	bgt.n	8008892 <_printf_float+0x3b6>
 800888e:	07db      	lsls	r3, r3, #31
 8008890:	d536      	bpl.n	8008900 <_printf_float+0x424>
 8008892:	2301      	movs	r3, #1
 8008894:	4642      	mov	r2, r8
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	47b8      	blx	r7
 800889c:	3001      	adds	r0, #1
 800889e:	f43f ae78 	beq.w	8008592 <_printf_float+0xb6>
 80088a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088a6:	4631      	mov	r1, r6
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b8      	blx	r7
 80088ac:	3001      	adds	r0, #1
 80088ae:	f43f ae70 	beq.w	8008592 <_printf_float+0xb6>
 80088b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088b6:	2200      	movs	r2, #0
 80088b8:	2300      	movs	r3, #0
 80088ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088be:	f7f8 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80088c2:	b9c0      	cbnz	r0, 80088f6 <_printf_float+0x41a>
 80088c4:	4653      	mov	r3, sl
 80088c6:	f108 0201 	add.w	r2, r8, #1
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	d10c      	bne.n	80088ee <_printf_float+0x412>
 80088d4:	e65d      	b.n	8008592 <_printf_float+0xb6>
 80088d6:	2301      	movs	r3, #1
 80088d8:	465a      	mov	r2, fp
 80088da:	4631      	mov	r1, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	f43f ae56 	beq.w	8008592 <_printf_float+0xb6>
 80088e6:	f108 0801 	add.w	r8, r8, #1
 80088ea:	45d0      	cmp	r8, sl
 80088ec:	dbf3      	blt.n	80088d6 <_printf_float+0x3fa>
 80088ee:	464b      	mov	r3, r9
 80088f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80088f4:	e6df      	b.n	80086b6 <_printf_float+0x1da>
 80088f6:	f04f 0800 	mov.w	r8, #0
 80088fa:	f104 0b1a 	add.w	fp, r4, #26
 80088fe:	e7f4      	b.n	80088ea <_printf_float+0x40e>
 8008900:	2301      	movs	r3, #1
 8008902:	4642      	mov	r2, r8
 8008904:	e7e1      	b.n	80088ca <_printf_float+0x3ee>
 8008906:	2301      	movs	r3, #1
 8008908:	464a      	mov	r2, r9
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	f43f ae3e 	beq.w	8008592 <_printf_float+0xb6>
 8008916:	f108 0801 	add.w	r8, r8, #1
 800891a:	68e3      	ldr	r3, [r4, #12]
 800891c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800891e:	1a5b      	subs	r3, r3, r1
 8008920:	4543      	cmp	r3, r8
 8008922:	dcf0      	bgt.n	8008906 <_printf_float+0x42a>
 8008924:	e6fc      	b.n	8008720 <_printf_float+0x244>
 8008926:	f04f 0800 	mov.w	r8, #0
 800892a:	f104 0919 	add.w	r9, r4, #25
 800892e:	e7f4      	b.n	800891a <_printf_float+0x43e>

08008930 <_printf_common>:
 8008930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008934:	4616      	mov	r6, r2
 8008936:	4698      	mov	r8, r3
 8008938:	688a      	ldr	r2, [r1, #8]
 800893a:	690b      	ldr	r3, [r1, #16]
 800893c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008940:	4293      	cmp	r3, r2
 8008942:	bfb8      	it	lt
 8008944:	4613      	movlt	r3, r2
 8008946:	6033      	str	r3, [r6, #0]
 8008948:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800894c:	4607      	mov	r7, r0
 800894e:	460c      	mov	r4, r1
 8008950:	b10a      	cbz	r2, 8008956 <_printf_common+0x26>
 8008952:	3301      	adds	r3, #1
 8008954:	6033      	str	r3, [r6, #0]
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	0699      	lsls	r1, r3, #26
 800895a:	bf42      	ittt	mi
 800895c:	6833      	ldrmi	r3, [r6, #0]
 800895e:	3302      	addmi	r3, #2
 8008960:	6033      	strmi	r3, [r6, #0]
 8008962:	6825      	ldr	r5, [r4, #0]
 8008964:	f015 0506 	ands.w	r5, r5, #6
 8008968:	d106      	bne.n	8008978 <_printf_common+0x48>
 800896a:	f104 0a19 	add.w	sl, r4, #25
 800896e:	68e3      	ldr	r3, [r4, #12]
 8008970:	6832      	ldr	r2, [r6, #0]
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	42ab      	cmp	r3, r5
 8008976:	dc26      	bgt.n	80089c6 <_printf_common+0x96>
 8008978:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800897c:	6822      	ldr	r2, [r4, #0]
 800897e:	3b00      	subs	r3, #0
 8008980:	bf18      	it	ne
 8008982:	2301      	movne	r3, #1
 8008984:	0692      	lsls	r2, r2, #26
 8008986:	d42b      	bmi.n	80089e0 <_printf_common+0xb0>
 8008988:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800898c:	4641      	mov	r1, r8
 800898e:	4638      	mov	r0, r7
 8008990:	47c8      	blx	r9
 8008992:	3001      	adds	r0, #1
 8008994:	d01e      	beq.n	80089d4 <_printf_common+0xa4>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	6922      	ldr	r2, [r4, #16]
 800899a:	f003 0306 	and.w	r3, r3, #6
 800899e:	2b04      	cmp	r3, #4
 80089a0:	bf02      	ittt	eq
 80089a2:	68e5      	ldreq	r5, [r4, #12]
 80089a4:	6833      	ldreq	r3, [r6, #0]
 80089a6:	1aed      	subeq	r5, r5, r3
 80089a8:	68a3      	ldr	r3, [r4, #8]
 80089aa:	bf0c      	ite	eq
 80089ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089b0:	2500      	movne	r5, #0
 80089b2:	4293      	cmp	r3, r2
 80089b4:	bfc4      	itt	gt
 80089b6:	1a9b      	subgt	r3, r3, r2
 80089b8:	18ed      	addgt	r5, r5, r3
 80089ba:	2600      	movs	r6, #0
 80089bc:	341a      	adds	r4, #26
 80089be:	42b5      	cmp	r5, r6
 80089c0:	d11a      	bne.n	80089f8 <_printf_common+0xc8>
 80089c2:	2000      	movs	r0, #0
 80089c4:	e008      	b.n	80089d8 <_printf_common+0xa8>
 80089c6:	2301      	movs	r3, #1
 80089c8:	4652      	mov	r2, sl
 80089ca:	4641      	mov	r1, r8
 80089cc:	4638      	mov	r0, r7
 80089ce:	47c8      	blx	r9
 80089d0:	3001      	adds	r0, #1
 80089d2:	d103      	bne.n	80089dc <_printf_common+0xac>
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089dc:	3501      	adds	r5, #1
 80089de:	e7c6      	b.n	800896e <_printf_common+0x3e>
 80089e0:	18e1      	adds	r1, r4, r3
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	2030      	movs	r0, #48	@ 0x30
 80089e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089ea:	4422      	add	r2, r4
 80089ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089f4:	3302      	adds	r3, #2
 80089f6:	e7c7      	b.n	8008988 <_printf_common+0x58>
 80089f8:	2301      	movs	r3, #1
 80089fa:	4622      	mov	r2, r4
 80089fc:	4641      	mov	r1, r8
 80089fe:	4638      	mov	r0, r7
 8008a00:	47c8      	blx	r9
 8008a02:	3001      	adds	r0, #1
 8008a04:	d0e6      	beq.n	80089d4 <_printf_common+0xa4>
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7d9      	b.n	80089be <_printf_common+0x8e>
	...

08008a0c <_printf_i>:
 8008a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	7e0f      	ldrb	r7, [r1, #24]
 8008a12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a14:	2f78      	cmp	r7, #120	@ 0x78
 8008a16:	4691      	mov	r9, r2
 8008a18:	4680      	mov	r8, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	469a      	mov	sl, r3
 8008a1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a22:	d807      	bhi.n	8008a34 <_printf_i+0x28>
 8008a24:	2f62      	cmp	r7, #98	@ 0x62
 8008a26:	d80a      	bhi.n	8008a3e <_printf_i+0x32>
 8008a28:	2f00      	cmp	r7, #0
 8008a2a:	f000 80d2 	beq.w	8008bd2 <_printf_i+0x1c6>
 8008a2e:	2f58      	cmp	r7, #88	@ 0x58
 8008a30:	f000 80b9 	beq.w	8008ba6 <_printf_i+0x19a>
 8008a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a3c:	e03a      	b.n	8008ab4 <_printf_i+0xa8>
 8008a3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a42:	2b15      	cmp	r3, #21
 8008a44:	d8f6      	bhi.n	8008a34 <_printf_i+0x28>
 8008a46:	a101      	add	r1, pc, #4	@ (adr r1, 8008a4c <_printf_i+0x40>)
 8008a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a4c:	08008aa5 	.word	0x08008aa5
 8008a50:	08008ab9 	.word	0x08008ab9
 8008a54:	08008a35 	.word	0x08008a35
 8008a58:	08008a35 	.word	0x08008a35
 8008a5c:	08008a35 	.word	0x08008a35
 8008a60:	08008a35 	.word	0x08008a35
 8008a64:	08008ab9 	.word	0x08008ab9
 8008a68:	08008a35 	.word	0x08008a35
 8008a6c:	08008a35 	.word	0x08008a35
 8008a70:	08008a35 	.word	0x08008a35
 8008a74:	08008a35 	.word	0x08008a35
 8008a78:	08008bb9 	.word	0x08008bb9
 8008a7c:	08008ae3 	.word	0x08008ae3
 8008a80:	08008b73 	.word	0x08008b73
 8008a84:	08008a35 	.word	0x08008a35
 8008a88:	08008a35 	.word	0x08008a35
 8008a8c:	08008bdb 	.word	0x08008bdb
 8008a90:	08008a35 	.word	0x08008a35
 8008a94:	08008ae3 	.word	0x08008ae3
 8008a98:	08008a35 	.word	0x08008a35
 8008a9c:	08008a35 	.word	0x08008a35
 8008aa0:	08008b7b 	.word	0x08008b7b
 8008aa4:	6833      	ldr	r3, [r6, #0]
 8008aa6:	1d1a      	adds	r2, r3, #4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6032      	str	r2, [r6, #0]
 8008aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e09d      	b.n	8008bf4 <_printf_i+0x1e8>
 8008ab8:	6833      	ldr	r3, [r6, #0]
 8008aba:	6820      	ldr	r0, [r4, #0]
 8008abc:	1d19      	adds	r1, r3, #4
 8008abe:	6031      	str	r1, [r6, #0]
 8008ac0:	0606      	lsls	r6, r0, #24
 8008ac2:	d501      	bpl.n	8008ac8 <_printf_i+0xbc>
 8008ac4:	681d      	ldr	r5, [r3, #0]
 8008ac6:	e003      	b.n	8008ad0 <_printf_i+0xc4>
 8008ac8:	0645      	lsls	r5, r0, #25
 8008aca:	d5fb      	bpl.n	8008ac4 <_printf_i+0xb8>
 8008acc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	da03      	bge.n	8008adc <_printf_i+0xd0>
 8008ad4:	232d      	movs	r3, #45	@ 0x2d
 8008ad6:	426d      	negs	r5, r5
 8008ad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008adc:	4859      	ldr	r0, [pc, #356]	@ (8008c44 <_printf_i+0x238>)
 8008ade:	230a      	movs	r3, #10
 8008ae0:	e011      	b.n	8008b06 <_printf_i+0xfa>
 8008ae2:	6821      	ldr	r1, [r4, #0]
 8008ae4:	6833      	ldr	r3, [r6, #0]
 8008ae6:	0608      	lsls	r0, r1, #24
 8008ae8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008aec:	d402      	bmi.n	8008af4 <_printf_i+0xe8>
 8008aee:	0649      	lsls	r1, r1, #25
 8008af0:	bf48      	it	mi
 8008af2:	b2ad      	uxthmi	r5, r5
 8008af4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008af6:	4853      	ldr	r0, [pc, #332]	@ (8008c44 <_printf_i+0x238>)
 8008af8:	6033      	str	r3, [r6, #0]
 8008afa:	bf14      	ite	ne
 8008afc:	230a      	movne	r3, #10
 8008afe:	2308      	moveq	r3, #8
 8008b00:	2100      	movs	r1, #0
 8008b02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b06:	6866      	ldr	r6, [r4, #4]
 8008b08:	60a6      	str	r6, [r4, #8]
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	bfa2      	ittt	ge
 8008b0e:	6821      	ldrge	r1, [r4, #0]
 8008b10:	f021 0104 	bicge.w	r1, r1, #4
 8008b14:	6021      	strge	r1, [r4, #0]
 8008b16:	b90d      	cbnz	r5, 8008b1c <_printf_i+0x110>
 8008b18:	2e00      	cmp	r6, #0
 8008b1a:	d04b      	beq.n	8008bb4 <_printf_i+0x1a8>
 8008b1c:	4616      	mov	r6, r2
 8008b1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b22:	fb03 5711 	mls	r7, r3, r1, r5
 8008b26:	5dc7      	ldrb	r7, [r0, r7]
 8008b28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b2c:	462f      	mov	r7, r5
 8008b2e:	42bb      	cmp	r3, r7
 8008b30:	460d      	mov	r5, r1
 8008b32:	d9f4      	bls.n	8008b1e <_printf_i+0x112>
 8008b34:	2b08      	cmp	r3, #8
 8008b36:	d10b      	bne.n	8008b50 <_printf_i+0x144>
 8008b38:	6823      	ldr	r3, [r4, #0]
 8008b3a:	07df      	lsls	r7, r3, #31
 8008b3c:	d508      	bpl.n	8008b50 <_printf_i+0x144>
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	6861      	ldr	r1, [r4, #4]
 8008b42:	4299      	cmp	r1, r3
 8008b44:	bfde      	ittt	le
 8008b46:	2330      	movle	r3, #48	@ 0x30
 8008b48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b50:	1b92      	subs	r2, r2, r6
 8008b52:	6122      	str	r2, [r4, #16]
 8008b54:	f8cd a000 	str.w	sl, [sp]
 8008b58:	464b      	mov	r3, r9
 8008b5a:	aa03      	add	r2, sp, #12
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4640      	mov	r0, r8
 8008b60:	f7ff fee6 	bl	8008930 <_printf_common>
 8008b64:	3001      	adds	r0, #1
 8008b66:	d14a      	bne.n	8008bfe <_printf_i+0x1f2>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	b004      	add	sp, #16
 8008b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	f043 0320 	orr.w	r3, r3, #32
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	4833      	ldr	r0, [pc, #204]	@ (8008c48 <_printf_i+0x23c>)
 8008b7c:	2778      	movs	r7, #120	@ 0x78
 8008b7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	6831      	ldr	r1, [r6, #0]
 8008b86:	061f      	lsls	r7, r3, #24
 8008b88:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b8c:	d402      	bmi.n	8008b94 <_printf_i+0x188>
 8008b8e:	065f      	lsls	r7, r3, #25
 8008b90:	bf48      	it	mi
 8008b92:	b2ad      	uxthmi	r5, r5
 8008b94:	6031      	str	r1, [r6, #0]
 8008b96:	07d9      	lsls	r1, r3, #31
 8008b98:	bf44      	itt	mi
 8008b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b9e:	6023      	strmi	r3, [r4, #0]
 8008ba0:	b11d      	cbz	r5, 8008baa <_printf_i+0x19e>
 8008ba2:	2310      	movs	r3, #16
 8008ba4:	e7ac      	b.n	8008b00 <_printf_i+0xf4>
 8008ba6:	4827      	ldr	r0, [pc, #156]	@ (8008c44 <_printf_i+0x238>)
 8008ba8:	e7e9      	b.n	8008b7e <_printf_i+0x172>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	f023 0320 	bic.w	r3, r3, #32
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	e7f6      	b.n	8008ba2 <_printf_i+0x196>
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	e7bd      	b.n	8008b34 <_printf_i+0x128>
 8008bb8:	6833      	ldr	r3, [r6, #0]
 8008bba:	6825      	ldr	r5, [r4, #0]
 8008bbc:	6961      	ldr	r1, [r4, #20]
 8008bbe:	1d18      	adds	r0, r3, #4
 8008bc0:	6030      	str	r0, [r6, #0]
 8008bc2:	062e      	lsls	r6, r5, #24
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	d501      	bpl.n	8008bcc <_printf_i+0x1c0>
 8008bc8:	6019      	str	r1, [r3, #0]
 8008bca:	e002      	b.n	8008bd2 <_printf_i+0x1c6>
 8008bcc:	0668      	lsls	r0, r5, #25
 8008bce:	d5fb      	bpl.n	8008bc8 <_printf_i+0x1bc>
 8008bd0:	8019      	strh	r1, [r3, #0]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	4616      	mov	r6, r2
 8008bd8:	e7bc      	b.n	8008b54 <_printf_i+0x148>
 8008bda:	6833      	ldr	r3, [r6, #0]
 8008bdc:	1d1a      	adds	r2, r3, #4
 8008bde:	6032      	str	r2, [r6, #0]
 8008be0:	681e      	ldr	r6, [r3, #0]
 8008be2:	6862      	ldr	r2, [r4, #4]
 8008be4:	2100      	movs	r1, #0
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7f7 faf2 	bl	80001d0 <memchr>
 8008bec:	b108      	cbz	r0, 8008bf2 <_printf_i+0x1e6>
 8008bee:	1b80      	subs	r0, r0, r6
 8008bf0:	6060      	str	r0, [r4, #4]
 8008bf2:	6863      	ldr	r3, [r4, #4]
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bfc:	e7aa      	b.n	8008b54 <_printf_i+0x148>
 8008bfe:	6923      	ldr	r3, [r4, #16]
 8008c00:	4632      	mov	r2, r6
 8008c02:	4649      	mov	r1, r9
 8008c04:	4640      	mov	r0, r8
 8008c06:	47d0      	blx	sl
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d0ad      	beq.n	8008b68 <_printf_i+0x15c>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	079b      	lsls	r3, r3, #30
 8008c10:	d413      	bmi.n	8008c3a <_printf_i+0x22e>
 8008c12:	68e0      	ldr	r0, [r4, #12]
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	4298      	cmp	r0, r3
 8008c18:	bfb8      	it	lt
 8008c1a:	4618      	movlt	r0, r3
 8008c1c:	e7a6      	b.n	8008b6c <_printf_i+0x160>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4632      	mov	r2, r6
 8008c22:	4649      	mov	r1, r9
 8008c24:	4640      	mov	r0, r8
 8008c26:	47d0      	blx	sl
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d09d      	beq.n	8008b68 <_printf_i+0x15c>
 8008c2c:	3501      	adds	r5, #1
 8008c2e:	68e3      	ldr	r3, [r4, #12]
 8008c30:	9903      	ldr	r1, [sp, #12]
 8008c32:	1a5b      	subs	r3, r3, r1
 8008c34:	42ab      	cmp	r3, r5
 8008c36:	dcf2      	bgt.n	8008c1e <_printf_i+0x212>
 8008c38:	e7eb      	b.n	8008c12 <_printf_i+0x206>
 8008c3a:	2500      	movs	r5, #0
 8008c3c:	f104 0619 	add.w	r6, r4, #25
 8008c40:	e7f5      	b.n	8008c2e <_printf_i+0x222>
 8008c42:	bf00      	nop
 8008c44:	0800bb9a 	.word	0x0800bb9a
 8008c48:	0800bbab 	.word	0x0800bbab

08008c4c <std>:
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	4604      	mov	r4, r0
 8008c52:	e9c0 3300 	strd	r3, r3, [r0]
 8008c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c5a:	6083      	str	r3, [r0, #8]
 8008c5c:	8181      	strh	r1, [r0, #12]
 8008c5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c60:	81c2      	strh	r2, [r0, #14]
 8008c62:	6183      	str	r3, [r0, #24]
 8008c64:	4619      	mov	r1, r3
 8008c66:	2208      	movs	r2, #8
 8008c68:	305c      	adds	r0, #92	@ 0x5c
 8008c6a:	f000 f914 	bl	8008e96 <memset>
 8008c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca4 <std+0x58>)
 8008c70:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca8 <std+0x5c>)
 8008c74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c76:	4b0d      	ldr	r3, [pc, #52]	@ (8008cac <std+0x60>)
 8008c78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb0 <std+0x64>)
 8008c7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb4 <std+0x68>)
 8008c80:	6224      	str	r4, [r4, #32]
 8008c82:	429c      	cmp	r4, r3
 8008c84:	d006      	beq.n	8008c94 <std+0x48>
 8008c86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c8a:	4294      	cmp	r4, r2
 8008c8c:	d002      	beq.n	8008c94 <std+0x48>
 8008c8e:	33d0      	adds	r3, #208	@ 0xd0
 8008c90:	429c      	cmp	r4, r3
 8008c92:	d105      	bne.n	8008ca0 <std+0x54>
 8008c94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c9c:	f000 b978 	b.w	8008f90 <__retarget_lock_init_recursive>
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08008e11 	.word	0x08008e11
 8008ca8:	08008e33 	.word	0x08008e33
 8008cac:	08008e6b 	.word	0x08008e6b
 8008cb0:	08008e8f 	.word	0x08008e8f
 8008cb4:	20004864 	.word	0x20004864

08008cb8 <stdio_exit_handler>:
 8008cb8:	4a02      	ldr	r2, [pc, #8]	@ (8008cc4 <stdio_exit_handler+0xc>)
 8008cba:	4903      	ldr	r1, [pc, #12]	@ (8008cc8 <stdio_exit_handler+0x10>)
 8008cbc:	4803      	ldr	r0, [pc, #12]	@ (8008ccc <stdio_exit_handler+0x14>)
 8008cbe:	f000 b869 	b.w	8008d94 <_fwalk_sglue>
 8008cc2:	bf00      	nop
 8008cc4:	20000014 	.word	0x20000014
 8008cc8:	0800a90d 	.word	0x0800a90d
 8008ccc:	20000024 	.word	0x20000024

08008cd0 <cleanup_stdio>:
 8008cd0:	6841      	ldr	r1, [r0, #4]
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d04 <cleanup_stdio+0x34>)
 8008cd4:	4299      	cmp	r1, r3
 8008cd6:	b510      	push	{r4, lr}
 8008cd8:	4604      	mov	r4, r0
 8008cda:	d001      	beq.n	8008ce0 <cleanup_stdio+0x10>
 8008cdc:	f001 fe16 	bl	800a90c <_fflush_r>
 8008ce0:	68a1      	ldr	r1, [r4, #8]
 8008ce2:	4b09      	ldr	r3, [pc, #36]	@ (8008d08 <cleanup_stdio+0x38>)
 8008ce4:	4299      	cmp	r1, r3
 8008ce6:	d002      	beq.n	8008cee <cleanup_stdio+0x1e>
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f001 fe0f 	bl	800a90c <_fflush_r>
 8008cee:	68e1      	ldr	r1, [r4, #12]
 8008cf0:	4b06      	ldr	r3, [pc, #24]	@ (8008d0c <cleanup_stdio+0x3c>)
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	d004      	beq.n	8008d00 <cleanup_stdio+0x30>
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cfc:	f001 be06 	b.w	800a90c <_fflush_r>
 8008d00:	bd10      	pop	{r4, pc}
 8008d02:	bf00      	nop
 8008d04:	20004864 	.word	0x20004864
 8008d08:	200048cc 	.word	0x200048cc
 8008d0c:	20004934 	.word	0x20004934

08008d10 <global_stdio_init.part.0>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <global_stdio_init.part.0+0x30>)
 8008d14:	4c0b      	ldr	r4, [pc, #44]	@ (8008d44 <global_stdio_init.part.0+0x34>)
 8008d16:	4a0c      	ldr	r2, [pc, #48]	@ (8008d48 <global_stdio_init.part.0+0x38>)
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2104      	movs	r1, #4
 8008d20:	f7ff ff94 	bl	8008c4c <std>
 8008d24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d28:	2201      	movs	r2, #1
 8008d2a:	2109      	movs	r1, #9
 8008d2c:	f7ff ff8e 	bl	8008c4c <std>
 8008d30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d34:	2202      	movs	r2, #2
 8008d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d3a:	2112      	movs	r1, #18
 8008d3c:	f7ff bf86 	b.w	8008c4c <std>
 8008d40:	2000499c 	.word	0x2000499c
 8008d44:	20004864 	.word	0x20004864
 8008d48:	08008cb9 	.word	0x08008cb9

08008d4c <__sfp_lock_acquire>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	@ (8008d54 <__sfp_lock_acquire+0x8>)
 8008d4e:	f000 b920 	b.w	8008f92 <__retarget_lock_acquire_recursive>
 8008d52:	bf00      	nop
 8008d54:	200049a5 	.word	0x200049a5

08008d58 <__sfp_lock_release>:
 8008d58:	4801      	ldr	r0, [pc, #4]	@ (8008d60 <__sfp_lock_release+0x8>)
 8008d5a:	f000 b91b 	b.w	8008f94 <__retarget_lock_release_recursive>
 8008d5e:	bf00      	nop
 8008d60:	200049a5 	.word	0x200049a5

08008d64 <__sinit>:
 8008d64:	b510      	push	{r4, lr}
 8008d66:	4604      	mov	r4, r0
 8008d68:	f7ff fff0 	bl	8008d4c <__sfp_lock_acquire>
 8008d6c:	6a23      	ldr	r3, [r4, #32]
 8008d6e:	b11b      	cbz	r3, 8008d78 <__sinit+0x14>
 8008d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d74:	f7ff bff0 	b.w	8008d58 <__sfp_lock_release>
 8008d78:	4b04      	ldr	r3, [pc, #16]	@ (8008d8c <__sinit+0x28>)
 8008d7a:	6223      	str	r3, [r4, #32]
 8008d7c:	4b04      	ldr	r3, [pc, #16]	@ (8008d90 <__sinit+0x2c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1f5      	bne.n	8008d70 <__sinit+0xc>
 8008d84:	f7ff ffc4 	bl	8008d10 <global_stdio_init.part.0>
 8008d88:	e7f2      	b.n	8008d70 <__sinit+0xc>
 8008d8a:	bf00      	nop
 8008d8c:	08008cd1 	.word	0x08008cd1
 8008d90:	2000499c 	.word	0x2000499c

08008d94 <_fwalk_sglue>:
 8008d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d98:	4607      	mov	r7, r0
 8008d9a:	4688      	mov	r8, r1
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	2600      	movs	r6, #0
 8008da0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008da4:	f1b9 0901 	subs.w	r9, r9, #1
 8008da8:	d505      	bpl.n	8008db6 <_fwalk_sglue+0x22>
 8008daa:	6824      	ldr	r4, [r4, #0]
 8008dac:	2c00      	cmp	r4, #0
 8008dae:	d1f7      	bne.n	8008da0 <_fwalk_sglue+0xc>
 8008db0:	4630      	mov	r0, r6
 8008db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db6:	89ab      	ldrh	r3, [r5, #12]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d907      	bls.n	8008dcc <_fwalk_sglue+0x38>
 8008dbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	d003      	beq.n	8008dcc <_fwalk_sglue+0x38>
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	47c0      	blx	r8
 8008dca:	4306      	orrs	r6, r0
 8008dcc:	3568      	adds	r5, #104	@ 0x68
 8008dce:	e7e9      	b.n	8008da4 <_fwalk_sglue+0x10>

08008dd0 <siprintf>:
 8008dd0:	b40e      	push	{r1, r2, r3}
 8008dd2:	b500      	push	{lr}
 8008dd4:	b09c      	sub	sp, #112	@ 0x70
 8008dd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008dd8:	9002      	str	r0, [sp, #8]
 8008dda:	9006      	str	r0, [sp, #24]
 8008ddc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008de0:	4809      	ldr	r0, [pc, #36]	@ (8008e08 <siprintf+0x38>)
 8008de2:	9107      	str	r1, [sp, #28]
 8008de4:	9104      	str	r1, [sp, #16]
 8008de6:	4909      	ldr	r1, [pc, #36]	@ (8008e0c <siprintf+0x3c>)
 8008de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dec:	9105      	str	r1, [sp, #20]
 8008dee:	6800      	ldr	r0, [r0, #0]
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	a902      	add	r1, sp, #8
 8008df4:	f001 fc0a 	bl	800a60c <_svfiprintf_r>
 8008df8:	9b02      	ldr	r3, [sp, #8]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	b01c      	add	sp, #112	@ 0x70
 8008e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e04:	b003      	add	sp, #12
 8008e06:	4770      	bx	lr
 8008e08:	20000020 	.word	0x20000020
 8008e0c:	ffff0208 	.word	0xffff0208

08008e10 <__sread>:
 8008e10:	b510      	push	{r4, lr}
 8008e12:	460c      	mov	r4, r1
 8008e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e18:	f000 f86c 	bl	8008ef4 <_read_r>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	bfab      	itete	ge
 8008e20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e22:	89a3      	ldrhlt	r3, [r4, #12]
 8008e24:	181b      	addge	r3, r3, r0
 8008e26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e2a:	bfac      	ite	ge
 8008e2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e2e:	81a3      	strhlt	r3, [r4, #12]
 8008e30:	bd10      	pop	{r4, pc}

08008e32 <__swrite>:
 8008e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e36:	461f      	mov	r7, r3
 8008e38:	898b      	ldrh	r3, [r1, #12]
 8008e3a:	05db      	lsls	r3, r3, #23
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	4616      	mov	r6, r2
 8008e42:	d505      	bpl.n	8008e50 <__swrite+0x1e>
 8008e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e48:	2302      	movs	r3, #2
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f000 f840 	bl	8008ed0 <_lseek_r>
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e5a:	81a3      	strh	r3, [r4, #12]
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	463b      	mov	r3, r7
 8008e60:	4628      	mov	r0, r5
 8008e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e66:	f000 b857 	b.w	8008f18 <_write_r>

08008e6a <__sseek>:
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e72:	f000 f82d 	bl	8008ed0 <_lseek_r>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	bf15      	itete	ne
 8008e7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e86:	81a3      	strheq	r3, [r4, #12]
 8008e88:	bf18      	it	ne
 8008e8a:	81a3      	strhne	r3, [r4, #12]
 8008e8c:	bd10      	pop	{r4, pc}

08008e8e <__sclose>:
 8008e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e92:	f000 b80d 	b.w	8008eb0 <_close_r>

08008e96 <memset>:
 8008e96:	4402      	add	r2, r0
 8008e98:	4603      	mov	r3, r0
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d100      	bne.n	8008ea0 <memset+0xa>
 8008e9e:	4770      	bx	lr
 8008ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea4:	e7f9      	b.n	8008e9a <memset+0x4>
	...

08008ea8 <_localeconv_r>:
 8008ea8:	4800      	ldr	r0, [pc, #0]	@ (8008eac <_localeconv_r+0x4>)
 8008eaa:	4770      	bx	lr
 8008eac:	20000160 	.word	0x20000160

08008eb0 <_close_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d06      	ldr	r5, [pc, #24]	@ (8008ecc <_close_r+0x1c>)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7f9 fa46 	bl	800234c <_close>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_close_r+0x1a>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_close_r+0x1a>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	200049a0 	.word	0x200049a0

08008ed0 <_lseek_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d07      	ldr	r5, [pc, #28]	@ (8008ef0 <_lseek_r+0x20>)
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	602a      	str	r2, [r5, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7f9 fa5b 	bl	800239a <_lseek>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_lseek_r+0x1e>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_lseek_r+0x1e>
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	200049a0 	.word	0x200049a0

08008ef4 <_read_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	@ (8008f14 <_read_r+0x20>)
 8008ef8:	4604      	mov	r4, r0
 8008efa:	4608      	mov	r0, r1
 8008efc:	4611      	mov	r1, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	602a      	str	r2, [r5, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7f9 f9e9 	bl	80022da <_read>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_read_r+0x1e>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_read_r+0x1e>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	200049a0 	.word	0x200049a0

08008f18 <_write_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d07      	ldr	r5, [pc, #28]	@ (8008f38 <_write_r+0x20>)
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	4608      	mov	r0, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	2200      	movs	r2, #0
 8008f24:	602a      	str	r2, [r5, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f7f9 f9f4 	bl	8002314 <_write>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_write_r+0x1e>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_write_r+0x1e>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	200049a0 	.word	0x200049a0

08008f3c <__errno>:
 8008f3c:	4b01      	ldr	r3, [pc, #4]	@ (8008f44 <__errno+0x8>)
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	20000020 	.word	0x20000020

08008f48 <__libc_init_array>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f80 <__libc_init_array+0x38>)
 8008f4c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f84 <__libc_init_array+0x3c>)
 8008f4e:	1b64      	subs	r4, r4, r5
 8008f50:	10a4      	asrs	r4, r4, #2
 8008f52:	2600      	movs	r6, #0
 8008f54:	42a6      	cmp	r6, r4
 8008f56:	d109      	bne.n	8008f6c <__libc_init_array+0x24>
 8008f58:	4d0b      	ldr	r5, [pc, #44]	@ (8008f88 <__libc_init_array+0x40>)
 8008f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f8c <__libc_init_array+0x44>)
 8008f5c:	f002 f866 	bl	800b02c <_init>
 8008f60:	1b64      	subs	r4, r4, r5
 8008f62:	10a4      	asrs	r4, r4, #2
 8008f64:	2600      	movs	r6, #0
 8008f66:	42a6      	cmp	r6, r4
 8008f68:	d105      	bne.n	8008f76 <__libc_init_array+0x2e>
 8008f6a:	bd70      	pop	{r4, r5, r6, pc}
 8008f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f70:	4798      	blx	r3
 8008f72:	3601      	adds	r6, #1
 8008f74:	e7ee      	b.n	8008f54 <__libc_init_array+0xc>
 8008f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f7a:	4798      	blx	r3
 8008f7c:	3601      	adds	r6, #1
 8008f7e:	e7f2      	b.n	8008f66 <__libc_init_array+0x1e>
 8008f80:	0800bf00 	.word	0x0800bf00
 8008f84:	0800bf00 	.word	0x0800bf00
 8008f88:	0800bf00 	.word	0x0800bf00
 8008f8c:	0800bf04 	.word	0x0800bf04

08008f90 <__retarget_lock_init_recursive>:
 8008f90:	4770      	bx	lr

08008f92 <__retarget_lock_acquire_recursive>:
 8008f92:	4770      	bx	lr

08008f94 <__retarget_lock_release_recursive>:
 8008f94:	4770      	bx	lr

08008f96 <memcpy>:
 8008f96:	440a      	add	r2, r1
 8008f98:	4291      	cmp	r1, r2
 8008f9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f9e:	d100      	bne.n	8008fa2 <memcpy+0xc>
 8008fa0:	4770      	bx	lr
 8008fa2:	b510      	push	{r4, lr}
 8008fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fac:	4291      	cmp	r1, r2
 8008fae:	d1f9      	bne.n	8008fa4 <memcpy+0xe>
 8008fb0:	bd10      	pop	{r4, pc}

08008fb2 <quorem>:
 8008fb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb6:	6903      	ldr	r3, [r0, #16]
 8008fb8:	690c      	ldr	r4, [r1, #16]
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	db7e      	blt.n	80090be <quorem+0x10c>
 8008fc0:	3c01      	subs	r4, #1
 8008fc2:	f101 0814 	add.w	r8, r1, #20
 8008fc6:	00a3      	lsls	r3, r4, #2
 8008fc8:	f100 0514 	add.w	r5, r0, #20
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fe4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fe8:	d32e      	bcc.n	8009048 <quorem+0x96>
 8008fea:	f04f 0a00 	mov.w	sl, #0
 8008fee:	46c4      	mov	ip, r8
 8008ff0:	46ae      	mov	lr, r5
 8008ff2:	46d3      	mov	fp, sl
 8008ff4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ff8:	b298      	uxth	r0, r3
 8008ffa:	fb06 a000 	mla	r0, r6, r0, sl
 8008ffe:	0c02      	lsrs	r2, r0, #16
 8009000:	0c1b      	lsrs	r3, r3, #16
 8009002:	fb06 2303 	mla	r3, r6, r3, r2
 8009006:	f8de 2000 	ldr.w	r2, [lr]
 800900a:	b280      	uxth	r0, r0
 800900c:	b292      	uxth	r2, r2
 800900e:	1a12      	subs	r2, r2, r0
 8009010:	445a      	add	r2, fp
 8009012:	f8de 0000 	ldr.w	r0, [lr]
 8009016:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800901a:	b29b      	uxth	r3, r3
 800901c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009020:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009024:	b292      	uxth	r2, r2
 8009026:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800902a:	45e1      	cmp	r9, ip
 800902c:	f84e 2b04 	str.w	r2, [lr], #4
 8009030:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009034:	d2de      	bcs.n	8008ff4 <quorem+0x42>
 8009036:	9b00      	ldr	r3, [sp, #0]
 8009038:	58eb      	ldr	r3, [r5, r3]
 800903a:	b92b      	cbnz	r3, 8009048 <quorem+0x96>
 800903c:	9b01      	ldr	r3, [sp, #4]
 800903e:	3b04      	subs	r3, #4
 8009040:	429d      	cmp	r5, r3
 8009042:	461a      	mov	r2, r3
 8009044:	d32f      	bcc.n	80090a6 <quorem+0xf4>
 8009046:	613c      	str	r4, [r7, #16]
 8009048:	4638      	mov	r0, r7
 800904a:	f001 f97b 	bl	800a344 <__mcmp>
 800904e:	2800      	cmp	r0, #0
 8009050:	db25      	blt.n	800909e <quorem+0xec>
 8009052:	4629      	mov	r1, r5
 8009054:	2000      	movs	r0, #0
 8009056:	f858 2b04 	ldr.w	r2, [r8], #4
 800905a:	f8d1 c000 	ldr.w	ip, [r1]
 800905e:	fa1f fe82 	uxth.w	lr, r2
 8009062:	fa1f f38c 	uxth.w	r3, ip
 8009066:	eba3 030e 	sub.w	r3, r3, lr
 800906a:	4403      	add	r3, r0
 800906c:	0c12      	lsrs	r2, r2, #16
 800906e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009072:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009076:	b29b      	uxth	r3, r3
 8009078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800907c:	45c1      	cmp	r9, r8
 800907e:	f841 3b04 	str.w	r3, [r1], #4
 8009082:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009086:	d2e6      	bcs.n	8009056 <quorem+0xa4>
 8009088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800908c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009090:	b922      	cbnz	r2, 800909c <quorem+0xea>
 8009092:	3b04      	subs	r3, #4
 8009094:	429d      	cmp	r5, r3
 8009096:	461a      	mov	r2, r3
 8009098:	d30b      	bcc.n	80090b2 <quorem+0x100>
 800909a:	613c      	str	r4, [r7, #16]
 800909c:	3601      	adds	r6, #1
 800909e:	4630      	mov	r0, r6
 80090a0:	b003      	add	sp, #12
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	6812      	ldr	r2, [r2, #0]
 80090a8:	3b04      	subs	r3, #4
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	d1cb      	bne.n	8009046 <quorem+0x94>
 80090ae:	3c01      	subs	r4, #1
 80090b0:	e7c6      	b.n	8009040 <quorem+0x8e>
 80090b2:	6812      	ldr	r2, [r2, #0]
 80090b4:	3b04      	subs	r3, #4
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	d1ef      	bne.n	800909a <quorem+0xe8>
 80090ba:	3c01      	subs	r4, #1
 80090bc:	e7ea      	b.n	8009094 <quorem+0xe2>
 80090be:	2000      	movs	r0, #0
 80090c0:	e7ee      	b.n	80090a0 <quorem+0xee>
 80090c2:	0000      	movs	r0, r0
 80090c4:	0000      	movs	r0, r0
	...

080090c8 <_dtoa_r>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	69c7      	ldr	r7, [r0, #28]
 80090ce:	b099      	sub	sp, #100	@ 0x64
 80090d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090d4:	ec55 4b10 	vmov	r4, r5, d0
 80090d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80090da:	9109      	str	r1, [sp, #36]	@ 0x24
 80090dc:	4683      	mov	fp, r0
 80090de:	920e      	str	r2, [sp, #56]	@ 0x38
 80090e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090e2:	b97f      	cbnz	r7, 8009104 <_dtoa_r+0x3c>
 80090e4:	2010      	movs	r0, #16
 80090e6:	f000 fdfd 	bl	8009ce4 <malloc>
 80090ea:	4602      	mov	r2, r0
 80090ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80090f0:	b920      	cbnz	r0, 80090fc <_dtoa_r+0x34>
 80090f2:	4ba7      	ldr	r3, [pc, #668]	@ (8009390 <_dtoa_r+0x2c8>)
 80090f4:	21ef      	movs	r1, #239	@ 0xef
 80090f6:	48a7      	ldr	r0, [pc, #668]	@ (8009394 <_dtoa_r+0x2cc>)
 80090f8:	f001 fc5a 	bl	800a9b0 <__assert_func>
 80090fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009100:	6007      	str	r7, [r0, #0]
 8009102:	60c7      	str	r7, [r0, #12]
 8009104:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009108:	6819      	ldr	r1, [r3, #0]
 800910a:	b159      	cbz	r1, 8009124 <_dtoa_r+0x5c>
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	604a      	str	r2, [r1, #4]
 8009110:	2301      	movs	r3, #1
 8009112:	4093      	lsls	r3, r2
 8009114:	608b      	str	r3, [r1, #8]
 8009116:	4658      	mov	r0, fp
 8009118:	f000 feda 	bl	8009ed0 <_Bfree>
 800911c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	1e2b      	subs	r3, r5, #0
 8009126:	bfb9      	ittee	lt
 8009128:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800912c:	9303      	strlt	r3, [sp, #12]
 800912e:	2300      	movge	r3, #0
 8009130:	6033      	strge	r3, [r6, #0]
 8009132:	9f03      	ldr	r7, [sp, #12]
 8009134:	4b98      	ldr	r3, [pc, #608]	@ (8009398 <_dtoa_r+0x2d0>)
 8009136:	bfbc      	itt	lt
 8009138:	2201      	movlt	r2, #1
 800913a:	6032      	strlt	r2, [r6, #0]
 800913c:	43bb      	bics	r3, r7
 800913e:	d112      	bne.n	8009166 <_dtoa_r+0x9e>
 8009140:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009142:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800914c:	4323      	orrs	r3, r4
 800914e:	f000 854d 	beq.w	8009bec <_dtoa_r+0xb24>
 8009152:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009154:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80093ac <_dtoa_r+0x2e4>
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 854f 	beq.w	8009bfc <_dtoa_r+0xb34>
 800915e:	f10a 0303 	add.w	r3, sl, #3
 8009162:	f000 bd49 	b.w	8009bf8 <_dtoa_r+0xb30>
 8009166:	ed9d 7b02 	vldr	d7, [sp, #8]
 800916a:	2200      	movs	r2, #0
 800916c:	ec51 0b17 	vmov	r0, r1, d7
 8009170:	2300      	movs	r3, #0
 8009172:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009176:	f7f7 fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 800917a:	4680      	mov	r8, r0
 800917c:	b158      	cbz	r0, 8009196 <_dtoa_r+0xce>
 800917e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009180:	2301      	movs	r3, #1
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009186:	b113      	cbz	r3, 800918e <_dtoa_r+0xc6>
 8009188:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800918a:	4b84      	ldr	r3, [pc, #528]	@ (800939c <_dtoa_r+0x2d4>)
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80093b0 <_dtoa_r+0x2e8>
 8009192:	f000 bd33 	b.w	8009bfc <_dtoa_r+0xb34>
 8009196:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800919a:	aa16      	add	r2, sp, #88	@ 0x58
 800919c:	a917      	add	r1, sp, #92	@ 0x5c
 800919e:	4658      	mov	r0, fp
 80091a0:	f001 f980 	bl	800a4a4 <__d2b>
 80091a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80091a8:	4681      	mov	r9, r0
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	d077      	beq.n	800929e <_dtoa_r+0x1d6>
 80091ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80091b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80091c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80091c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091c8:	4619      	mov	r1, r3
 80091ca:	2200      	movs	r2, #0
 80091cc:	4b74      	ldr	r3, [pc, #464]	@ (80093a0 <_dtoa_r+0x2d8>)
 80091ce:	f7f7 f85b 	bl	8000288 <__aeabi_dsub>
 80091d2:	a369      	add	r3, pc, #420	@ (adr r3, 8009378 <_dtoa_r+0x2b0>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f7f7 fa0e 	bl	80005f8 <__aeabi_dmul>
 80091dc:	a368      	add	r3, pc, #416	@ (adr r3, 8009380 <_dtoa_r+0x2b8>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f7f7 f853 	bl	800028c <__adddf3>
 80091e6:	4604      	mov	r4, r0
 80091e8:	4630      	mov	r0, r6
 80091ea:	460d      	mov	r5, r1
 80091ec:	f7f7 f99a 	bl	8000524 <__aeabi_i2d>
 80091f0:	a365      	add	r3, pc, #404	@ (adr r3, 8009388 <_dtoa_r+0x2c0>)
 80091f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f6:	f7f7 f9ff 	bl	80005f8 <__aeabi_dmul>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4620      	mov	r0, r4
 8009200:	4629      	mov	r1, r5
 8009202:	f7f7 f843 	bl	800028c <__adddf3>
 8009206:	4604      	mov	r4, r0
 8009208:	460d      	mov	r5, r1
 800920a:	f7f7 fca5 	bl	8000b58 <__aeabi_d2iz>
 800920e:	2200      	movs	r2, #0
 8009210:	4607      	mov	r7, r0
 8009212:	2300      	movs	r3, #0
 8009214:	4620      	mov	r0, r4
 8009216:	4629      	mov	r1, r5
 8009218:	f7f7 fc60 	bl	8000adc <__aeabi_dcmplt>
 800921c:	b140      	cbz	r0, 8009230 <_dtoa_r+0x168>
 800921e:	4638      	mov	r0, r7
 8009220:	f7f7 f980 	bl	8000524 <__aeabi_i2d>
 8009224:	4622      	mov	r2, r4
 8009226:	462b      	mov	r3, r5
 8009228:	f7f7 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800922c:	b900      	cbnz	r0, 8009230 <_dtoa_r+0x168>
 800922e:	3f01      	subs	r7, #1
 8009230:	2f16      	cmp	r7, #22
 8009232:	d851      	bhi.n	80092d8 <_dtoa_r+0x210>
 8009234:	4b5b      	ldr	r3, [pc, #364]	@ (80093a4 <_dtoa_r+0x2dc>)
 8009236:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009242:	f7f7 fc4b 	bl	8000adc <__aeabi_dcmplt>
 8009246:	2800      	cmp	r0, #0
 8009248:	d048      	beq.n	80092dc <_dtoa_r+0x214>
 800924a:	3f01      	subs	r7, #1
 800924c:	2300      	movs	r3, #0
 800924e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009250:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009252:	1b9b      	subs	r3, r3, r6
 8009254:	1e5a      	subs	r2, r3, #1
 8009256:	bf44      	itt	mi
 8009258:	f1c3 0801 	rsbmi	r8, r3, #1
 800925c:	2300      	movmi	r3, #0
 800925e:	9208      	str	r2, [sp, #32]
 8009260:	bf54      	ite	pl
 8009262:	f04f 0800 	movpl.w	r8, #0
 8009266:	9308      	strmi	r3, [sp, #32]
 8009268:	2f00      	cmp	r7, #0
 800926a:	db39      	blt.n	80092e0 <_dtoa_r+0x218>
 800926c:	9b08      	ldr	r3, [sp, #32]
 800926e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009270:	443b      	add	r3, r7
 8009272:	9308      	str	r3, [sp, #32]
 8009274:	2300      	movs	r3, #0
 8009276:	930a      	str	r3, [sp, #40]	@ 0x28
 8009278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800927a:	2b09      	cmp	r3, #9
 800927c:	d864      	bhi.n	8009348 <_dtoa_r+0x280>
 800927e:	2b05      	cmp	r3, #5
 8009280:	bfc4      	itt	gt
 8009282:	3b04      	subgt	r3, #4
 8009284:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009288:	f1a3 0302 	sub.w	r3, r3, #2
 800928c:	bfcc      	ite	gt
 800928e:	2400      	movgt	r4, #0
 8009290:	2401      	movle	r4, #1
 8009292:	2b03      	cmp	r3, #3
 8009294:	d863      	bhi.n	800935e <_dtoa_r+0x296>
 8009296:	e8df f003 	tbb	[pc, r3]
 800929a:	372a      	.short	0x372a
 800929c:	5535      	.short	0x5535
 800929e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80092a2:	441e      	add	r6, r3
 80092a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80092a8:	2b20      	cmp	r3, #32
 80092aa:	bfc1      	itttt	gt
 80092ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80092b0:	409f      	lslgt	r7, r3
 80092b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80092b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80092ba:	bfd6      	itet	le
 80092bc:	f1c3 0320 	rsble	r3, r3, #32
 80092c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80092c4:	fa04 f003 	lslle.w	r0, r4, r3
 80092c8:	f7f7 f91c 	bl	8000504 <__aeabi_ui2d>
 80092cc:	2201      	movs	r2, #1
 80092ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092d2:	3e01      	subs	r6, #1
 80092d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80092d6:	e777      	b.n	80091c8 <_dtoa_r+0x100>
 80092d8:	2301      	movs	r3, #1
 80092da:	e7b8      	b.n	800924e <_dtoa_r+0x186>
 80092dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80092de:	e7b7      	b.n	8009250 <_dtoa_r+0x188>
 80092e0:	427b      	negs	r3, r7
 80092e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80092e4:	2300      	movs	r3, #0
 80092e6:	eba8 0807 	sub.w	r8, r8, r7
 80092ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092ec:	e7c4      	b.n	8009278 <_dtoa_r+0x1b0>
 80092ee:	2300      	movs	r3, #0
 80092f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dc35      	bgt.n	8009364 <_dtoa_r+0x29c>
 80092f8:	2301      	movs	r3, #1
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	9307      	str	r3, [sp, #28]
 80092fe:	461a      	mov	r2, r3
 8009300:	920e      	str	r2, [sp, #56]	@ 0x38
 8009302:	e00b      	b.n	800931c <_dtoa_r+0x254>
 8009304:	2301      	movs	r3, #1
 8009306:	e7f3      	b.n	80092f0 <_dtoa_r+0x228>
 8009308:	2300      	movs	r3, #0
 800930a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800930c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	3301      	adds	r3, #1
 8009314:	2b01      	cmp	r3, #1
 8009316:	9307      	str	r3, [sp, #28]
 8009318:	bfb8      	it	lt
 800931a:	2301      	movlt	r3, #1
 800931c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009320:	2100      	movs	r1, #0
 8009322:	2204      	movs	r2, #4
 8009324:	f102 0514 	add.w	r5, r2, #20
 8009328:	429d      	cmp	r5, r3
 800932a:	d91f      	bls.n	800936c <_dtoa_r+0x2a4>
 800932c:	6041      	str	r1, [r0, #4]
 800932e:	4658      	mov	r0, fp
 8009330:	f000 fd8e 	bl	8009e50 <_Balloc>
 8009334:	4682      	mov	sl, r0
 8009336:	2800      	cmp	r0, #0
 8009338:	d13c      	bne.n	80093b4 <_dtoa_r+0x2ec>
 800933a:	4b1b      	ldr	r3, [pc, #108]	@ (80093a8 <_dtoa_r+0x2e0>)
 800933c:	4602      	mov	r2, r0
 800933e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009342:	e6d8      	b.n	80090f6 <_dtoa_r+0x2e>
 8009344:	2301      	movs	r3, #1
 8009346:	e7e0      	b.n	800930a <_dtoa_r+0x242>
 8009348:	2401      	movs	r4, #1
 800934a:	2300      	movs	r3, #0
 800934c:	9309      	str	r3, [sp, #36]	@ 0x24
 800934e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009350:	f04f 33ff 	mov.w	r3, #4294967295
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	2200      	movs	r2, #0
 800935a:	2312      	movs	r3, #18
 800935c:	e7d0      	b.n	8009300 <_dtoa_r+0x238>
 800935e:	2301      	movs	r3, #1
 8009360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009362:	e7f5      	b.n	8009350 <_dtoa_r+0x288>
 8009364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	9307      	str	r3, [sp, #28]
 800936a:	e7d7      	b.n	800931c <_dtoa_r+0x254>
 800936c:	3101      	adds	r1, #1
 800936e:	0052      	lsls	r2, r2, #1
 8009370:	e7d8      	b.n	8009324 <_dtoa_r+0x25c>
 8009372:	bf00      	nop
 8009374:	f3af 8000 	nop.w
 8009378:	636f4361 	.word	0x636f4361
 800937c:	3fd287a7 	.word	0x3fd287a7
 8009380:	8b60c8b3 	.word	0x8b60c8b3
 8009384:	3fc68a28 	.word	0x3fc68a28
 8009388:	509f79fb 	.word	0x509f79fb
 800938c:	3fd34413 	.word	0x3fd34413
 8009390:	0800bbc9 	.word	0x0800bbc9
 8009394:	0800bbe0 	.word	0x0800bbe0
 8009398:	7ff00000 	.word	0x7ff00000
 800939c:	0800bb99 	.word	0x0800bb99
 80093a0:	3ff80000 	.word	0x3ff80000
 80093a4:	0800bcd8 	.word	0x0800bcd8
 80093a8:	0800bc38 	.word	0x0800bc38
 80093ac:	0800bbc5 	.word	0x0800bbc5
 80093b0:	0800bb98 	.word	0x0800bb98
 80093b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093b8:	6018      	str	r0, [r3, #0]
 80093ba:	9b07      	ldr	r3, [sp, #28]
 80093bc:	2b0e      	cmp	r3, #14
 80093be:	f200 80a4 	bhi.w	800950a <_dtoa_r+0x442>
 80093c2:	2c00      	cmp	r4, #0
 80093c4:	f000 80a1 	beq.w	800950a <_dtoa_r+0x442>
 80093c8:	2f00      	cmp	r7, #0
 80093ca:	dd33      	ble.n	8009434 <_dtoa_r+0x36c>
 80093cc:	4bad      	ldr	r3, [pc, #692]	@ (8009684 <_dtoa_r+0x5bc>)
 80093ce:	f007 020f 	and.w	r2, r7, #15
 80093d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093d6:	ed93 7b00 	vldr	d7, [r3]
 80093da:	05f8      	lsls	r0, r7, #23
 80093dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80093e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80093e4:	d516      	bpl.n	8009414 <_dtoa_r+0x34c>
 80093e6:	4ba8      	ldr	r3, [pc, #672]	@ (8009688 <_dtoa_r+0x5c0>)
 80093e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093f0:	f7f7 fa2c 	bl	800084c <__aeabi_ddiv>
 80093f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f8:	f004 040f 	and.w	r4, r4, #15
 80093fc:	2603      	movs	r6, #3
 80093fe:	4da2      	ldr	r5, [pc, #648]	@ (8009688 <_dtoa_r+0x5c0>)
 8009400:	b954      	cbnz	r4, 8009418 <_dtoa_r+0x350>
 8009402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800940a:	f7f7 fa1f 	bl	800084c <__aeabi_ddiv>
 800940e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009412:	e028      	b.n	8009466 <_dtoa_r+0x39e>
 8009414:	2602      	movs	r6, #2
 8009416:	e7f2      	b.n	80093fe <_dtoa_r+0x336>
 8009418:	07e1      	lsls	r1, r4, #31
 800941a:	d508      	bpl.n	800942e <_dtoa_r+0x366>
 800941c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009420:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009424:	f7f7 f8e8 	bl	80005f8 <__aeabi_dmul>
 8009428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800942c:	3601      	adds	r6, #1
 800942e:	1064      	asrs	r4, r4, #1
 8009430:	3508      	adds	r5, #8
 8009432:	e7e5      	b.n	8009400 <_dtoa_r+0x338>
 8009434:	f000 80d2 	beq.w	80095dc <_dtoa_r+0x514>
 8009438:	427c      	negs	r4, r7
 800943a:	4b92      	ldr	r3, [pc, #584]	@ (8009684 <_dtoa_r+0x5bc>)
 800943c:	4d92      	ldr	r5, [pc, #584]	@ (8009688 <_dtoa_r+0x5c0>)
 800943e:	f004 020f 	and.w	r2, r4, #15
 8009442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800944e:	f7f7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8009452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009456:	1124      	asrs	r4, r4, #4
 8009458:	2300      	movs	r3, #0
 800945a:	2602      	movs	r6, #2
 800945c:	2c00      	cmp	r4, #0
 800945e:	f040 80b2 	bne.w	80095c6 <_dtoa_r+0x4fe>
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1d3      	bne.n	800940e <_dtoa_r+0x346>
 8009466:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009468:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 80b7 	beq.w	80095e0 <_dtoa_r+0x518>
 8009472:	4b86      	ldr	r3, [pc, #536]	@ (800968c <_dtoa_r+0x5c4>)
 8009474:	2200      	movs	r2, #0
 8009476:	4620      	mov	r0, r4
 8009478:	4629      	mov	r1, r5
 800947a:	f7f7 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800947e:	2800      	cmp	r0, #0
 8009480:	f000 80ae 	beq.w	80095e0 <_dtoa_r+0x518>
 8009484:	9b07      	ldr	r3, [sp, #28]
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 80aa 	beq.w	80095e0 <_dtoa_r+0x518>
 800948c:	9b00      	ldr	r3, [sp, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	dd37      	ble.n	8009502 <_dtoa_r+0x43a>
 8009492:	1e7b      	subs	r3, r7, #1
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	4620      	mov	r0, r4
 8009498:	4b7d      	ldr	r3, [pc, #500]	@ (8009690 <_dtoa_r+0x5c8>)
 800949a:	2200      	movs	r2, #0
 800949c:	4629      	mov	r1, r5
 800949e:	f7f7 f8ab 	bl	80005f8 <__aeabi_dmul>
 80094a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a6:	9c00      	ldr	r4, [sp, #0]
 80094a8:	3601      	adds	r6, #1
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7f7 f83a 	bl	8000524 <__aeabi_i2d>
 80094b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094b4:	f7f7 f8a0 	bl	80005f8 <__aeabi_dmul>
 80094b8:	4b76      	ldr	r3, [pc, #472]	@ (8009694 <_dtoa_r+0x5cc>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	f7f6 fee6 	bl	800028c <__adddf3>
 80094c0:	4605      	mov	r5, r0
 80094c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80094c6:	2c00      	cmp	r4, #0
 80094c8:	f040 808d 	bne.w	80095e6 <_dtoa_r+0x51e>
 80094cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094d0:	4b71      	ldr	r3, [pc, #452]	@ (8009698 <_dtoa_r+0x5d0>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	f7f6 fed8 	bl	8000288 <__aeabi_dsub>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094e0:	462a      	mov	r2, r5
 80094e2:	4633      	mov	r3, r6
 80094e4:	f7f7 fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	f040 828b 	bne.w	8009a04 <_dtoa_r+0x93c>
 80094ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f2:	462a      	mov	r2, r5
 80094f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80094f8:	f7f7 faf0 	bl	8000adc <__aeabi_dcmplt>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	f040 8128 	bne.w	8009752 <_dtoa_r+0x68a>
 8009502:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009506:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800950a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800950c:	2b00      	cmp	r3, #0
 800950e:	f2c0 815a 	blt.w	80097c6 <_dtoa_r+0x6fe>
 8009512:	2f0e      	cmp	r7, #14
 8009514:	f300 8157 	bgt.w	80097c6 <_dtoa_r+0x6fe>
 8009518:	4b5a      	ldr	r3, [pc, #360]	@ (8009684 <_dtoa_r+0x5bc>)
 800951a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800951e:	ed93 7b00 	vldr	d7, [r3]
 8009522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009524:	2b00      	cmp	r3, #0
 8009526:	ed8d 7b00 	vstr	d7, [sp]
 800952a:	da03      	bge.n	8009534 <_dtoa_r+0x46c>
 800952c:	9b07      	ldr	r3, [sp, #28]
 800952e:	2b00      	cmp	r3, #0
 8009530:	f340 8101 	ble.w	8009736 <_dtoa_r+0x66e>
 8009534:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009538:	4656      	mov	r6, sl
 800953a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800953e:	4620      	mov	r0, r4
 8009540:	4629      	mov	r1, r5
 8009542:	f7f7 f983 	bl	800084c <__aeabi_ddiv>
 8009546:	f7f7 fb07 	bl	8000b58 <__aeabi_d2iz>
 800954a:	4680      	mov	r8, r0
 800954c:	f7f6 ffea 	bl	8000524 <__aeabi_i2d>
 8009550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009554:	f7f7 f850 	bl	80005f8 <__aeabi_dmul>
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4620      	mov	r0, r4
 800955e:	4629      	mov	r1, r5
 8009560:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009564:	f7f6 fe90 	bl	8000288 <__aeabi_dsub>
 8009568:	f806 4b01 	strb.w	r4, [r6], #1
 800956c:	9d07      	ldr	r5, [sp, #28]
 800956e:	eba6 040a 	sub.w	r4, r6, sl
 8009572:	42a5      	cmp	r5, r4
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	f040 8117 	bne.w	80097aa <_dtoa_r+0x6e2>
 800957c:	f7f6 fe86 	bl	800028c <__adddf3>
 8009580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009584:	4604      	mov	r4, r0
 8009586:	460d      	mov	r5, r1
 8009588:	f7f7 fac6 	bl	8000b18 <__aeabi_dcmpgt>
 800958c:	2800      	cmp	r0, #0
 800958e:	f040 80f9 	bne.w	8009784 <_dtoa_r+0x6bc>
 8009592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009596:	4620      	mov	r0, r4
 8009598:	4629      	mov	r1, r5
 800959a:	f7f7 fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 800959e:	b118      	cbz	r0, 80095a8 <_dtoa_r+0x4e0>
 80095a0:	f018 0f01 	tst.w	r8, #1
 80095a4:	f040 80ee 	bne.w	8009784 <_dtoa_r+0x6bc>
 80095a8:	4649      	mov	r1, r9
 80095aa:	4658      	mov	r0, fp
 80095ac:	f000 fc90 	bl	8009ed0 <_Bfree>
 80095b0:	2300      	movs	r3, #0
 80095b2:	7033      	strb	r3, [r6, #0]
 80095b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095b6:	3701      	adds	r7, #1
 80095b8:	601f      	str	r7, [r3, #0]
 80095ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 831d 	beq.w	8009bfc <_dtoa_r+0xb34>
 80095c2:	601e      	str	r6, [r3, #0]
 80095c4:	e31a      	b.n	8009bfc <_dtoa_r+0xb34>
 80095c6:	07e2      	lsls	r2, r4, #31
 80095c8:	d505      	bpl.n	80095d6 <_dtoa_r+0x50e>
 80095ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ce:	f7f7 f813 	bl	80005f8 <__aeabi_dmul>
 80095d2:	3601      	adds	r6, #1
 80095d4:	2301      	movs	r3, #1
 80095d6:	1064      	asrs	r4, r4, #1
 80095d8:	3508      	adds	r5, #8
 80095da:	e73f      	b.n	800945c <_dtoa_r+0x394>
 80095dc:	2602      	movs	r6, #2
 80095de:	e742      	b.n	8009466 <_dtoa_r+0x39e>
 80095e0:	9c07      	ldr	r4, [sp, #28]
 80095e2:	9704      	str	r7, [sp, #16]
 80095e4:	e761      	b.n	80094aa <_dtoa_r+0x3e2>
 80095e6:	4b27      	ldr	r3, [pc, #156]	@ (8009684 <_dtoa_r+0x5bc>)
 80095e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095f2:	4454      	add	r4, sl
 80095f4:	2900      	cmp	r1, #0
 80095f6:	d053      	beq.n	80096a0 <_dtoa_r+0x5d8>
 80095f8:	4928      	ldr	r1, [pc, #160]	@ (800969c <_dtoa_r+0x5d4>)
 80095fa:	2000      	movs	r0, #0
 80095fc:	f7f7 f926 	bl	800084c <__aeabi_ddiv>
 8009600:	4633      	mov	r3, r6
 8009602:	462a      	mov	r2, r5
 8009604:	f7f6 fe40 	bl	8000288 <__aeabi_dsub>
 8009608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800960c:	4656      	mov	r6, sl
 800960e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009612:	f7f7 faa1 	bl	8000b58 <__aeabi_d2iz>
 8009616:	4605      	mov	r5, r0
 8009618:	f7f6 ff84 	bl	8000524 <__aeabi_i2d>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009624:	f7f6 fe30 	bl	8000288 <__aeabi_dsub>
 8009628:	3530      	adds	r5, #48	@ 0x30
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009632:	f806 5b01 	strb.w	r5, [r6], #1
 8009636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800963a:	f7f7 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800963e:	2800      	cmp	r0, #0
 8009640:	d171      	bne.n	8009726 <_dtoa_r+0x65e>
 8009642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009646:	4911      	ldr	r1, [pc, #68]	@ (800968c <_dtoa_r+0x5c4>)
 8009648:	2000      	movs	r0, #0
 800964a:	f7f6 fe1d 	bl	8000288 <__aeabi_dsub>
 800964e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009652:	f7f7 fa43 	bl	8000adc <__aeabi_dcmplt>
 8009656:	2800      	cmp	r0, #0
 8009658:	f040 8095 	bne.w	8009786 <_dtoa_r+0x6be>
 800965c:	42a6      	cmp	r6, r4
 800965e:	f43f af50 	beq.w	8009502 <_dtoa_r+0x43a>
 8009662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009666:	4b0a      	ldr	r3, [pc, #40]	@ (8009690 <_dtoa_r+0x5c8>)
 8009668:	2200      	movs	r2, #0
 800966a:	f7f6 ffc5 	bl	80005f8 <__aeabi_dmul>
 800966e:	4b08      	ldr	r3, [pc, #32]	@ (8009690 <_dtoa_r+0x5c8>)
 8009670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009674:	2200      	movs	r2, #0
 8009676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800967a:	f7f6 ffbd 	bl	80005f8 <__aeabi_dmul>
 800967e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009682:	e7c4      	b.n	800960e <_dtoa_r+0x546>
 8009684:	0800bcd8 	.word	0x0800bcd8
 8009688:	0800bcb0 	.word	0x0800bcb0
 800968c:	3ff00000 	.word	0x3ff00000
 8009690:	40240000 	.word	0x40240000
 8009694:	401c0000 	.word	0x401c0000
 8009698:	40140000 	.word	0x40140000
 800969c:	3fe00000 	.word	0x3fe00000
 80096a0:	4631      	mov	r1, r6
 80096a2:	4628      	mov	r0, r5
 80096a4:	f7f6 ffa8 	bl	80005f8 <__aeabi_dmul>
 80096a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80096ae:	4656      	mov	r6, sl
 80096b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096b4:	f7f7 fa50 	bl	8000b58 <__aeabi_d2iz>
 80096b8:	4605      	mov	r5, r0
 80096ba:	f7f6 ff33 	bl	8000524 <__aeabi_i2d>
 80096be:	4602      	mov	r2, r0
 80096c0:	460b      	mov	r3, r1
 80096c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c6:	f7f6 fddf 	bl	8000288 <__aeabi_dsub>
 80096ca:	3530      	adds	r5, #48	@ 0x30
 80096cc:	f806 5b01 	strb.w	r5, [r6], #1
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	42a6      	cmp	r6, r4
 80096d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096da:	f04f 0200 	mov.w	r2, #0
 80096de:	d124      	bne.n	800972a <_dtoa_r+0x662>
 80096e0:	4bac      	ldr	r3, [pc, #688]	@ (8009994 <_dtoa_r+0x8cc>)
 80096e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096e6:	f7f6 fdd1 	bl	800028c <__adddf3>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f2:	f7f7 fa11 	bl	8000b18 <__aeabi_dcmpgt>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d145      	bne.n	8009786 <_dtoa_r+0x6be>
 80096fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096fe:	49a5      	ldr	r1, [pc, #660]	@ (8009994 <_dtoa_r+0x8cc>)
 8009700:	2000      	movs	r0, #0
 8009702:	f7f6 fdc1 	bl	8000288 <__aeabi_dsub>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800970e:	f7f7 f9e5 	bl	8000adc <__aeabi_dcmplt>
 8009712:	2800      	cmp	r0, #0
 8009714:	f43f aef5 	beq.w	8009502 <_dtoa_r+0x43a>
 8009718:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800971a:	1e73      	subs	r3, r6, #1
 800971c:	9315      	str	r3, [sp, #84]	@ 0x54
 800971e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009722:	2b30      	cmp	r3, #48	@ 0x30
 8009724:	d0f8      	beq.n	8009718 <_dtoa_r+0x650>
 8009726:	9f04      	ldr	r7, [sp, #16]
 8009728:	e73e      	b.n	80095a8 <_dtoa_r+0x4e0>
 800972a:	4b9b      	ldr	r3, [pc, #620]	@ (8009998 <_dtoa_r+0x8d0>)
 800972c:	f7f6 ff64 	bl	80005f8 <__aeabi_dmul>
 8009730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009734:	e7bc      	b.n	80096b0 <_dtoa_r+0x5e8>
 8009736:	d10c      	bne.n	8009752 <_dtoa_r+0x68a>
 8009738:	4b98      	ldr	r3, [pc, #608]	@ (800999c <_dtoa_r+0x8d4>)
 800973a:	2200      	movs	r2, #0
 800973c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009740:	f7f6 ff5a 	bl	80005f8 <__aeabi_dmul>
 8009744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009748:	f7f7 f9dc 	bl	8000b04 <__aeabi_dcmpge>
 800974c:	2800      	cmp	r0, #0
 800974e:	f000 8157 	beq.w	8009a00 <_dtoa_r+0x938>
 8009752:	2400      	movs	r4, #0
 8009754:	4625      	mov	r5, r4
 8009756:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009758:	43db      	mvns	r3, r3
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	4656      	mov	r6, sl
 800975e:	2700      	movs	r7, #0
 8009760:	4621      	mov	r1, r4
 8009762:	4658      	mov	r0, fp
 8009764:	f000 fbb4 	bl	8009ed0 <_Bfree>
 8009768:	2d00      	cmp	r5, #0
 800976a:	d0dc      	beq.n	8009726 <_dtoa_r+0x65e>
 800976c:	b12f      	cbz	r7, 800977a <_dtoa_r+0x6b2>
 800976e:	42af      	cmp	r7, r5
 8009770:	d003      	beq.n	800977a <_dtoa_r+0x6b2>
 8009772:	4639      	mov	r1, r7
 8009774:	4658      	mov	r0, fp
 8009776:	f000 fbab 	bl	8009ed0 <_Bfree>
 800977a:	4629      	mov	r1, r5
 800977c:	4658      	mov	r0, fp
 800977e:	f000 fba7 	bl	8009ed0 <_Bfree>
 8009782:	e7d0      	b.n	8009726 <_dtoa_r+0x65e>
 8009784:	9704      	str	r7, [sp, #16]
 8009786:	4633      	mov	r3, r6
 8009788:	461e      	mov	r6, r3
 800978a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800978e:	2a39      	cmp	r2, #57	@ 0x39
 8009790:	d107      	bne.n	80097a2 <_dtoa_r+0x6da>
 8009792:	459a      	cmp	sl, r3
 8009794:	d1f8      	bne.n	8009788 <_dtoa_r+0x6c0>
 8009796:	9a04      	ldr	r2, [sp, #16]
 8009798:	3201      	adds	r2, #1
 800979a:	9204      	str	r2, [sp, #16]
 800979c:	2230      	movs	r2, #48	@ 0x30
 800979e:	f88a 2000 	strb.w	r2, [sl]
 80097a2:	781a      	ldrb	r2, [r3, #0]
 80097a4:	3201      	adds	r2, #1
 80097a6:	701a      	strb	r2, [r3, #0]
 80097a8:	e7bd      	b.n	8009726 <_dtoa_r+0x65e>
 80097aa:	4b7b      	ldr	r3, [pc, #492]	@ (8009998 <_dtoa_r+0x8d0>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	f7f6 ff23 	bl	80005f8 <__aeabi_dmul>
 80097b2:	2200      	movs	r2, #0
 80097b4:	2300      	movs	r3, #0
 80097b6:	4604      	mov	r4, r0
 80097b8:	460d      	mov	r5, r1
 80097ba:	f7f7 f985 	bl	8000ac8 <__aeabi_dcmpeq>
 80097be:	2800      	cmp	r0, #0
 80097c0:	f43f aebb 	beq.w	800953a <_dtoa_r+0x472>
 80097c4:	e6f0      	b.n	80095a8 <_dtoa_r+0x4e0>
 80097c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80097c8:	2a00      	cmp	r2, #0
 80097ca:	f000 80db 	beq.w	8009984 <_dtoa_r+0x8bc>
 80097ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097d0:	2a01      	cmp	r2, #1
 80097d2:	f300 80bf 	bgt.w	8009954 <_dtoa_r+0x88c>
 80097d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80097d8:	2a00      	cmp	r2, #0
 80097da:	f000 80b7 	beq.w	800994c <_dtoa_r+0x884>
 80097de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80097e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80097e4:	4646      	mov	r6, r8
 80097e6:	9a08      	ldr	r2, [sp, #32]
 80097e8:	2101      	movs	r1, #1
 80097ea:	441a      	add	r2, r3
 80097ec:	4658      	mov	r0, fp
 80097ee:	4498      	add	r8, r3
 80097f0:	9208      	str	r2, [sp, #32]
 80097f2:	f000 fc21 	bl	800a038 <__i2b>
 80097f6:	4605      	mov	r5, r0
 80097f8:	b15e      	cbz	r6, 8009812 <_dtoa_r+0x74a>
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dd08      	ble.n	8009812 <_dtoa_r+0x74a>
 8009800:	42b3      	cmp	r3, r6
 8009802:	9a08      	ldr	r2, [sp, #32]
 8009804:	bfa8      	it	ge
 8009806:	4633      	movge	r3, r6
 8009808:	eba8 0803 	sub.w	r8, r8, r3
 800980c:	1af6      	subs	r6, r6, r3
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	9308      	str	r3, [sp, #32]
 8009812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009814:	b1f3      	cbz	r3, 8009854 <_dtoa_r+0x78c>
 8009816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 80b7 	beq.w	800998c <_dtoa_r+0x8c4>
 800981e:	b18c      	cbz	r4, 8009844 <_dtoa_r+0x77c>
 8009820:	4629      	mov	r1, r5
 8009822:	4622      	mov	r2, r4
 8009824:	4658      	mov	r0, fp
 8009826:	f000 fcc7 	bl	800a1b8 <__pow5mult>
 800982a:	464a      	mov	r2, r9
 800982c:	4601      	mov	r1, r0
 800982e:	4605      	mov	r5, r0
 8009830:	4658      	mov	r0, fp
 8009832:	f000 fc17 	bl	800a064 <__multiply>
 8009836:	4649      	mov	r1, r9
 8009838:	9004      	str	r0, [sp, #16]
 800983a:	4658      	mov	r0, fp
 800983c:	f000 fb48 	bl	8009ed0 <_Bfree>
 8009840:	9b04      	ldr	r3, [sp, #16]
 8009842:	4699      	mov	r9, r3
 8009844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009846:	1b1a      	subs	r2, r3, r4
 8009848:	d004      	beq.n	8009854 <_dtoa_r+0x78c>
 800984a:	4649      	mov	r1, r9
 800984c:	4658      	mov	r0, fp
 800984e:	f000 fcb3 	bl	800a1b8 <__pow5mult>
 8009852:	4681      	mov	r9, r0
 8009854:	2101      	movs	r1, #1
 8009856:	4658      	mov	r0, fp
 8009858:	f000 fbee 	bl	800a038 <__i2b>
 800985c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800985e:	4604      	mov	r4, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 81cf 	beq.w	8009c04 <_dtoa_r+0xb3c>
 8009866:	461a      	mov	r2, r3
 8009868:	4601      	mov	r1, r0
 800986a:	4658      	mov	r0, fp
 800986c:	f000 fca4 	bl	800a1b8 <__pow5mult>
 8009870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009872:	2b01      	cmp	r3, #1
 8009874:	4604      	mov	r4, r0
 8009876:	f300 8095 	bgt.w	80099a4 <_dtoa_r+0x8dc>
 800987a:	9b02      	ldr	r3, [sp, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 8087 	bne.w	8009990 <_dtoa_r+0x8c8>
 8009882:	9b03      	ldr	r3, [sp, #12]
 8009884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009888:	2b00      	cmp	r3, #0
 800988a:	f040 8089 	bne.w	80099a0 <_dtoa_r+0x8d8>
 800988e:	9b03      	ldr	r3, [sp, #12]
 8009890:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009894:	0d1b      	lsrs	r3, r3, #20
 8009896:	051b      	lsls	r3, r3, #20
 8009898:	b12b      	cbz	r3, 80098a6 <_dtoa_r+0x7de>
 800989a:	9b08      	ldr	r3, [sp, #32]
 800989c:	3301      	adds	r3, #1
 800989e:	9308      	str	r3, [sp, #32]
 80098a0:	f108 0801 	add.w	r8, r8, #1
 80098a4:	2301      	movs	r3, #1
 80098a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 81b0 	beq.w	8009c10 <_dtoa_r+0xb48>
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098b6:	6918      	ldr	r0, [r3, #16]
 80098b8:	f000 fb72 	bl	8009fa0 <__hi0bits>
 80098bc:	f1c0 0020 	rsb	r0, r0, #32
 80098c0:	9b08      	ldr	r3, [sp, #32]
 80098c2:	4418      	add	r0, r3
 80098c4:	f010 001f 	ands.w	r0, r0, #31
 80098c8:	d077      	beq.n	80099ba <_dtoa_r+0x8f2>
 80098ca:	f1c0 0320 	rsb	r3, r0, #32
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	dd6b      	ble.n	80099aa <_dtoa_r+0x8e2>
 80098d2:	9b08      	ldr	r3, [sp, #32]
 80098d4:	f1c0 001c 	rsb	r0, r0, #28
 80098d8:	4403      	add	r3, r0
 80098da:	4480      	add	r8, r0
 80098dc:	4406      	add	r6, r0
 80098de:	9308      	str	r3, [sp, #32]
 80098e0:	f1b8 0f00 	cmp.w	r8, #0
 80098e4:	dd05      	ble.n	80098f2 <_dtoa_r+0x82a>
 80098e6:	4649      	mov	r1, r9
 80098e8:	4642      	mov	r2, r8
 80098ea:	4658      	mov	r0, fp
 80098ec:	f000 fcbe 	bl	800a26c <__lshift>
 80098f0:	4681      	mov	r9, r0
 80098f2:	9b08      	ldr	r3, [sp, #32]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd05      	ble.n	8009904 <_dtoa_r+0x83c>
 80098f8:	4621      	mov	r1, r4
 80098fa:	461a      	mov	r2, r3
 80098fc:	4658      	mov	r0, fp
 80098fe:	f000 fcb5 	bl	800a26c <__lshift>
 8009902:	4604      	mov	r4, r0
 8009904:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009906:	2b00      	cmp	r3, #0
 8009908:	d059      	beq.n	80099be <_dtoa_r+0x8f6>
 800990a:	4621      	mov	r1, r4
 800990c:	4648      	mov	r0, r9
 800990e:	f000 fd19 	bl	800a344 <__mcmp>
 8009912:	2800      	cmp	r0, #0
 8009914:	da53      	bge.n	80099be <_dtoa_r+0x8f6>
 8009916:	1e7b      	subs	r3, r7, #1
 8009918:	9304      	str	r3, [sp, #16]
 800991a:	4649      	mov	r1, r9
 800991c:	2300      	movs	r3, #0
 800991e:	220a      	movs	r2, #10
 8009920:	4658      	mov	r0, fp
 8009922:	f000 faf7 	bl	8009f14 <__multadd>
 8009926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009928:	4681      	mov	r9, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 8172 	beq.w	8009c14 <_dtoa_r+0xb4c>
 8009930:	2300      	movs	r3, #0
 8009932:	4629      	mov	r1, r5
 8009934:	220a      	movs	r2, #10
 8009936:	4658      	mov	r0, fp
 8009938:	f000 faec 	bl	8009f14 <__multadd>
 800993c:	9b00      	ldr	r3, [sp, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	4605      	mov	r5, r0
 8009942:	dc67      	bgt.n	8009a14 <_dtoa_r+0x94c>
 8009944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009946:	2b02      	cmp	r3, #2
 8009948:	dc41      	bgt.n	80099ce <_dtoa_r+0x906>
 800994a:	e063      	b.n	8009a14 <_dtoa_r+0x94c>
 800994c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800994e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009952:	e746      	b.n	80097e2 <_dtoa_r+0x71a>
 8009954:	9b07      	ldr	r3, [sp, #28]
 8009956:	1e5c      	subs	r4, r3, #1
 8009958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800995a:	42a3      	cmp	r3, r4
 800995c:	bfbf      	itttt	lt
 800995e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009960:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009962:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009964:	1ae3      	sublt	r3, r4, r3
 8009966:	bfb4      	ite	lt
 8009968:	18d2      	addlt	r2, r2, r3
 800996a:	1b1c      	subge	r4, r3, r4
 800996c:	9b07      	ldr	r3, [sp, #28]
 800996e:	bfbc      	itt	lt
 8009970:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009972:	2400      	movlt	r4, #0
 8009974:	2b00      	cmp	r3, #0
 8009976:	bfb5      	itete	lt
 8009978:	eba8 0603 	sublt.w	r6, r8, r3
 800997c:	9b07      	ldrge	r3, [sp, #28]
 800997e:	2300      	movlt	r3, #0
 8009980:	4646      	movge	r6, r8
 8009982:	e730      	b.n	80097e6 <_dtoa_r+0x71e>
 8009984:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009986:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009988:	4646      	mov	r6, r8
 800998a:	e735      	b.n	80097f8 <_dtoa_r+0x730>
 800998c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800998e:	e75c      	b.n	800984a <_dtoa_r+0x782>
 8009990:	2300      	movs	r3, #0
 8009992:	e788      	b.n	80098a6 <_dtoa_r+0x7de>
 8009994:	3fe00000 	.word	0x3fe00000
 8009998:	40240000 	.word	0x40240000
 800999c:	40140000 	.word	0x40140000
 80099a0:	9b02      	ldr	r3, [sp, #8]
 80099a2:	e780      	b.n	80098a6 <_dtoa_r+0x7de>
 80099a4:	2300      	movs	r3, #0
 80099a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099a8:	e782      	b.n	80098b0 <_dtoa_r+0x7e8>
 80099aa:	d099      	beq.n	80098e0 <_dtoa_r+0x818>
 80099ac:	9a08      	ldr	r2, [sp, #32]
 80099ae:	331c      	adds	r3, #28
 80099b0:	441a      	add	r2, r3
 80099b2:	4498      	add	r8, r3
 80099b4:	441e      	add	r6, r3
 80099b6:	9208      	str	r2, [sp, #32]
 80099b8:	e792      	b.n	80098e0 <_dtoa_r+0x818>
 80099ba:	4603      	mov	r3, r0
 80099bc:	e7f6      	b.n	80099ac <_dtoa_r+0x8e4>
 80099be:	9b07      	ldr	r3, [sp, #28]
 80099c0:	9704      	str	r7, [sp, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dc20      	bgt.n	8009a08 <_dtoa_r+0x940>
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	dd1e      	ble.n	8009a0c <_dtoa_r+0x944>
 80099ce:	9b00      	ldr	r3, [sp, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f47f aec0 	bne.w	8009756 <_dtoa_r+0x68e>
 80099d6:	4621      	mov	r1, r4
 80099d8:	2205      	movs	r2, #5
 80099da:	4658      	mov	r0, fp
 80099dc:	f000 fa9a 	bl	8009f14 <__multadd>
 80099e0:	4601      	mov	r1, r0
 80099e2:	4604      	mov	r4, r0
 80099e4:	4648      	mov	r0, r9
 80099e6:	f000 fcad 	bl	800a344 <__mcmp>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	f77f aeb3 	ble.w	8009756 <_dtoa_r+0x68e>
 80099f0:	4656      	mov	r6, sl
 80099f2:	2331      	movs	r3, #49	@ 0x31
 80099f4:	f806 3b01 	strb.w	r3, [r6], #1
 80099f8:	9b04      	ldr	r3, [sp, #16]
 80099fa:	3301      	adds	r3, #1
 80099fc:	9304      	str	r3, [sp, #16]
 80099fe:	e6ae      	b.n	800975e <_dtoa_r+0x696>
 8009a00:	9c07      	ldr	r4, [sp, #28]
 8009a02:	9704      	str	r7, [sp, #16]
 8009a04:	4625      	mov	r5, r4
 8009a06:	e7f3      	b.n	80099f0 <_dtoa_r+0x928>
 8009a08:	9b07      	ldr	r3, [sp, #28]
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 8104 	beq.w	8009c1c <_dtoa_r+0xb54>
 8009a14:	2e00      	cmp	r6, #0
 8009a16:	dd05      	ble.n	8009a24 <_dtoa_r+0x95c>
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	4658      	mov	r0, fp
 8009a1e:	f000 fc25 	bl	800a26c <__lshift>
 8009a22:	4605      	mov	r5, r0
 8009a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d05a      	beq.n	8009ae0 <_dtoa_r+0xa18>
 8009a2a:	6869      	ldr	r1, [r5, #4]
 8009a2c:	4658      	mov	r0, fp
 8009a2e:	f000 fa0f 	bl	8009e50 <_Balloc>
 8009a32:	4606      	mov	r6, r0
 8009a34:	b928      	cbnz	r0, 8009a42 <_dtoa_r+0x97a>
 8009a36:	4b84      	ldr	r3, [pc, #528]	@ (8009c48 <_dtoa_r+0xb80>)
 8009a38:	4602      	mov	r2, r0
 8009a3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a3e:	f7ff bb5a 	b.w	80090f6 <_dtoa_r+0x2e>
 8009a42:	692a      	ldr	r2, [r5, #16]
 8009a44:	3202      	adds	r2, #2
 8009a46:	0092      	lsls	r2, r2, #2
 8009a48:	f105 010c 	add.w	r1, r5, #12
 8009a4c:	300c      	adds	r0, #12
 8009a4e:	f7ff faa2 	bl	8008f96 <memcpy>
 8009a52:	2201      	movs	r2, #1
 8009a54:	4631      	mov	r1, r6
 8009a56:	4658      	mov	r0, fp
 8009a58:	f000 fc08 	bl	800a26c <__lshift>
 8009a5c:	f10a 0301 	add.w	r3, sl, #1
 8009a60:	9307      	str	r3, [sp, #28]
 8009a62:	9b00      	ldr	r3, [sp, #0]
 8009a64:	4453      	add	r3, sl
 8009a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a68:	9b02      	ldr	r3, [sp, #8]
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	462f      	mov	r7, r5
 8009a70:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a72:	4605      	mov	r5, r0
 8009a74:	9b07      	ldr	r3, [sp, #28]
 8009a76:	4621      	mov	r1, r4
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	4648      	mov	r0, r9
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	f7ff fa98 	bl	8008fb2 <quorem>
 8009a82:	4639      	mov	r1, r7
 8009a84:	9002      	str	r0, [sp, #8]
 8009a86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a8a:	4648      	mov	r0, r9
 8009a8c:	f000 fc5a 	bl	800a344 <__mcmp>
 8009a90:	462a      	mov	r2, r5
 8009a92:	9008      	str	r0, [sp, #32]
 8009a94:	4621      	mov	r1, r4
 8009a96:	4658      	mov	r0, fp
 8009a98:	f000 fc70 	bl	800a37c <__mdiff>
 8009a9c:	68c2      	ldr	r2, [r0, #12]
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	bb02      	cbnz	r2, 8009ae4 <_dtoa_r+0xa1c>
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	4648      	mov	r0, r9
 8009aa6:	f000 fc4d 	bl	800a344 <__mcmp>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	4631      	mov	r1, r6
 8009aae:	4658      	mov	r0, fp
 8009ab0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ab2:	f000 fa0d 	bl	8009ed0 <_Bfree>
 8009ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009aba:	9e07      	ldr	r6, [sp, #28]
 8009abc:	ea43 0102 	orr.w	r1, r3, r2
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ac2:	4319      	orrs	r1, r3
 8009ac4:	d110      	bne.n	8009ae8 <_dtoa_r+0xa20>
 8009ac6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009aca:	d029      	beq.n	8009b20 <_dtoa_r+0xa58>
 8009acc:	9b08      	ldr	r3, [sp, #32]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	dd02      	ble.n	8009ad8 <_dtoa_r+0xa10>
 8009ad2:	9b02      	ldr	r3, [sp, #8]
 8009ad4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ad8:	9b00      	ldr	r3, [sp, #0]
 8009ada:	f883 8000 	strb.w	r8, [r3]
 8009ade:	e63f      	b.n	8009760 <_dtoa_r+0x698>
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	e7bb      	b.n	8009a5c <_dtoa_r+0x994>
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	e7e1      	b.n	8009aac <_dtoa_r+0x9e4>
 8009ae8:	9b08      	ldr	r3, [sp, #32]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	db04      	blt.n	8009af8 <_dtoa_r+0xa30>
 8009aee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009af0:	430b      	orrs	r3, r1
 8009af2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009af4:	430b      	orrs	r3, r1
 8009af6:	d120      	bne.n	8009b3a <_dtoa_r+0xa72>
 8009af8:	2a00      	cmp	r2, #0
 8009afa:	dded      	ble.n	8009ad8 <_dtoa_r+0xa10>
 8009afc:	4649      	mov	r1, r9
 8009afe:	2201      	movs	r2, #1
 8009b00:	4658      	mov	r0, fp
 8009b02:	f000 fbb3 	bl	800a26c <__lshift>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4681      	mov	r9, r0
 8009b0a:	f000 fc1b 	bl	800a344 <__mcmp>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	dc03      	bgt.n	8009b1a <_dtoa_r+0xa52>
 8009b12:	d1e1      	bne.n	8009ad8 <_dtoa_r+0xa10>
 8009b14:	f018 0f01 	tst.w	r8, #1
 8009b18:	d0de      	beq.n	8009ad8 <_dtoa_r+0xa10>
 8009b1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b1e:	d1d8      	bne.n	8009ad2 <_dtoa_r+0xa0a>
 8009b20:	9a00      	ldr	r2, [sp, #0]
 8009b22:	2339      	movs	r3, #57	@ 0x39
 8009b24:	7013      	strb	r3, [r2, #0]
 8009b26:	4633      	mov	r3, r6
 8009b28:	461e      	mov	r6, r3
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b30:	2a39      	cmp	r2, #57	@ 0x39
 8009b32:	d052      	beq.n	8009bda <_dtoa_r+0xb12>
 8009b34:	3201      	adds	r2, #1
 8009b36:	701a      	strb	r2, [r3, #0]
 8009b38:	e612      	b.n	8009760 <_dtoa_r+0x698>
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	dd07      	ble.n	8009b4e <_dtoa_r+0xa86>
 8009b3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b42:	d0ed      	beq.n	8009b20 <_dtoa_r+0xa58>
 8009b44:	9a00      	ldr	r2, [sp, #0]
 8009b46:	f108 0301 	add.w	r3, r8, #1
 8009b4a:	7013      	strb	r3, [r2, #0]
 8009b4c:	e608      	b.n	8009760 <_dtoa_r+0x698>
 8009b4e:	9b07      	ldr	r3, [sp, #28]
 8009b50:	9a07      	ldr	r2, [sp, #28]
 8009b52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d028      	beq.n	8009bae <_dtoa_r+0xae6>
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	2300      	movs	r3, #0
 8009b60:	220a      	movs	r2, #10
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 f9d6 	bl	8009f14 <__multadd>
 8009b68:	42af      	cmp	r7, r5
 8009b6a:	4681      	mov	r9, r0
 8009b6c:	f04f 0300 	mov.w	r3, #0
 8009b70:	f04f 020a 	mov.w	r2, #10
 8009b74:	4639      	mov	r1, r7
 8009b76:	4658      	mov	r0, fp
 8009b78:	d107      	bne.n	8009b8a <_dtoa_r+0xac2>
 8009b7a:	f000 f9cb 	bl	8009f14 <__multadd>
 8009b7e:	4607      	mov	r7, r0
 8009b80:	4605      	mov	r5, r0
 8009b82:	9b07      	ldr	r3, [sp, #28]
 8009b84:	3301      	adds	r3, #1
 8009b86:	9307      	str	r3, [sp, #28]
 8009b88:	e774      	b.n	8009a74 <_dtoa_r+0x9ac>
 8009b8a:	f000 f9c3 	bl	8009f14 <__multadd>
 8009b8e:	4629      	mov	r1, r5
 8009b90:	4607      	mov	r7, r0
 8009b92:	2300      	movs	r3, #0
 8009b94:	220a      	movs	r2, #10
 8009b96:	4658      	mov	r0, fp
 8009b98:	f000 f9bc 	bl	8009f14 <__multadd>
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	e7f0      	b.n	8009b82 <_dtoa_r+0xaba>
 8009ba0:	9b00      	ldr	r3, [sp, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	bfcc      	ite	gt
 8009ba6:	461e      	movgt	r6, r3
 8009ba8:	2601      	movle	r6, #1
 8009baa:	4456      	add	r6, sl
 8009bac:	2700      	movs	r7, #0
 8009bae:	4649      	mov	r1, r9
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	4658      	mov	r0, fp
 8009bb4:	f000 fb5a 	bl	800a26c <__lshift>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	4681      	mov	r9, r0
 8009bbc:	f000 fbc2 	bl	800a344 <__mcmp>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	dcb0      	bgt.n	8009b26 <_dtoa_r+0xa5e>
 8009bc4:	d102      	bne.n	8009bcc <_dtoa_r+0xb04>
 8009bc6:	f018 0f01 	tst.w	r8, #1
 8009bca:	d1ac      	bne.n	8009b26 <_dtoa_r+0xa5e>
 8009bcc:	4633      	mov	r3, r6
 8009bce:	461e      	mov	r6, r3
 8009bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bd4:	2a30      	cmp	r2, #48	@ 0x30
 8009bd6:	d0fa      	beq.n	8009bce <_dtoa_r+0xb06>
 8009bd8:	e5c2      	b.n	8009760 <_dtoa_r+0x698>
 8009bda:	459a      	cmp	sl, r3
 8009bdc:	d1a4      	bne.n	8009b28 <_dtoa_r+0xa60>
 8009bde:	9b04      	ldr	r3, [sp, #16]
 8009be0:	3301      	adds	r3, #1
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	2331      	movs	r3, #49	@ 0x31
 8009be6:	f88a 3000 	strb.w	r3, [sl]
 8009bea:	e5b9      	b.n	8009760 <_dtoa_r+0x698>
 8009bec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c4c <_dtoa_r+0xb84>
 8009bf2:	b11b      	cbz	r3, 8009bfc <_dtoa_r+0xb34>
 8009bf4:	f10a 0308 	add.w	r3, sl, #8
 8009bf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009bfa:	6013      	str	r3, [r2, #0]
 8009bfc:	4650      	mov	r0, sl
 8009bfe:	b019      	add	sp, #100	@ 0x64
 8009c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	f77f ae37 	ble.w	800987a <_dtoa_r+0x7b2>
 8009c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c10:	2001      	movs	r0, #1
 8009c12:	e655      	b.n	80098c0 <_dtoa_r+0x7f8>
 8009c14:	9b00      	ldr	r3, [sp, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f77f aed6 	ble.w	80099c8 <_dtoa_r+0x900>
 8009c1c:	4656      	mov	r6, sl
 8009c1e:	4621      	mov	r1, r4
 8009c20:	4648      	mov	r0, r9
 8009c22:	f7ff f9c6 	bl	8008fb2 <quorem>
 8009c26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c2a:	f806 8b01 	strb.w	r8, [r6], #1
 8009c2e:	9b00      	ldr	r3, [sp, #0]
 8009c30:	eba6 020a 	sub.w	r2, r6, sl
 8009c34:	4293      	cmp	r3, r2
 8009c36:	ddb3      	ble.n	8009ba0 <_dtoa_r+0xad8>
 8009c38:	4649      	mov	r1, r9
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	220a      	movs	r2, #10
 8009c3e:	4658      	mov	r0, fp
 8009c40:	f000 f968 	bl	8009f14 <__multadd>
 8009c44:	4681      	mov	r9, r0
 8009c46:	e7ea      	b.n	8009c1e <_dtoa_r+0xb56>
 8009c48:	0800bc38 	.word	0x0800bc38
 8009c4c:	0800bbbc 	.word	0x0800bbbc

08009c50 <_free_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4605      	mov	r5, r0
 8009c54:	2900      	cmp	r1, #0
 8009c56:	d041      	beq.n	8009cdc <_free_r+0x8c>
 8009c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c5c:	1f0c      	subs	r4, r1, #4
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bfb8      	it	lt
 8009c62:	18e4      	addlt	r4, r4, r3
 8009c64:	f000 f8e8 	bl	8009e38 <__malloc_lock>
 8009c68:	4a1d      	ldr	r2, [pc, #116]	@ (8009ce0 <_free_r+0x90>)
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	b933      	cbnz	r3, 8009c7c <_free_r+0x2c>
 8009c6e:	6063      	str	r3, [r4, #4]
 8009c70:	6014      	str	r4, [r2, #0]
 8009c72:	4628      	mov	r0, r5
 8009c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c78:	f000 b8e4 	b.w	8009e44 <__malloc_unlock>
 8009c7c:	42a3      	cmp	r3, r4
 8009c7e:	d908      	bls.n	8009c92 <_free_r+0x42>
 8009c80:	6820      	ldr	r0, [r4, #0]
 8009c82:	1821      	adds	r1, r4, r0
 8009c84:	428b      	cmp	r3, r1
 8009c86:	bf01      	itttt	eq
 8009c88:	6819      	ldreq	r1, [r3, #0]
 8009c8a:	685b      	ldreq	r3, [r3, #4]
 8009c8c:	1809      	addeq	r1, r1, r0
 8009c8e:	6021      	streq	r1, [r4, #0]
 8009c90:	e7ed      	b.n	8009c6e <_free_r+0x1e>
 8009c92:	461a      	mov	r2, r3
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	b10b      	cbz	r3, 8009c9c <_free_r+0x4c>
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	d9fa      	bls.n	8009c92 <_free_r+0x42>
 8009c9c:	6811      	ldr	r1, [r2, #0]
 8009c9e:	1850      	adds	r0, r2, r1
 8009ca0:	42a0      	cmp	r0, r4
 8009ca2:	d10b      	bne.n	8009cbc <_free_r+0x6c>
 8009ca4:	6820      	ldr	r0, [r4, #0]
 8009ca6:	4401      	add	r1, r0
 8009ca8:	1850      	adds	r0, r2, r1
 8009caa:	4283      	cmp	r3, r0
 8009cac:	6011      	str	r1, [r2, #0]
 8009cae:	d1e0      	bne.n	8009c72 <_free_r+0x22>
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	6053      	str	r3, [r2, #4]
 8009cb6:	4408      	add	r0, r1
 8009cb8:	6010      	str	r0, [r2, #0]
 8009cba:	e7da      	b.n	8009c72 <_free_r+0x22>
 8009cbc:	d902      	bls.n	8009cc4 <_free_r+0x74>
 8009cbe:	230c      	movs	r3, #12
 8009cc0:	602b      	str	r3, [r5, #0]
 8009cc2:	e7d6      	b.n	8009c72 <_free_r+0x22>
 8009cc4:	6820      	ldr	r0, [r4, #0]
 8009cc6:	1821      	adds	r1, r4, r0
 8009cc8:	428b      	cmp	r3, r1
 8009cca:	bf04      	itt	eq
 8009ccc:	6819      	ldreq	r1, [r3, #0]
 8009cce:	685b      	ldreq	r3, [r3, #4]
 8009cd0:	6063      	str	r3, [r4, #4]
 8009cd2:	bf04      	itt	eq
 8009cd4:	1809      	addeq	r1, r1, r0
 8009cd6:	6021      	streq	r1, [r4, #0]
 8009cd8:	6054      	str	r4, [r2, #4]
 8009cda:	e7ca      	b.n	8009c72 <_free_r+0x22>
 8009cdc:	bd38      	pop	{r3, r4, r5, pc}
 8009cde:	bf00      	nop
 8009ce0:	200049ac 	.word	0x200049ac

08009ce4 <malloc>:
 8009ce4:	4b02      	ldr	r3, [pc, #8]	@ (8009cf0 <malloc+0xc>)
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	6818      	ldr	r0, [r3, #0]
 8009cea:	f000 b825 	b.w	8009d38 <_malloc_r>
 8009cee:	bf00      	nop
 8009cf0:	20000020 	.word	0x20000020

08009cf4 <sbrk_aligned>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8009d34 <sbrk_aligned+0x40>)
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	6831      	ldr	r1, [r6, #0]
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	b911      	cbnz	r1, 8009d06 <sbrk_aligned+0x12>
 8009d00:	f000 fe46 	bl	800a990 <_sbrk_r>
 8009d04:	6030      	str	r0, [r6, #0]
 8009d06:	4621      	mov	r1, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f000 fe41 	bl	800a990 <_sbrk_r>
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	d103      	bne.n	8009d1a <sbrk_aligned+0x26>
 8009d12:	f04f 34ff 	mov.w	r4, #4294967295
 8009d16:	4620      	mov	r0, r4
 8009d18:	bd70      	pop	{r4, r5, r6, pc}
 8009d1a:	1cc4      	adds	r4, r0, #3
 8009d1c:	f024 0403 	bic.w	r4, r4, #3
 8009d20:	42a0      	cmp	r0, r4
 8009d22:	d0f8      	beq.n	8009d16 <sbrk_aligned+0x22>
 8009d24:	1a21      	subs	r1, r4, r0
 8009d26:	4628      	mov	r0, r5
 8009d28:	f000 fe32 	bl	800a990 <_sbrk_r>
 8009d2c:	3001      	adds	r0, #1
 8009d2e:	d1f2      	bne.n	8009d16 <sbrk_aligned+0x22>
 8009d30:	e7ef      	b.n	8009d12 <sbrk_aligned+0x1e>
 8009d32:	bf00      	nop
 8009d34:	200049a8 	.word	0x200049a8

08009d38 <_malloc_r>:
 8009d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d3c:	1ccd      	adds	r5, r1, #3
 8009d3e:	f025 0503 	bic.w	r5, r5, #3
 8009d42:	3508      	adds	r5, #8
 8009d44:	2d0c      	cmp	r5, #12
 8009d46:	bf38      	it	cc
 8009d48:	250c      	movcc	r5, #12
 8009d4a:	2d00      	cmp	r5, #0
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	db01      	blt.n	8009d54 <_malloc_r+0x1c>
 8009d50:	42a9      	cmp	r1, r5
 8009d52:	d904      	bls.n	8009d5e <_malloc_r+0x26>
 8009d54:	230c      	movs	r3, #12
 8009d56:	6033      	str	r3, [r6, #0]
 8009d58:	2000      	movs	r0, #0
 8009d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e34 <_malloc_r+0xfc>
 8009d62:	f000 f869 	bl	8009e38 <__malloc_lock>
 8009d66:	f8d8 3000 	ldr.w	r3, [r8]
 8009d6a:	461c      	mov	r4, r3
 8009d6c:	bb44      	cbnz	r4, 8009dc0 <_malloc_r+0x88>
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7ff ffbf 	bl	8009cf4 <sbrk_aligned>
 8009d76:	1c43      	adds	r3, r0, #1
 8009d78:	4604      	mov	r4, r0
 8009d7a:	d158      	bne.n	8009e2e <_malloc_r+0xf6>
 8009d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8009d80:	4627      	mov	r7, r4
 8009d82:	2f00      	cmp	r7, #0
 8009d84:	d143      	bne.n	8009e0e <_malloc_r+0xd6>
 8009d86:	2c00      	cmp	r4, #0
 8009d88:	d04b      	beq.n	8009e22 <_malloc_r+0xea>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	4639      	mov	r1, r7
 8009d8e:	4630      	mov	r0, r6
 8009d90:	eb04 0903 	add.w	r9, r4, r3
 8009d94:	f000 fdfc 	bl	800a990 <_sbrk_r>
 8009d98:	4581      	cmp	r9, r0
 8009d9a:	d142      	bne.n	8009e22 <_malloc_r+0xea>
 8009d9c:	6821      	ldr	r1, [r4, #0]
 8009d9e:	1a6d      	subs	r5, r5, r1
 8009da0:	4629      	mov	r1, r5
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7ff ffa6 	bl	8009cf4 <sbrk_aligned>
 8009da8:	3001      	adds	r0, #1
 8009daa:	d03a      	beq.n	8009e22 <_malloc_r+0xea>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	442b      	add	r3, r5
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	f8d8 3000 	ldr.w	r3, [r8]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	bb62      	cbnz	r2, 8009e14 <_malloc_r+0xdc>
 8009dba:	f8c8 7000 	str.w	r7, [r8]
 8009dbe:	e00f      	b.n	8009de0 <_malloc_r+0xa8>
 8009dc0:	6822      	ldr	r2, [r4, #0]
 8009dc2:	1b52      	subs	r2, r2, r5
 8009dc4:	d420      	bmi.n	8009e08 <_malloc_r+0xd0>
 8009dc6:	2a0b      	cmp	r2, #11
 8009dc8:	d917      	bls.n	8009dfa <_malloc_r+0xc2>
 8009dca:	1961      	adds	r1, r4, r5
 8009dcc:	42a3      	cmp	r3, r4
 8009dce:	6025      	str	r5, [r4, #0]
 8009dd0:	bf18      	it	ne
 8009dd2:	6059      	strne	r1, [r3, #4]
 8009dd4:	6863      	ldr	r3, [r4, #4]
 8009dd6:	bf08      	it	eq
 8009dd8:	f8c8 1000 	streq.w	r1, [r8]
 8009ddc:	5162      	str	r2, [r4, r5]
 8009dde:	604b      	str	r3, [r1, #4]
 8009de0:	4630      	mov	r0, r6
 8009de2:	f000 f82f 	bl	8009e44 <__malloc_unlock>
 8009de6:	f104 000b 	add.w	r0, r4, #11
 8009dea:	1d23      	adds	r3, r4, #4
 8009dec:	f020 0007 	bic.w	r0, r0, #7
 8009df0:	1ac2      	subs	r2, r0, r3
 8009df2:	bf1c      	itt	ne
 8009df4:	1a1b      	subne	r3, r3, r0
 8009df6:	50a3      	strne	r3, [r4, r2]
 8009df8:	e7af      	b.n	8009d5a <_malloc_r+0x22>
 8009dfa:	6862      	ldr	r2, [r4, #4]
 8009dfc:	42a3      	cmp	r3, r4
 8009dfe:	bf0c      	ite	eq
 8009e00:	f8c8 2000 	streq.w	r2, [r8]
 8009e04:	605a      	strne	r2, [r3, #4]
 8009e06:	e7eb      	b.n	8009de0 <_malloc_r+0xa8>
 8009e08:	4623      	mov	r3, r4
 8009e0a:	6864      	ldr	r4, [r4, #4]
 8009e0c:	e7ae      	b.n	8009d6c <_malloc_r+0x34>
 8009e0e:	463c      	mov	r4, r7
 8009e10:	687f      	ldr	r7, [r7, #4]
 8009e12:	e7b6      	b.n	8009d82 <_malloc_r+0x4a>
 8009e14:	461a      	mov	r2, r3
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	d1fb      	bne.n	8009e14 <_malloc_r+0xdc>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	6053      	str	r3, [r2, #4]
 8009e20:	e7de      	b.n	8009de0 <_malloc_r+0xa8>
 8009e22:	230c      	movs	r3, #12
 8009e24:	6033      	str	r3, [r6, #0]
 8009e26:	4630      	mov	r0, r6
 8009e28:	f000 f80c 	bl	8009e44 <__malloc_unlock>
 8009e2c:	e794      	b.n	8009d58 <_malloc_r+0x20>
 8009e2e:	6005      	str	r5, [r0, #0]
 8009e30:	e7d6      	b.n	8009de0 <_malloc_r+0xa8>
 8009e32:	bf00      	nop
 8009e34:	200049ac 	.word	0x200049ac

08009e38 <__malloc_lock>:
 8009e38:	4801      	ldr	r0, [pc, #4]	@ (8009e40 <__malloc_lock+0x8>)
 8009e3a:	f7ff b8aa 	b.w	8008f92 <__retarget_lock_acquire_recursive>
 8009e3e:	bf00      	nop
 8009e40:	200049a4 	.word	0x200049a4

08009e44 <__malloc_unlock>:
 8009e44:	4801      	ldr	r0, [pc, #4]	@ (8009e4c <__malloc_unlock+0x8>)
 8009e46:	f7ff b8a5 	b.w	8008f94 <__retarget_lock_release_recursive>
 8009e4a:	bf00      	nop
 8009e4c:	200049a4 	.word	0x200049a4

08009e50 <_Balloc>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	69c6      	ldr	r6, [r0, #28]
 8009e54:	4604      	mov	r4, r0
 8009e56:	460d      	mov	r5, r1
 8009e58:	b976      	cbnz	r6, 8009e78 <_Balloc+0x28>
 8009e5a:	2010      	movs	r0, #16
 8009e5c:	f7ff ff42 	bl	8009ce4 <malloc>
 8009e60:	4602      	mov	r2, r0
 8009e62:	61e0      	str	r0, [r4, #28]
 8009e64:	b920      	cbnz	r0, 8009e70 <_Balloc+0x20>
 8009e66:	4b18      	ldr	r3, [pc, #96]	@ (8009ec8 <_Balloc+0x78>)
 8009e68:	4818      	ldr	r0, [pc, #96]	@ (8009ecc <_Balloc+0x7c>)
 8009e6a:	216b      	movs	r1, #107	@ 0x6b
 8009e6c:	f000 fda0 	bl	800a9b0 <__assert_func>
 8009e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e74:	6006      	str	r6, [r0, #0]
 8009e76:	60c6      	str	r6, [r0, #12]
 8009e78:	69e6      	ldr	r6, [r4, #28]
 8009e7a:	68f3      	ldr	r3, [r6, #12]
 8009e7c:	b183      	cbz	r3, 8009ea0 <_Balloc+0x50>
 8009e7e:	69e3      	ldr	r3, [r4, #28]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e86:	b9b8      	cbnz	r0, 8009eb8 <_Balloc+0x68>
 8009e88:	2101      	movs	r1, #1
 8009e8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009e8e:	1d72      	adds	r2, r6, #5
 8009e90:	0092      	lsls	r2, r2, #2
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 fdaa 	bl	800a9ec <_calloc_r>
 8009e98:	b160      	cbz	r0, 8009eb4 <_Balloc+0x64>
 8009e9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e9e:	e00e      	b.n	8009ebe <_Balloc+0x6e>
 8009ea0:	2221      	movs	r2, #33	@ 0x21
 8009ea2:	2104      	movs	r1, #4
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f000 fda1 	bl	800a9ec <_calloc_r>
 8009eaa:	69e3      	ldr	r3, [r4, #28]
 8009eac:	60f0      	str	r0, [r6, #12]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e4      	bne.n	8009e7e <_Balloc+0x2e>
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	6802      	ldr	r2, [r0, #0]
 8009eba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ec4:	e7f7      	b.n	8009eb6 <_Balloc+0x66>
 8009ec6:	bf00      	nop
 8009ec8:	0800bbc9 	.word	0x0800bbc9
 8009ecc:	0800bc49 	.word	0x0800bc49

08009ed0 <_Bfree>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	69c6      	ldr	r6, [r0, #28]
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	b976      	cbnz	r6, 8009ef8 <_Bfree+0x28>
 8009eda:	2010      	movs	r0, #16
 8009edc:	f7ff ff02 	bl	8009ce4 <malloc>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	61e8      	str	r0, [r5, #28]
 8009ee4:	b920      	cbnz	r0, 8009ef0 <_Bfree+0x20>
 8009ee6:	4b09      	ldr	r3, [pc, #36]	@ (8009f0c <_Bfree+0x3c>)
 8009ee8:	4809      	ldr	r0, [pc, #36]	@ (8009f10 <_Bfree+0x40>)
 8009eea:	218f      	movs	r1, #143	@ 0x8f
 8009eec:	f000 fd60 	bl	800a9b0 <__assert_func>
 8009ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ef4:	6006      	str	r6, [r0, #0]
 8009ef6:	60c6      	str	r6, [r0, #12]
 8009ef8:	b13c      	cbz	r4, 8009f0a <_Bfree+0x3a>
 8009efa:	69eb      	ldr	r3, [r5, #28]
 8009efc:	6862      	ldr	r2, [r4, #4]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f04:	6021      	str	r1, [r4, #0]
 8009f06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}
 8009f0c:	0800bbc9 	.word	0x0800bbc9
 8009f10:	0800bc49 	.word	0x0800bc49

08009f14 <__multadd>:
 8009f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f18:	690d      	ldr	r5, [r1, #16]
 8009f1a:	4607      	mov	r7, r0
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	461e      	mov	r6, r3
 8009f20:	f101 0c14 	add.w	ip, r1, #20
 8009f24:	2000      	movs	r0, #0
 8009f26:	f8dc 3000 	ldr.w	r3, [ip]
 8009f2a:	b299      	uxth	r1, r3
 8009f2c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f30:	0c1e      	lsrs	r6, r3, #16
 8009f32:	0c0b      	lsrs	r3, r1, #16
 8009f34:	fb02 3306 	mla	r3, r2, r6, r3
 8009f38:	b289      	uxth	r1, r1
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f40:	4285      	cmp	r5, r0
 8009f42:	f84c 1b04 	str.w	r1, [ip], #4
 8009f46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f4a:	dcec      	bgt.n	8009f26 <__multadd+0x12>
 8009f4c:	b30e      	cbz	r6, 8009f92 <__multadd+0x7e>
 8009f4e:	68a3      	ldr	r3, [r4, #8]
 8009f50:	42ab      	cmp	r3, r5
 8009f52:	dc19      	bgt.n	8009f88 <__multadd+0x74>
 8009f54:	6861      	ldr	r1, [r4, #4]
 8009f56:	4638      	mov	r0, r7
 8009f58:	3101      	adds	r1, #1
 8009f5a:	f7ff ff79 	bl	8009e50 <_Balloc>
 8009f5e:	4680      	mov	r8, r0
 8009f60:	b928      	cbnz	r0, 8009f6e <__multadd+0x5a>
 8009f62:	4602      	mov	r2, r0
 8009f64:	4b0c      	ldr	r3, [pc, #48]	@ (8009f98 <__multadd+0x84>)
 8009f66:	480d      	ldr	r0, [pc, #52]	@ (8009f9c <__multadd+0x88>)
 8009f68:	21ba      	movs	r1, #186	@ 0xba
 8009f6a:	f000 fd21 	bl	800a9b0 <__assert_func>
 8009f6e:	6922      	ldr	r2, [r4, #16]
 8009f70:	3202      	adds	r2, #2
 8009f72:	f104 010c 	add.w	r1, r4, #12
 8009f76:	0092      	lsls	r2, r2, #2
 8009f78:	300c      	adds	r0, #12
 8009f7a:	f7ff f80c 	bl	8008f96 <memcpy>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4638      	mov	r0, r7
 8009f82:	f7ff ffa5 	bl	8009ed0 <_Bfree>
 8009f86:	4644      	mov	r4, r8
 8009f88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f8c:	3501      	adds	r5, #1
 8009f8e:	615e      	str	r6, [r3, #20]
 8009f90:	6125      	str	r5, [r4, #16]
 8009f92:	4620      	mov	r0, r4
 8009f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f98:	0800bc38 	.word	0x0800bc38
 8009f9c:	0800bc49 	.word	0x0800bc49

08009fa0 <__hi0bits>:
 8009fa0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	bf36      	itet	cc
 8009fa8:	0403      	lslcc	r3, r0, #16
 8009faa:	2000      	movcs	r0, #0
 8009fac:	2010      	movcc	r0, #16
 8009fae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fb2:	bf3c      	itt	cc
 8009fb4:	021b      	lslcc	r3, r3, #8
 8009fb6:	3008      	addcc	r0, #8
 8009fb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fbc:	bf3c      	itt	cc
 8009fbe:	011b      	lslcc	r3, r3, #4
 8009fc0:	3004      	addcc	r0, #4
 8009fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fc6:	bf3c      	itt	cc
 8009fc8:	009b      	lslcc	r3, r3, #2
 8009fca:	3002      	addcc	r0, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	db05      	blt.n	8009fdc <__hi0bits+0x3c>
 8009fd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009fd4:	f100 0001 	add.w	r0, r0, #1
 8009fd8:	bf08      	it	eq
 8009fda:	2020      	moveq	r0, #32
 8009fdc:	4770      	bx	lr

08009fde <__lo0bits>:
 8009fde:	6803      	ldr	r3, [r0, #0]
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	f013 0007 	ands.w	r0, r3, #7
 8009fe6:	d00b      	beq.n	800a000 <__lo0bits+0x22>
 8009fe8:	07d9      	lsls	r1, r3, #31
 8009fea:	d421      	bmi.n	800a030 <__lo0bits+0x52>
 8009fec:	0798      	lsls	r0, r3, #30
 8009fee:	bf49      	itett	mi
 8009ff0:	085b      	lsrmi	r3, r3, #1
 8009ff2:	089b      	lsrpl	r3, r3, #2
 8009ff4:	2001      	movmi	r0, #1
 8009ff6:	6013      	strmi	r3, [r2, #0]
 8009ff8:	bf5c      	itt	pl
 8009ffa:	6013      	strpl	r3, [r2, #0]
 8009ffc:	2002      	movpl	r0, #2
 8009ffe:	4770      	bx	lr
 800a000:	b299      	uxth	r1, r3
 800a002:	b909      	cbnz	r1, 800a008 <__lo0bits+0x2a>
 800a004:	0c1b      	lsrs	r3, r3, #16
 800a006:	2010      	movs	r0, #16
 800a008:	b2d9      	uxtb	r1, r3
 800a00a:	b909      	cbnz	r1, 800a010 <__lo0bits+0x32>
 800a00c:	3008      	adds	r0, #8
 800a00e:	0a1b      	lsrs	r3, r3, #8
 800a010:	0719      	lsls	r1, r3, #28
 800a012:	bf04      	itt	eq
 800a014:	091b      	lsreq	r3, r3, #4
 800a016:	3004      	addeq	r0, #4
 800a018:	0799      	lsls	r1, r3, #30
 800a01a:	bf04      	itt	eq
 800a01c:	089b      	lsreq	r3, r3, #2
 800a01e:	3002      	addeq	r0, #2
 800a020:	07d9      	lsls	r1, r3, #31
 800a022:	d403      	bmi.n	800a02c <__lo0bits+0x4e>
 800a024:	085b      	lsrs	r3, r3, #1
 800a026:	f100 0001 	add.w	r0, r0, #1
 800a02a:	d003      	beq.n	800a034 <__lo0bits+0x56>
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	4770      	bx	lr
 800a030:	2000      	movs	r0, #0
 800a032:	4770      	bx	lr
 800a034:	2020      	movs	r0, #32
 800a036:	4770      	bx	lr

0800a038 <__i2b>:
 800a038:	b510      	push	{r4, lr}
 800a03a:	460c      	mov	r4, r1
 800a03c:	2101      	movs	r1, #1
 800a03e:	f7ff ff07 	bl	8009e50 <_Balloc>
 800a042:	4602      	mov	r2, r0
 800a044:	b928      	cbnz	r0, 800a052 <__i2b+0x1a>
 800a046:	4b05      	ldr	r3, [pc, #20]	@ (800a05c <__i2b+0x24>)
 800a048:	4805      	ldr	r0, [pc, #20]	@ (800a060 <__i2b+0x28>)
 800a04a:	f240 1145 	movw	r1, #325	@ 0x145
 800a04e:	f000 fcaf 	bl	800a9b0 <__assert_func>
 800a052:	2301      	movs	r3, #1
 800a054:	6144      	str	r4, [r0, #20]
 800a056:	6103      	str	r3, [r0, #16]
 800a058:	bd10      	pop	{r4, pc}
 800a05a:	bf00      	nop
 800a05c:	0800bc38 	.word	0x0800bc38
 800a060:	0800bc49 	.word	0x0800bc49

0800a064 <__multiply>:
 800a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a068:	4614      	mov	r4, r2
 800a06a:	690a      	ldr	r2, [r1, #16]
 800a06c:	6923      	ldr	r3, [r4, #16]
 800a06e:	429a      	cmp	r2, r3
 800a070:	bfa8      	it	ge
 800a072:	4623      	movge	r3, r4
 800a074:	460f      	mov	r7, r1
 800a076:	bfa4      	itt	ge
 800a078:	460c      	movge	r4, r1
 800a07a:	461f      	movge	r7, r3
 800a07c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a080:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a084:	68a3      	ldr	r3, [r4, #8]
 800a086:	6861      	ldr	r1, [r4, #4]
 800a088:	eb0a 0609 	add.w	r6, sl, r9
 800a08c:	42b3      	cmp	r3, r6
 800a08e:	b085      	sub	sp, #20
 800a090:	bfb8      	it	lt
 800a092:	3101      	addlt	r1, #1
 800a094:	f7ff fedc 	bl	8009e50 <_Balloc>
 800a098:	b930      	cbnz	r0, 800a0a8 <__multiply+0x44>
 800a09a:	4602      	mov	r2, r0
 800a09c:	4b44      	ldr	r3, [pc, #272]	@ (800a1b0 <__multiply+0x14c>)
 800a09e:	4845      	ldr	r0, [pc, #276]	@ (800a1b4 <__multiply+0x150>)
 800a0a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a0a4:	f000 fc84 	bl	800a9b0 <__assert_func>
 800a0a8:	f100 0514 	add.w	r5, r0, #20
 800a0ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	4543      	cmp	r3, r8
 800a0b6:	d321      	bcc.n	800a0fc <__multiply+0x98>
 800a0b8:	f107 0114 	add.w	r1, r7, #20
 800a0bc:	f104 0214 	add.w	r2, r4, #20
 800a0c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a0c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a0c8:	9302      	str	r3, [sp, #8]
 800a0ca:	1b13      	subs	r3, r2, r4
 800a0cc:	3b15      	subs	r3, #21
 800a0ce:	f023 0303 	bic.w	r3, r3, #3
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	f104 0715 	add.w	r7, r4, #21
 800a0d8:	42ba      	cmp	r2, r7
 800a0da:	bf38      	it	cc
 800a0dc:	2304      	movcc	r3, #4
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	9b02      	ldr	r3, [sp, #8]
 800a0e2:	9103      	str	r1, [sp, #12]
 800a0e4:	428b      	cmp	r3, r1
 800a0e6:	d80c      	bhi.n	800a102 <__multiply+0x9e>
 800a0e8:	2e00      	cmp	r6, #0
 800a0ea:	dd03      	ble.n	800a0f4 <__multiply+0x90>
 800a0ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d05b      	beq.n	800a1ac <__multiply+0x148>
 800a0f4:	6106      	str	r6, [r0, #16]
 800a0f6:	b005      	add	sp, #20
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fc:	f843 2b04 	str.w	r2, [r3], #4
 800a100:	e7d8      	b.n	800a0b4 <__multiply+0x50>
 800a102:	f8b1 a000 	ldrh.w	sl, [r1]
 800a106:	f1ba 0f00 	cmp.w	sl, #0
 800a10a:	d024      	beq.n	800a156 <__multiply+0xf2>
 800a10c:	f104 0e14 	add.w	lr, r4, #20
 800a110:	46a9      	mov	r9, r5
 800a112:	f04f 0c00 	mov.w	ip, #0
 800a116:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a11a:	f8d9 3000 	ldr.w	r3, [r9]
 800a11e:	fa1f fb87 	uxth.w	fp, r7
 800a122:	b29b      	uxth	r3, r3
 800a124:	fb0a 330b 	mla	r3, sl, fp, r3
 800a128:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a12c:	f8d9 7000 	ldr.w	r7, [r9]
 800a130:	4463      	add	r3, ip
 800a132:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a136:	fb0a c70b 	mla	r7, sl, fp, ip
 800a13a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a13e:	b29b      	uxth	r3, r3
 800a140:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a144:	4572      	cmp	r2, lr
 800a146:	f849 3b04 	str.w	r3, [r9], #4
 800a14a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a14e:	d8e2      	bhi.n	800a116 <__multiply+0xb2>
 800a150:	9b01      	ldr	r3, [sp, #4]
 800a152:	f845 c003 	str.w	ip, [r5, r3]
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a15c:	3104      	adds	r1, #4
 800a15e:	f1b9 0f00 	cmp.w	r9, #0
 800a162:	d021      	beq.n	800a1a8 <__multiply+0x144>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	f104 0c14 	add.w	ip, r4, #20
 800a16a:	46ae      	mov	lr, r5
 800a16c:	f04f 0a00 	mov.w	sl, #0
 800a170:	f8bc b000 	ldrh.w	fp, [ip]
 800a174:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a178:	fb09 770b 	mla	r7, r9, fp, r7
 800a17c:	4457      	add	r7, sl
 800a17e:	b29b      	uxth	r3, r3
 800a180:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a184:	f84e 3b04 	str.w	r3, [lr], #4
 800a188:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a18c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a190:	f8be 3000 	ldrh.w	r3, [lr]
 800a194:	fb09 330a 	mla	r3, r9, sl, r3
 800a198:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a19c:	4562      	cmp	r2, ip
 800a19e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1a2:	d8e5      	bhi.n	800a170 <__multiply+0x10c>
 800a1a4:	9f01      	ldr	r7, [sp, #4]
 800a1a6:	51eb      	str	r3, [r5, r7]
 800a1a8:	3504      	adds	r5, #4
 800a1aa:	e799      	b.n	800a0e0 <__multiply+0x7c>
 800a1ac:	3e01      	subs	r6, #1
 800a1ae:	e79b      	b.n	800a0e8 <__multiply+0x84>
 800a1b0:	0800bc38 	.word	0x0800bc38
 800a1b4:	0800bc49 	.word	0x0800bc49

0800a1b8 <__pow5mult>:
 800a1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1bc:	4615      	mov	r5, r2
 800a1be:	f012 0203 	ands.w	r2, r2, #3
 800a1c2:	4607      	mov	r7, r0
 800a1c4:	460e      	mov	r6, r1
 800a1c6:	d007      	beq.n	800a1d8 <__pow5mult+0x20>
 800a1c8:	4c25      	ldr	r4, [pc, #148]	@ (800a260 <__pow5mult+0xa8>)
 800a1ca:	3a01      	subs	r2, #1
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1d2:	f7ff fe9f 	bl	8009f14 <__multadd>
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	10ad      	asrs	r5, r5, #2
 800a1da:	d03d      	beq.n	800a258 <__pow5mult+0xa0>
 800a1dc:	69fc      	ldr	r4, [r7, #28]
 800a1de:	b97c      	cbnz	r4, 800a200 <__pow5mult+0x48>
 800a1e0:	2010      	movs	r0, #16
 800a1e2:	f7ff fd7f 	bl	8009ce4 <malloc>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	61f8      	str	r0, [r7, #28]
 800a1ea:	b928      	cbnz	r0, 800a1f8 <__pow5mult+0x40>
 800a1ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a264 <__pow5mult+0xac>)
 800a1ee:	481e      	ldr	r0, [pc, #120]	@ (800a268 <__pow5mult+0xb0>)
 800a1f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a1f4:	f000 fbdc 	bl	800a9b0 <__assert_func>
 800a1f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1fc:	6004      	str	r4, [r0, #0]
 800a1fe:	60c4      	str	r4, [r0, #12]
 800a200:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a204:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a208:	b94c      	cbnz	r4, 800a21e <__pow5mult+0x66>
 800a20a:	f240 2171 	movw	r1, #625	@ 0x271
 800a20e:	4638      	mov	r0, r7
 800a210:	f7ff ff12 	bl	800a038 <__i2b>
 800a214:	2300      	movs	r3, #0
 800a216:	f8c8 0008 	str.w	r0, [r8, #8]
 800a21a:	4604      	mov	r4, r0
 800a21c:	6003      	str	r3, [r0, #0]
 800a21e:	f04f 0900 	mov.w	r9, #0
 800a222:	07eb      	lsls	r3, r5, #31
 800a224:	d50a      	bpl.n	800a23c <__pow5mult+0x84>
 800a226:	4631      	mov	r1, r6
 800a228:	4622      	mov	r2, r4
 800a22a:	4638      	mov	r0, r7
 800a22c:	f7ff ff1a 	bl	800a064 <__multiply>
 800a230:	4631      	mov	r1, r6
 800a232:	4680      	mov	r8, r0
 800a234:	4638      	mov	r0, r7
 800a236:	f7ff fe4b 	bl	8009ed0 <_Bfree>
 800a23a:	4646      	mov	r6, r8
 800a23c:	106d      	asrs	r5, r5, #1
 800a23e:	d00b      	beq.n	800a258 <__pow5mult+0xa0>
 800a240:	6820      	ldr	r0, [r4, #0]
 800a242:	b938      	cbnz	r0, 800a254 <__pow5mult+0x9c>
 800a244:	4622      	mov	r2, r4
 800a246:	4621      	mov	r1, r4
 800a248:	4638      	mov	r0, r7
 800a24a:	f7ff ff0b 	bl	800a064 <__multiply>
 800a24e:	6020      	str	r0, [r4, #0]
 800a250:	f8c0 9000 	str.w	r9, [r0]
 800a254:	4604      	mov	r4, r0
 800a256:	e7e4      	b.n	800a222 <__pow5mult+0x6a>
 800a258:	4630      	mov	r0, r6
 800a25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a25e:	bf00      	nop
 800a260:	0800bca4 	.word	0x0800bca4
 800a264:	0800bbc9 	.word	0x0800bbc9
 800a268:	0800bc49 	.word	0x0800bc49

0800a26c <__lshift>:
 800a26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a270:	460c      	mov	r4, r1
 800a272:	6849      	ldr	r1, [r1, #4]
 800a274:	6923      	ldr	r3, [r4, #16]
 800a276:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	4607      	mov	r7, r0
 800a27e:	4691      	mov	r9, r2
 800a280:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a284:	f108 0601 	add.w	r6, r8, #1
 800a288:	42b3      	cmp	r3, r6
 800a28a:	db0b      	blt.n	800a2a4 <__lshift+0x38>
 800a28c:	4638      	mov	r0, r7
 800a28e:	f7ff fddf 	bl	8009e50 <_Balloc>
 800a292:	4605      	mov	r5, r0
 800a294:	b948      	cbnz	r0, 800a2aa <__lshift+0x3e>
 800a296:	4602      	mov	r2, r0
 800a298:	4b28      	ldr	r3, [pc, #160]	@ (800a33c <__lshift+0xd0>)
 800a29a:	4829      	ldr	r0, [pc, #164]	@ (800a340 <__lshift+0xd4>)
 800a29c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a2a0:	f000 fb86 	bl	800a9b0 <__assert_func>
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	e7ee      	b.n	800a288 <__lshift+0x1c>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f100 0114 	add.w	r1, r0, #20
 800a2b0:	f100 0210 	add.w	r2, r0, #16
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	4553      	cmp	r3, sl
 800a2b8:	db33      	blt.n	800a322 <__lshift+0xb6>
 800a2ba:	6920      	ldr	r0, [r4, #16]
 800a2bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2c0:	f104 0314 	add.w	r3, r4, #20
 800a2c4:	f019 091f 	ands.w	r9, r9, #31
 800a2c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2d0:	d02b      	beq.n	800a32a <__lshift+0xbe>
 800a2d2:	f1c9 0e20 	rsb	lr, r9, #32
 800a2d6:	468a      	mov	sl, r1
 800a2d8:	2200      	movs	r2, #0
 800a2da:	6818      	ldr	r0, [r3, #0]
 800a2dc:	fa00 f009 	lsl.w	r0, r0, r9
 800a2e0:	4310      	orrs	r0, r2
 800a2e2:	f84a 0b04 	str.w	r0, [sl], #4
 800a2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ea:	459c      	cmp	ip, r3
 800a2ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2f0:	d8f3      	bhi.n	800a2da <__lshift+0x6e>
 800a2f2:	ebac 0304 	sub.w	r3, ip, r4
 800a2f6:	3b15      	subs	r3, #21
 800a2f8:	f023 0303 	bic.w	r3, r3, #3
 800a2fc:	3304      	adds	r3, #4
 800a2fe:	f104 0015 	add.w	r0, r4, #21
 800a302:	4584      	cmp	ip, r0
 800a304:	bf38      	it	cc
 800a306:	2304      	movcc	r3, #4
 800a308:	50ca      	str	r2, [r1, r3]
 800a30a:	b10a      	cbz	r2, 800a310 <__lshift+0xa4>
 800a30c:	f108 0602 	add.w	r6, r8, #2
 800a310:	3e01      	subs	r6, #1
 800a312:	4638      	mov	r0, r7
 800a314:	612e      	str	r6, [r5, #16]
 800a316:	4621      	mov	r1, r4
 800a318:	f7ff fdda 	bl	8009ed0 <_Bfree>
 800a31c:	4628      	mov	r0, r5
 800a31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a322:	f842 0f04 	str.w	r0, [r2, #4]!
 800a326:	3301      	adds	r3, #1
 800a328:	e7c5      	b.n	800a2b6 <__lshift+0x4a>
 800a32a:	3904      	subs	r1, #4
 800a32c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a330:	f841 2f04 	str.w	r2, [r1, #4]!
 800a334:	459c      	cmp	ip, r3
 800a336:	d8f9      	bhi.n	800a32c <__lshift+0xc0>
 800a338:	e7ea      	b.n	800a310 <__lshift+0xa4>
 800a33a:	bf00      	nop
 800a33c:	0800bc38 	.word	0x0800bc38
 800a340:	0800bc49 	.word	0x0800bc49

0800a344 <__mcmp>:
 800a344:	690a      	ldr	r2, [r1, #16]
 800a346:	4603      	mov	r3, r0
 800a348:	6900      	ldr	r0, [r0, #16]
 800a34a:	1a80      	subs	r0, r0, r2
 800a34c:	b530      	push	{r4, r5, lr}
 800a34e:	d10e      	bne.n	800a36e <__mcmp+0x2a>
 800a350:	3314      	adds	r3, #20
 800a352:	3114      	adds	r1, #20
 800a354:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a358:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a35c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a360:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a364:	4295      	cmp	r5, r2
 800a366:	d003      	beq.n	800a370 <__mcmp+0x2c>
 800a368:	d205      	bcs.n	800a376 <__mcmp+0x32>
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	bd30      	pop	{r4, r5, pc}
 800a370:	42a3      	cmp	r3, r4
 800a372:	d3f3      	bcc.n	800a35c <__mcmp+0x18>
 800a374:	e7fb      	b.n	800a36e <__mcmp+0x2a>
 800a376:	2001      	movs	r0, #1
 800a378:	e7f9      	b.n	800a36e <__mcmp+0x2a>
	...

0800a37c <__mdiff>:
 800a37c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	4689      	mov	r9, r1
 800a382:	4606      	mov	r6, r0
 800a384:	4611      	mov	r1, r2
 800a386:	4648      	mov	r0, r9
 800a388:	4614      	mov	r4, r2
 800a38a:	f7ff ffdb 	bl	800a344 <__mcmp>
 800a38e:	1e05      	subs	r5, r0, #0
 800a390:	d112      	bne.n	800a3b8 <__mdiff+0x3c>
 800a392:	4629      	mov	r1, r5
 800a394:	4630      	mov	r0, r6
 800a396:	f7ff fd5b 	bl	8009e50 <_Balloc>
 800a39a:	4602      	mov	r2, r0
 800a39c:	b928      	cbnz	r0, 800a3aa <__mdiff+0x2e>
 800a39e:	4b3f      	ldr	r3, [pc, #252]	@ (800a49c <__mdiff+0x120>)
 800a3a0:	f240 2137 	movw	r1, #567	@ 0x237
 800a3a4:	483e      	ldr	r0, [pc, #248]	@ (800a4a0 <__mdiff+0x124>)
 800a3a6:	f000 fb03 	bl	800a9b0 <__assert_func>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	b003      	add	sp, #12
 800a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b8:	bfbc      	itt	lt
 800a3ba:	464b      	movlt	r3, r9
 800a3bc:	46a1      	movlt	r9, r4
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3c4:	bfba      	itte	lt
 800a3c6:	461c      	movlt	r4, r3
 800a3c8:	2501      	movlt	r5, #1
 800a3ca:	2500      	movge	r5, #0
 800a3cc:	f7ff fd40 	bl	8009e50 <_Balloc>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	b918      	cbnz	r0, 800a3dc <__mdiff+0x60>
 800a3d4:	4b31      	ldr	r3, [pc, #196]	@ (800a49c <__mdiff+0x120>)
 800a3d6:	f240 2145 	movw	r1, #581	@ 0x245
 800a3da:	e7e3      	b.n	800a3a4 <__mdiff+0x28>
 800a3dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a3e0:	6926      	ldr	r6, [r4, #16]
 800a3e2:	60c5      	str	r5, [r0, #12]
 800a3e4:	f109 0310 	add.w	r3, r9, #16
 800a3e8:	f109 0514 	add.w	r5, r9, #20
 800a3ec:	f104 0e14 	add.w	lr, r4, #20
 800a3f0:	f100 0b14 	add.w	fp, r0, #20
 800a3f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a3f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a3fc:	9301      	str	r3, [sp, #4]
 800a3fe:	46d9      	mov	r9, fp
 800a400:	f04f 0c00 	mov.w	ip, #0
 800a404:	9b01      	ldr	r3, [sp, #4]
 800a406:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a40a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	fa1f f38a 	uxth.w	r3, sl
 800a414:	4619      	mov	r1, r3
 800a416:	b283      	uxth	r3, r0
 800a418:	1acb      	subs	r3, r1, r3
 800a41a:	0c00      	lsrs	r0, r0, #16
 800a41c:	4463      	add	r3, ip
 800a41e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a422:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a426:	b29b      	uxth	r3, r3
 800a428:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a42c:	4576      	cmp	r6, lr
 800a42e:	f849 3b04 	str.w	r3, [r9], #4
 800a432:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a436:	d8e5      	bhi.n	800a404 <__mdiff+0x88>
 800a438:	1b33      	subs	r3, r6, r4
 800a43a:	3b15      	subs	r3, #21
 800a43c:	f023 0303 	bic.w	r3, r3, #3
 800a440:	3415      	adds	r4, #21
 800a442:	3304      	adds	r3, #4
 800a444:	42a6      	cmp	r6, r4
 800a446:	bf38      	it	cc
 800a448:	2304      	movcc	r3, #4
 800a44a:	441d      	add	r5, r3
 800a44c:	445b      	add	r3, fp
 800a44e:	461e      	mov	r6, r3
 800a450:	462c      	mov	r4, r5
 800a452:	4544      	cmp	r4, r8
 800a454:	d30e      	bcc.n	800a474 <__mdiff+0xf8>
 800a456:	f108 0103 	add.w	r1, r8, #3
 800a45a:	1b49      	subs	r1, r1, r5
 800a45c:	f021 0103 	bic.w	r1, r1, #3
 800a460:	3d03      	subs	r5, #3
 800a462:	45a8      	cmp	r8, r5
 800a464:	bf38      	it	cc
 800a466:	2100      	movcc	r1, #0
 800a468:	440b      	add	r3, r1
 800a46a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a46e:	b191      	cbz	r1, 800a496 <__mdiff+0x11a>
 800a470:	6117      	str	r7, [r2, #16]
 800a472:	e79d      	b.n	800a3b0 <__mdiff+0x34>
 800a474:	f854 1b04 	ldr.w	r1, [r4], #4
 800a478:	46e6      	mov	lr, ip
 800a47a:	0c08      	lsrs	r0, r1, #16
 800a47c:	fa1c fc81 	uxtah	ip, ip, r1
 800a480:	4471      	add	r1, lr
 800a482:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a486:	b289      	uxth	r1, r1
 800a488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a48c:	f846 1b04 	str.w	r1, [r6], #4
 800a490:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a494:	e7dd      	b.n	800a452 <__mdiff+0xd6>
 800a496:	3f01      	subs	r7, #1
 800a498:	e7e7      	b.n	800a46a <__mdiff+0xee>
 800a49a:	bf00      	nop
 800a49c:	0800bc38 	.word	0x0800bc38
 800a4a0:	0800bc49 	.word	0x0800bc49

0800a4a4 <__d2b>:
 800a4a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	ec59 8b10 	vmov	r8, r9, d0
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	f7ff fccd 	bl	8009e50 <_Balloc>
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	b930      	cbnz	r0, 800a4c8 <__d2b+0x24>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	4b23      	ldr	r3, [pc, #140]	@ (800a54c <__d2b+0xa8>)
 800a4be:	4824      	ldr	r0, [pc, #144]	@ (800a550 <__d2b+0xac>)
 800a4c0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4c4:	f000 fa74 	bl	800a9b0 <__assert_func>
 800a4c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4d0:	b10d      	cbz	r5, 800a4d6 <__d2b+0x32>
 800a4d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	f1b8 0300 	subs.w	r3, r8, #0
 800a4dc:	d023      	beq.n	800a526 <__d2b+0x82>
 800a4de:	4668      	mov	r0, sp
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	f7ff fd7c 	bl	8009fde <__lo0bits>
 800a4e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4ea:	b1d0      	cbz	r0, 800a522 <__d2b+0x7e>
 800a4ec:	f1c0 0320 	rsb	r3, r0, #32
 800a4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	40c2      	lsrs	r2, r0
 800a4f8:	6163      	str	r3, [r4, #20]
 800a4fa:	9201      	str	r2, [sp, #4]
 800a4fc:	9b01      	ldr	r3, [sp, #4]
 800a4fe:	61a3      	str	r3, [r4, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	bf0c      	ite	eq
 800a504:	2201      	moveq	r2, #1
 800a506:	2202      	movne	r2, #2
 800a508:	6122      	str	r2, [r4, #16]
 800a50a:	b1a5      	cbz	r5, 800a536 <__d2b+0x92>
 800a50c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a510:	4405      	add	r5, r0
 800a512:	603d      	str	r5, [r7, #0]
 800a514:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a518:	6030      	str	r0, [r6, #0]
 800a51a:	4620      	mov	r0, r4
 800a51c:	b003      	add	sp, #12
 800a51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a522:	6161      	str	r1, [r4, #20]
 800a524:	e7ea      	b.n	800a4fc <__d2b+0x58>
 800a526:	a801      	add	r0, sp, #4
 800a528:	f7ff fd59 	bl	8009fde <__lo0bits>
 800a52c:	9b01      	ldr	r3, [sp, #4]
 800a52e:	6163      	str	r3, [r4, #20]
 800a530:	3020      	adds	r0, #32
 800a532:	2201      	movs	r2, #1
 800a534:	e7e8      	b.n	800a508 <__d2b+0x64>
 800a536:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a53a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a53e:	6038      	str	r0, [r7, #0]
 800a540:	6918      	ldr	r0, [r3, #16]
 800a542:	f7ff fd2d 	bl	8009fa0 <__hi0bits>
 800a546:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a54a:	e7e5      	b.n	800a518 <__d2b+0x74>
 800a54c:	0800bc38 	.word	0x0800bc38
 800a550:	0800bc49 	.word	0x0800bc49

0800a554 <__ssputs_r>:
 800a554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a558:	688e      	ldr	r6, [r1, #8]
 800a55a:	461f      	mov	r7, r3
 800a55c:	42be      	cmp	r6, r7
 800a55e:	680b      	ldr	r3, [r1, #0]
 800a560:	4682      	mov	sl, r0
 800a562:	460c      	mov	r4, r1
 800a564:	4690      	mov	r8, r2
 800a566:	d82d      	bhi.n	800a5c4 <__ssputs_r+0x70>
 800a568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a56c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a570:	d026      	beq.n	800a5c0 <__ssputs_r+0x6c>
 800a572:	6965      	ldr	r5, [r4, #20]
 800a574:	6909      	ldr	r1, [r1, #16]
 800a576:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a57a:	eba3 0901 	sub.w	r9, r3, r1
 800a57e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a582:	1c7b      	adds	r3, r7, #1
 800a584:	444b      	add	r3, r9
 800a586:	106d      	asrs	r5, r5, #1
 800a588:	429d      	cmp	r5, r3
 800a58a:	bf38      	it	cc
 800a58c:	461d      	movcc	r5, r3
 800a58e:	0553      	lsls	r3, r2, #21
 800a590:	d527      	bpl.n	800a5e2 <__ssputs_r+0x8e>
 800a592:	4629      	mov	r1, r5
 800a594:	f7ff fbd0 	bl	8009d38 <_malloc_r>
 800a598:	4606      	mov	r6, r0
 800a59a:	b360      	cbz	r0, 800a5f6 <__ssputs_r+0xa2>
 800a59c:	6921      	ldr	r1, [r4, #16]
 800a59e:	464a      	mov	r2, r9
 800a5a0:	f7fe fcf9 	bl	8008f96 <memcpy>
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a5aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5ae:	81a3      	strh	r3, [r4, #12]
 800a5b0:	6126      	str	r6, [r4, #16]
 800a5b2:	6165      	str	r5, [r4, #20]
 800a5b4:	444e      	add	r6, r9
 800a5b6:	eba5 0509 	sub.w	r5, r5, r9
 800a5ba:	6026      	str	r6, [r4, #0]
 800a5bc:	60a5      	str	r5, [r4, #8]
 800a5be:	463e      	mov	r6, r7
 800a5c0:	42be      	cmp	r6, r7
 800a5c2:	d900      	bls.n	800a5c6 <__ssputs_r+0x72>
 800a5c4:	463e      	mov	r6, r7
 800a5c6:	6820      	ldr	r0, [r4, #0]
 800a5c8:	4632      	mov	r2, r6
 800a5ca:	4641      	mov	r1, r8
 800a5cc:	f000 f9c6 	bl	800a95c <memmove>
 800a5d0:	68a3      	ldr	r3, [r4, #8]
 800a5d2:	1b9b      	subs	r3, r3, r6
 800a5d4:	60a3      	str	r3, [r4, #8]
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	4433      	add	r3, r6
 800a5da:	6023      	str	r3, [r4, #0]
 800a5dc:	2000      	movs	r0, #0
 800a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	f000 fa28 	bl	800aa38 <_realloc_r>
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d1e0      	bne.n	800a5b0 <__ssputs_r+0x5c>
 800a5ee:	6921      	ldr	r1, [r4, #16]
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	f7ff fb2d 	bl	8009c50 <_free_r>
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	f8ca 3000 	str.w	r3, [sl]
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	e7e9      	b.n	800a5de <__ssputs_r+0x8a>
	...

0800a60c <_svfiprintf_r>:
 800a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	4698      	mov	r8, r3
 800a612:	898b      	ldrh	r3, [r1, #12]
 800a614:	061b      	lsls	r3, r3, #24
 800a616:	b09d      	sub	sp, #116	@ 0x74
 800a618:	4607      	mov	r7, r0
 800a61a:	460d      	mov	r5, r1
 800a61c:	4614      	mov	r4, r2
 800a61e:	d510      	bpl.n	800a642 <_svfiprintf_r+0x36>
 800a620:	690b      	ldr	r3, [r1, #16]
 800a622:	b973      	cbnz	r3, 800a642 <_svfiprintf_r+0x36>
 800a624:	2140      	movs	r1, #64	@ 0x40
 800a626:	f7ff fb87 	bl	8009d38 <_malloc_r>
 800a62a:	6028      	str	r0, [r5, #0]
 800a62c:	6128      	str	r0, [r5, #16]
 800a62e:	b930      	cbnz	r0, 800a63e <_svfiprintf_r+0x32>
 800a630:	230c      	movs	r3, #12
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	b01d      	add	sp, #116	@ 0x74
 800a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63e:	2340      	movs	r3, #64	@ 0x40
 800a640:	616b      	str	r3, [r5, #20]
 800a642:	2300      	movs	r3, #0
 800a644:	9309      	str	r3, [sp, #36]	@ 0x24
 800a646:	2320      	movs	r3, #32
 800a648:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a64c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a650:	2330      	movs	r3, #48	@ 0x30
 800a652:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a7f0 <_svfiprintf_r+0x1e4>
 800a656:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a65a:	f04f 0901 	mov.w	r9, #1
 800a65e:	4623      	mov	r3, r4
 800a660:	469a      	mov	sl, r3
 800a662:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a666:	b10a      	cbz	r2, 800a66c <_svfiprintf_r+0x60>
 800a668:	2a25      	cmp	r2, #37	@ 0x25
 800a66a:	d1f9      	bne.n	800a660 <_svfiprintf_r+0x54>
 800a66c:	ebba 0b04 	subs.w	fp, sl, r4
 800a670:	d00b      	beq.n	800a68a <_svfiprintf_r+0x7e>
 800a672:	465b      	mov	r3, fp
 800a674:	4622      	mov	r2, r4
 800a676:	4629      	mov	r1, r5
 800a678:	4638      	mov	r0, r7
 800a67a:	f7ff ff6b 	bl	800a554 <__ssputs_r>
 800a67e:	3001      	adds	r0, #1
 800a680:	f000 80a7 	beq.w	800a7d2 <_svfiprintf_r+0x1c6>
 800a684:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a686:	445a      	add	r2, fp
 800a688:	9209      	str	r2, [sp, #36]	@ 0x24
 800a68a:	f89a 3000 	ldrb.w	r3, [sl]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 809f 	beq.w	800a7d2 <_svfiprintf_r+0x1c6>
 800a694:	2300      	movs	r3, #0
 800a696:	f04f 32ff 	mov.w	r2, #4294967295
 800a69a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a69e:	f10a 0a01 	add.w	sl, sl, #1
 800a6a2:	9304      	str	r3, [sp, #16]
 800a6a4:	9307      	str	r3, [sp, #28]
 800a6a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6ac:	4654      	mov	r4, sl
 800a6ae:	2205      	movs	r2, #5
 800a6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b4:	484e      	ldr	r0, [pc, #312]	@ (800a7f0 <_svfiprintf_r+0x1e4>)
 800a6b6:	f7f5 fd8b 	bl	80001d0 <memchr>
 800a6ba:	9a04      	ldr	r2, [sp, #16]
 800a6bc:	b9d8      	cbnz	r0, 800a6f6 <_svfiprintf_r+0xea>
 800a6be:	06d0      	lsls	r0, r2, #27
 800a6c0:	bf44      	itt	mi
 800a6c2:	2320      	movmi	r3, #32
 800a6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6c8:	0711      	lsls	r1, r2, #28
 800a6ca:	bf44      	itt	mi
 800a6cc:	232b      	movmi	r3, #43	@ 0x2b
 800a6ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6d8:	d015      	beq.n	800a706 <_svfiprintf_r+0xfa>
 800a6da:	9a07      	ldr	r2, [sp, #28]
 800a6dc:	4654      	mov	r4, sl
 800a6de:	2000      	movs	r0, #0
 800a6e0:	f04f 0c0a 	mov.w	ip, #10
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ea:	3b30      	subs	r3, #48	@ 0x30
 800a6ec:	2b09      	cmp	r3, #9
 800a6ee:	d94b      	bls.n	800a788 <_svfiprintf_r+0x17c>
 800a6f0:	b1b0      	cbz	r0, 800a720 <_svfiprintf_r+0x114>
 800a6f2:	9207      	str	r2, [sp, #28]
 800a6f4:	e014      	b.n	800a720 <_svfiprintf_r+0x114>
 800a6f6:	eba0 0308 	sub.w	r3, r0, r8
 800a6fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a6fe:	4313      	orrs	r3, r2
 800a700:	9304      	str	r3, [sp, #16]
 800a702:	46a2      	mov	sl, r4
 800a704:	e7d2      	b.n	800a6ac <_svfiprintf_r+0xa0>
 800a706:	9b03      	ldr	r3, [sp, #12]
 800a708:	1d19      	adds	r1, r3, #4
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	9103      	str	r1, [sp, #12]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	bfbb      	ittet	lt
 800a712:	425b      	neglt	r3, r3
 800a714:	f042 0202 	orrlt.w	r2, r2, #2
 800a718:	9307      	strge	r3, [sp, #28]
 800a71a:	9307      	strlt	r3, [sp, #28]
 800a71c:	bfb8      	it	lt
 800a71e:	9204      	strlt	r2, [sp, #16]
 800a720:	7823      	ldrb	r3, [r4, #0]
 800a722:	2b2e      	cmp	r3, #46	@ 0x2e
 800a724:	d10a      	bne.n	800a73c <_svfiprintf_r+0x130>
 800a726:	7863      	ldrb	r3, [r4, #1]
 800a728:	2b2a      	cmp	r3, #42	@ 0x2a
 800a72a:	d132      	bne.n	800a792 <_svfiprintf_r+0x186>
 800a72c:	9b03      	ldr	r3, [sp, #12]
 800a72e:	1d1a      	adds	r2, r3, #4
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	9203      	str	r2, [sp, #12]
 800a734:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a738:	3402      	adds	r4, #2
 800a73a:	9305      	str	r3, [sp, #20]
 800a73c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a800 <_svfiprintf_r+0x1f4>
 800a740:	7821      	ldrb	r1, [r4, #0]
 800a742:	2203      	movs	r2, #3
 800a744:	4650      	mov	r0, sl
 800a746:	f7f5 fd43 	bl	80001d0 <memchr>
 800a74a:	b138      	cbz	r0, 800a75c <_svfiprintf_r+0x150>
 800a74c:	9b04      	ldr	r3, [sp, #16]
 800a74e:	eba0 000a 	sub.w	r0, r0, sl
 800a752:	2240      	movs	r2, #64	@ 0x40
 800a754:	4082      	lsls	r2, r0
 800a756:	4313      	orrs	r3, r2
 800a758:	3401      	adds	r4, #1
 800a75a:	9304      	str	r3, [sp, #16]
 800a75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a760:	4824      	ldr	r0, [pc, #144]	@ (800a7f4 <_svfiprintf_r+0x1e8>)
 800a762:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a766:	2206      	movs	r2, #6
 800a768:	f7f5 fd32 	bl	80001d0 <memchr>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d036      	beq.n	800a7de <_svfiprintf_r+0x1d2>
 800a770:	4b21      	ldr	r3, [pc, #132]	@ (800a7f8 <_svfiprintf_r+0x1ec>)
 800a772:	bb1b      	cbnz	r3, 800a7bc <_svfiprintf_r+0x1b0>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	3307      	adds	r3, #7
 800a778:	f023 0307 	bic.w	r3, r3, #7
 800a77c:	3308      	adds	r3, #8
 800a77e:	9303      	str	r3, [sp, #12]
 800a780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a782:	4433      	add	r3, r6
 800a784:	9309      	str	r3, [sp, #36]	@ 0x24
 800a786:	e76a      	b.n	800a65e <_svfiprintf_r+0x52>
 800a788:	fb0c 3202 	mla	r2, ip, r2, r3
 800a78c:	460c      	mov	r4, r1
 800a78e:	2001      	movs	r0, #1
 800a790:	e7a8      	b.n	800a6e4 <_svfiprintf_r+0xd8>
 800a792:	2300      	movs	r3, #0
 800a794:	3401      	adds	r4, #1
 800a796:	9305      	str	r3, [sp, #20]
 800a798:	4619      	mov	r1, r3
 800a79a:	f04f 0c0a 	mov.w	ip, #10
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a4:	3a30      	subs	r2, #48	@ 0x30
 800a7a6:	2a09      	cmp	r2, #9
 800a7a8:	d903      	bls.n	800a7b2 <_svfiprintf_r+0x1a6>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0c6      	beq.n	800a73c <_svfiprintf_r+0x130>
 800a7ae:	9105      	str	r1, [sp, #20]
 800a7b0:	e7c4      	b.n	800a73c <_svfiprintf_r+0x130>
 800a7b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e7f0      	b.n	800a79e <_svfiprintf_r+0x192>
 800a7bc:	ab03      	add	r3, sp, #12
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a7fc <_svfiprintf_r+0x1f0>)
 800a7c4:	a904      	add	r1, sp, #16
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	f7fd fe88 	bl	80084dc <_printf_float>
 800a7cc:	1c42      	adds	r2, r0, #1
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	d1d6      	bne.n	800a780 <_svfiprintf_r+0x174>
 800a7d2:	89ab      	ldrh	r3, [r5, #12]
 800a7d4:	065b      	lsls	r3, r3, #25
 800a7d6:	f53f af2d 	bmi.w	800a634 <_svfiprintf_r+0x28>
 800a7da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7dc:	e72c      	b.n	800a638 <_svfiprintf_r+0x2c>
 800a7de:	ab03      	add	r3, sp, #12
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	4b05      	ldr	r3, [pc, #20]	@ (800a7fc <_svfiprintf_r+0x1f0>)
 800a7e6:	a904      	add	r1, sp, #16
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7fe f90f 	bl	8008a0c <_printf_i>
 800a7ee:	e7ed      	b.n	800a7cc <_svfiprintf_r+0x1c0>
 800a7f0:	0800bda0 	.word	0x0800bda0
 800a7f4:	0800bdaa 	.word	0x0800bdaa
 800a7f8:	080084dd 	.word	0x080084dd
 800a7fc:	0800a555 	.word	0x0800a555
 800a800:	0800bda6 	.word	0x0800bda6

0800a804 <__sflush_r>:
 800a804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80c:	0716      	lsls	r6, r2, #28
 800a80e:	4605      	mov	r5, r0
 800a810:	460c      	mov	r4, r1
 800a812:	d454      	bmi.n	800a8be <__sflush_r+0xba>
 800a814:	684b      	ldr	r3, [r1, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dc02      	bgt.n	800a820 <__sflush_r+0x1c>
 800a81a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dd48      	ble.n	800a8b2 <__sflush_r+0xae>
 800a820:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a822:	2e00      	cmp	r6, #0
 800a824:	d045      	beq.n	800a8b2 <__sflush_r+0xae>
 800a826:	2300      	movs	r3, #0
 800a828:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a82c:	682f      	ldr	r7, [r5, #0]
 800a82e:	6a21      	ldr	r1, [r4, #32]
 800a830:	602b      	str	r3, [r5, #0]
 800a832:	d030      	beq.n	800a896 <__sflush_r+0x92>
 800a834:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a836:	89a3      	ldrh	r3, [r4, #12]
 800a838:	0759      	lsls	r1, r3, #29
 800a83a:	d505      	bpl.n	800a848 <__sflush_r+0x44>
 800a83c:	6863      	ldr	r3, [r4, #4]
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a842:	b10b      	cbz	r3, 800a848 <__sflush_r+0x44>
 800a844:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a846:	1ad2      	subs	r2, r2, r3
 800a848:	2300      	movs	r3, #0
 800a84a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a84c:	6a21      	ldr	r1, [r4, #32]
 800a84e:	4628      	mov	r0, r5
 800a850:	47b0      	blx	r6
 800a852:	1c43      	adds	r3, r0, #1
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	d106      	bne.n	800a866 <__sflush_r+0x62>
 800a858:	6829      	ldr	r1, [r5, #0]
 800a85a:	291d      	cmp	r1, #29
 800a85c:	d82b      	bhi.n	800a8b6 <__sflush_r+0xb2>
 800a85e:	4a2a      	ldr	r2, [pc, #168]	@ (800a908 <__sflush_r+0x104>)
 800a860:	410a      	asrs	r2, r1
 800a862:	07d6      	lsls	r6, r2, #31
 800a864:	d427      	bmi.n	800a8b6 <__sflush_r+0xb2>
 800a866:	2200      	movs	r2, #0
 800a868:	6062      	str	r2, [r4, #4]
 800a86a:	04d9      	lsls	r1, r3, #19
 800a86c:	6922      	ldr	r2, [r4, #16]
 800a86e:	6022      	str	r2, [r4, #0]
 800a870:	d504      	bpl.n	800a87c <__sflush_r+0x78>
 800a872:	1c42      	adds	r2, r0, #1
 800a874:	d101      	bne.n	800a87a <__sflush_r+0x76>
 800a876:	682b      	ldr	r3, [r5, #0]
 800a878:	b903      	cbnz	r3, 800a87c <__sflush_r+0x78>
 800a87a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a87c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a87e:	602f      	str	r7, [r5, #0]
 800a880:	b1b9      	cbz	r1, 800a8b2 <__sflush_r+0xae>
 800a882:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a886:	4299      	cmp	r1, r3
 800a888:	d002      	beq.n	800a890 <__sflush_r+0x8c>
 800a88a:	4628      	mov	r0, r5
 800a88c:	f7ff f9e0 	bl	8009c50 <_free_r>
 800a890:	2300      	movs	r3, #0
 800a892:	6363      	str	r3, [r4, #52]	@ 0x34
 800a894:	e00d      	b.n	800a8b2 <__sflush_r+0xae>
 800a896:	2301      	movs	r3, #1
 800a898:	4628      	mov	r0, r5
 800a89a:	47b0      	blx	r6
 800a89c:	4602      	mov	r2, r0
 800a89e:	1c50      	adds	r0, r2, #1
 800a8a0:	d1c9      	bne.n	800a836 <__sflush_r+0x32>
 800a8a2:	682b      	ldr	r3, [r5, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d0c6      	beq.n	800a836 <__sflush_r+0x32>
 800a8a8:	2b1d      	cmp	r3, #29
 800a8aa:	d001      	beq.n	800a8b0 <__sflush_r+0xac>
 800a8ac:	2b16      	cmp	r3, #22
 800a8ae:	d11e      	bne.n	800a8ee <__sflush_r+0xea>
 800a8b0:	602f      	str	r7, [r5, #0]
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	e022      	b.n	800a8fc <__sflush_r+0xf8>
 800a8b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ba:	b21b      	sxth	r3, r3
 800a8bc:	e01b      	b.n	800a8f6 <__sflush_r+0xf2>
 800a8be:	690f      	ldr	r7, [r1, #16]
 800a8c0:	2f00      	cmp	r7, #0
 800a8c2:	d0f6      	beq.n	800a8b2 <__sflush_r+0xae>
 800a8c4:	0793      	lsls	r3, r2, #30
 800a8c6:	680e      	ldr	r6, [r1, #0]
 800a8c8:	bf08      	it	eq
 800a8ca:	694b      	ldreq	r3, [r1, #20]
 800a8cc:	600f      	str	r7, [r1, #0]
 800a8ce:	bf18      	it	ne
 800a8d0:	2300      	movne	r3, #0
 800a8d2:	eba6 0807 	sub.w	r8, r6, r7
 800a8d6:	608b      	str	r3, [r1, #8]
 800a8d8:	f1b8 0f00 	cmp.w	r8, #0
 800a8dc:	dde9      	ble.n	800a8b2 <__sflush_r+0xae>
 800a8de:	6a21      	ldr	r1, [r4, #32]
 800a8e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8e2:	4643      	mov	r3, r8
 800a8e4:	463a      	mov	r2, r7
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	47b0      	blx	r6
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	dc08      	bgt.n	800a900 <__sflush_r+0xfc>
 800a8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8f6:	81a3      	strh	r3, [r4, #12]
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a900:	4407      	add	r7, r0
 800a902:	eba8 0800 	sub.w	r8, r8, r0
 800a906:	e7e7      	b.n	800a8d8 <__sflush_r+0xd4>
 800a908:	dfbffffe 	.word	0xdfbffffe

0800a90c <_fflush_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	690b      	ldr	r3, [r1, #16]
 800a910:	4605      	mov	r5, r0
 800a912:	460c      	mov	r4, r1
 800a914:	b913      	cbnz	r3, 800a91c <_fflush_r+0x10>
 800a916:	2500      	movs	r5, #0
 800a918:	4628      	mov	r0, r5
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	b118      	cbz	r0, 800a926 <_fflush_r+0x1a>
 800a91e:	6a03      	ldr	r3, [r0, #32]
 800a920:	b90b      	cbnz	r3, 800a926 <_fflush_r+0x1a>
 800a922:	f7fe fa1f 	bl	8008d64 <__sinit>
 800a926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0f3      	beq.n	800a916 <_fflush_r+0xa>
 800a92e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a930:	07d0      	lsls	r0, r2, #31
 800a932:	d404      	bmi.n	800a93e <_fflush_r+0x32>
 800a934:	0599      	lsls	r1, r3, #22
 800a936:	d402      	bmi.n	800a93e <_fflush_r+0x32>
 800a938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a93a:	f7fe fb2a 	bl	8008f92 <__retarget_lock_acquire_recursive>
 800a93e:	4628      	mov	r0, r5
 800a940:	4621      	mov	r1, r4
 800a942:	f7ff ff5f 	bl	800a804 <__sflush_r>
 800a946:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a948:	07da      	lsls	r2, r3, #31
 800a94a:	4605      	mov	r5, r0
 800a94c:	d4e4      	bmi.n	800a918 <_fflush_r+0xc>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	059b      	lsls	r3, r3, #22
 800a952:	d4e1      	bmi.n	800a918 <_fflush_r+0xc>
 800a954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a956:	f7fe fb1d 	bl	8008f94 <__retarget_lock_release_recursive>
 800a95a:	e7dd      	b.n	800a918 <_fflush_r+0xc>

0800a95c <memmove>:
 800a95c:	4288      	cmp	r0, r1
 800a95e:	b510      	push	{r4, lr}
 800a960:	eb01 0402 	add.w	r4, r1, r2
 800a964:	d902      	bls.n	800a96c <memmove+0x10>
 800a966:	4284      	cmp	r4, r0
 800a968:	4623      	mov	r3, r4
 800a96a:	d807      	bhi.n	800a97c <memmove+0x20>
 800a96c:	1e43      	subs	r3, r0, #1
 800a96e:	42a1      	cmp	r1, r4
 800a970:	d008      	beq.n	800a984 <memmove+0x28>
 800a972:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a97a:	e7f8      	b.n	800a96e <memmove+0x12>
 800a97c:	4402      	add	r2, r0
 800a97e:	4601      	mov	r1, r0
 800a980:	428a      	cmp	r2, r1
 800a982:	d100      	bne.n	800a986 <memmove+0x2a>
 800a984:	bd10      	pop	{r4, pc}
 800a986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a98a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a98e:	e7f7      	b.n	800a980 <memmove+0x24>

0800a990 <_sbrk_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d06      	ldr	r5, [pc, #24]	@ (800a9ac <_sbrk_r+0x1c>)
 800a994:	2300      	movs	r3, #0
 800a996:	4604      	mov	r4, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	602b      	str	r3, [r5, #0]
 800a99c:	f7f7 fd0a 	bl	80023b4 <_sbrk>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_sbrk_r+0x1a>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_sbrk_r+0x1a>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	200049a0 	.word	0x200049a0

0800a9b0 <__assert_func>:
 800a9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9b2:	4614      	mov	r4, r2
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	4b09      	ldr	r3, [pc, #36]	@ (800a9dc <__assert_func+0x2c>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	68d8      	ldr	r0, [r3, #12]
 800a9be:	b954      	cbnz	r4, 800a9d6 <__assert_func+0x26>
 800a9c0:	4b07      	ldr	r3, [pc, #28]	@ (800a9e0 <__assert_func+0x30>)
 800a9c2:	461c      	mov	r4, r3
 800a9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9c8:	9100      	str	r1, [sp, #0]
 800a9ca:	462b      	mov	r3, r5
 800a9cc:	4905      	ldr	r1, [pc, #20]	@ (800a9e4 <__assert_func+0x34>)
 800a9ce:	f000 f86f 	bl	800aab0 <fiprintf>
 800a9d2:	f000 f87f 	bl	800aad4 <abort>
 800a9d6:	4b04      	ldr	r3, [pc, #16]	@ (800a9e8 <__assert_func+0x38>)
 800a9d8:	e7f4      	b.n	800a9c4 <__assert_func+0x14>
 800a9da:	bf00      	nop
 800a9dc:	20000020 	.word	0x20000020
 800a9e0:	0800bdf6 	.word	0x0800bdf6
 800a9e4:	0800bdc8 	.word	0x0800bdc8
 800a9e8:	0800bdbb 	.word	0x0800bdbb

0800a9ec <_calloc_r>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	fba1 5402 	umull	r5, r4, r1, r2
 800a9f2:	b93c      	cbnz	r4, 800aa04 <_calloc_r+0x18>
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	f7ff f99f 	bl	8009d38 <_malloc_r>
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	b928      	cbnz	r0, 800aa0a <_calloc_r+0x1e>
 800a9fe:	2600      	movs	r6, #0
 800aa00:	4630      	mov	r0, r6
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	220c      	movs	r2, #12
 800aa06:	6002      	str	r2, [r0, #0]
 800aa08:	e7f9      	b.n	800a9fe <_calloc_r+0x12>
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	f7fe fa42 	bl	8008e96 <memset>
 800aa12:	e7f5      	b.n	800aa00 <_calloc_r+0x14>

0800aa14 <__ascii_mbtowc>:
 800aa14:	b082      	sub	sp, #8
 800aa16:	b901      	cbnz	r1, 800aa1a <__ascii_mbtowc+0x6>
 800aa18:	a901      	add	r1, sp, #4
 800aa1a:	b142      	cbz	r2, 800aa2e <__ascii_mbtowc+0x1a>
 800aa1c:	b14b      	cbz	r3, 800aa32 <__ascii_mbtowc+0x1e>
 800aa1e:	7813      	ldrb	r3, [r2, #0]
 800aa20:	600b      	str	r3, [r1, #0]
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	1e10      	subs	r0, r2, #0
 800aa26:	bf18      	it	ne
 800aa28:	2001      	movne	r0, #1
 800aa2a:	b002      	add	sp, #8
 800aa2c:	4770      	bx	lr
 800aa2e:	4610      	mov	r0, r2
 800aa30:	e7fb      	b.n	800aa2a <__ascii_mbtowc+0x16>
 800aa32:	f06f 0001 	mvn.w	r0, #1
 800aa36:	e7f8      	b.n	800aa2a <__ascii_mbtowc+0x16>

0800aa38 <_realloc_r>:
 800aa38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa3c:	4680      	mov	r8, r0
 800aa3e:	4615      	mov	r5, r2
 800aa40:	460c      	mov	r4, r1
 800aa42:	b921      	cbnz	r1, 800aa4e <_realloc_r+0x16>
 800aa44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa48:	4611      	mov	r1, r2
 800aa4a:	f7ff b975 	b.w	8009d38 <_malloc_r>
 800aa4e:	b92a      	cbnz	r2, 800aa5c <_realloc_r+0x24>
 800aa50:	f7ff f8fe 	bl	8009c50 <_free_r>
 800aa54:	2400      	movs	r4, #0
 800aa56:	4620      	mov	r0, r4
 800aa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa5c:	f000 f841 	bl	800aae2 <_malloc_usable_size_r>
 800aa60:	4285      	cmp	r5, r0
 800aa62:	4606      	mov	r6, r0
 800aa64:	d802      	bhi.n	800aa6c <_realloc_r+0x34>
 800aa66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa6a:	d8f4      	bhi.n	800aa56 <_realloc_r+0x1e>
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	4640      	mov	r0, r8
 800aa70:	f7ff f962 	bl	8009d38 <_malloc_r>
 800aa74:	4607      	mov	r7, r0
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d0ec      	beq.n	800aa54 <_realloc_r+0x1c>
 800aa7a:	42b5      	cmp	r5, r6
 800aa7c:	462a      	mov	r2, r5
 800aa7e:	4621      	mov	r1, r4
 800aa80:	bf28      	it	cs
 800aa82:	4632      	movcs	r2, r6
 800aa84:	f7fe fa87 	bl	8008f96 <memcpy>
 800aa88:	4621      	mov	r1, r4
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	f7ff f8e0 	bl	8009c50 <_free_r>
 800aa90:	463c      	mov	r4, r7
 800aa92:	e7e0      	b.n	800aa56 <_realloc_r+0x1e>

0800aa94 <__ascii_wctomb>:
 800aa94:	4603      	mov	r3, r0
 800aa96:	4608      	mov	r0, r1
 800aa98:	b141      	cbz	r1, 800aaac <__ascii_wctomb+0x18>
 800aa9a:	2aff      	cmp	r2, #255	@ 0xff
 800aa9c:	d904      	bls.n	800aaa8 <__ascii_wctomb+0x14>
 800aa9e:	228a      	movs	r2, #138	@ 0x8a
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa6:	4770      	bx	lr
 800aaa8:	700a      	strb	r2, [r1, #0]
 800aaaa:	2001      	movs	r0, #1
 800aaac:	4770      	bx	lr
	...

0800aab0 <fiprintf>:
 800aab0:	b40e      	push	{r1, r2, r3}
 800aab2:	b503      	push	{r0, r1, lr}
 800aab4:	4601      	mov	r1, r0
 800aab6:	ab03      	add	r3, sp, #12
 800aab8:	4805      	ldr	r0, [pc, #20]	@ (800aad0 <fiprintf+0x20>)
 800aaba:	f853 2b04 	ldr.w	r2, [r3], #4
 800aabe:	6800      	ldr	r0, [r0, #0]
 800aac0:	9301      	str	r3, [sp, #4]
 800aac2:	f000 f83f 	bl	800ab44 <_vfiprintf_r>
 800aac6:	b002      	add	sp, #8
 800aac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aacc:	b003      	add	sp, #12
 800aace:	4770      	bx	lr
 800aad0:	20000020 	.word	0x20000020

0800aad4 <abort>:
 800aad4:	b508      	push	{r3, lr}
 800aad6:	2006      	movs	r0, #6
 800aad8:	f000 fa08 	bl	800aeec <raise>
 800aadc:	2001      	movs	r0, #1
 800aade:	f7f7 fbf1 	bl	80022c4 <_exit>

0800aae2 <_malloc_usable_size_r>:
 800aae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aae6:	1f18      	subs	r0, r3, #4
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	bfbc      	itt	lt
 800aaec:	580b      	ldrlt	r3, [r1, r0]
 800aaee:	18c0      	addlt	r0, r0, r3
 800aaf0:	4770      	bx	lr

0800aaf2 <__sfputc_r>:
 800aaf2:	6893      	ldr	r3, [r2, #8]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	b410      	push	{r4}
 800aafa:	6093      	str	r3, [r2, #8]
 800aafc:	da08      	bge.n	800ab10 <__sfputc_r+0x1e>
 800aafe:	6994      	ldr	r4, [r2, #24]
 800ab00:	42a3      	cmp	r3, r4
 800ab02:	db01      	blt.n	800ab08 <__sfputc_r+0x16>
 800ab04:	290a      	cmp	r1, #10
 800ab06:	d103      	bne.n	800ab10 <__sfputc_r+0x1e>
 800ab08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab0c:	f000 b932 	b.w	800ad74 <__swbuf_r>
 800ab10:	6813      	ldr	r3, [r2, #0]
 800ab12:	1c58      	adds	r0, r3, #1
 800ab14:	6010      	str	r0, [r2, #0]
 800ab16:	7019      	strb	r1, [r3, #0]
 800ab18:	4608      	mov	r0, r1
 800ab1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <__sfputs_r>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	4606      	mov	r6, r0
 800ab24:	460f      	mov	r7, r1
 800ab26:	4614      	mov	r4, r2
 800ab28:	18d5      	adds	r5, r2, r3
 800ab2a:	42ac      	cmp	r4, r5
 800ab2c:	d101      	bne.n	800ab32 <__sfputs_r+0x12>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e007      	b.n	800ab42 <__sfputs_r+0x22>
 800ab32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab36:	463a      	mov	r2, r7
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f7ff ffda 	bl	800aaf2 <__sfputc_r>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	d1f3      	bne.n	800ab2a <__sfputs_r+0xa>
 800ab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab44 <_vfiprintf_r>:
 800ab44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab48:	460d      	mov	r5, r1
 800ab4a:	b09d      	sub	sp, #116	@ 0x74
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	4698      	mov	r8, r3
 800ab50:	4606      	mov	r6, r0
 800ab52:	b118      	cbz	r0, 800ab5c <_vfiprintf_r+0x18>
 800ab54:	6a03      	ldr	r3, [r0, #32]
 800ab56:	b90b      	cbnz	r3, 800ab5c <_vfiprintf_r+0x18>
 800ab58:	f7fe f904 	bl	8008d64 <__sinit>
 800ab5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab5e:	07d9      	lsls	r1, r3, #31
 800ab60:	d405      	bmi.n	800ab6e <_vfiprintf_r+0x2a>
 800ab62:	89ab      	ldrh	r3, [r5, #12]
 800ab64:	059a      	lsls	r2, r3, #22
 800ab66:	d402      	bmi.n	800ab6e <_vfiprintf_r+0x2a>
 800ab68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab6a:	f7fe fa12 	bl	8008f92 <__retarget_lock_acquire_recursive>
 800ab6e:	89ab      	ldrh	r3, [r5, #12]
 800ab70:	071b      	lsls	r3, r3, #28
 800ab72:	d501      	bpl.n	800ab78 <_vfiprintf_r+0x34>
 800ab74:	692b      	ldr	r3, [r5, #16]
 800ab76:	b99b      	cbnz	r3, 800aba0 <_vfiprintf_r+0x5c>
 800ab78:	4629      	mov	r1, r5
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f000 f938 	bl	800adf0 <__swsetup_r>
 800ab80:	b170      	cbz	r0, 800aba0 <_vfiprintf_r+0x5c>
 800ab82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab84:	07dc      	lsls	r4, r3, #31
 800ab86:	d504      	bpl.n	800ab92 <_vfiprintf_r+0x4e>
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	b01d      	add	sp, #116	@ 0x74
 800ab8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab92:	89ab      	ldrh	r3, [r5, #12]
 800ab94:	0598      	lsls	r0, r3, #22
 800ab96:	d4f7      	bmi.n	800ab88 <_vfiprintf_r+0x44>
 800ab98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab9a:	f7fe f9fb 	bl	8008f94 <__retarget_lock_release_recursive>
 800ab9e:	e7f3      	b.n	800ab88 <_vfiprintf_r+0x44>
 800aba0:	2300      	movs	r3, #0
 800aba2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aba4:	2320      	movs	r3, #32
 800aba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800abae:	2330      	movs	r3, #48	@ 0x30
 800abb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad60 <_vfiprintf_r+0x21c>
 800abb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abb8:	f04f 0901 	mov.w	r9, #1
 800abbc:	4623      	mov	r3, r4
 800abbe:	469a      	mov	sl, r3
 800abc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abc4:	b10a      	cbz	r2, 800abca <_vfiprintf_r+0x86>
 800abc6:	2a25      	cmp	r2, #37	@ 0x25
 800abc8:	d1f9      	bne.n	800abbe <_vfiprintf_r+0x7a>
 800abca:	ebba 0b04 	subs.w	fp, sl, r4
 800abce:	d00b      	beq.n	800abe8 <_vfiprintf_r+0xa4>
 800abd0:	465b      	mov	r3, fp
 800abd2:	4622      	mov	r2, r4
 800abd4:	4629      	mov	r1, r5
 800abd6:	4630      	mov	r0, r6
 800abd8:	f7ff ffa2 	bl	800ab20 <__sfputs_r>
 800abdc:	3001      	adds	r0, #1
 800abde:	f000 80a7 	beq.w	800ad30 <_vfiprintf_r+0x1ec>
 800abe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abe4:	445a      	add	r2, fp
 800abe6:	9209      	str	r2, [sp, #36]	@ 0x24
 800abe8:	f89a 3000 	ldrb.w	r3, [sl]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 809f 	beq.w	800ad30 <_vfiprintf_r+0x1ec>
 800abf2:	2300      	movs	r3, #0
 800abf4:	f04f 32ff 	mov.w	r2, #4294967295
 800abf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abfc:	f10a 0a01 	add.w	sl, sl, #1
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	9307      	str	r3, [sp, #28]
 800ac04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac08:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac0a:	4654      	mov	r4, sl
 800ac0c:	2205      	movs	r2, #5
 800ac0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac12:	4853      	ldr	r0, [pc, #332]	@ (800ad60 <_vfiprintf_r+0x21c>)
 800ac14:	f7f5 fadc 	bl	80001d0 <memchr>
 800ac18:	9a04      	ldr	r2, [sp, #16]
 800ac1a:	b9d8      	cbnz	r0, 800ac54 <_vfiprintf_r+0x110>
 800ac1c:	06d1      	lsls	r1, r2, #27
 800ac1e:	bf44      	itt	mi
 800ac20:	2320      	movmi	r3, #32
 800ac22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac26:	0713      	lsls	r3, r2, #28
 800ac28:	bf44      	itt	mi
 800ac2a:	232b      	movmi	r3, #43	@ 0x2b
 800ac2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac30:	f89a 3000 	ldrb.w	r3, [sl]
 800ac34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac36:	d015      	beq.n	800ac64 <_vfiprintf_r+0x120>
 800ac38:	9a07      	ldr	r2, [sp, #28]
 800ac3a:	4654      	mov	r4, sl
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f04f 0c0a 	mov.w	ip, #10
 800ac42:	4621      	mov	r1, r4
 800ac44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac48:	3b30      	subs	r3, #48	@ 0x30
 800ac4a:	2b09      	cmp	r3, #9
 800ac4c:	d94b      	bls.n	800ace6 <_vfiprintf_r+0x1a2>
 800ac4e:	b1b0      	cbz	r0, 800ac7e <_vfiprintf_r+0x13a>
 800ac50:	9207      	str	r2, [sp, #28]
 800ac52:	e014      	b.n	800ac7e <_vfiprintf_r+0x13a>
 800ac54:	eba0 0308 	sub.w	r3, r0, r8
 800ac58:	fa09 f303 	lsl.w	r3, r9, r3
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	9304      	str	r3, [sp, #16]
 800ac60:	46a2      	mov	sl, r4
 800ac62:	e7d2      	b.n	800ac0a <_vfiprintf_r+0xc6>
 800ac64:	9b03      	ldr	r3, [sp, #12]
 800ac66:	1d19      	adds	r1, r3, #4
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	9103      	str	r1, [sp, #12]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	bfbb      	ittet	lt
 800ac70:	425b      	neglt	r3, r3
 800ac72:	f042 0202 	orrlt.w	r2, r2, #2
 800ac76:	9307      	strge	r3, [sp, #28]
 800ac78:	9307      	strlt	r3, [sp, #28]
 800ac7a:	bfb8      	it	lt
 800ac7c:	9204      	strlt	r2, [sp, #16]
 800ac7e:	7823      	ldrb	r3, [r4, #0]
 800ac80:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac82:	d10a      	bne.n	800ac9a <_vfiprintf_r+0x156>
 800ac84:	7863      	ldrb	r3, [r4, #1]
 800ac86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac88:	d132      	bne.n	800acf0 <_vfiprintf_r+0x1ac>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	1d1a      	adds	r2, r3, #4
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	9203      	str	r2, [sp, #12]
 800ac92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac96:	3402      	adds	r4, #2
 800ac98:	9305      	str	r3, [sp, #20]
 800ac9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad70 <_vfiprintf_r+0x22c>
 800ac9e:	7821      	ldrb	r1, [r4, #0]
 800aca0:	2203      	movs	r2, #3
 800aca2:	4650      	mov	r0, sl
 800aca4:	f7f5 fa94 	bl	80001d0 <memchr>
 800aca8:	b138      	cbz	r0, 800acba <_vfiprintf_r+0x176>
 800acaa:	9b04      	ldr	r3, [sp, #16]
 800acac:	eba0 000a 	sub.w	r0, r0, sl
 800acb0:	2240      	movs	r2, #64	@ 0x40
 800acb2:	4082      	lsls	r2, r0
 800acb4:	4313      	orrs	r3, r2
 800acb6:	3401      	adds	r4, #1
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbe:	4829      	ldr	r0, [pc, #164]	@ (800ad64 <_vfiprintf_r+0x220>)
 800acc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acc4:	2206      	movs	r2, #6
 800acc6:	f7f5 fa83 	bl	80001d0 <memchr>
 800acca:	2800      	cmp	r0, #0
 800accc:	d03f      	beq.n	800ad4e <_vfiprintf_r+0x20a>
 800acce:	4b26      	ldr	r3, [pc, #152]	@ (800ad68 <_vfiprintf_r+0x224>)
 800acd0:	bb1b      	cbnz	r3, 800ad1a <_vfiprintf_r+0x1d6>
 800acd2:	9b03      	ldr	r3, [sp, #12]
 800acd4:	3307      	adds	r3, #7
 800acd6:	f023 0307 	bic.w	r3, r3, #7
 800acda:	3308      	adds	r3, #8
 800acdc:	9303      	str	r3, [sp, #12]
 800acde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ace0:	443b      	add	r3, r7
 800ace2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ace4:	e76a      	b.n	800abbc <_vfiprintf_r+0x78>
 800ace6:	fb0c 3202 	mla	r2, ip, r2, r3
 800acea:	460c      	mov	r4, r1
 800acec:	2001      	movs	r0, #1
 800acee:	e7a8      	b.n	800ac42 <_vfiprintf_r+0xfe>
 800acf0:	2300      	movs	r3, #0
 800acf2:	3401      	adds	r4, #1
 800acf4:	9305      	str	r3, [sp, #20]
 800acf6:	4619      	mov	r1, r3
 800acf8:	f04f 0c0a 	mov.w	ip, #10
 800acfc:	4620      	mov	r0, r4
 800acfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad02:	3a30      	subs	r2, #48	@ 0x30
 800ad04:	2a09      	cmp	r2, #9
 800ad06:	d903      	bls.n	800ad10 <_vfiprintf_r+0x1cc>
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0c6      	beq.n	800ac9a <_vfiprintf_r+0x156>
 800ad0c:	9105      	str	r1, [sp, #20]
 800ad0e:	e7c4      	b.n	800ac9a <_vfiprintf_r+0x156>
 800ad10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad14:	4604      	mov	r4, r0
 800ad16:	2301      	movs	r3, #1
 800ad18:	e7f0      	b.n	800acfc <_vfiprintf_r+0x1b8>
 800ad1a:	ab03      	add	r3, sp, #12
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	462a      	mov	r2, r5
 800ad20:	4b12      	ldr	r3, [pc, #72]	@ (800ad6c <_vfiprintf_r+0x228>)
 800ad22:	a904      	add	r1, sp, #16
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7fd fbd9 	bl	80084dc <_printf_float>
 800ad2a:	4607      	mov	r7, r0
 800ad2c:	1c78      	adds	r0, r7, #1
 800ad2e:	d1d6      	bne.n	800acde <_vfiprintf_r+0x19a>
 800ad30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad32:	07d9      	lsls	r1, r3, #31
 800ad34:	d405      	bmi.n	800ad42 <_vfiprintf_r+0x1fe>
 800ad36:	89ab      	ldrh	r3, [r5, #12]
 800ad38:	059a      	lsls	r2, r3, #22
 800ad3a:	d402      	bmi.n	800ad42 <_vfiprintf_r+0x1fe>
 800ad3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad3e:	f7fe f929 	bl	8008f94 <__retarget_lock_release_recursive>
 800ad42:	89ab      	ldrh	r3, [r5, #12]
 800ad44:	065b      	lsls	r3, r3, #25
 800ad46:	f53f af1f 	bmi.w	800ab88 <_vfiprintf_r+0x44>
 800ad4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad4c:	e71e      	b.n	800ab8c <_vfiprintf_r+0x48>
 800ad4e:	ab03      	add	r3, sp, #12
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	462a      	mov	r2, r5
 800ad54:	4b05      	ldr	r3, [pc, #20]	@ (800ad6c <_vfiprintf_r+0x228>)
 800ad56:	a904      	add	r1, sp, #16
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7fd fe57 	bl	8008a0c <_printf_i>
 800ad5e:	e7e4      	b.n	800ad2a <_vfiprintf_r+0x1e6>
 800ad60:	0800bda0 	.word	0x0800bda0
 800ad64:	0800bdaa 	.word	0x0800bdaa
 800ad68:	080084dd 	.word	0x080084dd
 800ad6c:	0800ab21 	.word	0x0800ab21
 800ad70:	0800bda6 	.word	0x0800bda6

0800ad74 <__swbuf_r>:
 800ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad76:	460e      	mov	r6, r1
 800ad78:	4614      	mov	r4, r2
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	b118      	cbz	r0, 800ad86 <__swbuf_r+0x12>
 800ad7e:	6a03      	ldr	r3, [r0, #32]
 800ad80:	b90b      	cbnz	r3, 800ad86 <__swbuf_r+0x12>
 800ad82:	f7fd ffef 	bl	8008d64 <__sinit>
 800ad86:	69a3      	ldr	r3, [r4, #24]
 800ad88:	60a3      	str	r3, [r4, #8]
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	071a      	lsls	r2, r3, #28
 800ad8e:	d501      	bpl.n	800ad94 <__swbuf_r+0x20>
 800ad90:	6923      	ldr	r3, [r4, #16]
 800ad92:	b943      	cbnz	r3, 800ada6 <__swbuf_r+0x32>
 800ad94:	4621      	mov	r1, r4
 800ad96:	4628      	mov	r0, r5
 800ad98:	f000 f82a 	bl	800adf0 <__swsetup_r>
 800ad9c:	b118      	cbz	r0, 800ada6 <__swbuf_r+0x32>
 800ad9e:	f04f 37ff 	mov.w	r7, #4294967295
 800ada2:	4638      	mov	r0, r7
 800ada4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	6922      	ldr	r2, [r4, #16]
 800adaa:	1a98      	subs	r0, r3, r2
 800adac:	6963      	ldr	r3, [r4, #20]
 800adae:	b2f6      	uxtb	r6, r6
 800adb0:	4283      	cmp	r3, r0
 800adb2:	4637      	mov	r7, r6
 800adb4:	dc05      	bgt.n	800adc2 <__swbuf_r+0x4e>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4628      	mov	r0, r5
 800adba:	f7ff fda7 	bl	800a90c <_fflush_r>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	d1ed      	bne.n	800ad9e <__swbuf_r+0x2a>
 800adc2:	68a3      	ldr	r3, [r4, #8]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	60a3      	str	r3, [r4, #8]
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	6022      	str	r2, [r4, #0]
 800adce:	701e      	strb	r6, [r3, #0]
 800add0:	6962      	ldr	r2, [r4, #20]
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	429a      	cmp	r2, r3
 800add6:	d004      	beq.n	800ade2 <__swbuf_r+0x6e>
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	07db      	lsls	r3, r3, #31
 800addc:	d5e1      	bpl.n	800ada2 <__swbuf_r+0x2e>
 800adde:	2e0a      	cmp	r6, #10
 800ade0:	d1df      	bne.n	800ada2 <__swbuf_r+0x2e>
 800ade2:	4621      	mov	r1, r4
 800ade4:	4628      	mov	r0, r5
 800ade6:	f7ff fd91 	bl	800a90c <_fflush_r>
 800adea:	2800      	cmp	r0, #0
 800adec:	d0d9      	beq.n	800ada2 <__swbuf_r+0x2e>
 800adee:	e7d6      	b.n	800ad9e <__swbuf_r+0x2a>

0800adf0 <__swsetup_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4b29      	ldr	r3, [pc, #164]	@ (800ae98 <__swsetup_r+0xa8>)
 800adf4:	4605      	mov	r5, r0
 800adf6:	6818      	ldr	r0, [r3, #0]
 800adf8:	460c      	mov	r4, r1
 800adfa:	b118      	cbz	r0, 800ae04 <__swsetup_r+0x14>
 800adfc:	6a03      	ldr	r3, [r0, #32]
 800adfe:	b90b      	cbnz	r3, 800ae04 <__swsetup_r+0x14>
 800ae00:	f7fd ffb0 	bl	8008d64 <__sinit>
 800ae04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae08:	0719      	lsls	r1, r3, #28
 800ae0a:	d422      	bmi.n	800ae52 <__swsetup_r+0x62>
 800ae0c:	06da      	lsls	r2, r3, #27
 800ae0e:	d407      	bmi.n	800ae20 <__swsetup_r+0x30>
 800ae10:	2209      	movs	r2, #9
 800ae12:	602a      	str	r2, [r5, #0]
 800ae14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1e:	e033      	b.n	800ae88 <__swsetup_r+0x98>
 800ae20:	0758      	lsls	r0, r3, #29
 800ae22:	d512      	bpl.n	800ae4a <__swsetup_r+0x5a>
 800ae24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae26:	b141      	cbz	r1, 800ae3a <__swsetup_r+0x4a>
 800ae28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae2c:	4299      	cmp	r1, r3
 800ae2e:	d002      	beq.n	800ae36 <__swsetup_r+0x46>
 800ae30:	4628      	mov	r0, r5
 800ae32:	f7fe ff0d 	bl	8009c50 <_free_r>
 800ae36:	2300      	movs	r3, #0
 800ae38:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae3a:	89a3      	ldrh	r3, [r4, #12]
 800ae3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae40:	81a3      	strh	r3, [r4, #12]
 800ae42:	2300      	movs	r3, #0
 800ae44:	6063      	str	r3, [r4, #4]
 800ae46:	6923      	ldr	r3, [r4, #16]
 800ae48:	6023      	str	r3, [r4, #0]
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	f043 0308 	orr.w	r3, r3, #8
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	6923      	ldr	r3, [r4, #16]
 800ae54:	b94b      	cbnz	r3, 800ae6a <__swsetup_r+0x7a>
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae60:	d003      	beq.n	800ae6a <__swsetup_r+0x7a>
 800ae62:	4621      	mov	r1, r4
 800ae64:	4628      	mov	r0, r5
 800ae66:	f000 f883 	bl	800af70 <__smakebuf_r>
 800ae6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6e:	f013 0201 	ands.w	r2, r3, #1
 800ae72:	d00a      	beq.n	800ae8a <__swsetup_r+0x9a>
 800ae74:	2200      	movs	r2, #0
 800ae76:	60a2      	str	r2, [r4, #8]
 800ae78:	6962      	ldr	r2, [r4, #20]
 800ae7a:	4252      	negs	r2, r2
 800ae7c:	61a2      	str	r2, [r4, #24]
 800ae7e:	6922      	ldr	r2, [r4, #16]
 800ae80:	b942      	cbnz	r2, 800ae94 <__swsetup_r+0xa4>
 800ae82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae86:	d1c5      	bne.n	800ae14 <__swsetup_r+0x24>
 800ae88:	bd38      	pop	{r3, r4, r5, pc}
 800ae8a:	0799      	lsls	r1, r3, #30
 800ae8c:	bf58      	it	pl
 800ae8e:	6962      	ldrpl	r2, [r4, #20]
 800ae90:	60a2      	str	r2, [r4, #8]
 800ae92:	e7f4      	b.n	800ae7e <__swsetup_r+0x8e>
 800ae94:	2000      	movs	r0, #0
 800ae96:	e7f7      	b.n	800ae88 <__swsetup_r+0x98>
 800ae98:	20000020 	.word	0x20000020

0800ae9c <_raise_r>:
 800ae9c:	291f      	cmp	r1, #31
 800ae9e:	b538      	push	{r3, r4, r5, lr}
 800aea0:	4605      	mov	r5, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	d904      	bls.n	800aeb0 <_raise_r+0x14>
 800aea6:	2316      	movs	r3, #22
 800aea8:	6003      	str	r3, [r0, #0]
 800aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aeb2:	b112      	cbz	r2, 800aeba <_raise_r+0x1e>
 800aeb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeb8:	b94b      	cbnz	r3, 800aece <_raise_r+0x32>
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 f830 	bl	800af20 <_getpid_r>
 800aec0:	4622      	mov	r2, r4
 800aec2:	4601      	mov	r1, r0
 800aec4:	4628      	mov	r0, r5
 800aec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeca:	f000 b817 	b.w	800aefc <_kill_r>
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d00a      	beq.n	800aee8 <_raise_r+0x4c>
 800aed2:	1c59      	adds	r1, r3, #1
 800aed4:	d103      	bne.n	800aede <_raise_r+0x42>
 800aed6:	2316      	movs	r3, #22
 800aed8:	6003      	str	r3, [r0, #0]
 800aeda:	2001      	movs	r0, #1
 800aedc:	e7e7      	b.n	800aeae <_raise_r+0x12>
 800aede:	2100      	movs	r1, #0
 800aee0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aee4:	4620      	mov	r0, r4
 800aee6:	4798      	blx	r3
 800aee8:	2000      	movs	r0, #0
 800aeea:	e7e0      	b.n	800aeae <_raise_r+0x12>

0800aeec <raise>:
 800aeec:	4b02      	ldr	r3, [pc, #8]	@ (800aef8 <raise+0xc>)
 800aeee:	4601      	mov	r1, r0
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	f7ff bfd3 	b.w	800ae9c <_raise_r>
 800aef6:	bf00      	nop
 800aef8:	20000020 	.word	0x20000020

0800aefc <_kill_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4d07      	ldr	r5, [pc, #28]	@ (800af1c <_kill_r+0x20>)
 800af00:	2300      	movs	r3, #0
 800af02:	4604      	mov	r4, r0
 800af04:	4608      	mov	r0, r1
 800af06:	4611      	mov	r1, r2
 800af08:	602b      	str	r3, [r5, #0]
 800af0a:	f7f7 f9cb 	bl	80022a4 <_kill>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	d102      	bne.n	800af18 <_kill_r+0x1c>
 800af12:	682b      	ldr	r3, [r5, #0]
 800af14:	b103      	cbz	r3, 800af18 <_kill_r+0x1c>
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	bd38      	pop	{r3, r4, r5, pc}
 800af1a:	bf00      	nop
 800af1c:	200049a0 	.word	0x200049a0

0800af20 <_getpid_r>:
 800af20:	f7f7 b9b8 	b.w	8002294 <_getpid>

0800af24 <__swhatbuf_r>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	460c      	mov	r4, r1
 800af28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af2c:	2900      	cmp	r1, #0
 800af2e:	b096      	sub	sp, #88	@ 0x58
 800af30:	4615      	mov	r5, r2
 800af32:	461e      	mov	r6, r3
 800af34:	da0d      	bge.n	800af52 <__swhatbuf_r+0x2e>
 800af36:	89a3      	ldrh	r3, [r4, #12]
 800af38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af3c:	f04f 0100 	mov.w	r1, #0
 800af40:	bf14      	ite	ne
 800af42:	2340      	movne	r3, #64	@ 0x40
 800af44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af48:	2000      	movs	r0, #0
 800af4a:	6031      	str	r1, [r6, #0]
 800af4c:	602b      	str	r3, [r5, #0]
 800af4e:	b016      	add	sp, #88	@ 0x58
 800af50:	bd70      	pop	{r4, r5, r6, pc}
 800af52:	466a      	mov	r2, sp
 800af54:	f000 f848 	bl	800afe8 <_fstat_r>
 800af58:	2800      	cmp	r0, #0
 800af5a:	dbec      	blt.n	800af36 <__swhatbuf_r+0x12>
 800af5c:	9901      	ldr	r1, [sp, #4]
 800af5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af66:	4259      	negs	r1, r3
 800af68:	4159      	adcs	r1, r3
 800af6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af6e:	e7eb      	b.n	800af48 <__swhatbuf_r+0x24>

0800af70 <__smakebuf_r>:
 800af70:	898b      	ldrh	r3, [r1, #12]
 800af72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af74:	079d      	lsls	r5, r3, #30
 800af76:	4606      	mov	r6, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	d507      	bpl.n	800af8c <__smakebuf_r+0x1c>
 800af7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	6123      	str	r3, [r4, #16]
 800af84:	2301      	movs	r3, #1
 800af86:	6163      	str	r3, [r4, #20]
 800af88:	b003      	add	sp, #12
 800af8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8c:	ab01      	add	r3, sp, #4
 800af8e:	466a      	mov	r2, sp
 800af90:	f7ff ffc8 	bl	800af24 <__swhatbuf_r>
 800af94:	9f00      	ldr	r7, [sp, #0]
 800af96:	4605      	mov	r5, r0
 800af98:	4639      	mov	r1, r7
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7fe fecc 	bl	8009d38 <_malloc_r>
 800afa0:	b948      	cbnz	r0, 800afb6 <__smakebuf_r+0x46>
 800afa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa6:	059a      	lsls	r2, r3, #22
 800afa8:	d4ee      	bmi.n	800af88 <__smakebuf_r+0x18>
 800afaa:	f023 0303 	bic.w	r3, r3, #3
 800afae:	f043 0302 	orr.w	r3, r3, #2
 800afb2:	81a3      	strh	r3, [r4, #12]
 800afb4:	e7e2      	b.n	800af7c <__smakebuf_r+0xc>
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	6020      	str	r0, [r4, #0]
 800afba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afbe:	81a3      	strh	r3, [r4, #12]
 800afc0:	9b01      	ldr	r3, [sp, #4]
 800afc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800afc6:	b15b      	cbz	r3, 800afe0 <__smakebuf_r+0x70>
 800afc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afcc:	4630      	mov	r0, r6
 800afce:	f000 f81d 	bl	800b00c <_isatty_r>
 800afd2:	b128      	cbz	r0, 800afe0 <__smakebuf_r+0x70>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f023 0303 	bic.w	r3, r3, #3
 800afda:	f043 0301 	orr.w	r3, r3, #1
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	89a3      	ldrh	r3, [r4, #12]
 800afe2:	431d      	orrs	r5, r3
 800afe4:	81a5      	strh	r5, [r4, #12]
 800afe6:	e7cf      	b.n	800af88 <__smakebuf_r+0x18>

0800afe8 <_fstat_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	@ (800b008 <_fstat_r+0x20>)
 800afec:	2300      	movs	r3, #0
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	4611      	mov	r1, r2
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f7f7 f9b5 	bl	8002364 <_fstat>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d102      	bne.n	800b004 <_fstat_r+0x1c>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	b103      	cbz	r3, 800b004 <_fstat_r+0x1c>
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	bf00      	nop
 800b008:	200049a0 	.word	0x200049a0

0800b00c <_isatty_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d06      	ldr	r5, [pc, #24]	@ (800b028 <_isatty_r+0x1c>)
 800b010:	2300      	movs	r3, #0
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	f7f7 f9b4 	bl	8002384 <_isatty>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_isatty_r+0x1a>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_isatty_r+0x1a>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	200049a0 	.word	0x200049a0

0800b02c <_init>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	bf00      	nop
 800b030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b032:	bc08      	pop	{r3}
 800b034:	469e      	mov	lr, r3
 800b036:	4770      	bx	lr

0800b038 <_fini>:
 800b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03a:	bf00      	nop
 800b03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03e:	bc08      	pop	{r3}
 800b040:	469e      	mov	lr, r3
 800b042:	4770      	bx	lr
