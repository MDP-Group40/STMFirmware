
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec8  0800b058  0800b058  0000c058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf20  0800bf20  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf20  0800bf20  0000cf20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf28  0800bf28  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf28  0800bf28  0000cf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf2c  0800bf2c  0000cf2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bf30  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          000047d8  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200049b0  200049b0  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ff8  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000341a  00000000  00000000  00022200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00025620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000faf  00000000  00000000  00026a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ec7  00000000  00000000  00027a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016cef  00000000  00000000  0004b8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d69e2  00000000  00000000  000625bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138f9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000658c  00000000  00000000  00138fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0013f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b03c 	.word	0x0800b03c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b03c 	.word	0x0800b03c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <vApplicationGetIdleTaskMemory+0x30>)
 8000eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001f4 	.word	0x200001f4
 8000f08:	20000248 	.word	0x20000248

08000f0c <PID_Init>:
 * @param  Kd: Derivative gain.
 * @param  outputMin: Minimum output limit.
 * @param  outputMax: Maximum output limit.
 * @retval None
 */
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, int32_t outputMin, int32_t outputMax) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6178      	str	r0, [r7, #20]
 8000f14:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f18:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f1c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f20:	6079      	str	r1, [r7, #4]
 8000f22:	603a      	str	r2, [r7, #0]
    pid->Kp = Kp;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	609a      	str	r2, [r3, #8]
    pid->previousError = 0.0;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
    pid->outputMin = outputMin;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	615a      	str	r2, [r3, #20]
    pid->outputMax = outputMax;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	619a      	str	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <UART_Transmit>:

    return (uint32_t)output;
}


void UART_Transmit(char* message) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff f983 	bl	8000270 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4803      	ldr	r0, [pc, #12]	@ (8000f84 <UART_Transmit+0x28>)
 8000f76:	f003 fbbf 	bl	80046f8 <HAL_UART_Transmit>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000568 	.word	0x20000568

08000f88 <SetDir>:

void SetDir(bool right, bool forward){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460a      	mov	r2, r1
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	4613      	mov	r3, r2
 8000f96:	71bb      	strb	r3, [r7, #6]
	if (right){
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d01b      	beq.n	8000fd6 <SetDir+0x4e>
		if(!forward){
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00a      	beq.n	8000fc0 <SetDir+0x38>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2110      	movs	r1, #16
 8000fae:	4819      	ldr	r0, [pc, #100]	@ (8001014 <SetDir+0x8c>)
 8000fb0:	f001 fe86 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	4816      	ldr	r0, [pc, #88]	@ (8001014 <SetDir+0x8c>)
 8000fba:	f001 fe81 	bl	8002cc0 <HAL_GPIO_WritePin>
		else{
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000fbe:	e025      	b.n	800100c <SetDir+0x84>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	4813      	ldr	r0, [pc, #76]	@ (8001014 <SetDir+0x8c>)
 8000fc6:	f001 fe7b 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2120      	movs	r1, #32
 8000fce:	4811      	ldr	r0, [pc, #68]	@ (8001014 <SetDir+0x8c>)
 8000fd0:	f001 fe76 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 8000fd4:	e01a      	b.n	800100c <SetDir+0x84>
		if(!forward){
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	f083 0301 	eor.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00a      	beq.n	8000ff8 <SetDir+0x70>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	480b      	ldr	r0, [pc, #44]	@ (8001014 <SetDir+0x8c>)
 8000fe8:	f001 fe6a 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4808      	ldr	r0, [pc, #32]	@ (8001014 <SetDir+0x8c>)
 8000ff2:	f001 fe65 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 8000ff6:	e009      	b.n	800100c <SetDir+0x84>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <SetDir+0x8c>)
 8000ffe:	f001 fe5f 	bl	8002cc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2104      	movs	r1, #4
 8001006:	4803      	ldr	r0, [pc, #12]	@ (8001014 <SetDir+0x8c>)
 8001008:	f001 fe5a 	bl	8002cc0 <HAL_GPIO_WritePin>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40020000 	.word	0x40020000

08001018 <SetSpeed>:

void SetSpeed(bool right, uint32_t pwmVal){
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
	if(right){
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <SetSpeed+0x1c>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2,pwmVal);
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <SetSpeed+0x30>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1,pwmVal);
}
 8001032:	e003      	b.n	800103c <SetSpeed+0x24>
	else __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1,pwmVal);
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <SetSpeed+0x30>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000520 	.word	0x20000520

0800104c <EncoderReset>:

void EncoderReset(bool right, EncoderDat EncoderData){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
	if(right){
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d03b      	beq.n	80010da <EncoderReset+0x8e>
		switch (EncoderData){
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <EncoderReset+0x22>
 8001068:	2b01      	cmp	r3, #1
 800106a:	d010      	beq.n	800108e <EncoderReset+0x42>
 800106c:	e01f      	b.n	80010ae <EncoderReset+0x62>
		case POSITION:
			osMutexWait(EncoderRightMutexHandle, osWaitForever);
 800106e:	4b3b      	ldr	r3, [pc, #236]	@ (800115c <EncoderReset+0x110>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f04f 31ff 	mov.w	r1, #4294967295
 8001076:	4618      	mov	r0, r3
 8001078:	f004 fbee 	bl	8005858 <osMutexWait>
			encoderRight.position = 0;
 800107c:	4b38      	ldr	r3, [pc, #224]	@ (8001160 <EncoderReset+0x114>)
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
			osMutexRelease(EncoderRightMutexHandle);
 8001082:	4b36      	ldr	r3, [pc, #216]	@ (800115c <EncoderReset+0x110>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f004 fc34 	bl	80058f4 <osMutexRelease>
			break;
 800108c:	e061      	b.n	8001152 <EncoderReset+0x106>
		case SPEED:
			osMutexWait(EncoderRightMutexHandle, osWaitForever);
 800108e:	4b33      	ldr	r3, [pc, #204]	@ (800115c <EncoderReset+0x110>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f04f 31ff 	mov.w	r1, #4294967295
 8001096:	4618      	mov	r0, r3
 8001098:	f004 fbde 	bl	8005858 <osMutexWait>
			encoderRight.speed = 0;
 800109c:	4b30      	ldr	r3, [pc, #192]	@ (8001160 <EncoderReset+0x114>)
 800109e:	2200      	movs	r2, #0
 80010a0:	805a      	strh	r2, [r3, #2]
			osMutexRelease(EncoderRightMutexHandle);
 80010a2:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <EncoderReset+0x110>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 fc24 	bl	80058f4 <osMutexRelease>
			break;
 80010ac:	e051      	b.n	8001152 <EncoderReset+0x106>
		case ALL:
		default:
			osMutexWait(EncoderRightMutexHandle, osWaitForever);
 80010ae:	4b2b      	ldr	r3, [pc, #172]	@ (800115c <EncoderReset+0x110>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f04f 31ff 	mov.w	r1, #4294967295
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 fbce 	bl	8005858 <osMutexWait>
			encoderRight.speed = 0;
 80010bc:	4b28      	ldr	r3, [pc, #160]	@ (8001160 <EncoderReset+0x114>)
 80010be:	2200      	movs	r2, #0
 80010c0:	805a      	strh	r2, [r3, #2]
			encoderRight.position = 0;
 80010c2:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <EncoderReset+0x114>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	801a      	strh	r2, [r3, #0]
			encoderRight.direction = 0;
 80010c8:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <EncoderReset+0x114>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	809a      	strh	r2, [r3, #4]
			osMutexRelease(EncoderRightMutexHandle);
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <EncoderReset+0x110>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 fc0e 	bl	80058f4 <osMutexRelease>
			break;
 80010d8:	e03b      	b.n	8001152 <EncoderReset+0x106>
		}
	}
	else{
		switch (EncoderData){
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <EncoderReset+0x9a>
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d010      	beq.n	8001106 <EncoderReset+0xba>
 80010e4:	e01f      	b.n	8001126 <EncoderReset+0xda>
			case POSITION:
				osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 80010e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <EncoderReset+0x118>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f04f 31ff 	mov.w	r1, #4294967295
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fbb2 	bl	8005858 <osMutexWait>
				encoderLeft.position = 0;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <EncoderReset+0x11c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	801a      	strh	r2, [r3, #0]
				osMutexRelease(EncoderLeftMutexHandle);
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <EncoderReset+0x118>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fbf8 	bl	80058f4 <osMutexRelease>
				break;
 8001104:	e025      	b.n	8001152 <EncoderReset+0x106>
			case SPEED:
				osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001106:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <EncoderReset+0x118>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f04f 31ff 	mov.w	r1, #4294967295
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fba2 	bl	8005858 <osMutexWait>
				encoderLeft.speed = 0;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <EncoderReset+0x11c>)
 8001116:	2200      	movs	r2, #0
 8001118:	805a      	strh	r2, [r3, #2]
				osMutexRelease(EncoderLeftMutexHandle);
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <EncoderReset+0x118>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fbe8 	bl	80058f4 <osMutexRelease>
				break;
 8001124:	e015      	b.n	8001152 <EncoderReset+0x106>
			case ALL:
			default:
				osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <EncoderReset+0x118>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f04f 31ff 	mov.w	r1, #4294967295
 800112e:	4618      	mov	r0, r3
 8001130:	f004 fb92 	bl	8005858 <osMutexWait>
				encoderLeft.speed = 0;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <EncoderReset+0x11c>)
 8001136:	2200      	movs	r2, #0
 8001138:	805a      	strh	r2, [r3, #2]
				encoderLeft.position = 0;
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <EncoderReset+0x11c>)
 800113c:	2200      	movs	r2, #0
 800113e:	801a      	strh	r2, [r3, #0]
				encoderLeft.direction = 0;
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <EncoderReset+0x11c>)
 8001142:	2200      	movs	r2, #0
 8001144:	809a      	strh	r2, [r3, #4]
				osMutexRelease(EncoderLeftMutexHandle);
 8001146:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <EncoderReset+0x118>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fbd2 	bl	80058f4 <osMutexRelease>
				break;
 8001150:	bf00      	nop
		}
	}
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000610 	.word	0x20000610
 8001160:	20000664 	.word	0x20000664
 8001164:	200005c4 	.word	0x200005c4
 8001168:	2000065c 	.word	0x2000065c

0800116c <SetFacing>:

void SetFacing(DIRECTION direction) {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d010      	beq.n	800119e <SetFacing+0x32>
 800117c:	2b02      	cmp	r3, #2
 800117e:	dc13      	bgt.n	80011a8 <SetFacing+0x3c>
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <SetFacing+0x1e>
 8001184:	2b01      	cmp	r3, #1
 8001186:	d005      	beq.n	8001194 <SetFacing+0x28>
 8001188:	e00e      	b.n	80011a8 <SetFacing+0x3c>
	case STRAIGHT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,150);
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <SetFacing+0x54>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2296      	movs	r2, #150	@ 0x96
 8001190:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8001192:	e00e      	b.n	80011b2 <SetFacing+0x46>
	case RIGHT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,200);
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <SetFacing+0x54>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	22c8      	movs	r2, #200	@ 0xc8
 800119a:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 800119c:	e009      	b.n	80011b2 <SetFacing+0x46>
	case LEFT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,100);
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <SetFacing+0x54>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2264      	movs	r2, #100	@ 0x64
 80011a4:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 80011a6:	e004      	b.n	80011b2 <SetFacing+0x46>
	default:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,150);
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <SetFacing+0x54>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2296      	movs	r2, #150	@ 0x96
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 80011b0:	bf00      	nop
	}
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000448 	.word	0x20000448

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b0a4      	sub	sp, #144	@ 0x90
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ca:	f001 f9a3 	bl	8002514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f8ef 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f000 fb65 	bl	80018a0 <MX_GPIO_Init>
  MX_TIM8_Init();
 80011d6:	f000 fa8f 	bl	80016f8 <MX_TIM8_Init>
  MX_TIM2_Init();
 80011da:	f000 f9e5 	bl	80015a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011de:	f000 fa37 	bl	8001650 <MX_TIM3_Init>
  MX_TIM1_Init();
 80011e2:	f000 f943 	bl	800146c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80011e6:	f000 fb31 	bl	800184c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80011ea:	f007 f853 	bl	8008294 <OLED_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 10);
 80011ee:	220a      	movs	r2, #10
 80011f0:	4958      	ldr	r1, [pc, #352]	@ (8001354 <main+0x190>)
 80011f2:	4859      	ldr	r0, [pc, #356]	@ (8001358 <main+0x194>)
 80011f4:	f003 fb0b 	bl	800480e <HAL_UART_Receive_IT>
//  HAL_UART_Transmit_IT(&huart3, (uint8_t *)aRxBuffer, 10);
  // Start Encoders
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 80011f8:	213c      	movs	r1, #60	@ 0x3c
 80011fa:	4858      	ldr	r0, [pc, #352]	@ (800135c <main+0x198>)
 80011fc:	f002 fc2a 	bl	8003a54 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Right encoder
 8001200:	213c      	movs	r1, #60	@ 0x3c
 8001202:	4857      	ldr	r0, [pc, #348]	@ (8001360 <main+0x19c>)
 8001204:	f002 fc26 	bl	8003a54 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0); // Left encoder
 8001208:	4b54      	ldr	r3, [pc, #336]	@ (800135c <main+0x198>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim3, 0); // Right encoder
 8001210:	4b53      	ldr	r3, [pc, #332]	@ (8001360 <main+0x19c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24

  // Start PWM for motors
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Left motor PWM
 8001218:	2100      	movs	r1, #0
 800121a:	4852      	ldr	r0, [pc, #328]	@ (8001364 <main+0x1a0>)
 800121c:	f002 faac 	bl	8003778 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); // Right motor PWM
 8001220:	2104      	movs	r1, #4
 8001222:	4850      	ldr	r0, [pc, #320]	@ (8001364 <main+0x1a0>)
 8001224:	f002 faa8 	bl	8003778 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Servo motor PWM
 8001228:	210c      	movs	r1, #12
 800122a:	484f      	ldr	r0, [pc, #316]	@ (8001368 <main+0x1a4>)
 800122c:	f002 faa4 	bl	8003778 <HAL_TIM_PWM_Start>
//  SetServo(150);
  // Initialize the PID controllers for each motor
  PID_Init(&leftPID, 7, 0.01, 0.01, 0, 1500);  // Set your PID constants and output limits
 8001230:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001234:	2100      	movs	r1, #0
 8001236:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 800136c <main+0x1a8>
 800123a:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 800136c <main+0x1a8>
 800123e:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 8001242:	484b      	ldr	r0, [pc, #300]	@ (8001370 <main+0x1ac>)
 8001244:	f7ff fe62 	bl	8000f0c <PID_Init>
  PID_Init(&rightPID, 4, 0.01, 0.01, 0, 1500); // Set your PID constants and output limits
 8001248:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800124c:	2100      	movs	r1, #0
 800124e:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 800136c <main+0x1a8>
 8001252:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800136c <main+0x1a8>
 8001256:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800125a:	4846      	ldr	r0, [pc, #280]	@ (8001374 <main+0x1b0>)
 800125c:	f7ff fe56 	bl	8000f0c <PID_Init>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of EncoderLeftMutex */
  osMutexStaticDef(EncoderLeftMutex, &EncoderLeftMutexControlBlock);
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001266:	4b44      	ldr	r3, [pc, #272]	@ (8001378 <main+0x1b4>)
 8001268:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  EncoderLeftMutexHandle = osMutexCreate(osMutex(EncoderLeftMutex));
 800126c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001270:	4618      	mov	r0, r3
 8001272:	f004 fad8 	bl	8005826 <osMutexCreate>
 8001276:	4603      	mov	r3, r0
 8001278:	4a40      	ldr	r2, [pc, #256]	@ (800137c <main+0x1b8>)
 800127a:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderRightMutex */
  osMutexStaticDef(EncoderRightMutex, &EncoderRightMutexControlBlock);
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001282:	4b3f      	ldr	r3, [pc, #252]	@ (8001380 <main+0x1bc>)
 8001284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  EncoderRightMutexHandle = osMutexCreate(osMutex(EncoderRightMutex));
 8001288:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800128c:	4618      	mov	r0, r3
 800128e:	f004 faca 	bl	8005826 <osMutexCreate>
 8001292:	4603      	mov	r3, r0
 8001294:	4a3b      	ldr	r2, [pc, #236]	@ (8001384 <main+0x1c0>)
 8001296:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of cmdQueue */
  osMessageQDef(cmdQueue, 16, uint8_t);
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <main+0x1c4>)
 800129a:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800129e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cmdQueueHandle = osMessageCreate(osMessageQ(cmdQueue), NULL);
 80012a4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 fb58 	bl	8005960 <osMessageCreate>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a36      	ldr	r2, [pc, #216]	@ (800138c <main+0x1c8>)
 80012b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80012b6:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <main+0x1cc>)
 80012b8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80012bc:	461d      	mov	r5, r3
 80012be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 fa48 	bl	8005766 <osThreadCreate>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001394 <main+0x1d0>)
 80012da:	6013      	str	r3, [r2, #0]

  /* definition and creation of show */
  osThreadDef(show, StartTask02, osPriorityIdle, 0, 128);
 80012dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <main+0x1d4>)
 80012de:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80012e2:	461d      	mov	r5, r3
 80012e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  showHandle = osThreadCreate(osThread(show), NULL);
 80012f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fa35 	bl	8005766 <osThreadCreate>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a27      	ldr	r2, [pc, #156]	@ (800139c <main+0x1d8>)
 8001300:	6013      	str	r3, [r2, #0]

  /* definition and creation of Encoder */
  osThreadDef(Encoder, EncoderTask, osPriorityIdle, 0, 128);
 8001302:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <main+0x1dc>)
 8001304:	f107 041c 	add.w	r4, r7, #28
 8001308:	461d      	mov	r5, r3
 800130a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderHandle = osThreadCreate(osThread(Encoder), NULL);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fa22 	bl	8005766 <osThreadCreate>
 8001322:	4603      	mov	r3, r0
 8001324:	4a1f      	ldr	r2, [pc, #124]	@ (80013a4 <main+0x1e0>)
 8001326:	6013      	str	r3, [r2, #0]
  /* definition and creation of MoveStraight */
//  osThreadDef(MoveStraight, StartStraight, osPriorityIdle, 0, 128);
//  MoveStraightHandle = osThreadCreate(osThread(MoveStraight), NULL);

  /* definition and creation of motorTask */
  osThreadDef(motorTask, MotorTask, osPriorityIdle, 0, 128);
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <main+0x1e4>)
 800132a:	463c      	mov	r4, r7
 800132c:	461d      	mov	r5, r3
 800132e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 800133a:	463b      	mov	r3, r7
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f004 fa11 	bl	8005766 <osThreadCreate>
 8001344:	4603      	mov	r3, r0
 8001346:	4a19      	ldr	r2, [pc, #100]	@ (80013ac <main+0x1e8>)
 8001348:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800134a:	f004 fa05 	bl	8005758 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800134e:	bf00      	nop
 8001350:	e7fd      	b.n	800134e <main+0x18a>
 8001352:	bf00      	nop
 8001354:	200006ac 	.word	0x200006ac
 8001358:	20000568 	.word	0x20000568
 800135c:	20000490 	.word	0x20000490
 8001360:	200004d8 	.word	0x200004d8
 8001364:	20000520 	.word	0x20000520
 8001368:	20000448 	.word	0x20000448
 800136c:	3c23d70a 	.word	0x3c23d70a
 8001370:	2000066c 	.word	0x2000066c
 8001374:	20000688 	.word	0x20000688
 8001378:	200005c8 	.word	0x200005c8
 800137c:	200005c4 	.word	0x200005c4
 8001380:	20000614 	.word	0x20000614
 8001384:	20000610 	.word	0x20000610
 8001388:	0800b058 	.word	0x0800b058
 800138c:	200005c0 	.word	0x200005c0
 8001390:	0800b074 	.word	0x0800b074
 8001394:	200005b0 	.word	0x200005b0
 8001398:	0800b098 	.word	0x0800b098
 800139c:	200005b4 	.word	0x200005b4
 80013a0:	0800b0bc 	.word	0x0800b0bc
 80013a4:	200005b8 	.word	0x200005b8
 80013a8:	0800b0e4 	.word	0x0800b0e4
 80013ac:	200005bc 	.word	0x200005bc

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	@ 0x50
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2230      	movs	r2, #48	@ 0x30
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 fd71 	bl	8008ea6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <SystemClock_Config+0xb4>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <SystemClock_Config+0xb4>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <SystemClock_Config+0xb4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <SystemClock_Config+0xb8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <SystemClock_Config+0xb8>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <SystemClock_Config+0xb8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	2301      	movs	r3, #1
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001414:	2310      	movs	r3, #16
 8001416:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001418:	2300      	movs	r3, #0
 800141a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fca9 	bl	8002d78 <HAL_RCC_OscConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800142c:	f000 fd8a 	bl	8001f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001430:	230f      	movs	r3, #15
 8001432:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f001 ff0c 	bl	8003268 <HAL_RCC_ClockConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001456:	f000 fd75 	bl	8001f44 <Error_Handler>
  }
}
 800145a:	bf00      	nop
 800145c:	3750      	adds	r7, #80	@ 0x50
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40007000 	.word	0x40007000

0800146c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b096      	sub	sp, #88	@ 0x58
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2220      	movs	r2, #32
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f007 fcfe 	bl	8008ea6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <MX_TIM1_Init+0x134>)
 80014ac:	4a3d      	ldr	r2, [pc, #244]	@ (80015a4 <MX_TIM1_Init+0x138>)
 80014ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80014b0:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <MX_TIM1_Init+0x134>)
 80014b2:	22a0      	movs	r2, #160	@ 0xa0
 80014b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b6:	4b3a      	ldr	r3, [pc, #232]	@ (80015a0 <MX_TIM1_Init+0x134>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 80014bc:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <MX_TIM1_Init+0x134>)
 80014be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c4:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <MX_TIM1_Init+0x134>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ca:	4b35      	ldr	r3, [pc, #212]	@ (80015a0 <MX_TIM1_Init+0x134>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <MX_TIM1_Init+0x134>)
 80014d2:	2280      	movs	r2, #128	@ 0x80
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d6:	4832      	ldr	r0, [pc, #200]	@ (80015a0 <MX_TIM1_Init+0x134>)
 80014d8:	f002 f8a6 	bl	8003628 <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014e2:	f000 fd2f 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014f0:	4619      	mov	r1, r3
 80014f2:	482b      	ldr	r0, [pc, #172]	@ (80015a0 <MX_TIM1_Init+0x134>)
 80014f4:	f002 fbfe 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014fe:	f000 fd21 	bl	8001f44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001502:	4827      	ldr	r0, [pc, #156]	@ (80015a0 <MX_TIM1_Init+0x134>)
 8001504:	f002 f8df 	bl	80036c6 <HAL_TIM_PWM_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800150e:	f000 fd19 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800151e:	4619      	mov	r1, r3
 8001520:	481f      	ldr	r0, [pc, #124]	@ (80015a0 <MX_TIM1_Init+0x134>)
 8001522:	f002 ffcb 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800152c:	f000 fd0a 	bl	8001f44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001530:	2360      	movs	r3, #96	@ 0x60
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154c:	220c      	movs	r2, #12
 800154e:	4619      	mov	r1, r3
 8001550:	4813      	ldr	r0, [pc, #76]	@ (80015a0 <MX_TIM1_Init+0x134>)
 8001552:	f002 fb0d 	bl	8003b70 <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800155c:	f000 fcf2 	bl	8001f44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001578:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <MX_TIM1_Init+0x134>)
 8001584:	f003 f816 	bl	80045b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800158e:	f000 fcd9 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001592:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <MX_TIM1_Init+0x134>)
 8001594:	f000 fe00 	bl	8002198 <HAL_TIM_MspPostInit>

}
 8001598:	bf00      	nop
 800159a:	3758      	adds	r7, #88	@ 0x58
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000448 	.word	0x20000448
 80015a4:	40010000 	.word	0x40010000

080015a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08c      	sub	sp, #48	@ 0x30
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2224      	movs	r2, #36	@ 0x24
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 fc75 	bl	8008ea6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015c4:	4b21      	ldr	r3, [pc, #132]	@ (800164c <MX_TIM2_Init+0xa4>)
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <MX_TIM2_Init+0xa4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <MX_TIM2_Init+0xa4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <MX_TIM2_Init+0xa4>)
 80015da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_TIM2_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e6:	4b19      	ldr	r3, [pc, #100]	@ (800164c <MX_TIM2_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ec:	2303      	movs	r3, #3
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f4:	2301      	movs	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80015fc:	230a      	movs	r3, #10
 80015fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800160c:	230a      	movs	r3, #10
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	@ (800164c <MX_TIM2_Init+0xa4>)
 8001618:	f002 f976 	bl	8003908 <HAL_TIM_Encoder_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001622:	f000 fc8f 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	@ (800164c <MX_TIM2_Init+0xa4>)
 8001634:	f002 ff42 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800163e:	f000 fc81 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3730      	adds	r7, #48	@ 0x30
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000490 	.word	0x20000490

08001650 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08c      	sub	sp, #48	@ 0x30
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2224      	movs	r2, #36	@ 0x24
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f007 fc21 	bl	8008ea6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <MX_TIM3_Init+0xa0>)
 800166e:	4a21      	ldr	r2, [pc, #132]	@ (80016f4 <MX_TIM3_Init+0xa4>)
 8001670:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001672:	4b1f      	ldr	r3, [pc, #124]	@ (80016f0 <MX_TIM3_Init+0xa0>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_TIM3_Init+0xa0>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <MX_TIM3_Init+0xa0>)
 8001680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001684:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_TIM3_Init+0xa0>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_TIM3_Init+0xa0>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001692:	2301      	movs	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169a:	2301      	movs	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80016a2:	230a      	movs	r3, #10
 80016a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016aa:	2301      	movs	r3, #1
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80016b2:	230a      	movs	r3, #10
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <MX_TIM3_Init+0xa0>)
 80016be:	f002 f923 	bl	8003908 <HAL_TIM_Encoder_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016c8:	f000 fc3c 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_TIM3_Init+0xa0>)
 80016da:	f002 feef 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016e4:	f000 fc2e 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3730      	adds	r7, #48	@ 0x30
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200004d8 	.word	0x200004d8
 80016f4:	40000400 	.word	0x40000400

080016f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b096      	sub	sp, #88	@ 0x58
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2220      	movs	r2, #32
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f007 fbb8 	bl	8008ea6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001736:	4b43      	ldr	r3, [pc, #268]	@ (8001844 <MX_TIM8_Init+0x14c>)
 8001738:	4a43      	ldr	r2, [pc, #268]	@ (8001848 <MX_TIM8_Init+0x150>)
 800173a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800173c:	4b41      	ldr	r3, [pc, #260]	@ (8001844 <MX_TIM8_Init+0x14c>)
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b40      	ldr	r3, [pc, #256]	@ (8001844 <MX_TIM8_Init+0x14c>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001748:	4b3e      	ldr	r3, [pc, #248]	@ (8001844 <MX_TIM8_Init+0x14c>)
 800174a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800174e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b3c      	ldr	r3, [pc, #240]	@ (8001844 <MX_TIM8_Init+0x14c>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <MX_TIM8_Init+0x14c>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b39      	ldr	r3, [pc, #228]	@ (8001844 <MX_TIM8_Init+0x14c>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001762:	4838      	ldr	r0, [pc, #224]	@ (8001844 <MX_TIM8_Init+0x14c>)
 8001764:	f001 ff60 	bl	8003628 <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800176e:	f000 fbe9 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001776:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001778:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800177c:	4619      	mov	r1, r3
 800177e:	4831      	ldr	r0, [pc, #196]	@ (8001844 <MX_TIM8_Init+0x14c>)
 8001780:	f002 fab8 	bl	8003cf4 <HAL_TIM_ConfigClockSource>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800178a:	f000 fbdb 	bl	8001f44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800178e:	482d      	ldr	r0, [pc, #180]	@ (8001844 <MX_TIM8_Init+0x14c>)
 8001790:	f001 ff99 	bl	80036c6 <HAL_TIM_PWM_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800179a:	f000 fbd3 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017aa:	4619      	mov	r1, r3
 80017ac:	4825      	ldr	r0, [pc, #148]	@ (8001844 <MX_TIM8_Init+0x14c>)
 80017ae:	f002 fe85 	bl	80044bc <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80017b8:	f000 fbc4 	bl	8001f44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017bc:	2360      	movs	r3, #96	@ 0x60
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017dc:	2200      	movs	r2, #0
 80017de:	4619      	mov	r1, r3
 80017e0:	4818      	ldr	r0, [pc, #96]	@ (8001844 <MX_TIM8_Init+0x14c>)
 80017e2:	f002 f9c5 	bl	8003b70 <HAL_TIM_PWM_ConfigChannel>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80017ec:	f000 fbaa 	bl	8001f44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f4:	2204      	movs	r2, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4812      	ldr	r0, [pc, #72]	@ (8001844 <MX_TIM8_Init+0x14c>)
 80017fa:	f002 f9b9 	bl	8003b70 <HAL_TIM_PWM_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001804:	f000 fb9e 	bl	8001f44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800181c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001820:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4806      	ldr	r0, [pc, #24]	@ (8001844 <MX_TIM8_Init+0x14c>)
 800182c:	f002 fec2 	bl	80045b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001836:	f000 fb85 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	3758      	adds	r7, #88	@ 0x58
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000520 	.word	0x20000520
 8001848:	40010400 	.word	0x40010400

0800184c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_USART3_UART_Init+0x4c>)
 8001852:	4a12      	ldr	r2, [pc, #72]	@ (800189c <MX_USART3_UART_Init+0x50>)
 8001854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <MX_USART3_UART_Init+0x4c>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_USART3_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <MX_USART3_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <MX_USART3_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <MX_USART3_UART_Init+0x4c>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <MX_USART3_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <MX_USART3_UART_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	@ (8001898 <MX_USART3_UART_Init+0x4c>)
 8001884:	f002 fee8 	bl	8004658 <HAL_UART_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800188e:	f000 fb59 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000568 	.word	0x20000568
 800189c:	40004800 	.word	0x40004800

080018a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b31      	ldr	r3, [pc, #196]	@ (8001980 <MX_GPIO_Init+0xe0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a30      	ldr	r2, [pc, #192]	@ (8001980 <MX_GPIO_Init+0xe0>)
 80018c0:	f043 0310 	orr.w	r3, r3, #16
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <MX_GPIO_Init+0xe0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <MX_GPIO_Init+0xe0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a29      	ldr	r2, [pc, #164]	@ (8001980 <MX_GPIO_Init+0xe0>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <MX_GPIO_Init+0xe0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <MX_GPIO_Init+0xe0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a22      	ldr	r2, [pc, #136]	@ (8001980 <MX_GPIO_Init+0xe0>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <MX_GPIO_Init+0xe0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <MX_GPIO_Init+0xe0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a1b      	ldr	r2, [pc, #108]	@ (8001980 <MX_GPIO_Init+0xe0>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <MX_GPIO_Init+0xe0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SCL_Pin|SDA_Pin|RESET_Pin|DC_Pin
 8001926:	2200      	movs	r2, #0
 8001928:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 800192c:	4815      	ldr	r0, [pc, #84]	@ (8001984 <MX_GPIO_Init+0xe4>)
 800192e:	f001 f9c7 	bl	8002cc0 <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	213c      	movs	r1, #60	@ 0x3c
 8001936:	4814      	ldr	r0, [pc, #80]	@ (8001988 <MX_GPIO_Init+0xe8>)
 8001938:	f001 f9c2 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SCL_Pin SDA_Pin RESET_Pin DC_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin|RESET_Pin|DC_Pin
 800193c:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001940:	617b      	str	r3, [r7, #20]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	480b      	ldr	r0, [pc, #44]	@ (8001984 <MX_GPIO_Init+0xe4>)
 8001956:	f001 f817 	bl	8002988 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800195a:	233c      	movs	r3, #60	@ 0x3c
 800195c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_GPIO_Init+0xe8>)
 8001972:	f001 f809 	bl	8002988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	@ 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40021000 	.word	0x40021000
 8001988:	40020000 	.word	0x40020000

0800198c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	circularBuffer[writeIndex] = aRxBuffer[0];  // Assuming a single byte command for simplicity
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <HAL_UART_RxCpltCallback+0x48>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4c>)
 800199e:	7819      	ldrb	r1, [r3, #0]
 80019a0:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <HAL_UART_RxCpltCallback+0x50>)
 80019a2:	5499      	strb	r1, [r3, r2]
	    writeIndex = (writeIndex + 1) % BUFFER_SIZE;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_UART_RxCpltCallback+0x48>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	425a      	negs	r2, r3
 80019ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80019b6:	bf58      	it	pl
 80019b8:	4253      	negpl	r3, r2
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_UART_RxCpltCallback+0x48>)
 80019be:	801a      	strh	r2, [r3, #0]


	    // Re-enable UART reception for the next byte
	    HAL_UART_Receive_IT(&huart3, aRxBuffer, 1);
 80019c0:	2201      	movs	r2, #1
 80019c2:	4905      	ldr	r1, [pc, #20]	@ (80019d8 <HAL_UART_RxCpltCallback+0x4c>)
 80019c4:	4806      	ldr	r0, [pc, #24]	@ (80019e0 <HAL_UART_RxCpltCallback+0x54>)
 80019c6:	f002 ff22 	bl	800480e <HAL_UART_Receive_IT>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000700 	.word	0x20000700
 80019d8:	200006ac 	.word	0x200006ac
 80019dc:	200006c0 	.word	0x200006c0
 80019e0:	20000568 	.word	0x20000568

080019e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t ch = 'A';
 80019ec:	2341      	movs	r3, #65	@ 0x41
 80019ee:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  UART_Transmit((uint8_t *)&ch);
 80019f0:	f107 030f 	add.w	r3, r7, #15
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fab1 	bl	8000f5c <UART_Transmit>
	  if(ch < 'Z') ch++;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b59      	cmp	r3, #89	@ 0x59
 80019fe:	d803      	bhi.n	8001a08 <StartDefaultTask+0x24>
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	3301      	adds	r3, #1
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_TogglePin(GPIOE,LED_Pin);
 8001a08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a0c:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <StartDefaultTask+0x38>)
 8001a0e:	f001 f970 	bl	8002cf2 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8001a12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a16:	f003 fef2 	bl	80057fe <osDelay>
	  UART_Transmit((uint8_t *)&ch);
 8001a1a:	e7e9      	b.n	80019f0 <StartDefaultTask+0xc>
 8001a1c:	40021000 	.word	0x40021000

08001a20 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint8_t hello[20] = "hello grp40 :) \0";
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <StartTask02+0x40>)
 8001a2a:	f107 040c 	add.w	r4, r7, #12
 8001a2e:	461d      	mov	r5, r3
 8001a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	7023      	strb	r3, [r4, #0]
 8001a38:	f107 031d 	add.w	r3, r7, #29
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	801a      	strh	r2, [r3, #0]
 8001a40:	709a      	strb	r2, [r3, #2]
  /* Infinite loop */
  for(;;)
  {
//  sprintf(hello, "%s\0", aRxBuffer);
	OLED_ShowString(10,5,hello);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	461a      	mov	r2, r3
 8001a48:	2105      	movs	r1, #5
 8001a4a:	200a      	movs	r0, #10
 8001a4c:	f006 fbf0 	bl	8008230 <OLED_ShowString>
	OLED_Refresh_Gram();
 8001a50:	f006 fa7a 	bl	8007f48 <OLED_Refresh_Gram>
  osDelay(1000);
 8001a54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a58:	f003 fed1 	bl	80057fe <osDelay>
	OLED_ShowString(10,5,hello);
 8001a5c:	bf00      	nop
 8001a5e:	e7f0      	b.n	8001a42 <StartTask02+0x22>
 8001a60:	0800b100 	.word	0x0800b100

08001a64 <EncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderTask */
void EncoderTask(void const * argument)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	@ 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderTask */
  /* Infinite loop */
  char speedStr[20];
  last_encoder_read_time = HAL_GetTick();
 8001a6c:	f000 fdb8 	bl	80025e0 <HAL_GetTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a31      	ldr	r2, [pc, #196]	@ (8001b38 <EncoderTask+0xd4>)
 8001a74:	6013      	str	r3, [r2, #0]
  uint32_t position;
  uint16_t counter_current;
  for(;;)
  {
	  uint32_t current_time = HAL_GetTick();
 8001a76:	f000 fdb3 	bl	80025e0 <HAL_GetTick>
 8001a7a:	62b8      	str	r0, [r7, #40]	@ 0x28
	      if(__HAL_TIM_IS_TIM_COUNTING_DOWN (&htim2)) counter_current = __HAL_TIM_GET_COUNTER(&htim2) * -1;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b3c <EncoderTask+0xd8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d106      	bne.n	8001a98 <EncoderTask+0x34>
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <EncoderTask+0xd8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	425b      	negs	r3, r3
 8001a94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001a96:	e003      	b.n	8001aa0 <EncoderTask+0x3c>
	      else counter_current = __HAL_TIM_GET_COUNTER(&htim2);
 8001a98:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <EncoderTask+0xd8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	      // Calculate the elapsed time in milliseconds
	      uint32_t elapsed_time = current_time - last_encoder_read_time;
 8001aa0:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <EncoderTask+0xd4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
	      if (elapsed_time >= T) {  // Every 20ms (T = 0.02s)
 8001aaa:	2314      	movs	r3, #20
 8001aac:	461a      	mov	r2, r3
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d33d      	bcc.n	8001b30 <EncoderTask+0xcc>
	          // Calculate the speed in ticks per second
	          uint16_t delta_ticks = (uint16_t)(counter_current);
 8001ab4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001ab6:	847b      	strh	r3, [r7, #34]	@ 0x22
	          speed = (uint32_t)(delta_ticks) * 1000 / elapsed_time; // Speed in ticks per second
 8001ab8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001aba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001abe:	fb03 f202 	mul.w	r2, r3, r2
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b40 <EncoderTask+0xdc>)
 8001aca:	6013      	str	r3, [r2, #0]
            osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001acc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <EncoderTask+0xe0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 febf 	bl	8005858 <osMutexWait>
            encoderLeft.speed = speed;
 8001ada:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <EncoderTask+0xdc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <EncoderTask+0xe4>)
 8001ae2:	805a      	strh	r2, [r3, #2]
            encoderLeft.position += counter_current;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <EncoderTask+0xe4>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001aec:	4413      	add	r3, r2
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <EncoderTask+0xe4>)
 8001af2:	801a      	strh	r2, [r3, #0]
            position = encoderLeft.position;
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <EncoderTask+0xe4>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	61fb      	str	r3, [r7, #28]
            osMutexRelease(EncoderLeftMutexHandle);
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <EncoderTask+0xe0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fef7 	bl	80058f4 <osMutexRelease>
        
            sprintf(speedStr, "%.7d", position);
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	490f      	ldr	r1, [pc, #60]	@ (8001b4c <EncoderTask+0xe8>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f007 f966 	bl	8008de0 <siprintf>
            OLED_ShowString(10,30,speedStr);
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	461a      	mov	r2, r3
 8001b1a:	211e      	movs	r1, #30
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f006 fb87 	bl	8008230 <OLED_ShowString>
	          // OLED_Refresh_Gram();
	          // Save the current time and encoder count for the next calculation
	          last_encoder_read_time = current_time;
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <EncoderTask+0xd4>)
 8001b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b26:	6013      	str	r3, [r2, #0]
	          // counter_prev = counter_current;

	          // Optionally reset encoder counter
	          __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <EncoderTask+0xd8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24
	      }
    osDelay(10);
 8001b30:	200a      	movs	r0, #10
 8001b32:	f003 fe64 	bl	80057fe <osDelay>
  {
 8001b36:	e79e      	b.n	8001a76 <EncoderTask+0x12>
 8001b38:	200006a4 	.word	0x200006a4
 8001b3c:	20000490 	.word	0x20000490
 8001b40:	200006a8 	.word	0x200006a8
 8001b44:	200005c4 	.word	0x200005c4
 8001b48:	2000065c 	.word	0x2000065c
 8001b4c:	0800b114 	.word	0x0800b114

08001b50 <UpdateState>:
	BACKWARD,
	TURN
} STATE;
STATE CurrentState = WAIT;

STATE UpdateState(uint8_t command, uint8_t degree) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	71bb      	strb	r3, [r7, #6]
  switch (command) {
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d868      	bhi.n	8001c38 <UpdateState+0xe8>
 8001b66:	a201      	add	r2, pc, #4	@ (adr r2, 8001b6c <UpdateState+0x1c>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001baf 	.word	0x08001baf
 8001b78:	08001bdd 	.word	0x08001bdd
    case 0x00:
      return STOP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e05c      	b.n	8001c3a <UpdateState+0xea>
      break;
    case 0x01:
      SetFacing(STRAIGHT);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff faf3 	bl	800116c <SetFacing>
      SetDir(0,1);
 8001b86:	2101      	movs	r1, #1
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff f9fd 	bl	8000f88 <SetDir>
	    SetDir(1,1);
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff f9f9 	bl	8000f88 <SetDir>
      SetSpeed(0,1000);
 8001b96:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fa3c 	bl	8001018 <SetSpeed>
	    SetSpeed(1,1000);
 8001ba0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff fa37 	bl	8001018 <SetSpeed>
      return FORWARD;
 8001baa:	2302      	movs	r3, #2
 8001bac:	e045      	b.n	8001c3a <UpdateState+0xea>
      break;
    case 0x02:
      SetFacing(STRAIGHT);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff fadc 	bl	800116c <SetFacing>
      SetDir(0,0);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f7ff f9e6 	bl	8000f88 <SetDir>
	    SetDir(1,0);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f7ff f9e2 	bl	8000f88 <SetDir>
      SetSpeed(0,1000);
 8001bc4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff fa25 	bl	8001018 <SetSpeed>
	    SetSpeed(1,1000);
 8001bce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f7ff fa20 	bl	8001018 <SetSpeed>
      return BACKWARD;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e02e      	b.n	8001c3a <UpdateState+0xea>
      break;
    case 0x03:
      if ((degree & 0x20) >> 5 == 0x01) SetFacing(RIGHT);
 8001bdc:	79bb      	ldrb	r3, [r7, #6]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <UpdateState+0x9e>
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff fac0 	bl	800116c <SetFacing>
 8001bec:	e002      	b.n	8001bf4 <UpdateState+0xa4>
      else SetFacing(LEFT);
 8001bee:	2002      	movs	r0, #2
 8001bf0:	f7ff fabc 	bl	800116c <SetFacing>
      if ((degree & 0x10) >> 4 == 0x01){
 8001bf4:	79bb      	ldrb	r3, [r7, #6]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <UpdateState+0xc0>
        SetDir(0,1);
 8001bfe:	2101      	movs	r1, #1
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff f9c1 	bl	8000f88 <SetDir>
	      SetDir(1,1);  
 8001c06:	2101      	movs	r1, #1
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff f9bd 	bl	8000f88 <SetDir>
 8001c0e:	e007      	b.n	8001c20 <UpdateState+0xd0>
      }
      else {
        SetDir(0,0);
 8001c10:	2100      	movs	r1, #0
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff f9b8 	bl	8000f88 <SetDir>
	      SetDir(1,0); 
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff f9b4 	bl	8000f88 <SetDir>
      }
      SetSpeed(0,1000);
 8001c20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff f9f7 	bl	8001018 <SetSpeed>
	    SetSpeed(1,1000);
 8001c2a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7ff f9f2 	bl	8001018 <SetSpeed>
      return TURN;
 8001c34:	2304      	movs	r3, #4
 8001c36:	e000      	b.n	8001c3a <UpdateState+0xea>
      break;
    default:
      return WAIT;  // Default to WAIT if an unexpected value is received
 8001c38:	2300      	movs	r3, #0
      break;
  }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	0000      	movs	r0, r0
	...

08001c48 <MotorTask>:

// 00 STOP, 01 FORWARD, 10 BACKWARDS, 11 TURN
// STRAIGHT: rest 6 bits is distance
// turn: 3rd bit right/left, 4th bit front/back, last 4 number of 90deg. 
void MotorTask(void const * argument)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MotorTask */
  /* Infinite loop */
	SetDir(0,1);
 8001c50:	2101      	movs	r1, #1
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff f998 	bl	8000f88 <SetDir>
	SetDir(1,1);
 8001c58:	2101      	movs	r1, #1
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff f994 	bl	8000f88 <SetDir>
	uint8_t degree;
  uint8_t command;
  uint32_t dist;
	bool done;

	EncoderReset(false, POSITION);
 8001c60:	2100      	movs	r1, #0
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff f9f2 	bl	800104c <EncoderReset>
	SetSpeed(0,0);
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f7ff f9d4 	bl	8001018 <SetSpeed>
	SetSpeed(1,0);
 8001c70:	2100      	movs	r1, #0
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff f9d0 	bl	8001018 <SetSpeed>
  for(;;)
  {
	  
    switch (CurrentState)
 8001c78:	4ba9      	ldr	r3, [pc, #676]	@ (8001f20 <MotorTask+0x2d8>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	f200 813c 	bhi.w	8001efa <MotorTask+0x2b2>
 8001c82:	a201      	add	r2, pc, #4	@ (adr r2, 8001c88 <MotorTask+0x40>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001c9d 	.word	0x08001c9d
 8001c8c:	08001d05 	.word	0x08001d05
 8001c90:	08001d23 	.word	0x08001d23
 8001c94:	08001dc3 	.word	0x08001dc3
 8001c98:	08001e61 	.word	0x08001e61
    {
    case WAIT:
      if (readIndex != writeIndex) {
 8001c9c:	4ba1      	ldr	r3, [pc, #644]	@ (8001f24 <MotorTask+0x2dc>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	4ba1      	ldr	r3, [pc, #644]	@ (8001f28 <MotorTask+0x2e0>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f000 8128 	beq.w	8001efe <MotorTask+0x2b6>
		    uint8_t buf = circularBuffer[readIndex];
 8001cae:	4b9d      	ldr	r3, [pc, #628]	@ (8001f24 <MotorTask+0x2dc>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b9d      	ldr	r3, [pc, #628]	@ (8001f2c <MotorTask+0x2e4>)
 8001cb8:	5c9b      	ldrb	r3, [r3, r2]
 8001cba:	72fb      	strb	r3, [r7, #11]
	      readIndex = (readIndex + 1) % BUFFER_SIZE;
 8001cbc:	4b99      	ldr	r3, [pc, #612]	@ (8001f24 <MotorTask+0x2dc>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	425a      	negs	r2, r3
 8001cc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001cce:	bf58      	it	pl
 8001cd0:	4253      	negpl	r3, r2
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	4b93      	ldr	r3, [pc, #588]	@ (8001f24 <MotorTask+0x2dc>)
 8001cd6:	801a      	strh	r2, [r3, #0]
        command = (buf & 0xC0) >> 6;
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	72bb      	strb	r3, [r7, #10]
        degree = buf & 0x3F;
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ce4:	75fb      	strb	r3, [r7, #23]
        EncoderReset(false, POSITION);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff f9af 	bl	800104c <EncoderReset>
        CurrentState = UpdateState(command,degree);
 8001cee:	7dfa      	ldrb	r2, [r7, #23]
 8001cf0:	7abb      	ldrb	r3, [r7, #10]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff2b 	bl	8001b50 <UpdateState>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b88      	ldr	r3, [pc, #544]	@ (8001f20 <MotorTask+0x2d8>)
 8001d00:	701a      	strb	r2, [r3, #0]
	    }
      break;
 8001d02:	e0fc      	b.n	8001efe <MotorTask+0x2b6>
    case STOP:
      SetSpeed(0,0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f986 	bl	8001018 <SetSpeed>
	    SetSpeed(1,0);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7ff f982 	bl	8001018 <SetSpeed>
      osDelay(100);
 8001d14:	2064      	movs	r0, #100	@ 0x64
 8001d16:	f003 fd72 	bl	80057fe <osDelay>
      CurrentState = WAIT;
 8001d1a:	4b81      	ldr	r3, [pc, #516]	@ (8001f20 <MotorTask+0x2d8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
      break;
 8001d20:	e0f4      	b.n	8001f0c <MotorTask+0x2c4>
    case FORWARD:
      dist = (degree - 52.5) / 3.5 * 200 + 2800;
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fbfd 	bl	8000524 <__aeabi_i2d>
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b80      	ldr	r3, [pc, #512]	@ (8001f30 <MotorTask+0x2e8>)
 8001d30:	f7fe faaa 	bl	8000288 <__aeabi_dsub>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b7c      	ldr	r3, [pc, #496]	@ (8001f34 <MotorTask+0x2ec>)
 8001d42:	f7fe fd83 	bl	800084c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b79      	ldr	r3, [pc, #484]	@ (8001f38 <MotorTask+0x2f0>)
 8001d54:	f7fe fc50 	bl	80005f8 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	a36d      	add	r3, pc, #436	@ (adr r3, 8001f18 <MotorTask+0x2d0>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fa91 	bl	800028c <__adddf3>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7fe ff19 	bl	8000ba8 <__aeabi_d2uiz>
 8001d76:	4603      	mov	r3, r0
 8001d78:	613b      	str	r3, [r7, #16]
      osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001d7a:	4b70      	ldr	r3, [pc, #448]	@ (8001f3c <MotorTask+0x2f4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 fd68 	bl	8005858 <osMutexWait>
      currdist = encoderLeft.position;
 8001d88:	4b6d      	ldr	r3, [pc, #436]	@ (8001f40 <MotorTask+0x2f8>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	60fb      	str	r3, [r7, #12]
      osMutexRelease(EncoderLeftMutexHandle);
 8001d90:	4b6a      	ldr	r3, [pc, #424]	@ (8001f3c <MotorTask+0x2f4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fdad 	bl	80058f4 <osMutexRelease>
      if (currdist >  dist ){
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	f240 80af 	bls.w	8001f02 <MotorTask+0x2ba>
        SetSpeed(0,0);
 8001da4:	2100      	movs	r1, #0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff f936 	bl	8001018 <SetSpeed>
        SetSpeed(1,0);
 8001dac:	2100      	movs	r1, #0
 8001dae:	2001      	movs	r0, #1
 8001db0:	f7ff f932 	bl	8001018 <SetSpeed>
        osDelay(100);
 8001db4:	2064      	movs	r0, #100	@ 0x64
 8001db6:	f003 fd22 	bl	80057fe <osDelay>
        CurrentState = WAIT;
 8001dba:	4b59      	ldr	r3, [pc, #356]	@ (8001f20 <MotorTask+0x2d8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001dc0:	e09f      	b.n	8001f02 <MotorTask+0x2ba>
    case BACKWARD:
      dist = (degree - 52.5) / 3.5 * 200 + 2800;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fbad 	bl	8000524 <__aeabi_i2d>
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b58      	ldr	r3, [pc, #352]	@ (8001f30 <MotorTask+0x2e8>)
 8001dd0:	f7fe fa5a 	bl	8000288 <__aeabi_dsub>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	4b54      	ldr	r3, [pc, #336]	@ (8001f34 <MotorTask+0x2ec>)
 8001de2:	f7fe fd33 	bl	800084c <__aeabi_ddiv>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <MotorTask+0x2f0>)
 8001df4:	f7fe fc00 	bl	80005f8 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	a345      	add	r3, pc, #276	@ (adr r3, 8001f18 <MotorTask+0x2d0>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fa41 	bl	800028c <__adddf3>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe fec9 	bl	8000ba8 <__aeabi_d2uiz>
 8001e16:	4603      	mov	r3, r0
 8001e18:	613b      	str	r3, [r7, #16]
      osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001e1a:	4b48      	ldr	r3, [pc, #288]	@ (8001f3c <MotorTask+0x2f4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fd18 	bl	8005858 <osMutexWait>
      currdist = encoderLeft.position;
 8001e28:	4b45      	ldr	r3, [pc, #276]	@ (8001f40 <MotorTask+0x2f8>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	60fb      	str	r3, [r7, #12]
      osMutexRelease(EncoderLeftMutexHandle);
 8001e30:	4b42      	ldr	r3, [pc, #264]	@ (8001f3c <MotorTask+0x2f4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fd5d 	bl	80058f4 <osMutexRelease>
      if (currdist >  dist ){
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d961      	bls.n	8001f06 <MotorTask+0x2be>
        SetSpeed(0,0);
 8001e42:	2100      	movs	r1, #0
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff f8e7 	bl	8001018 <SetSpeed>
        SetSpeed(1,0);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7ff f8e3 	bl	8001018 <SetSpeed>
        osDelay(100);
 8001e52:	2064      	movs	r0, #100	@ 0x64
 8001e54:	f003 fcd3 	bl	80057fe <osDelay>
        CurrentState = WAIT;
 8001e58:	4b31      	ldr	r3, [pc, #196]	@ (8001f20 <MotorTask+0x2d8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001e5e:	e052      	b.n	8001f06 <MotorTask+0x2be>
    case TURN:
      dist = (degree & 0x0F);
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	613b      	str	r3, [r7, #16]
      osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001e68:	4b34      	ldr	r3, [pc, #208]	@ (8001f3c <MotorTask+0x2f4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fcf1 	bl	8005858 <osMutexWait>
      currdist = encoderLeft.position;
 8001e76:	4b32      	ldr	r3, [pc, #200]	@ (8001f40 <MotorTask+0x2f8>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	60fb      	str	r3, [r7, #12]
      osMutexRelease(EncoderLeftMutexHandle);
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f3c <MotorTask+0x2f4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 fd36 	bl	80058f4 <osMutexRelease>
      if ((degree & 0x10) >> 4 == 0x01){
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d019      	beq.n	8001ec6 <MotorTask+0x27e>
        if (currdist >  5100 * dist ){
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d933      	bls.n	8001f0a <MotorTask+0x2c2>
		      SetSpeed(0,0);
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff f8b7 	bl	8001018 <SetSpeed>
		      SetSpeed(1,0);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7ff f8b3 	bl	8001018 <SetSpeed>
          osDelay(100);
 8001eb2:	2064      	movs	r0, #100	@ 0x64
 8001eb4:	f003 fca3 	bl	80057fe <osDelay>
		      SetFacing(STRAIGHT);
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff f957 	bl	800116c <SetFacing>
          CurrentState = WAIT;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <MotorTask+0x2d8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
          osDelay(100);
		      SetFacing(STRAIGHT);
          CurrentState = WAIT;
	      }
      }
      break;
 8001ec4:	e021      	b.n	8001f0a <MotorTask+0x2c2>
        if (currdist >  3600 * dist ){
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d919      	bls.n	8001f0a <MotorTask+0x2c2>
		      SetSpeed(0,0);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff f89d 	bl	8001018 <SetSpeed>
		      SetSpeed(1,0);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7ff f899 	bl	8001018 <SetSpeed>
          osDelay(100);
 8001ee6:	2064      	movs	r0, #100	@ 0x64
 8001ee8:	f003 fc89 	bl	80057fe <osDelay>
		      SetFacing(STRAIGHT);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7ff f93d 	bl	800116c <SetFacing>
          CurrentState = WAIT;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <MotorTask+0x2d8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
      break;
 8001ef8:	e007      	b.n	8001f0a <MotorTask+0x2c2>
    default:
      break;
 8001efa:	bf00      	nop
 8001efc:	e006      	b.n	8001f0c <MotorTask+0x2c4>
      break;
 8001efe:	bf00      	nop
 8001f00:	e004      	b.n	8001f0c <MotorTask+0x2c4>
      break;
 8001f02:	bf00      	nop
 8001f04:	e002      	b.n	8001f0c <MotorTask+0x2c4>
      break;
 8001f06:	bf00      	nop
 8001f08:	e000      	b.n	8001f0c <MotorTask+0x2c4>
      break;
 8001f0a:	bf00      	nop
		//   SetSpeed(0,0);
		//   SetSpeed(1,0);
		//   SetFacing(STRAIGHT);
	  // }

    osDelay(50);
 8001f0c:	2032      	movs	r0, #50	@ 0x32
 8001f0e:	f003 fc76 	bl	80057fe <osDelay>
    switch (CurrentState)
 8001f12:	e6b1      	b.n	8001c78 <MotorTask+0x30>
 8001f14:	f3af 8000 	nop.w
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	40a5e000 	.word	0x40a5e000
 8001f20:	20000704 	.word	0x20000704
 8001f24:	20000702 	.word	0x20000702
 8001f28:	20000700 	.word	0x20000700
 8001f2c:	200006c0 	.word	0x200006c0
 8001f30:	404a4000 	.word	0x404a4000
 8001f34:	400c0000 	.word	0x400c0000
 8001f38:	40690000 	.word	0x40690000
 8001f3c:	200005c4 	.word	0x200005c4
 8001f40:	2000065c 	.word	0x2000065c

08001f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f48:	b672      	cpsid	i
}
 8001f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <Error_Handler+0x8>

08001f50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_MspInit+0x54>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	4a11      	ldr	r2, [pc, #68]	@ (8001fa4 <HAL_MspInit+0x54>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f66:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <HAL_MspInit+0x54>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_MspInit+0x54>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_MspInit+0x54>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f82:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <HAL_MspInit+0x54>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	210f      	movs	r1, #15
 8001f92:	f06f 0001 	mvn.w	r0, #1
 8001f96:	f000 fc2e 	bl	80027f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a23      	ldr	r2, [pc, #140]	@ (8002054 <HAL_TIM_Base_MspInit+0xac>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <HAL_TIM_Base_MspInit+0xb0>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	4a21      	ldr	r2, [pc, #132]	@ (8002058 <HAL_TIM_Base_MspInit+0xb0>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_TIM_Base_MspInit+0xb0>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001fe6:	e030      	b.n	800204a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1b      	ldr	r2, [pc, #108]	@ (800205c <HAL_TIM_Base_MspInit+0xb4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d12b      	bne.n	800204a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <HAL_TIM_Base_MspInit+0xb0>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	4a17      	ldr	r2, [pc, #92]	@ (8002058 <HAL_TIM_Base_MspInit+0xb0>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6453      	str	r3, [r2, #68]	@ 0x44
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_TIM_Base_MspInit+0xb0>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <HAL_TIM_Base_MspInit+0xb0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a10      	ldr	r2, [pc, #64]	@ (8002058 <HAL_TIM_Base_MspInit+0xb0>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <HAL_TIM_Base_MspInit+0xb0>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMLEFT_Pin|PWMRIGHT_Pin;
 800202a:	23c0      	movs	r3, #192	@ 0xc0
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800203a:	2303      	movs	r3, #3
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	4806      	ldr	r0, [pc, #24]	@ (8002060 <HAL_TIM_Base_MspInit+0xb8>)
 8002046:	f000 fc9f 	bl	8002988 <HAL_GPIO_Init>
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	@ 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40010000 	.word	0x40010000
 8002058:	40023800 	.word	0x40023800
 800205c:	40010400 	.word	0x40010400
 8002060:	40020800 	.word	0x40020800

08002064 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	@ 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002084:	d14b      	bne.n	800211e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	4b3f      	ldr	r3, [pc, #252]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a3e      	ldr	r2, [pc, #248]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b3c      	ldr	r3, [pc, #240]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	4a37      	ldr	r2, [pc, #220]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b2:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b31      	ldr	r3, [pc, #196]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a30      	ldr	r2, [pc, #192]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ec:	2301      	movs	r3, #1
 80020ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	4825      	ldr	r0, [pc, #148]	@ (800218c <HAL_TIM_Encoder_MspInit+0x128>)
 80020f8:	f000 fc46 	bl	8002988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020fc:	2308      	movs	r3, #8
 80020fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210c:	2301      	movs	r3, #1
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	4619      	mov	r1, r3
 8002116:	481e      	ldr	r0, [pc, #120]	@ (8002190 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002118:	f000 fc36 	bl	8002988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800211c:	e030      	b.n	8002180 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a1c      	ldr	r2, [pc, #112]	@ (8002194 <HAL_TIM_Encoder_MspInit+0x130>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d12b      	bne.n	8002180 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	4a15      	ldr	r2, [pc, #84]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	6413      	str	r3, [r2, #64]	@ 0x40
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	4a0e      	ldr	r2, [pc, #56]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6313      	str	r3, [r2, #48]	@ 0x30
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <HAL_TIM_Encoder_MspInit+0x124>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002160:	23c0      	movs	r3, #192	@ 0xc0
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002170:	2302      	movs	r3, #2
 8002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	4804      	ldr	r0, [pc, #16]	@ (800218c <HAL_TIM_Encoder_MspInit+0x128>)
 800217c:	f000 fc04 	bl	8002988 <HAL_GPIO_Init>
}
 8002180:	bf00      	nop
 8002182:	3730      	adds	r7, #48	@ 0x30
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40000400 	.word	0x40000400

08002198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <HAL_TIM_MspPostInit+0x68>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d11e      	bne.n	80021f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <HAL_TIM_MspPostInit+0x6c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <HAL_TIM_MspPostInit+0x6c>)
 80021c4:	f043 0310 	orr.w	r3, r3, #16
 80021c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <HAL_TIM_MspPostInit+0x6c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 80021d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	4619      	mov	r1, r3
 80021f2:	4805      	ldr	r0, [pc, #20]	@ (8002208 <HAL_TIM_MspPostInit+0x70>)
 80021f4:	f000 fbc8 	bl	8002988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40010000 	.word	0x40010000
 8002204:	40023800 	.word	0x40023800
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	@ 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <HAL_UART_MspInit+0x94>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d134      	bne.n	8002298 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <HAL_UART_MspInit+0x98>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	4a1b      	ldr	r2, [pc, #108]	@ (80022a4 <HAL_UART_MspInit+0x98>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800223c:	6413      	str	r3, [r2, #64]	@ 0x40
 800223e:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_UART_MspInit+0x98>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_UART_MspInit+0x98>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a14      	ldr	r2, [pc, #80]	@ (80022a4 <HAL_UART_MspInit+0x98>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <HAL_UART_MspInit+0x98>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002266:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002278:	2307      	movs	r3, #7
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	4809      	ldr	r0, [pc, #36]	@ (80022a8 <HAL_UART_MspInit+0x9c>)
 8002284:	f000 fb80 	bl	8002988 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002288:	2200      	movs	r2, #0
 800228a:	2105      	movs	r1, #5
 800228c:	2027      	movs	r0, #39	@ 0x27
 800228e:	f000 fab2 	bl	80027f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002292:	2027      	movs	r0, #39	@ 0x27
 8002294:	f000 facb 	bl	800282e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002298:	bf00      	nop
 800229a:	3728      	adds	r7, #40	@ 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40004800 	.word	0x40004800
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020800 	.word	0x40020800

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <NMI_Handler+0x4>

080022b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <MemManage_Handler+0x4>

080022c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e6:	f000 f967 	bl	80025b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022ea:	f004 ffc7 	bl	800727c <xTaskGetSchedulerState>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d001      	beq.n	80022f8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022f4:	f005 fba8 	bl	8007a48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}

080022fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <USART3_IRQHandler+0x10>)
 8002302:	f002 faa9 	bl	8004858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000568 	.word	0x20000568

08002310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_kill>:

int _kill(int pid, int sig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800232a:	f006 fe0f 	bl	8008f4c <__errno>
 800232e:	4603      	mov	r3, r0
 8002330:	2216      	movs	r2, #22
 8002332:	601a      	str	r2, [r3, #0]
  return -1;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_exit>:

void _exit (int status)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ffe7 	bl	8002320 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002352:	bf00      	nop
 8002354:	e7fd      	b.n	8002352 <_exit+0x12>

08002356 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e00a      	b.n	800237e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002368:	f3af 8000 	nop.w
 800236c:	4601      	mov	r1, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	b2ca      	uxtb	r2, r1
 8002376:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	dbf0      	blt.n	8002368 <_read+0x12>
  }

  return len;
 8002386:	687b      	ldr	r3, [r7, #4]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e009      	b.n	80023b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	60ba      	str	r2, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	dbf1      	blt.n	80023a2 <_write+0x12>
  }
  return len;
 80023be:	687b      	ldr	r3, [r7, #4]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_close>:

int _close(int file)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023f0:	605a      	str	r2, [r3, #4]
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_isatty>:

int _isatty(int file)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002416:	b480      	push	{r7}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002438:	4a14      	ldr	r2, [pc, #80]	@ (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d207      	bcs.n	8002470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002460:	f006 fd74 	bl	8008f4c <__errno>
 8002464:	4603      	mov	r3, r0
 8002466:	220c      	movs	r2, #12
 8002468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e009      	b.n	8002484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	4a05      	ldr	r2, [pc, #20]	@ (8002494 <_sbrk+0x64>)
 8002480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002482:	68fb      	ldr	r3, [r7, #12]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20020000 	.word	0x20020000
 8002490:	00000400 	.word	0x00000400
 8002494:	20000708 	.word	0x20000708
 8002498:	200049b0 	.word	0x200049b0

0800249c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <SystemInit+0x20>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a6:	4a05      	ldr	r2, [pc, #20]	@ (80024bc <SystemInit+0x20>)
 80024a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024c4:	f7ff ffea 	bl	800249c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c8:	480c      	ldr	r0, [pc, #48]	@ (80024fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ca:	490d      	ldr	r1, [pc, #52]	@ (8002500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024e0:	4c0a      	ldr	r4, [pc, #40]	@ (800250c <LoopFillZerobss+0x22>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ee:	f006 fd33 	bl	8008f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f2:	f7fe fe67 	bl	80011c4 <main>
  bx  lr    
 80024f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002504:	0800bf30 	.word	0x0800bf30
  ldr r2, =_sbss
 8002508:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800250c:	200049b0 	.word	0x200049b0

08002510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <ADC_IRQHandler>
	...

08002514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002518:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <HAL_Init+0x40>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0d      	ldr	r2, [pc, #52]	@ (8002554 <HAL_Init+0x40>)
 800251e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <HAL_Init+0x40>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <HAL_Init+0x40>)
 800252a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800252e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <HAL_Init+0x40>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a07      	ldr	r2, [pc, #28]	@ (8002554 <HAL_Init+0x40>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 f94f 	bl	80027e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002542:	200f      	movs	r0, #15
 8002544:	f000 f808 	bl	8002558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002548:	f7ff fd02 	bl	8001f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023c00 	.word	0x40023c00

08002558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_InitTick+0x54>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <HAL_InitTick+0x58>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800256e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f967 	bl	800284a <HAL_SYSTICK_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e00e      	b.n	80025a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	d80a      	bhi.n	80025a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258c:	2200      	movs	r2, #0
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f000 f92f 	bl	80027f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002598:	4a06      	ldr	r2, [pc, #24]	@ (80025b4 <HAL_InitTick+0x5c>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20000008 	.word	0x20000008
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_IncTick+0x20>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_IncTick+0x24>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <HAL_IncTick+0x24>)
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000008 	.word	0x20000008
 80025dc:	2000070c 	.word	0x2000070c

080025e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return uwTick;
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <HAL_GetTick+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	2000070c 	.word	0x2000070c

080025f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff ffee 	bl	80025e0 <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d005      	beq.n	800261e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_Delay+0x44>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800261e:	bf00      	nop
 8002620:	f7ff ffde 	bl	80025e0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	d8f7      	bhi.n	8002620 <HAL_Delay+0x28>
  {
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000008 	.word	0x20000008

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	@ (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	@ (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	@ (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	@ 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	@ 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027ac:	d301      	bcc.n	80027b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00f      	b.n	80027d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b2:	4a0a      	ldr	r2, [pc, #40]	@ (80027dc <SysTick_Config+0x40>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ba:	210f      	movs	r1, #15
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f7ff ff8e 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <SysTick_Config+0x40>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ca:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <SysTick_Config+0x40>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	e000e010 	.word	0xe000e010

080027e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff29 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002808:	f7ff ff3e 	bl	8002688 <__NVIC_GetPriorityGrouping>
 800280c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7ff ff8e 	bl	8002734 <NVIC_EncodePriority>
 8002818:	4602      	mov	r2, r0
 800281a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5d 	bl	80026e0 <__NVIC_SetPriority>
}
 8002826:	bf00      	nop
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff31 	bl	80026a4 <__NVIC_EnableIRQ>
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffa2 	bl	800279c <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff feb6 	bl	80025e0 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d008      	beq.n	8002894 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2280      	movs	r2, #128	@ 0x80
 8002886:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e052      	b.n	800293a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0216 	bic.w	r2, r2, #22
 80028a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <HAL_DMA_Abort+0x62>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0208 	bic.w	r2, r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e4:	e013      	b.n	800290e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028e6:	f7ff fe7b 	bl	80025e0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d90c      	bls.n	800290e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2203      	movs	r2, #3
 80028fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e015      	b.n	800293a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e4      	bne.n	80028e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	223f      	movs	r2, #63	@ 0x3f
 8002922:	409a      	lsls	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d004      	beq.n	8002960 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2280      	movs	r2, #128	@ 0x80
 800295a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e00c      	b.n	800297a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2205      	movs	r2, #5
 8002964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	@ 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e16b      	b.n	8002c7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a4:	2201      	movs	r2, #1
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	f040 815a 	bne.w	8002c76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d005      	beq.n	80029da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d130      	bne.n	8002a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	2203      	movs	r2, #3
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 0201 	and.w	r2, r3, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d017      	beq.n	8002a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d123      	bne.n	8002acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	08da      	lsrs	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3208      	adds	r2, #8
 8002a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	08da      	lsrs	r2, r3, #3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3208      	adds	r2, #8
 8002ac6:	69b9      	ldr	r1, [r7, #24]
 8002ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0203 	and.w	r2, r3, #3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80b4 	beq.w	8002c76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b60      	ldr	r3, [pc, #384]	@ (8002c94 <HAL_GPIO_Init+0x30c>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	4a5f      	ldr	r2, [pc, #380]	@ (8002c94 <HAL_GPIO_Init+0x30c>)
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c94 <HAL_GPIO_Init+0x30c>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c98 <HAL_GPIO_Init+0x310>)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	089b      	lsrs	r3, r3, #2
 8002b30:	3302      	adds	r3, #2
 8002b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	220f      	movs	r2, #15
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a52      	ldr	r2, [pc, #328]	@ (8002c9c <HAL_GPIO_Init+0x314>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02b      	beq.n	8002bae <HAL_GPIO_Init+0x226>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a51      	ldr	r2, [pc, #324]	@ (8002ca0 <HAL_GPIO_Init+0x318>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d025      	beq.n	8002baa <HAL_GPIO_Init+0x222>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a50      	ldr	r2, [pc, #320]	@ (8002ca4 <HAL_GPIO_Init+0x31c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01f      	beq.n	8002ba6 <HAL_GPIO_Init+0x21e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4f      	ldr	r2, [pc, #316]	@ (8002ca8 <HAL_GPIO_Init+0x320>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x21a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4e      	ldr	r2, [pc, #312]	@ (8002cac <HAL_GPIO_Init+0x324>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x216>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb0 <HAL_GPIO_Init+0x328>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x212>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4c      	ldr	r2, [pc, #304]	@ (8002cb4 <HAL_GPIO_Init+0x32c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x20e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb8 <HAL_GPIO_Init+0x330>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x20a>
 8002b8e:	2307      	movs	r3, #7
 8002b90:	e00e      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002b92:	2308      	movs	r3, #8
 8002b94:	e00c      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002b96:	2306      	movs	r3, #6
 8002b98:	e00a      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	e008      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x228>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc0:	4935      	ldr	r1, [pc, #212]	@ (8002c98 <HAL_GPIO_Init+0x310>)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bce:	4b3b      	ldr	r3, [pc, #236]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf2:	4a32      	ldr	r2, [pc, #200]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf8:	4b30      	ldr	r3, [pc, #192]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c1c:	4a27      	ldr	r2, [pc, #156]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c22:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c46:	4a1d      	ldr	r2, [pc, #116]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c70:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <HAL_GPIO_Init+0x334>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	f67f ae90 	bls.w	80029a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3724      	adds	r7, #36	@ 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40021400 	.word	0x40021400
 8002cb4:	40021800 	.word	0x40021800
 8002cb8:	40021c00 	.word	0x40021c00
 8002cbc:	40013c00 	.word	0x40013c00

08002cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	807b      	strh	r3, [r7, #2]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cdc:	e003      	b.n	8002ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	041a      	lsls	r2, r3, #16
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	619a      	str	r2, [r3, #24]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d04:	887a      	ldrh	r2, [r7, #2]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	041a      	lsls	r2, r3, #16
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43d9      	mvns	r1, r3
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	400b      	ands	r3, r1
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	619a      	str	r2, [r3, #24]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_PWR_EnableBkUpAccess+0x20>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <HAL_PWR_EnableBkUpAccess+0x24>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002d3a:	687b      	ldr	r3, [r7, #4]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	420e0020 	.word	0x420e0020
 8002d4c:	40007000 	.word	0x40007000

08002d50 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_PWR_DisableBkUpAccess+0x20>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_PWR_DisableBkUpAccess+0x24>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002d62:	687b      	ldr	r3, [r7, #4]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	420e0020 	.word	0x420e0020
 8002d74:	40007000 	.word	0x40007000

08002d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e267      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d075      	beq.n	8002e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d96:	4b88      	ldr	r3, [pc, #544]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b85      	ldr	r3, [pc, #532]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d112      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4b82      	ldr	r3, [pc, #520]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05b      	beq.n	8002e80 <HAL_RCC_OscConfig+0x108>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d157      	bne.n	8002e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e242      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ddc:	d106      	bne.n	8002dec <HAL_RCC_OscConfig+0x74>
 8002dde:	4b76      	ldr	r3, [pc, #472]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a75      	ldr	r2, [pc, #468]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x98>
 8002df6:	4b70      	ldr	r3, [pc, #448]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6f      	ldr	r2, [pc, #444]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a6c      	ldr	r2, [pc, #432]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xb0>
 8002e10:	4b69      	ldr	r3, [pc, #420]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a68      	ldr	r2, [pc, #416]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b66      	ldr	r3, [pc, #408]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a65      	ldr	r2, [pc, #404]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7ff fbd6 	bl	80025e0 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e38:	f7ff fbd2 	bl	80025e0 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	@ 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e207      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xc0>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7ff fbc2 	bl	80025e0 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e60:	f7ff fbbe 	bl	80025e0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	@ 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1f3      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	4b51      	ldr	r3, [pc, #324]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0xe8>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b47      	ldr	r3, [pc, #284]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b44      	ldr	r3, [pc, #272]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b41      	ldr	r3, [pc, #260]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1c7      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4937      	ldr	r1, [pc, #220]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e03a      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee8:	4b34      	ldr	r3, [pc, #208]	@ (8002fbc <HAL_RCC_OscConfig+0x244>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eee:	f7ff fb77 	bl	80025e0 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7ff fb73 	bl	80025e0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1a8      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b28      	ldr	r3, [pc, #160]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4925      	ldr	r1, [pc, #148]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
 8002f28:	e015      	b.n	8002f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b24      	ldr	r3, [pc, #144]	@ (8002fbc <HAL_RCC_OscConfig+0x244>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7ff fb56 	bl	80025e0 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f38:	f7ff fb52 	bl	80025e0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e187      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d036      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	4b15      	ldr	r3, [pc, #84]	@ (8002fc0 <HAL_RCC_OscConfig+0x248>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7ff fb36 	bl	80025e0 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f78:	f7ff fb32 	bl	80025e0 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e167      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x200>
 8002f96:	e01b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <HAL_RCC_OscConfig+0x248>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff fb1f 	bl	80025e0 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa4:	e00e      	b.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7ff fb1b 	bl	80025e0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d907      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e150      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	42470000 	.word	0x42470000
 8002fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	4b88      	ldr	r3, [pc, #544]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ea      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8097 	beq.w	800310c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b81      	ldr	r3, [pc, #516]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b77      	ldr	r3, [pc, #476]	@ (80031ec <HAL_RCC_OscConfig+0x474>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d118      	bne.n	800304c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301a:	4b74      	ldr	r3, [pc, #464]	@ (80031ec <HAL_RCC_OscConfig+0x474>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a73      	ldr	r2, [pc, #460]	@ (80031ec <HAL_RCC_OscConfig+0x474>)
 8003020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7ff fadb 	bl	80025e0 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7ff fad7 	bl	80025e0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e10c      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b6a      	ldr	r3, [pc, #424]	@ (80031ec <HAL_RCC_OscConfig+0x474>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x2ea>
 8003054:	4b64      	ldr	r3, [pc, #400]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	4a63      	ldr	r2, [pc, #396]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003060:	e01c      	b.n	800309c <HAL_RCC_OscConfig+0x324>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b05      	cmp	r3, #5
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x30c>
 800306a:	4b5f      	ldr	r3, [pc, #380]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	4a5e      	ldr	r2, [pc, #376]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	6713      	str	r3, [r2, #112]	@ 0x70
 8003076:	4b5c      	ldr	r3, [pc, #368]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	4a5b      	ldr	r2, [pc, #364]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	6713      	str	r3, [r2, #112]	@ 0x70
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0x324>
 8003084:	4b58      	ldr	r3, [pc, #352]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003088:	4a57      	ldr	r2, [pc, #348]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003090:	4b55      	ldr	r3, [pc, #340]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003094:	4a54      	ldr	r2, [pc, #336]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 0304 	bic.w	r3, r3, #4
 800309a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d015      	beq.n	80030d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7ff fa9c 	bl	80025e0 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ac:	f7ff fa98 	bl	80025e0 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e0cb      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	4b49      	ldr	r3, [pc, #292]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ee      	beq.n	80030ac <HAL_RCC_OscConfig+0x334>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d0:	f7ff fa86 	bl	80025e0 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7ff fa82 	bl	80025e0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0b5      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ee:	4b3e      	ldr	r3, [pc, #248]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1ee      	bne.n	80030d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003100:	4b39      	ldr	r3, [pc, #228]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	4a38      	ldr	r2, [pc, #224]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800310a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a1 	beq.w	8003258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003116:	4b34      	ldr	r3, [pc, #208]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b08      	cmp	r3, #8
 8003120:	d05c      	beq.n	80031dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d141      	bne.n	80031ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b31      	ldr	r3, [pc, #196]	@ (80031f0 <HAL_RCC_OscConfig+0x478>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff fa56 	bl	80025e0 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003138:	f7ff fa52 	bl	80025e0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e087      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	4b27      	ldr	r3, [pc, #156]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	3b01      	subs	r3, #1
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	491b      	ldr	r1, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003180:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <HAL_RCC_OscConfig+0x478>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7ff fa2b 	bl	80025e0 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318e:	f7ff fa27 	bl	80025e0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e05c      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a0:	4b11      	ldr	r3, [pc, #68]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCC_OscConfig+0x416>
 80031ac:	e054      	b.n	8003258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ae:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <HAL_RCC_OscConfig+0x478>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7ff fa14 	bl	80025e0 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7ff fa10 	bl	80025e0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e045      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_RCC_OscConfig+0x470>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x444>
 80031da:	e03d      	b.n	8003258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e038      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40007000 	.word	0x40007000
 80031f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003264 <HAL_RCC_OscConfig+0x4ec>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d028      	beq.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d121      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d11a      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003224:	4013      	ands	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800322a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323a:	085b      	lsrs	r3, r3, #1
 800323c:	3b01      	subs	r3, #1
 800323e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0cc      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b68      	ldr	r3, [pc, #416]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d90c      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b65      	ldr	r3, [pc, #404]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b63      	ldr	r3, [pc, #396]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0b8      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032bc:	4b59      	ldr	r3, [pc, #356]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a58      	ldr	r2, [pc, #352]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d4:	4b53      	ldr	r3, [pc, #332]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a52      	ldr	r2, [pc, #328]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e0:	4b50      	ldr	r3, [pc, #320]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	494d      	ldr	r1, [pc, #308]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d044      	beq.n	8003388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d119      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e07f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d003      	beq.n	8003326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003326:	4b3f      	ldr	r3, [pc, #252]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e06f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003336:	4b3b      	ldr	r3, [pc, #236]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e067      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003346:	4b37      	ldr	r3, [pc, #220]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f023 0203 	bic.w	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4934      	ldr	r1, [pc, #208]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	4313      	orrs	r3, r2
 8003356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003358:	f7ff f942 	bl	80025e0 <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7ff f93e 	bl	80025e0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e04f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003376:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 020c 	and.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	429a      	cmp	r2, r3
 8003386:	d1eb      	bne.n	8003360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003388:	4b25      	ldr	r3, [pc, #148]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d20c      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b20      	ldr	r3, [pc, #128]	@ (8003420 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e032      	b.n	8003416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b19      	ldr	r3, [pc, #100]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4916      	ldr	r1, [pc, #88]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490e      	ldr	r1, [pc, #56]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033ee:	f000 f821 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	490a      	ldr	r1, [pc, #40]	@ (8003428 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	5ccb      	ldrb	r3, [r1, r3]
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	4a09      	ldr	r2, [pc, #36]	@ (800342c <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800340a:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff f8a2 	bl	8002558 <HAL_InitTick>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023c00 	.word	0x40023c00
 8003424:	40023800 	.word	0x40023800
 8003428:	0800b130 	.word	0x0800b130
 800342c:	20000000 	.word	0x20000000
 8003430:	20000004 	.word	0x20000004

08003434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b090      	sub	sp, #64	@ 0x40
 800343a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003440:	2300      	movs	r3, #0
 8003442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003444:	2300      	movs	r3, #0
 8003446:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800344c:	4b59      	ldr	r3, [pc, #356]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d00d      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x40>
 8003458:	2b08      	cmp	r3, #8
 800345a:	f200 80a1 	bhi.w	80035a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x34>
 8003462:	2b04      	cmp	r3, #4
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x3a>
 8003466:	e09b      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b53      	ldr	r3, [pc, #332]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800346a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800346c:	e09b      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800346e:	4b53      	ldr	r3, [pc, #332]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x188>)
 8003470:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003472:	e098      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003474:	4b4f      	ldr	r3, [pc, #316]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800347e:	4b4d      	ldr	r3, [pc, #308]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d028      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348a:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	2200      	movs	r2, #0
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	627a      	str	r2, [r7, #36]	@ 0x24
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800349c:	2100      	movs	r1, #0
 800349e:	4b47      	ldr	r3, [pc, #284]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x188>)
 80034a0:	fb03 f201 	mul.w	r2, r3, r1
 80034a4:	2300      	movs	r3, #0
 80034a6:	fb00 f303 	mul.w	r3, r0, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	4a43      	ldr	r2, [pc, #268]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x188>)
 80034ae:	fba0 1202 	umull	r1, r2, r0, r2
 80034b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b4:	460a      	mov	r2, r1
 80034b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ba:	4413      	add	r3, r2
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c0:	2200      	movs	r2, #0
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	61fa      	str	r2, [r7, #28]
 80034c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034ce:	f7fd fb8b 	bl	8000be8 <__aeabi_uldivmod>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4613      	mov	r3, r2
 80034d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034da:	e053      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034dc:	4b35      	ldr	r3, [pc, #212]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	2200      	movs	r2, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	617a      	str	r2, [r7, #20]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034ee:	f04f 0b00 	mov.w	fp, #0
 80034f2:	4652      	mov	r2, sl
 80034f4:	465b      	mov	r3, fp
 80034f6:	f04f 0000 	mov.w	r0, #0
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	0159      	lsls	r1, r3, #5
 8003500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003504:	0150      	lsls	r0, r2, #5
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	ebb2 080a 	subs.w	r8, r2, sl
 800350e:	eb63 090b 	sbc.w	r9, r3, fp
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800351e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003522:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003526:	ebb2 0408 	subs.w	r4, r2, r8
 800352a:	eb63 0509 	sbc.w	r5, r3, r9
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	00eb      	lsls	r3, r5, #3
 8003538:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800353c:	00e2      	lsls	r2, r4, #3
 800353e:	4614      	mov	r4, r2
 8003540:	461d      	mov	r5, r3
 8003542:	eb14 030a 	adds.w	r3, r4, sl
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	eb45 030b 	adc.w	r3, r5, fp
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800355a:	4629      	mov	r1, r5
 800355c:	028b      	lsls	r3, r1, #10
 800355e:	4621      	mov	r1, r4
 8003560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003564:	4621      	mov	r1, r4
 8003566:	028a      	lsls	r2, r1, #10
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356e:	2200      	movs	r2, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	60fa      	str	r2, [r7, #12]
 8003574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003578:	f7fd fb36 	bl	8000be8 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4613      	mov	r3, r2
 8003582:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003584:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	3301      	adds	r3, #1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003594:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800359e:	e002      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80035a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3740      	adds	r7, #64	@ 0x40
 80035ac:	46bd      	mov	sp, r7
 80035ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	00f42400 	.word	0x00f42400
 80035bc:	017d7840 	.word	0x017d7840

080035c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c4:	4b03      	ldr	r3, [pc, #12]	@ (80035d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035c6:	681b      	ldr	r3, [r3, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000000 	.word	0x20000000

080035d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035dc:	f7ff fff0 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	0a9b      	lsrs	r3, r3, #10
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4903      	ldr	r1, [pc, #12]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800
 80035fc:	0800b140 	.word	0x0800b140

08003600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003604:	f7ff ffdc 	bl	80035c0 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	0b5b      	lsrs	r3, r3, #13
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4903      	ldr	r1, [pc, #12]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40023800 	.word	0x40023800
 8003624:	0800b140 	.word	0x0800b140

08003628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e041      	b.n	80036be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe fcaa 	bl	8001fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 fc0c 	bl	8003e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e041      	b.n	800375c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f839 	bl	8003764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f000 fbbd 	bl	8003e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_TIM_PWM_Start+0x24>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e022      	b.n	80037e2 <HAL_TIM_PWM_Start+0x6a>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d109      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x3e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e015      	b.n	80037e2 <HAL_TIM_PWM_Start+0x6a>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start+0x58>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e008      	b.n	80037e2 <HAL_TIM_PWM_Start+0x6a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e07c      	b.n	80038e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_PWM_Start+0x82>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f8:	e013      	b.n	8003822 <HAL_TIM_PWM_Start+0xaa>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x92>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003808:	e00b      	b.n	8003822 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0xa2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003818:	e003      	b.n	8003822 <HAL_TIM_PWM_Start+0xaa>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2201      	movs	r2, #1
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fe20 	bl	8004470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2d      	ldr	r2, [pc, #180]	@ (80038ec <HAL_TIM_PWM_Start+0x174>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_TIM_PWM_Start+0xcc>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a2c      	ldr	r2, [pc, #176]	@ (80038f0 <HAL_TIM_PWM_Start+0x178>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_TIM_PWM_Start+0xd0>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <HAL_TIM_PWM_Start+0xd2>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800385c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a22      	ldr	r2, [pc, #136]	@ (80038ec <HAL_TIM_PWM_Start+0x174>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d022      	beq.n	80038ae <HAL_TIM_PWM_Start+0x136>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003870:	d01d      	beq.n	80038ae <HAL_TIM_PWM_Start+0x136>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1f      	ldr	r2, [pc, #124]	@ (80038f4 <HAL_TIM_PWM_Start+0x17c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_TIM_PWM_Start+0x136>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <HAL_TIM_PWM_Start+0x180>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_TIM_PWM_Start+0x136>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1c      	ldr	r2, [pc, #112]	@ (80038fc <HAL_TIM_PWM_Start+0x184>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_TIM_PWM_Start+0x136>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a16      	ldr	r2, [pc, #88]	@ (80038f0 <HAL_TIM_PWM_Start+0x178>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_TIM_PWM_Start+0x136>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a18      	ldr	r2, [pc, #96]	@ (8003900 <HAL_TIM_PWM_Start+0x188>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_TIM_PWM_Start+0x136>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a16      	ldr	r2, [pc, #88]	@ (8003904 <HAL_TIM_PWM_Start+0x18c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d111      	bne.n	80038d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b06      	cmp	r3, #6
 80038be:	d010      	beq.n	80038e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	e007      	b.n	80038e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40010000 	.word	0x40010000
 80038f0:	40010400 	.word	0x40010400
 80038f4:	40000400 	.word	0x40000400
 80038f8:	40000800 	.word	0x40000800
 80038fc:	40000c00 	.word	0x40000c00
 8003900:	40014000 	.word	0x40014000
 8003904:	40001800 	.word	0x40001800

08003908 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e097      	b.n	8003a4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fe fb97 	bl	8002064 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800394c:	f023 0307 	bic.w	r3, r3, #7
 8003950:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3304      	adds	r3, #4
 800395a:	4619      	mov	r1, r3
 800395c:	4610      	mov	r0, r2
 800395e:	f000 fa91 	bl	8003e84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	4313      	orrs	r3, r2
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80039a8:	f023 030c 	bic.w	r3, r3, #12
 80039ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	4313      	orrs	r3, r2
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	011a      	lsls	r2, r3, #4
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	031b      	lsls	r3, r3, #12
 80039d8:	4313      	orrs	r3, r2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80039ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	4313      	orrs	r3, r2
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d110      	bne.n	8003aa6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d102      	bne.n	8003a90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a8a:	7b7b      	ldrb	r3, [r7, #13]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d001      	beq.n	8003a94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e069      	b.n	8003b68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa4:	e031      	b.n	8003b0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d110      	bne.n	8003ace <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aac:	7bbb      	ldrb	r3, [r7, #14]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d102      	bne.n	8003ab8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ab2:	7b3b      	ldrb	r3, [r7, #12]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e055      	b.n	8003b68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003acc:	e01d      	b.n	8003b0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d108      	bne.n	8003ae6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ad4:	7bbb      	ldrb	r3, [r7, #14]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ada:	7b7b      	ldrb	r3, [r7, #13]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d102      	bne.n	8003ae6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ae0:	7b3b      	ldrb	r3, [r7, #12]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d001      	beq.n	8003aea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e03e      	b.n	8003b68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2202      	movs	r2, #2
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_TIM_Encoder_Start+0xc4>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d008      	beq.n	8003b28 <HAL_TIM_Encoder_Start+0xd4>
 8003b16:	e00f      	b.n	8003b38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fca5 	bl	8004470 <TIM_CCxChannelCmd>
      break;
 8003b26:	e016      	b.n	8003b56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	2104      	movs	r1, #4
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fc9d 	bl	8004470 <TIM_CCxChannelCmd>
      break;
 8003b36:	e00e      	b.n	8003b56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fc95 	bl	8004470 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	2104      	movs	r1, #4
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fc8e 	bl	8004470 <TIM_CCxChannelCmd>
      break;
 8003b54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e0ae      	b.n	8003cec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	f200 809f 	bhi.w	8003cdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bd9 	.word	0x08003bd9
 8003ba8:	08003cdd 	.word	0x08003cdd
 8003bac:	08003cdd 	.word	0x08003cdd
 8003bb0:	08003cdd 	.word	0x08003cdd
 8003bb4:	08003c19 	.word	0x08003c19
 8003bb8:	08003cdd 	.word	0x08003cdd
 8003bbc:	08003cdd 	.word	0x08003cdd
 8003bc0:	08003cdd 	.word	0x08003cdd
 8003bc4:	08003c5b 	.word	0x08003c5b
 8003bc8:	08003cdd 	.word	0x08003cdd
 8003bcc:	08003cdd 	.word	0x08003cdd
 8003bd0:	08003cdd 	.word	0x08003cdd
 8003bd4:	08003c9b 	.word	0x08003c9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 f9fc 	bl	8003fdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0208 	orr.w	r2, r2, #8
 8003bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0204 	bic.w	r2, r2, #4
 8003c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6999      	ldr	r1, [r3, #24]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	619a      	str	r2, [r3, #24]
      break;
 8003c16:	e064      	b.n	8003ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fa4c 	bl	80040bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6999      	ldr	r1, [r3, #24]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	021a      	lsls	r2, r3, #8
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	619a      	str	r2, [r3, #24]
      break;
 8003c58:	e043      	b.n	8003ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 faa1 	bl	80041a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0208 	orr.w	r2, r2, #8
 8003c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0204 	bic.w	r2, r2, #4
 8003c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69d9      	ldr	r1, [r3, #28]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	61da      	str	r2, [r3, #28]
      break;
 8003c98:	e023      	b.n	8003ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 faf5 	bl	8004290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69d9      	ldr	r1, [r3, #28]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	021a      	lsls	r2, r3, #8
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	61da      	str	r2, [r3, #28]
      break;
 8003cda:	e002      	b.n	8003ce2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIM_ConfigClockSource+0x1c>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e0b4      	b.n	8003e7a <HAL_TIM_ConfigClockSource+0x186>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d48:	d03e      	beq.n	8003dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d4e:	f200 8087 	bhi.w	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d56:	f000 8086 	beq.w	8003e66 <HAL_TIM_ConfigClockSource+0x172>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5e:	d87f      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b70      	cmp	r3, #112	@ 0x70
 8003d62:	d01a      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0xa6>
 8003d64:	2b70      	cmp	r3, #112	@ 0x70
 8003d66:	d87b      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b60      	cmp	r3, #96	@ 0x60
 8003d6a:	d050      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x11a>
 8003d6c:	2b60      	cmp	r3, #96	@ 0x60
 8003d6e:	d877      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b50      	cmp	r3, #80	@ 0x50
 8003d72:	d03c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0xfa>
 8003d74:	2b50      	cmp	r3, #80	@ 0x50
 8003d76:	d873      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b40      	cmp	r3, #64	@ 0x40
 8003d7a:	d058      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x13a>
 8003d7c:	2b40      	cmp	r3, #64	@ 0x40
 8003d7e:	d86f      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b30      	cmp	r3, #48	@ 0x30
 8003d82:	d064      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15a>
 8003d84:	2b30      	cmp	r3, #48	@ 0x30
 8003d86:	d86b      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d060      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d867      	bhi.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05c      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15a>
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d05a      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x15a>
 8003d98:	e062      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003daa:	f000 fb41 	bl	8004430 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	609a      	str	r2, [r3, #8]
      break;
 8003dc6:	e04f      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dd8:	f000 fb2a 	bl	8004430 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dea:	609a      	str	r2, [r3, #8]
      break;
 8003dec:	e03c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f000 fa9e 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2150      	movs	r1, #80	@ 0x50
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 faf7 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e0c:	e02c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f000 fabd 	bl	800439a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2160      	movs	r1, #96	@ 0x60
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fae7 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e2c:	e01c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f000 fa7e 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2140      	movs	r1, #64	@ 0x40
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fad7 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e00c      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f000 face 	bl	80043fa <TIM_ITRx_SetConfig>
      break;
 8003e5e:	e003      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
      break;
 8003e64:	e000      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a46      	ldr	r2, [pc, #280]	@ (8003fb0 <TIM_Base_SetConfig+0x12c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea2:	d00f      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a43      	ldr	r2, [pc, #268]	@ (8003fb4 <TIM_Base_SetConfig+0x130>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a42      	ldr	r2, [pc, #264]	@ (8003fb8 <TIM_Base_SetConfig+0x134>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d007      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a41      	ldr	r2, [pc, #260]	@ (8003fbc <TIM_Base_SetConfig+0x138>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a40      	ldr	r2, [pc, #256]	@ (8003fc0 <TIM_Base_SetConfig+0x13c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d108      	bne.n	8003ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a35      	ldr	r2, [pc, #212]	@ (8003fb0 <TIM_Base_SetConfig+0x12c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee4:	d027      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a32      	ldr	r2, [pc, #200]	@ (8003fb4 <TIM_Base_SetConfig+0x130>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d023      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a31      	ldr	r2, [pc, #196]	@ (8003fb8 <TIM_Base_SetConfig+0x134>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01f      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a30      	ldr	r2, [pc, #192]	@ (8003fbc <TIM_Base_SetConfig+0x138>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc0 <TIM_Base_SetConfig+0x13c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d017      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc4 <TIM_Base_SetConfig+0x140>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc8 <TIM_Base_SetConfig+0x144>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00f      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2c      	ldr	r2, [pc, #176]	@ (8003fcc <TIM_Base_SetConfig+0x148>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd0 <TIM_Base_SetConfig+0x14c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd4 <TIM_Base_SetConfig+0x150>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a29      	ldr	r2, [pc, #164]	@ (8003fd8 <TIM_Base_SetConfig+0x154>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a10      	ldr	r2, [pc, #64]	@ (8003fb0 <TIM_Base_SetConfig+0x12c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_Base_SetConfig+0xf8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a12      	ldr	r2, [pc, #72]	@ (8003fc0 <TIM_Base_SetConfig+0x13c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d103      	bne.n	8003f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d105      	bne.n	8003fa2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f023 0201 	bic.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40010400 	.word	0x40010400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800
 8003fd0:	40001800 	.word	0x40001800
 8003fd4:	40001c00 	.word	0x40001c00
 8003fd8:	40002000 	.word	0x40002000

08003fdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f023 0201 	bic.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0302 	bic.w	r3, r3, #2
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a20      	ldr	r2, [pc, #128]	@ (80040b4 <TIM_OC1_SetConfig+0xd8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_OC1_SetConfig+0x64>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a1f      	ldr	r2, [pc, #124]	@ (80040b8 <TIM_OC1_SetConfig+0xdc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10c      	bne.n	800405a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0308 	bic.w	r3, r3, #8
 8004046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 0304 	bic.w	r3, r3, #4
 8004058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a15      	ldr	r2, [pc, #84]	@ (80040b4 <TIM_OC1_SetConfig+0xd8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_OC1_SetConfig+0x8e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a14      	ldr	r2, [pc, #80]	@ (80040b8 <TIM_OC1_SetConfig+0xdc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d111      	bne.n	800408e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40010400 	.word	0x40010400

080040bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f023 0210 	bic.w	r2, r3, #16
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0320 	bic.w	r3, r3, #32
 8004106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <TIM_OC2_SetConfig+0xe4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_OC2_SetConfig+0x68>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a21      	ldr	r2, [pc, #132]	@ (80041a4 <TIM_OC2_SetConfig+0xe8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10d      	bne.n	8004140 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800413e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <TIM_OC2_SetConfig+0xe4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC2_SetConfig+0x94>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <TIM_OC2_SetConfig+0xe8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d113      	bne.n	8004178 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40010400 	.word	0x40010400

080041a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a21      	ldr	r2, [pc, #132]	@ (8004288 <TIM_OC3_SetConfig+0xe0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_OC3_SetConfig+0x66>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a20      	ldr	r2, [pc, #128]	@ (800428c <TIM_OC3_SetConfig+0xe4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d10d      	bne.n	800422a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a16      	ldr	r2, [pc, #88]	@ (8004288 <TIM_OC3_SetConfig+0xe0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC3_SetConfig+0x92>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a15      	ldr	r2, [pc, #84]	@ (800428c <TIM_OC3_SetConfig+0xe4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d113      	bne.n	8004262 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	621a      	str	r2, [r3, #32]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40010000 	.word	0x40010000
 800428c:	40010400 	.word	0x40010400

08004290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a12      	ldr	r2, [pc, #72]	@ (8004334 <TIM_OC4_SetConfig+0xa4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_OC4_SetConfig+0x68>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a11      	ldr	r2, [pc, #68]	@ (8004338 <TIM_OC4_SetConfig+0xa8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d109      	bne.n	800430c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40010400 	.word	0x40010400

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439a:	b480      	push	{r7}
 800439c:	b087      	sub	sp, #28
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f023 0210 	bic.w	r2, r3, #16
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	f043 0307 	orr.w	r3, r3, #7
 800441c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800444a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	021a      	lsls	r2, r3, #8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	431a      	orrs	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4313      	orrs	r3, r2
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2201      	movs	r2, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1a      	ldr	r2, [r3, #32]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	43db      	mvns	r3, r3
 8004492:	401a      	ands	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a1a      	ldr	r2, [r3, #32]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	431a      	orrs	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e05a      	b.n	800458a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a21      	ldr	r2, [pc, #132]	@ (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004520:	d01d      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1d      	ldr	r2, [pc, #116]	@ (800459c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1a      	ldr	r2, [pc, #104]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a17      	ldr	r2, [pc, #92]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d10c      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	4313      	orrs	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00
 80045a8:	40010400 	.word	0x40010400
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40001800 	.word	0x40001800

080045b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e03d      	b.n	800464c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e042      	b.n	80046f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fd fdc4 	bl	800220c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	@ 0x24
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800469a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fdbd 	bl	800521c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	@ 0x28
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b20      	cmp	r3, #32
 8004716:	d175      	bne.n	8004804 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_UART_Transmit+0x2c>
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e06e      	b.n	8004806 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2221      	movs	r2, #33	@ 0x21
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004736:	f7fd ff53 	bl	80025e0 <HAL_GetTick>
 800473a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004750:	d108      	bne.n	8004764 <HAL_UART_Transmit+0x6c>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	e003      	b.n	800476c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800476c:	e02e      	b.n	80047cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	2180      	movs	r1, #128	@ 0x80
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 fb1f 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e03a      	b.n	8004806 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	3302      	adds	r3, #2
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	e007      	b.n	80047be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	3301      	adds	r3, #1
 80047bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1cb      	bne.n	800476e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2200      	movs	r2, #0
 80047de:	2140      	movs	r1, #64	@ 0x40
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 faeb 	bl	8004dbc <UART_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e006      	b.n	8004806 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	3720      	adds	r7, #32
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	4613      	mov	r3, r2
 800481a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b20      	cmp	r3, #32
 8004826:	d112      	bne.n	800484e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_UART_Receive_IT+0x26>
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e00b      	b.n	8004850 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	461a      	mov	r2, r3
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fb12 	bl	8004e6e <UART_Start_Receive_IT>
 800484a:	4603      	mov	r3, r0
 800484c:	e000      	b.n	8004850 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b0ba      	sub	sp, #232	@ 0xe8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004884:	2300      	movs	r3, #0
 8004886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800488a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10f      	bne.n	80048be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_UART_IRQHandler+0x66>
 80048aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fbf2 	bl	80050a0 <UART_Receive_IT>
      return;
 80048bc:	e25b      	b.n	8004d76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80de 	beq.w	8004a84 <HAL_UART_IRQHandler+0x22c>
 80048c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80d1 	beq.w	8004a84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <HAL_UART_IRQHandler+0xae>
 80048ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	f043 0201 	orr.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_UART_IRQHandler+0xd2>
 8004912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	f043 0202 	orr.w	r2, r3, #2
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00b      	beq.n	800494e <HAL_UART_IRQHandler+0xf6>
 8004936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004946:	f043 0204 	orr.w	r2, r3, #4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800494e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d011      	beq.n	800497e <HAL_UART_IRQHandler+0x126>
 800495a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d105      	bne.n	8004972 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	f043 0208 	orr.w	r2, r3, #8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 81f2 	beq.w	8004d6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_UART_IRQHandler+0x14e>
 8004994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fb7d 	bl	80050a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <HAL_UART_IRQHandler+0x17a>
 80049ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04f      	beq.n	8004a72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fa85 	bl	8004ee2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e2:	2b40      	cmp	r3, #64	@ 0x40
 80049e4:	d141      	bne.n	8004a6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3314      	adds	r3, #20
 80049ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3314      	adds	r3, #20
 8004a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1d9      	bne.n	80049e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d013      	beq.n	8004a62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c38 <HAL_UART_IRQHandler+0x3e0>)
 8004a40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fd ff7b 	bl	8002942 <HAL_DMA_Abort_IT>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a60:	e00e      	b.n	8004a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f994 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	e00a      	b.n	8004a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f990 	bl	8004d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	e006      	b.n	8004a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f98c 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a7e:	e175      	b.n	8004d6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	bf00      	nop
    return;
 8004a82:	e173      	b.n	8004d6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	f040 814f 	bne.w	8004d2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8148 	beq.w	8004d2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8141 	beq.w	8004d2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aca:	2b40      	cmp	r3, #64	@ 0x40
 8004acc:	f040 80b6 	bne.w	8004c3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8145 	beq.w	8004d70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aee:	429a      	cmp	r2, r3
 8004af0:	f080 813e 	bcs.w	8004d70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004afa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b06:	f000 8088 	beq.w	8004c1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1d9      	bne.n	8004b0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3314      	adds	r3, #20
 8004b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e1      	bne.n	8004b56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3314      	adds	r3, #20
 8004b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3314      	adds	r3, #20
 8004bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e3      	bne.n	8004b92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bea:	f023 0310 	bic.w	r3, r3, #16
 8004bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e3      	bne.n	8004bd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fd fe24 	bl	8002862 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8b7 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c36:	e09b      	b.n	8004d70 <HAL_UART_IRQHandler+0x518>
 8004c38:	08004fa9 	.word	0x08004fa9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 808e 	beq.w	8004d74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8089 	beq.w	8004d74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	330c      	adds	r3, #12
 8004c68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c86:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e3      	bne.n	8004c62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0310 	bic.w	r3, r3, #16
 8004cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d04:	61fa      	str	r2, [r7, #28]
 8004d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	69b9      	ldr	r1, [r7, #24]
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	617b      	str	r3, [r7, #20]
   return(result);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e3      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d22:	4619      	mov	r1, r3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f83d 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d2a:	e023      	b.n	8004d74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d009      	beq.n	8004d4c <HAL_UART_IRQHandler+0x4f4>
 8004d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f943 	bl	8004fd0 <UART_Transmit_IT>
    return;
 8004d4a:	e014      	b.n	8004d76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00e      	beq.n	8004d76 <HAL_UART_IRQHandler+0x51e>
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f983 	bl	8005070 <UART_EndTransmit_IT>
    return;
 8004d6a:	e004      	b.n	8004d76 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d6c:	bf00      	nop
 8004d6e:	e002      	b.n	8004d76 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d74:	bf00      	nop
  }
}
 8004d76:	37e8      	adds	r7, #232	@ 0xe8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	e03b      	b.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d037      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd6:	f7fd fc03 	bl	80025e0 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	6a3a      	ldr	r2, [r7, #32]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d302      	bcc.n	8004dec <UART_WaitOnFlagUntilTimeout+0x30>
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e03a      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d023      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b80      	cmp	r3, #128	@ 0x80
 8004e02:	d020      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b40      	cmp	r3, #64	@ 0x40
 8004e08:	d01d      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d116      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f857 	bl	8004ee2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2208      	movs	r2, #8
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e00f      	b.n	8004e66 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d0b4      	beq.n	8004dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3718      	adds	r7, #24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2222      	movs	r2, #34	@ 0x22
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eb2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695a      	ldr	r2, [r3, #20]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0220 	orr.w	r2, r2, #32
 8004ed2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b095      	sub	sp, #84	@ 0x54
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e5      	bne.n	8004eea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e5      	bne.n	8004f1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d119      	bne.n	8004f8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 0310 	bic.w	r3, r3, #16
 8004f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f7a:	61ba      	str	r2, [r7, #24]
 8004f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6979      	ldr	r1, [r7, #20]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	613b      	str	r3, [r7, #16]
   return(result);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e5      	bne.n	8004f5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f9c:	bf00      	nop
 8004f9e:	3754      	adds	r7, #84	@ 0x54
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff fee4 	bl	8004d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fc8:	bf00      	nop
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b21      	cmp	r3, #33	@ 0x21
 8004fe2:	d13e      	bne.n	8005062 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fec:	d114      	bne.n	8005018 <UART_Transmit_IT+0x48>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d110      	bne.n	8005018 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	1c9a      	adds	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	621a      	str	r2, [r3, #32]
 8005016:	e008      	b.n	800502a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	1c59      	adds	r1, r3, #1
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6211      	str	r1, [r2, #32]
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29b      	uxth	r3, r3
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4619      	mov	r1, r3
 8005038:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10f      	bne.n	800505e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800504c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800505c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005086:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fe73 	bl	8004d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08c      	sub	sp, #48	@ 0x30
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b22      	cmp	r3, #34	@ 0x22
 80050b2:	f040 80ae 	bne.w	8005212 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050be:	d117      	bne.n	80050f0 <UART_Receive_IT+0x50>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d113      	bne.n	80050f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	b29a      	uxth	r2, r3
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	1c9a      	adds	r2, r3, #2
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80050ee:	e026      	b.n	800513e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005102:	d007      	beq.n	8005114 <UART_Receive_IT+0x74>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <UART_Receive_IT+0x82>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e008      	b.n	8005134 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800512e:	b2da      	uxtb	r2, r3
 8005130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005132:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29b      	uxth	r3, r3
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	4619      	mov	r1, r3
 800514c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800514e:	2b00      	cmp	r3, #0
 8005150:	d15d      	bne.n	800520e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0220 	bic.w	r2, r2, #32
 8005160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	2b01      	cmp	r3, #1
 8005196:	d135      	bne.n	8005204 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	613b      	str	r3, [r7, #16]
   return(result);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f023 0310 	bic.w	r3, r3, #16
 80051b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051be:	623a      	str	r2, [r7, #32]
 80051c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	69f9      	ldr	r1, [r7, #28]
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e5      	bne.n	800519e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d10a      	bne.n	80051f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fdd1 	bl	8004da4 <HAL_UARTEx_RxEventCallback>
 8005202:	e002      	b.n	800520a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7fc fbc1 	bl	800198c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	e002      	b.n	8005214 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e000      	b.n	8005214 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005212:	2302      	movs	r3, #2
  }
}
 8005214:	4618      	mov	r0, r3
 8005216:	3730      	adds	r7, #48	@ 0x30
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b0c0      	sub	sp, #256	@ 0x100
 8005222:	af00      	add	r7, sp, #0
 8005224:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	68d9      	ldr	r1, [r3, #12]
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	ea40 0301 	orr.w	r3, r0, r1
 8005244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	431a      	orrs	r2, r3
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	431a      	orrs	r2, r3
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005274:	f021 010c 	bic.w	r1, r1, #12
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005282:	430b      	orrs	r3, r1
 8005284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005296:	6999      	ldr	r1, [r3, #24]
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	ea40 0301 	orr.w	r3, r0, r1
 80052a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b8f      	ldr	r3, [pc, #572]	@ (80054e8 <UART_SetConfig+0x2cc>)
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d005      	beq.n	80052bc <UART_SetConfig+0xa0>
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b8d      	ldr	r3, [pc, #564]	@ (80054ec <UART_SetConfig+0x2d0>)
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d104      	bne.n	80052c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7fe f9a0 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 80052c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052c4:	e003      	b.n	80052ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052c6:	f7fe f987 	bl	80035d8 <HAL_RCC_GetPCLK1Freq>
 80052ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052d8:	f040 810c 	bne.w	80054f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80052ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80052ee:	4622      	mov	r2, r4
 80052f0:	462b      	mov	r3, r5
 80052f2:	1891      	adds	r1, r2, r2
 80052f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052f6:	415b      	adcs	r3, r3
 80052f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80052fe:	4621      	mov	r1, r4
 8005300:	eb12 0801 	adds.w	r8, r2, r1
 8005304:	4629      	mov	r1, r5
 8005306:	eb43 0901 	adc.w	r9, r3, r1
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800531e:	4690      	mov	r8, r2
 8005320:	4699      	mov	r9, r3
 8005322:	4623      	mov	r3, r4
 8005324:	eb18 0303 	adds.w	r3, r8, r3
 8005328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800532c:	462b      	mov	r3, r5
 800532e:	eb49 0303 	adc.w	r3, r9, r3
 8005332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005342:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800534a:	460b      	mov	r3, r1
 800534c:	18db      	adds	r3, r3, r3
 800534e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005350:	4613      	mov	r3, r2
 8005352:	eb42 0303 	adc.w	r3, r2, r3
 8005356:	657b      	str	r3, [r7, #84]	@ 0x54
 8005358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800535c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005360:	f7fb fc42 	bl	8000be8 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4b61      	ldr	r3, [pc, #388]	@ (80054f0 <UART_SetConfig+0x2d4>)
 800536a:	fba3 2302 	umull	r2, r3, r3, r2
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	011c      	lsls	r4, r3, #4
 8005372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005376:	2200      	movs	r2, #0
 8005378:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800537c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	1891      	adds	r1, r2, r2
 800538a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800538c:	415b      	adcs	r3, r3
 800538e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005394:	4641      	mov	r1, r8
 8005396:	eb12 0a01 	adds.w	sl, r2, r1
 800539a:	4649      	mov	r1, r9
 800539c:	eb43 0b01 	adc.w	fp, r3, r1
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b4:	4692      	mov	sl, r2
 80053b6:	469b      	mov	fp, r3
 80053b8:	4643      	mov	r3, r8
 80053ba:	eb1a 0303 	adds.w	r3, sl, r3
 80053be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053c2:	464b      	mov	r3, r9
 80053c4:	eb4b 0303 	adc.w	r3, fp, r3
 80053c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053e0:	460b      	mov	r3, r1
 80053e2:	18db      	adds	r3, r3, r3
 80053e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80053e6:	4613      	mov	r3, r2
 80053e8:	eb42 0303 	adc.w	r3, r2, r3
 80053ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80053f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80053f6:	f7fb fbf7 	bl	8000be8 <__aeabi_uldivmod>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	4b3b      	ldr	r3, [pc, #236]	@ (80054f0 <UART_SetConfig+0x2d4>)
 8005402:	fba3 2301 	umull	r2, r3, r3, r1
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	2264      	movs	r2, #100	@ 0x64
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	1acb      	subs	r3, r1, r3
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005416:	4b36      	ldr	r3, [pc, #216]	@ (80054f0 <UART_SetConfig+0x2d4>)
 8005418:	fba3 2302 	umull	r2, r3, r3, r2
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005424:	441c      	add	r4, r3
 8005426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800542a:	2200      	movs	r2, #0
 800542c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005430:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	1891      	adds	r1, r2, r2
 800543e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005440:	415b      	adcs	r3, r3
 8005442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005448:	4641      	mov	r1, r8
 800544a:	1851      	adds	r1, r2, r1
 800544c:	6339      	str	r1, [r7, #48]	@ 0x30
 800544e:	4649      	mov	r1, r9
 8005450:	414b      	adcs	r3, r1
 8005452:	637b      	str	r3, [r7, #52]	@ 0x34
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005460:	4659      	mov	r1, fp
 8005462:	00cb      	lsls	r3, r1, #3
 8005464:	4651      	mov	r1, sl
 8005466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800546a:	4651      	mov	r1, sl
 800546c:	00ca      	lsls	r2, r1, #3
 800546e:	4610      	mov	r0, r2
 8005470:	4619      	mov	r1, r3
 8005472:	4603      	mov	r3, r0
 8005474:	4642      	mov	r2, r8
 8005476:	189b      	adds	r3, r3, r2
 8005478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800547c:	464b      	mov	r3, r9
 800547e:	460a      	mov	r2, r1
 8005480:	eb42 0303 	adc.w	r3, r2, r3
 8005484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005494:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800549c:	460b      	mov	r3, r1
 800549e:	18db      	adds	r3, r3, r3
 80054a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054a2:	4613      	mov	r3, r2
 80054a4:	eb42 0303 	adc.w	r3, r2, r3
 80054a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054b2:	f7fb fb99 	bl	8000be8 <__aeabi_uldivmod>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <UART_SetConfig+0x2d4>)
 80054bc:	fba3 1302 	umull	r1, r3, r3, r2
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	2164      	movs	r1, #100	@ 0x64
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	3332      	adds	r3, #50	@ 0x32
 80054ce:	4a08      	ldr	r2, [pc, #32]	@ (80054f0 <UART_SetConfig+0x2d4>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	f003 0207 	and.w	r2, r3, #7
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4422      	add	r2, r4
 80054e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054e4:	e106      	b.n	80056f4 <UART_SetConfig+0x4d8>
 80054e6:	bf00      	nop
 80054e8:	40011000 	.word	0x40011000
 80054ec:	40011400 	.word	0x40011400
 80054f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005506:	4642      	mov	r2, r8
 8005508:	464b      	mov	r3, r9
 800550a:	1891      	adds	r1, r2, r2
 800550c:	6239      	str	r1, [r7, #32]
 800550e:	415b      	adcs	r3, r3
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
 8005512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005516:	4641      	mov	r1, r8
 8005518:	1854      	adds	r4, r2, r1
 800551a:	4649      	mov	r1, r9
 800551c:	eb43 0501 	adc.w	r5, r3, r1
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	00eb      	lsls	r3, r5, #3
 800552a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800552e:	00e2      	lsls	r2, r4, #3
 8005530:	4614      	mov	r4, r2
 8005532:	461d      	mov	r5, r3
 8005534:	4643      	mov	r3, r8
 8005536:	18e3      	adds	r3, r4, r3
 8005538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800553c:	464b      	mov	r3, r9
 800553e:	eb45 0303 	adc.w	r3, r5, r3
 8005542:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005552:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005562:	4629      	mov	r1, r5
 8005564:	008b      	lsls	r3, r1, #2
 8005566:	4621      	mov	r1, r4
 8005568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556c:	4621      	mov	r1, r4
 800556e:	008a      	lsls	r2, r1, #2
 8005570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005574:	f7fb fb38 	bl	8000be8 <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4b60      	ldr	r3, [pc, #384]	@ (8005700 <UART_SetConfig+0x4e4>)
 800557e:	fba3 2302 	umull	r2, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	011c      	lsls	r4, r3, #4
 8005586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005590:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	61b9      	str	r1, [r7, #24]
 80055a0:	415b      	adcs	r3, r3
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055a8:	4641      	mov	r1, r8
 80055aa:	1851      	adds	r1, r2, r1
 80055ac:	6139      	str	r1, [r7, #16]
 80055ae:	4649      	mov	r1, r9
 80055b0:	414b      	adcs	r3, r1
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c0:	4659      	mov	r1, fp
 80055c2:	00cb      	lsls	r3, r1, #3
 80055c4:	4651      	mov	r1, sl
 80055c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ca:	4651      	mov	r1, sl
 80055cc:	00ca      	lsls	r2, r1, #3
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	4642      	mov	r2, r8
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055dc:	464b      	mov	r3, r9
 80055de:	460a      	mov	r2, r1
 80055e0:	eb42 0303 	adc.w	r3, r2, r3
 80055e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005600:	4649      	mov	r1, r9
 8005602:	008b      	lsls	r3, r1, #2
 8005604:	4641      	mov	r1, r8
 8005606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800560a:	4641      	mov	r1, r8
 800560c:	008a      	lsls	r2, r1, #2
 800560e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005612:	f7fb fae9 	bl	8000be8 <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4611      	mov	r1, r2
 800561c:	4b38      	ldr	r3, [pc, #224]	@ (8005700 <UART_SetConfig+0x4e4>)
 800561e:	fba3 2301 	umull	r2, r3, r3, r1
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2264      	movs	r2, #100	@ 0x64
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	1acb      	subs	r3, r1, r3
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	3332      	adds	r3, #50	@ 0x32
 8005630:	4a33      	ldr	r2, [pc, #204]	@ (8005700 <UART_SetConfig+0x4e4>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800563c:	441c      	add	r4, r3
 800563e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005642:	2200      	movs	r2, #0
 8005644:	673b      	str	r3, [r7, #112]	@ 0x70
 8005646:	677a      	str	r2, [r7, #116]	@ 0x74
 8005648:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	1891      	adds	r1, r2, r2
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	415b      	adcs	r3, r3
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800565c:	4641      	mov	r1, r8
 800565e:	1851      	adds	r1, r2, r1
 8005660:	6039      	str	r1, [r7, #0]
 8005662:	4649      	mov	r1, r9
 8005664:	414b      	adcs	r3, r1
 8005666:	607b      	str	r3, [r7, #4]
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005674:	4659      	mov	r1, fp
 8005676:	00cb      	lsls	r3, r1, #3
 8005678:	4651      	mov	r1, sl
 800567a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567e:	4651      	mov	r1, sl
 8005680:	00ca      	lsls	r2, r1, #3
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	4603      	mov	r3, r0
 8005688:	4642      	mov	r2, r8
 800568a:	189b      	adds	r3, r3, r2
 800568c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800568e:	464b      	mov	r3, r9
 8005690:	460a      	mov	r2, r1
 8005692:	eb42 0303 	adc.w	r3, r2, r3
 8005696:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80056a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056b0:	4649      	mov	r1, r9
 80056b2:	008b      	lsls	r3, r1, #2
 80056b4:	4641      	mov	r1, r8
 80056b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ba:	4641      	mov	r1, r8
 80056bc:	008a      	lsls	r2, r1, #2
 80056be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056c2:	f7fb fa91 	bl	8000be8 <__aeabi_uldivmod>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005700 <UART_SetConfig+0x4e4>)
 80056cc:	fba3 1302 	umull	r1, r3, r3, r2
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	2164      	movs	r1, #100	@ 0x64
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	3332      	adds	r3, #50	@ 0x32
 80056de:	4a08      	ldr	r2, [pc, #32]	@ (8005700 <UART_SetConfig+0x4e4>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	f003 020f 	and.w	r2, r3, #15
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4422      	add	r2, r4
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80056fa:	46bd      	mov	sp, r7
 80056fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005700:	51eb851f 	.word	0x51eb851f

08005704 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005716:	2b84      	cmp	r3, #132	@ 0x84
 8005718:	d005      	beq.n	8005726 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800571a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	3303      	adds	r3, #3
 8005724:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005726:	68fb      	ldr	r3, [r7, #12]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800573a:	f3ef 8305 	mrs	r3, IPSR
 800573e:	607b      	str	r3, [r7, #4]
  return(result);
 8005740:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800575c:	f001 f984 	bl	8006a68 <vTaskStartScheduler>
  
  return osOK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	bd80      	pop	{r7, pc}

08005766 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005768:	b089      	sub	sp, #36	@ 0x24
 800576a:	af04      	add	r7, sp, #16
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d020      	beq.n	80057ba <osThreadCreate+0x54>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01c      	beq.n	80057ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685c      	ldr	r4, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691e      	ldr	r6, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff ffb6 	bl	8005704 <makeFreeRtosPriority>
 8005798:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057a2:	9202      	str	r2, [sp, #8]
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	9100      	str	r1, [sp, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4632      	mov	r2, r6
 80057ac:	4629      	mov	r1, r5
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 ff8c 	bl	80066cc <xTaskCreateStatic>
 80057b4:	4603      	mov	r3, r0
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e01c      	b.n	80057f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685c      	ldr	r4, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff ff98 	bl	8005704 <makeFreeRtosPriority>
 80057d4:	4602      	mov	r2, r0
 80057d6:	f107 030c 	add.w	r3, r7, #12
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	9200      	str	r2, [sp, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	4632      	mov	r2, r6
 80057e2:	4629      	mov	r1, r5
 80057e4:	4620      	mov	r0, r4
 80057e6:	f000 ffd1 	bl	800678c <xTaskCreate>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d001      	beq.n	80057f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80057f4:	68fb      	ldr	r3, [r7, #12]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <osDelay+0x16>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	e000      	b.n	8005816 <osDelay+0x18>
 8005814:	2301      	movs	r3, #1
 8005816:	4618      	mov	r0, r3
 8005818:	f001 f8f0 	bl	80069fc <vTaskDelay>
  
  return osOK;
 800581c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4619      	mov	r1, r3
 800583c:	2001      	movs	r0, #1
 800583e:	f000 fade 	bl	8005dfe <xQueueCreateMutexStatic>
 8005842:	4603      	mov	r3, r0
 8005844:	e003      	b.n	800584e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005846:	2001      	movs	r0, #1
 8005848:	f000 fac1 	bl	8005dce <xQueueCreateMutex>
 800584c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <osMutexWait+0x18>
    return osErrorParameter;
 800586c:	2380      	movs	r3, #128	@ 0x80
 800586e:	e03a      	b.n	80058e6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d103      	bne.n	8005884 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800587c:	f04f 33ff 	mov.w	r3, #4294967295
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e009      	b.n	8005898 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d006      	beq.n	8005898 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <osMutexWait+0x40>
      ticks = 1;
 8005894:	2301      	movs	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005898:	f7ff ff4c 	bl	8005734 <inHandlerMode>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d017      	beq.n	80058d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058a2:	f107 0308 	add.w	r3, r7, #8
 80058a6:	461a      	mov	r2, r3
 80058a8:	2100      	movs	r1, #0
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fd64 	bl	8006378 <xQueueReceiveFromISR>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d001      	beq.n	80058ba <osMutexWait+0x62>
      return osErrorOS;
 80058b6:	23ff      	movs	r3, #255	@ 0xff
 80058b8:	e015      	b.n	80058e6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d011      	beq.n	80058e4 <osMutexWait+0x8c>
 80058c0:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <osMutexWait+0x98>)
 80058c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	e008      	b.n	80058e4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fc3f 	bl	8006158 <xQueueSemaphoreTake>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d001      	beq.n	80058e4 <osMutexWait+0x8c>
    return osErrorOS;
 80058e0:	23ff      	movs	r3, #255	@ 0xff
 80058e2:	e000      	b.n	80058e6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	e000ed04 	.word	0xe000ed04

080058f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005900:	2300      	movs	r3, #0
 8005902:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005904:	f7ff ff16 	bl	8005734 <inHandlerMode>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d016      	beq.n	800593c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb8f 	bl	8006038 <xQueueGiveFromISR>
 800591a:	4603      	mov	r3, r0
 800591c:	2b01      	cmp	r3, #1
 800591e:	d001      	beq.n	8005924 <osMutexRelease+0x30>
      return osErrorOS;
 8005920:	23ff      	movs	r3, #255	@ 0xff
 8005922:	e017      	b.n	8005954 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d013      	beq.n	8005952 <osMutexRelease+0x5e>
 800592a:	4b0c      	ldr	r3, [pc, #48]	@ (800595c <osMutexRelease+0x68>)
 800592c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	e00a      	b.n	8005952 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800593c:	2300      	movs	r3, #0
 800593e:	2200      	movs	r2, #0
 8005940:	2100      	movs	r1, #0
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fa76 	bl	8005e34 <xQueueGenericSend>
 8005948:	4603      	mov	r3, r0
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800594e:	23ff      	movs	r3, #255	@ 0xff
 8005950:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005952:	68fb      	ldr	r3, [r7, #12]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	e000ed04 	.word	0xe000ed04

08005960 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b085      	sub	sp, #20
 8005964:	af02      	add	r7, sp, #8
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d011      	beq.n	8005996 <osMessageCreate+0x36>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	2400      	movs	r4, #0
 800598c:	9400      	str	r4, [sp, #0]
 800598e:	f000 f92d 	bl	8005bec <xQueueGenericCreateStatic>
 8005992:	4603      	mov	r3, r0
 8005994:	e008      	b.n	80059a8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	4619      	mov	r1, r3
 80059a2:	f000 f9a0 	bl	8005ce6 <xQueueGenericCreate>
 80059a6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd90      	pop	{r4, r7, pc}

080059b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f103 0208 	add.w	r2, r3, #8
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f103 0208 	add.w	r2, r3, #8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f103 0208 	add.w	r2, r3, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d103      	bne.n	8005a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e00c      	b.n	8005a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3308      	adds	r3, #8
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e002      	b.n	8005a80 <vListInsert+0x2e>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d2f6      	bcs.n	8005a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	601a      	str	r2, [r3, #0]
}
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6892      	ldr	r2, [r2, #8]
 8005ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6852      	ldr	r2, [r2, #4]
 8005ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d103      	bne.n	8005af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	1e5a      	subs	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b44:	f001 fef0 	bl	8007928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b50:	68f9      	ldr	r1, [r7, #12]
 8005b52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b54:	fb01 f303 	mul.w	r3, r1, r3
 8005b58:	441a      	add	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b74:	3b01      	subs	r3, #1
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b7a:	fb01 f303 	mul.w	r3, r1, r3
 8005b7e:	441a      	add	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	22ff      	movs	r2, #255	@ 0xff
 8005b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	22ff      	movs	r2, #255	@ 0xff
 8005b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d114      	bne.n	8005bc4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01a      	beq.n	8005bd8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3310      	adds	r3, #16
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 f9a8 	bl	8006efc <xTaskRemoveFromEventList>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d012      	beq.n	8005bd8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <xQueueGenericReset+0xd0>)
 8005bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	e009      	b.n	8005bd8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3310      	adds	r3, #16
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fef1 	bl	80059b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3324      	adds	r3, #36	@ 0x24
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff feec 	bl	80059b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bd8:	f001 fed8 	bl	800798c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bdc:	2301      	movs	r3, #1
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08e      	sub	sp, #56	@ 0x38
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10b      	bne.n	8005c18 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	e7fd      	b.n	8005c14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10b      	bne.n	8005c36 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	e7fd      	b.n	8005c32 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <xQueueGenericCreateStatic+0x56>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <xQueueGenericCreateStatic+0x5a>
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <xQueueGenericCreateStatic+0x5c>
 8005c46:	2300      	movs	r3, #0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10b      	bne.n	8005c64 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	623b      	str	r3, [r7, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	bf00      	nop
 8005c62:	e7fd      	b.n	8005c60 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <xQueueGenericCreateStatic+0x84>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <xQueueGenericCreateStatic+0x88>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <xQueueGenericCreateStatic+0x8a>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	61fb      	str	r3, [r7, #28]
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	e7fd      	b.n	8005c8e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c92:	2348      	movs	r3, #72	@ 0x48
 8005c94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b48      	cmp	r3, #72	@ 0x48
 8005c9a:	d00b      	beq.n	8005cb4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	61bb      	str	r3, [r7, #24]
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cb4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00d      	beq.n	8005cdc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cc8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f840 	bl	8005d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3730      	adds	r7, #48	@ 0x30
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b08a      	sub	sp, #40	@ 0x28
 8005cea:	af02      	add	r7, sp, #8
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	613b      	str	r3, [r7, #16]
}
 8005d0c:	bf00      	nop
 8005d0e:	bf00      	nop
 8005d10:	e7fd      	b.n	8005d0e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	3348      	adds	r3, #72	@ 0x48
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 ff23 	bl	8007b6c <pvPortMalloc>
 8005d26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d011      	beq.n	8005d52 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	3348      	adds	r3, #72	@ 0x48
 8005d36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d40:	79fa      	ldrb	r2, [r7, #7]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f805 	bl	8005d5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d52:	69bb      	ldr	r3, [r7, #24]
	}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d103      	bne.n	8005d78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	e002      	b.n	8005d7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	69b8      	ldr	r0, [r7, #24]
 8005d8e:	f7ff fec3 	bl	8005b18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00e      	beq.n	8005dc6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f837 	bl	8005e34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b086      	sub	sp, #24
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	461a      	mov	r2, r3
 8005de4:	6939      	ldr	r1, [r7, #16]
 8005de6:	6978      	ldr	r0, [r7, #20]
 8005de8:	f7ff ff7d 	bl	8005ce6 <xQueueGenericCreate>
 8005dec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff ffd3 	bl	8005d9a <prvInitialiseMutex>

		return xNewQueue;
 8005df4:	68fb      	ldr	r3, [r7, #12]
	}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b088      	sub	sp, #32
 8005e02:	af02      	add	r7, sp, #8
 8005e04:	4603      	mov	r3, r0
 8005e06:	6039      	str	r1, [r7, #0]
 8005e08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	6939      	ldr	r1, [r7, #16]
 8005e1c:	6978      	ldr	r0, [r7, #20]
 8005e1e:	f7ff fee5 	bl	8005bec <xQueueGenericCreateStatic>
 8005e22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff ffb8 	bl	8005d9a <prvInitialiseMutex>

		return xNewQueue;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
	}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	@ 0x38
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e42:	2300      	movs	r3, #0
 8005e44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <xQueueGenericSend+0x34>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <xQueueGenericSend+0x42>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <xQueueGenericSend+0x46>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <xQueueGenericSend+0x48>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <xQueueGenericSend+0x64>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d103      	bne.n	8005ea6 <xQueueGenericSend+0x72>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <xQueueGenericSend+0x76>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueGenericSend+0x78>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10b      	bne.n	8005ec8 <xQueueGenericSend+0x94>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	623b      	str	r3, [r7, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	e7fd      	b.n	8005ec4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ec8:	f001 f9d8 	bl	800727c <xTaskGetSchedulerState>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <xQueueGenericSend+0xa4>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <xQueueGenericSend+0xa8>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <xQueueGenericSend+0xaa>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <xQueueGenericSend+0xc6>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	61fb      	str	r3, [r7, #28]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005efa:	f001 fd15 	bl	8007928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <xQueueGenericSend+0xdc>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d129      	bne.n	8005f64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f16:	f000 fac9 	bl	80064ac <prvCopyDataToQueue>
 8005f1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d010      	beq.n	8005f46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	3324      	adds	r3, #36	@ 0x24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 ffe7 	bl	8006efc <xTaskRemoveFromEventList>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d013      	beq.n	8005f5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f34:	4b3f      	ldr	r3, [pc, #252]	@ (8006034 <xQueueGenericSend+0x200>)
 8005f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	e00a      	b.n	8005f5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f4c:	4b39      	ldr	r3, [pc, #228]	@ (8006034 <xQueueGenericSend+0x200>)
 8005f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f5c:	f001 fd16 	bl	800798c <vPortExitCritical>
				return pdPASS;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e063      	b.n	800602c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f6a:	f001 fd0f 	bl	800798c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e05c      	b.n	800602c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d106      	bne.n	8005f86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f78:	f107 0314 	add.w	r3, r7, #20
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 f821 	bl	8006fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f82:	2301      	movs	r3, #1
 8005f84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f86:	f001 fd01 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f8a:	f000 fdcf 	bl	8006b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f8e:	f001 fccb 	bl	8007928 <vPortEnterCritical>
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f98:	b25b      	sxtb	r3, r3
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d103      	bne.n	8005fa8 <xQueueGenericSend+0x174>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fae:	b25b      	sxtb	r3, r3
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d103      	bne.n	8005fbe <xQueueGenericSend+0x18a>
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fbe:	f001 fce5 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fc2:	1d3a      	adds	r2, r7, #4
 8005fc4:	f107 0314 	add.w	r3, r7, #20
 8005fc8:	4611      	mov	r1, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 f810 	bl	8006ff0 <xTaskCheckForTimeOut>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d124      	bne.n	8006020 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fd8:	f000 fb60 	bl	800669c <prvIsQueueFull>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d018      	beq.n	8006014 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	3310      	adds	r3, #16
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 ff60 	bl	8006eb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ff2:	f000 faeb 	bl	80065cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ff6:	f000 fda7 	bl	8006b48 <xTaskResumeAll>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f47f af7c 	bne.w	8005efa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006002:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <xQueueGenericSend+0x200>)
 8006004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	e772      	b.n	8005efa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006016:	f000 fad9 	bl	80065cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800601a:	f000 fd95 	bl	8006b48 <xTaskResumeAll>
 800601e:	e76c      	b.n	8005efa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006022:	f000 fad3 	bl	80065cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006026:	f000 fd8f 	bl	8006b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800602a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800602c:	4618      	mov	r0, r3
 800602e:	3738      	adds	r7, #56	@ 0x38
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08e      	sub	sp, #56	@ 0x38
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	623b      	str	r3, [r7, #32]
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	61fb      	str	r3, [r7, #28]
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	e7fd      	b.n	8006080 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <xQueueGiveFromISR+0x5c>
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <xQueueGiveFromISR+0x60>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <xQueueGiveFromISR+0x62>
 8006098:	2300      	movs	r3, #0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	61bb      	str	r3, [r7, #24]
}
 80060b0:	bf00      	nop
 80060b2:	bf00      	nop
 80060b4:	e7fd      	b.n	80060b2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060b6:	f001 fd17 	bl	8007ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060ba:	f3ef 8211 	mrs	r2, BASEPRI
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	617a      	str	r2, [r7, #20]
 80060d0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d22b      	bcs.n	800613e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d112      	bne.n	8006128 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	2b00      	cmp	r3, #0
 8006108:	d016      	beq.n	8006138 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	3324      	adds	r3, #36	@ 0x24
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fef4 	bl	8006efc <xTaskRemoveFromEventList>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00e      	beq.n	8006138 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	e007      	b.n	8006138 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800612c:	3301      	adds	r3, #1
 800612e:	b2db      	uxtb	r3, r3
 8006130:	b25a      	sxtb	r2, r3
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006138:	2301      	movs	r3, #1
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
 800613c:	e001      	b.n	8006142 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800613e:	2300      	movs	r3, #0
 8006140:	637b      	str	r3, [r7, #52]	@ 0x34
 8006142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006144:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800614c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800614e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006150:	4618      	mov	r0, r3
 8006152:	3738      	adds	r7, #56	@ 0x38
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	@ 0x38
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800616a:	2300      	movs	r3, #0
 800616c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	623b      	str	r3, [r7, #32]
}
 8006186:	bf00      	nop
 8006188:	bf00      	nop
 800618a:	e7fd      	b.n	8006188 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	61fb      	str	r3, [r7, #28]
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ac:	f001 f866 	bl	800727c <xTaskGetSchedulerState>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <xQueueSemaphoreTake+0x64>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <xQueueSemaphoreTake+0x68>
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <xQueueSemaphoreTake+0x6a>
 80061c0:	2300      	movs	r3, #0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <xQueueSemaphoreTake+0x86>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	61bb      	str	r3, [r7, #24]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061de:	f001 fba3 	bl	8007928 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d024      	beq.n	8006238 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f0:	1e5a      	subs	r2, r3, #1
 80061f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061fe:	f001 f9e9 	bl	80075d4 <pvTaskIncrementMutexHeldCount>
 8006202:	4602      	mov	r2, r0
 8006204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006206:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00f      	beq.n	8006230 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006212:	3310      	adds	r3, #16
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fe71 	bl	8006efc <xTaskRemoveFromEventList>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006220:	4b54      	ldr	r3, [pc, #336]	@ (8006374 <xQueueSemaphoreTake+0x21c>)
 8006222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006230:	f001 fbac 	bl	800798c <vPortExitCritical>
				return pdPASS;
 8006234:	2301      	movs	r3, #1
 8006236:	e098      	b.n	800636a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d112      	bne.n	8006264 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00b      	beq.n	800625c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	617b      	str	r3, [r7, #20]
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	e7fd      	b.n	8006258 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800625c:	f001 fb96 	bl	800798c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006260:	2300      	movs	r3, #0
 8006262:	e082      	b.n	800636a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800626a:	f107 030c 	add.w	r3, r7, #12
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fea8 	bl	8006fc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006278:	f001 fb88 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800627c:	f000 fc56 	bl	8006b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006280:	f001 fb52 	bl	8007928 <vPortEnterCritical>
 8006284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006286:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800628a:	b25b      	sxtb	r3, r3
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d103      	bne.n	800629a <xQueueSemaphoreTake+0x142>
 8006292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d103      	bne.n	80062b0 <xQueueSemaphoreTake+0x158>
 80062a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062b0:	f001 fb6c 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062b4:	463a      	mov	r2, r7
 80062b6:	f107 030c 	add.w	r3, r7, #12
 80062ba:	4611      	mov	r1, r2
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fe97 	bl	8006ff0 <xTaskCheckForTimeOut>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d132      	bne.n	800632e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062ca:	f000 f9d1 	bl	8006670 <prvIsQueueEmpty>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d026      	beq.n	8006322 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80062dc:	f001 fb24 	bl	8007928 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 ffe7 	bl	80072b8 <xTaskPriorityInherit>
 80062ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062ec:	f001 fb4e 	bl	800798c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	3324      	adds	r3, #36	@ 0x24
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	4611      	mov	r1, r2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fdd9 	bl	8006eb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006300:	f000 f964 	bl	80065cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006304:	f000 fc20 	bl	8006b48 <xTaskResumeAll>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	f47f af67 	bne.w	80061de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006310:	4b18      	ldr	r3, [pc, #96]	@ (8006374 <xQueueSemaphoreTake+0x21c>)
 8006312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	e75d      	b.n	80061de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006322:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006324:	f000 f952 	bl	80065cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006328:	f000 fc0e 	bl	8006b48 <xTaskResumeAll>
 800632c:	e757      	b.n	80061de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800632e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006330:	f000 f94c 	bl	80065cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006334:	f000 fc08 	bl	8006b48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006338:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800633a:	f000 f999 	bl	8006670 <prvIsQueueEmpty>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	f43f af4c 	beq.w	80061de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00d      	beq.n	8006368 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800634c:	f001 faec 	bl	8007928 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006350:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006352:	f000 f893 	bl	800647c <prvGetDisinheritPriorityAfterTimeout>
 8006356:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f8a8 	bl	80074b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006364:	f001 fb12 	bl	800798c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800636a:	4618      	mov	r0, r3
 800636c:	3738      	adds	r7, #56	@ 0x38
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	e000ed04 	.word	0xe000ed04

08006378 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08e      	sub	sp, #56	@ 0x38
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	623b      	str	r3, [r7, #32]
}
 80063a0:	bf00      	nop
 80063a2:	bf00      	nop
 80063a4:	e7fd      	b.n	80063a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d103      	bne.n	80063b4 <xQueueReceiveFromISR+0x3c>
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <xQueueReceiveFromISR+0x40>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <xQueueReceiveFromISR+0x42>
 80063b8:	2300      	movs	r3, #0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	61fb      	str	r3, [r7, #28]
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063d6:	f001 fb87 	bl	8007ae8 <vPortValidateInterruptPriority>
	__asm volatile
 80063da:	f3ef 8211 	mrs	r2, BASEPRI
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	61ba      	str	r2, [r7, #24]
 80063f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80063f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d02f      	beq.n	8006462 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006410:	f000 f8b6 	bl	8006580 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	1e5a      	subs	r2, r3, #1
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800641c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d112      	bne.n	800644c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d016      	beq.n	800645c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	3310      	adds	r3, #16
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fd62 	bl	8006efc <xTaskRemoveFromEventList>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00e      	beq.n	800645c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	e007      	b.n	800645c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800644c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006450:	3301      	adds	r3, #1
 8006452:	b2db      	uxtb	r3, r3
 8006454:	b25a      	sxtb	r2, r3
 8006456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800645c:	2301      	movs	r3, #1
 800645e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006460:	e001      	b.n	8006466 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006462:	2300      	movs	r3, #0
 8006464:	637b      	str	r3, [r7, #52]	@ 0x34
 8006466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006468:	613b      	str	r3, [r7, #16]
	__asm volatile
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f383 8811 	msr	BASEPRI, r3
}
 8006470:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006474:	4618      	mov	r0, r3
 8006476:	3738      	adds	r7, #56	@ 0x38
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	d006      	beq.n	800649a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f1c3 0307 	rsb	r3, r3, #7
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e001      	b.n	800649e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800649e:	68fb      	ldr	r3, [r7, #12]
	}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10d      	bne.n	80064e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d14d      	bne.n	800656e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 ff64 	bl	80073a4 <xTaskPriorityDisinherit>
 80064dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	609a      	str	r2, [r3, #8]
 80064e4:	e043      	b.n	800656e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d119      	bne.n	8006520 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6858      	ldr	r0, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	461a      	mov	r2, r3
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	f002 fd55 	bl	8008fa6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006504:	441a      	add	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	429a      	cmp	r2, r3
 8006514:	d32b      	bcc.n	800656e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	605a      	str	r2, [r3, #4]
 800651e:	e026      	b.n	800656e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	68d8      	ldr	r0, [r3, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006528:	461a      	mov	r2, r3
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	f002 fd3b 	bl	8008fa6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	425b      	negs	r3, r3
 800653a:	441a      	add	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d207      	bcs.n	800655c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006554:	425b      	negs	r3, r3
 8006556:	441a      	add	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d105      	bne.n	800656e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	3b01      	subs	r3, #1
 800656c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006576:	697b      	ldr	r3, [r7, #20]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d018      	beq.n	80065c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	441a      	add	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d303      	bcc.n	80065b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68d9      	ldr	r1, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065bc:	461a      	mov	r2, r3
 80065be:	6838      	ldr	r0, [r7, #0]
 80065c0:	f002 fcf1 	bl	8008fa6 <memcpy>
	}
}
 80065c4:	bf00      	nop
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065d4:	f001 f9a8 	bl	8007928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065e0:	e011      	b.n	8006606 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d012      	beq.n	8006610 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3324      	adds	r3, #36	@ 0x24
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fc84 	bl	8006efc <xTaskRemoveFromEventList>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065fa:	f000 fd5d 	bl	80070b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	3b01      	subs	r3, #1
 8006602:	b2db      	uxtb	r3, r3
 8006604:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800660a:	2b00      	cmp	r3, #0
 800660c:	dce9      	bgt.n	80065e2 <prvUnlockQueue+0x16>
 800660e:	e000      	b.n	8006612 <prvUnlockQueue+0x46>
					break;
 8006610:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	22ff      	movs	r2, #255	@ 0xff
 8006616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800661a:	f001 f9b7 	bl	800798c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800661e:	f001 f983 	bl	8007928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006628:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800662a:	e011      	b.n	8006650 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3310      	adds	r3, #16
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fc5f 	bl	8006efc <xTaskRemoveFromEventList>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006644:	f000 fd38 	bl	80070b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	3b01      	subs	r3, #1
 800664c:	b2db      	uxtb	r3, r3
 800664e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006654:	2b00      	cmp	r3, #0
 8006656:	dce9      	bgt.n	800662c <prvUnlockQueue+0x60>
 8006658:	e000      	b.n	800665c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800665a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	22ff      	movs	r2, #255	@ 0xff
 8006660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006664:	f001 f992 	bl	800798c <vPortExitCritical>
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006678:	f001 f956 	bl	8007928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e001      	b.n	800668e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800668e:	f001 f97d 	bl	800798c <vPortExitCritical>

	return xReturn;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066a4:	f001 f940 	bl	8007928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d102      	bne.n	80066ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066b4:	2301      	movs	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	e001      	b.n	80066be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066be:	f001 f965 	bl	800798c <vPortExitCritical>

	return xReturn;
 80066c2:	68fb      	ldr	r3, [r7, #12]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08e      	sub	sp, #56	@ 0x38
 80066d0:	af04      	add	r7, sp, #16
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10b      	bne.n	80066f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	623b      	str	r3, [r7, #32]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <xTaskCreateStatic+0x4a>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	61fb      	str	r3, [r7, #28]
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	e7fd      	b.n	8006712 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006716:	2354      	movs	r3, #84	@ 0x54
 8006718:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b54      	cmp	r3, #84	@ 0x54
 800671e:	d00b      	beq.n	8006738 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	61bb      	str	r3, [r7, #24]
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	e7fd      	b.n	8006734 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006738:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800673a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01e      	beq.n	800677e <xTaskCreateStatic+0xb2>
 8006740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01b      	beq.n	800677e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	2202      	movs	r2, #2
 8006754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006758:	2300      	movs	r3, #0
 800675a:	9303      	str	r3, [sp, #12]
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	9302      	str	r3, [sp, #8]
 8006760:	f107 0314 	add.w	r3, r7, #20
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f850 	bl	8006816 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006776:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006778:	f000 f8d6 	bl	8006928 <prvAddNewTaskToReadyList>
 800677c:	e001      	b.n	8006782 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006782:	697b      	ldr	r3, [r7, #20]
	}
 8006784:	4618      	mov	r0, r3
 8006786:	3728      	adds	r7, #40	@ 0x28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08c      	sub	sp, #48	@ 0x30
 8006790:	af04      	add	r7, sp, #16
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 f9e3 	bl	8007b6c <pvPortMalloc>
 80067a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00e      	beq.n	80067cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067ae:	2054      	movs	r0, #84	@ 0x54
 80067b0:	f001 f9dc 	bl	8007b6c <pvPortMalloc>
 80067b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80067c2:	e005      	b.n	80067d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067c4:	6978      	ldr	r0, [r7, #20]
 80067c6:	f001 fa9f 	bl	8007d08 <vPortFree>
 80067ca:	e001      	b.n	80067d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d017      	beq.n	8006806 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	2300      	movs	r3, #0
 80067e2:	9303      	str	r3, [sp, #12]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	9302      	str	r3, [sp, #8]
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f80e 	bl	8006816 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067fa:	69f8      	ldr	r0, [r7, #28]
 80067fc:	f000 f894 	bl	8006928 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006800:	2301      	movs	r3, #1
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	e002      	b.n	800680c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800680c:	69bb      	ldr	r3, [r7, #24]
	}
 800680e:	4618      	mov	r0, r3
 8006810:	3720      	adds	r7, #32
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b088      	sub	sp, #32
 800681a:	af00      	add	r7, sp, #0
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800682e:	3b01      	subs	r3, #1
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	f023 0307 	bic.w	r3, r3, #7
 800683c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	617b      	str	r3, [r7, #20]
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01f      	beq.n	80068a6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	e012      	b.n	8006892 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	7819      	ldrb	r1, [r3, #0]
 8006874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	3334      	adds	r3, #52	@ 0x34
 800687c:	460a      	mov	r2, r1
 800687e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d006      	beq.n	800689a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	3301      	adds	r3, #1
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b0f      	cmp	r3, #15
 8006896:	d9e9      	bls.n	800686c <prvInitialiseNewTask+0x56>
 8006898:	e000      	b.n	800689c <prvInitialiseNewTask+0x86>
			{
				break;
 800689a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068a4:	e003      	b.n	80068ae <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b0:	2b06      	cmp	r3, #6
 80068b2:	d901      	bls.n	80068b8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068b4:	2306      	movs	r3, #6
 80068b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	2200      	movs	r2, #0
 80068c8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	3304      	adds	r3, #4
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff f88e 	bl	80059f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	3318      	adds	r3, #24
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff f889 	bl	80059f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e6:	f1c3 0207 	rsb	r2, r3, #7
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	2200      	movs	r2, #0
 80068f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	68f9      	ldr	r1, [r7, #12]
 8006906:	69b8      	ldr	r0, [r7, #24]
 8006908:	f000 fede 	bl	80076c8 <pxPortInitialiseStack>
 800690c:	4602      	mov	r2, r0
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800691c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800691e:	bf00      	nop
 8006920:	3720      	adds	r7, #32
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006930:	f000 fffa 	bl	8007928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006934:	4b2a      	ldr	r3, [pc, #168]	@ (80069e0 <prvAddNewTaskToReadyList+0xb8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3301      	adds	r3, #1
 800693a:	4a29      	ldr	r2, [pc, #164]	@ (80069e0 <prvAddNewTaskToReadyList+0xb8>)
 800693c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800693e:	4b29      	ldr	r3, [pc, #164]	@ (80069e4 <prvAddNewTaskToReadyList+0xbc>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006946:	4a27      	ldr	r2, [pc, #156]	@ (80069e4 <prvAddNewTaskToReadyList+0xbc>)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800694c:	4b24      	ldr	r3, [pc, #144]	@ (80069e0 <prvAddNewTaskToReadyList+0xb8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d110      	bne.n	8006976 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006954:	f000 fbd4 	bl	8007100 <prvInitialiseTaskLists>
 8006958:	e00d      	b.n	8006976 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800695a:	4b23      	ldr	r3, [pc, #140]	@ (80069e8 <prvAddNewTaskToReadyList+0xc0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006962:	4b20      	ldr	r3, [pc, #128]	@ (80069e4 <prvAddNewTaskToReadyList+0xbc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696c:	429a      	cmp	r2, r3
 800696e:	d802      	bhi.n	8006976 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006970:	4a1c      	ldr	r2, [pc, #112]	@ (80069e4 <prvAddNewTaskToReadyList+0xbc>)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006976:	4b1d      	ldr	r3, [pc, #116]	@ (80069ec <prvAddNewTaskToReadyList+0xc4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	4a1b      	ldr	r2, [pc, #108]	@ (80069ec <prvAddNewTaskToReadyList+0xc4>)
 800697e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	2201      	movs	r2, #1
 8006986:	409a      	lsls	r2, r3
 8006988:	4b19      	ldr	r3, [pc, #100]	@ (80069f0 <prvAddNewTaskToReadyList+0xc8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4313      	orrs	r3, r2
 800698e:	4a18      	ldr	r2, [pc, #96]	@ (80069f0 <prvAddNewTaskToReadyList+0xc8>)
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4a15      	ldr	r2, [pc, #84]	@ (80069f4 <prvAddNewTaskToReadyList+0xcc>)
 80069a0:	441a      	add	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f7ff f82e 	bl	8005a0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069ae:	f000 ffed 	bl	800798c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069b2:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <prvAddNewTaskToReadyList+0xc0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069ba:	4b0a      	ldr	r3, [pc, #40]	@ (80069e4 <prvAddNewTaskToReadyList+0xbc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d207      	bcs.n	80069d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069c8:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <prvAddNewTaskToReadyList+0xd0>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000810 	.word	0x20000810
 80069e4:	20000710 	.word	0x20000710
 80069e8:	2000081c 	.word	0x2000081c
 80069ec:	2000082c 	.word	0x2000082c
 80069f0:	20000818 	.word	0x20000818
 80069f4:	20000714 	.word	0x20000714
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d018      	beq.n	8006a40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a0e:	4b14      	ldr	r3, [pc, #80]	@ (8006a60 <vTaskDelay+0x64>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <vTaskDelay+0x32>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60bb      	str	r3, [r7, #8]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a2e:	f000 f87d 	bl	8006b2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a32:	2100      	movs	r1, #0
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fde1 	bl	80075fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a3a:	f000 f885 	bl	8006b48 <xTaskResumeAll>
 8006a3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d107      	bne.n	8006a56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a46:	4b07      	ldr	r3, [pc, #28]	@ (8006a64 <vTaskDelay+0x68>)
 8006a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000838 	.word	0x20000838
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08a      	sub	sp, #40	@ 0x28
 8006a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a76:	463a      	mov	r2, r7
 8006a78:	1d39      	adds	r1, r7, #4
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fa fa2a 	bl	8000ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	9202      	str	r2, [sp, #8]
 8006a8c:	9301      	str	r3, [sp, #4]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	2300      	movs	r3, #0
 8006a94:	460a      	mov	r2, r1
 8006a96:	491f      	ldr	r1, [pc, #124]	@ (8006b14 <vTaskStartScheduler+0xac>)
 8006a98:	481f      	ldr	r0, [pc, #124]	@ (8006b18 <vTaskStartScheduler+0xb0>)
 8006a9a:	f7ff fe17 	bl	80066cc <xTaskCreateStatic>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8006b1c <vTaskStartScheduler+0xb4>)
 8006aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b1c <vTaskStartScheduler+0xb4>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006aac:	2301      	movs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e001      	b.n	8006ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d116      	bne.n	8006aea <vTaskStartScheduler+0x82>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	613b      	str	r3, [r7, #16]
}
 8006ace:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ad0:	4b13      	ldr	r3, [pc, #76]	@ (8006b20 <vTaskStartScheduler+0xb8>)
 8006ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ad8:	4b12      	ldr	r3, [pc, #72]	@ (8006b24 <vTaskStartScheduler+0xbc>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ade:	4b12      	ldr	r3, [pc, #72]	@ (8006b28 <vTaskStartScheduler+0xc0>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ae4:	f000 fe7c 	bl	80077e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ae8:	e00f      	b.n	8006b0a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d10b      	bne.n	8006b0a <vTaskStartScheduler+0xa2>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	60fb      	str	r3, [r7, #12]
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	e7fd      	b.n	8006b06 <vTaskStartScheduler+0x9e>
}
 8006b0a:	bf00      	nop
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	0800b128 	.word	0x0800b128
 8006b18:	080070d1 	.word	0x080070d1
 8006b1c:	20000834 	.word	0x20000834
 8006b20:	20000830 	.word	0x20000830
 8006b24:	2000081c 	.word	0x2000081c
 8006b28:	20000814 	.word	0x20000814

08006b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b30:	4b04      	ldr	r3, [pc, #16]	@ (8006b44 <vTaskSuspendAll+0x18>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3301      	adds	r3, #1
 8006b36:	4a03      	ldr	r2, [pc, #12]	@ (8006b44 <vTaskSuspendAll+0x18>)
 8006b38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b3a:	bf00      	nop
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	20000838 	.word	0x20000838

08006b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b56:	4b42      	ldr	r3, [pc, #264]	@ (8006c60 <xTaskResumeAll+0x118>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10b      	bne.n	8006b76 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	603b      	str	r3, [r7, #0]
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	e7fd      	b.n	8006b72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b76:	f000 fed7 	bl	8007928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b7a:	4b39      	ldr	r3, [pc, #228]	@ (8006c60 <xTaskResumeAll+0x118>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	4a37      	ldr	r2, [pc, #220]	@ (8006c60 <xTaskResumeAll+0x118>)
 8006b82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b84:	4b36      	ldr	r3, [pc, #216]	@ (8006c60 <xTaskResumeAll+0x118>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d161      	bne.n	8006c50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b8c:	4b35      	ldr	r3, [pc, #212]	@ (8006c64 <xTaskResumeAll+0x11c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d05d      	beq.n	8006c50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b94:	e02e      	b.n	8006bf4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b96:	4b34      	ldr	r3, [pc, #208]	@ (8006c68 <xTaskResumeAll+0x120>)
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3318      	adds	r3, #24
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe ff8e 	bl	8005ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fe ff89 	bl	8005ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	409a      	lsls	r2, r3
 8006bba:	4b2c      	ldr	r3, [pc, #176]	@ (8006c6c <xTaskResumeAll+0x124>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c6c <xTaskResumeAll+0x124>)
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4a27      	ldr	r2, [pc, #156]	@ (8006c70 <xTaskResumeAll+0x128>)
 8006bd2:	441a      	add	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f7fe ff15 	bl	8005a0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be4:	4b23      	ldr	r3, [pc, #140]	@ (8006c74 <xTaskResumeAll+0x12c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006bee:	4b22      	ldr	r3, [pc, #136]	@ (8006c78 <xTaskResumeAll+0x130>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c68 <xTaskResumeAll+0x120>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1cc      	bne.n	8006b96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c02:	f000 fb1b 	bl	800723c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c06:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <xTaskResumeAll+0x134>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d010      	beq.n	8006c34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c12:	f000 f837 	bl	8006c84 <xTaskIncrementTick>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c1c:	4b16      	ldr	r3, [pc, #88]	@ (8006c78 <xTaskResumeAll+0x130>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f1      	bne.n	8006c12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c2e:	4b13      	ldr	r3, [pc, #76]	@ (8006c7c <xTaskResumeAll+0x134>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c34:	4b10      	ldr	r3, [pc, #64]	@ (8006c78 <xTaskResumeAll+0x130>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c40:	4b0f      	ldr	r3, [pc, #60]	@ (8006c80 <xTaskResumeAll+0x138>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c50:	f000 fe9c 	bl	800798c <vPortExitCritical>

	return xAlreadyYielded;
 8006c54:	68bb      	ldr	r3, [r7, #8]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000838 	.word	0x20000838
 8006c64:	20000810 	.word	0x20000810
 8006c68:	200007d0 	.word	0x200007d0
 8006c6c:	20000818 	.word	0x20000818
 8006c70:	20000714 	.word	0x20000714
 8006c74:	20000710 	.word	0x20000710
 8006c78:	20000824 	.word	0x20000824
 8006c7c:	20000820 	.word	0x20000820
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c8e:	4b4f      	ldr	r3, [pc, #316]	@ (8006dcc <xTaskIncrementTick+0x148>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f040 808f 	bne.w	8006db6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c98:	4b4d      	ldr	r3, [pc, #308]	@ (8006dd0 <xTaskIncrementTick+0x14c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8006dd0 <xTaskIncrementTick+0x14c>)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d121      	bne.n	8006cf0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cac:	4b49      	ldr	r3, [pc, #292]	@ (8006dd4 <xTaskIncrementTick+0x150>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00b      	beq.n	8006cce <xTaskIncrementTick+0x4a>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	603b      	str	r3, [r7, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <xTaskIncrementTick+0x46>
 8006cce:	4b41      	ldr	r3, [pc, #260]	@ (8006dd4 <xTaskIncrementTick+0x150>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	4b40      	ldr	r3, [pc, #256]	@ (8006dd8 <xTaskIncrementTick+0x154>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a3e      	ldr	r2, [pc, #248]	@ (8006dd4 <xTaskIncrementTick+0x150>)
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	4a3e      	ldr	r2, [pc, #248]	@ (8006dd8 <xTaskIncrementTick+0x154>)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8006ddc <xTaskIncrementTick+0x158>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8006ddc <xTaskIncrementTick+0x158>)
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	f000 faa6 	bl	800723c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8006de0 <xTaskIncrementTick+0x15c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d348      	bcc.n	8006d8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cfa:	4b36      	ldr	r3, [pc, #216]	@ (8006dd4 <xTaskIncrementTick+0x150>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d04:	4b36      	ldr	r3, [pc, #216]	@ (8006de0 <xTaskIncrementTick+0x15c>)
 8006d06:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0a:	601a      	str	r2, [r3, #0]
					break;
 8006d0c:	e03e      	b.n	8006d8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0e:	4b31      	ldr	r3, [pc, #196]	@ (8006dd4 <xTaskIncrementTick+0x150>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d203      	bcs.n	8006d2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d26:	4a2e      	ldr	r2, [pc, #184]	@ (8006de0 <xTaskIncrementTick+0x15c>)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d2c:	e02e      	b.n	8006d8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	3304      	adds	r3, #4
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fec6 	bl	8005ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	3318      	adds	r3, #24
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe febd 	bl	8005ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	2201      	movs	r2, #1
 8006d50:	409a      	lsls	r2, r3
 8006d52:	4b24      	ldr	r3, [pc, #144]	@ (8006de4 <xTaskIncrementTick+0x160>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	4a22      	ldr	r2, [pc, #136]	@ (8006de4 <xTaskIncrementTick+0x160>)
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4a1f      	ldr	r2, [pc, #124]	@ (8006de8 <xTaskIncrementTick+0x164>)
 8006d6a:	441a      	add	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4619      	mov	r1, r3
 8006d72:	4610      	mov	r0, r2
 8006d74:	f7fe fe49 	bl	8005a0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dec <xTaskIncrementTick+0x168>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d3b9      	bcc.n	8006cfa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d86:	2301      	movs	r3, #1
 8006d88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d8a:	e7b6      	b.n	8006cfa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d8c:	4b17      	ldr	r3, [pc, #92]	@ (8006dec <xTaskIncrementTick+0x168>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d92:	4915      	ldr	r1, [pc, #84]	@ (8006de8 <xTaskIncrementTick+0x164>)
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d901      	bls.n	8006da8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006da8:	4b11      	ldr	r3, [pc, #68]	@ (8006df0 <xTaskIncrementTick+0x16c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d007      	beq.n	8006dc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e004      	b.n	8006dc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006db6:	4b0f      	ldr	r3, [pc, #60]	@ (8006df4 <xTaskIncrementTick+0x170>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8006df4 <xTaskIncrementTick+0x170>)
 8006dbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dc0:	697b      	ldr	r3, [r7, #20]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000838 	.word	0x20000838
 8006dd0:	20000814 	.word	0x20000814
 8006dd4:	200007c8 	.word	0x200007c8
 8006dd8:	200007cc 	.word	0x200007cc
 8006ddc:	20000828 	.word	0x20000828
 8006de0:	20000830 	.word	0x20000830
 8006de4:	20000818 	.word	0x20000818
 8006de8:	20000714 	.word	0x20000714
 8006dec:	20000710 	.word	0x20000710
 8006df0:	20000824 	.word	0x20000824
 8006df4:	20000820 	.word	0x20000820

08006df8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dfe:	4b27      	ldr	r3, [pc, #156]	@ (8006e9c <vTaskSwitchContext+0xa4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e06:	4b26      	ldr	r3, [pc, #152]	@ (8006ea0 <vTaskSwitchContext+0xa8>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e0c:	e040      	b.n	8006e90 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006e0e:	4b24      	ldr	r3, [pc, #144]	@ (8006ea0 <vTaskSwitchContext+0xa8>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e14:	4b23      	ldr	r3, [pc, #140]	@ (8006ea4 <vTaskSwitchContext+0xac>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	fab3 f383 	clz	r3, r3
 8006e20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e22:	7afb      	ldrb	r3, [r7, #11]
 8006e24:	f1c3 031f 	rsb	r3, r3, #31
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	491f      	ldr	r1, [pc, #124]	@ (8006ea8 <vTaskSwitchContext+0xb0>)
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10b      	bne.n	8006e56 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	607b      	str	r3, [r7, #4]
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	e7fd      	b.n	8006e52 <vTaskSwitchContext+0x5a>
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4a11      	ldr	r2, [pc, #68]	@ (8006ea8 <vTaskSwitchContext+0xb0>)
 8006e62:	4413      	add	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	605a      	str	r2, [r3, #4]
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3308      	adds	r3, #8
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d104      	bne.n	8006e86 <vTaskSwitchContext+0x8e>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	605a      	str	r2, [r3, #4]
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4a07      	ldr	r2, [pc, #28]	@ (8006eac <vTaskSwitchContext+0xb4>)
 8006e8e:	6013      	str	r3, [r2, #0]
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	20000838 	.word	0x20000838
 8006ea0:	20000824 	.word	0x20000824
 8006ea4:	20000818 	.word	0x20000818
 8006ea8:	20000714 	.word	0x20000714
 8006eac:	20000710 	.word	0x20000710

08006eb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	60fb      	str	r3, [r7, #12]
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ed8:	4b07      	ldr	r3, [pc, #28]	@ (8006ef8 <vTaskPlaceOnEventList+0x48>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3318      	adds	r3, #24
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7fe fdb6 	bl	8005a52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	6838      	ldr	r0, [r7, #0]
 8006eea:	f000 fb87 	bl	80075fc <prvAddCurrentTaskToDelayedList>
}
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000710 	.word	0x20000710

08006efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	60fb      	str	r3, [r7, #12]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3318      	adds	r3, #24
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fdc8 	bl	8005ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f34:	4b1d      	ldr	r3, [pc, #116]	@ (8006fac <xTaskRemoveFromEventList+0xb0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d11c      	bne.n	8006f76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	3304      	adds	r3, #4
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fdbf 	bl	8005ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	409a      	lsls	r2, r3
 8006f4e:	4b18      	ldr	r3, [pc, #96]	@ (8006fb0 <xTaskRemoveFromEventList+0xb4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	4a16      	ldr	r2, [pc, #88]	@ (8006fb0 <xTaskRemoveFromEventList+0xb4>)
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4a13      	ldr	r2, [pc, #76]	@ (8006fb4 <xTaskRemoveFromEventList+0xb8>)
 8006f66:	441a      	add	r2, r3
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	f7fe fd4b 	bl	8005a0a <vListInsertEnd>
 8006f74:	e005      	b.n	8006f82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3318      	adds	r3, #24
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	480e      	ldr	r0, [pc, #56]	@ (8006fb8 <xTaskRemoveFromEventList+0xbc>)
 8006f7e:	f7fe fd44 	bl	8005a0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f86:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <xTaskRemoveFromEventList+0xc0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d905      	bls.n	8006f9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f94:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc0 <xTaskRemoveFromEventList+0xc4>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	e001      	b.n	8006fa0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fa0:	697b      	ldr	r3, [r7, #20]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000838 	.word	0x20000838
 8006fb0:	20000818 	.word	0x20000818
 8006fb4:	20000714 	.word	0x20000714
 8006fb8:	200007d0 	.word	0x200007d0
 8006fbc:	20000710 	.word	0x20000710
 8006fc0:	20000824 	.word	0x20000824

08006fc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fcc:	4b06      	ldr	r3, [pc, #24]	@ (8006fe8 <vTaskInternalSetTimeOutState+0x24>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fd4:	4b05      	ldr	r3, [pc, #20]	@ (8006fec <vTaskInternalSetTimeOutState+0x28>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	605a      	str	r2, [r3, #4]
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	20000828 	.word	0x20000828
 8006fec:	20000814 	.word	0x20000814

08006ff0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10b      	bne.n	8007018 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60fb      	str	r3, [r7, #12]
}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	e7fd      	b.n	8007032 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007036:	f000 fc77 	bl	8007928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800703a:	4b1d      	ldr	r3, [pc, #116]	@ (80070b0 <xTaskCheckForTimeOut+0xc0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d102      	bne.n	800705a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007054:	2300      	movs	r3, #0
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	e023      	b.n	80070a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	4b15      	ldr	r3, [pc, #84]	@ (80070b4 <xTaskCheckForTimeOut+0xc4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d007      	beq.n	8007076 <xTaskCheckForTimeOut+0x86>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	429a      	cmp	r2, r3
 800706e:	d302      	bcc.n	8007076 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007070:	2301      	movs	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	e015      	b.n	80070a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	429a      	cmp	r2, r3
 800707e:	d20b      	bcs.n	8007098 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad2      	subs	r2, r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff ff99 	bl	8006fc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	61fb      	str	r3, [r7, #28]
 8007096:	e004      	b.n	80070a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800709e:	2301      	movs	r3, #1
 80070a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070a2:	f000 fc73 	bl	800798c <vPortExitCritical>

	return xReturn;
 80070a6:	69fb      	ldr	r3, [r7, #28]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3720      	adds	r7, #32
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000814 	.word	0x20000814
 80070b4:	20000828 	.word	0x20000828

080070b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070bc:	4b03      	ldr	r3, [pc, #12]	@ (80070cc <vTaskMissedYield+0x14>)
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
}
 80070c2:	bf00      	nop
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	20000824 	.word	0x20000824

080070d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070d8:	f000 f852 	bl	8007180 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <prvIdleTask+0x28>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d9f9      	bls.n	80070d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070e4:	4b05      	ldr	r3, [pc, #20]	@ (80070fc <prvIdleTask+0x2c>)
 80070e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070f4:	e7f0      	b.n	80070d8 <prvIdleTask+0x8>
 80070f6:	bf00      	nop
 80070f8:	20000714 	.word	0x20000714
 80070fc:	e000ed04 	.word	0xe000ed04

08007100 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007106:	2300      	movs	r3, #0
 8007108:	607b      	str	r3, [r7, #4]
 800710a:	e00c      	b.n	8007126 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	4613      	mov	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4a12      	ldr	r2, [pc, #72]	@ (8007160 <prvInitialiseTaskLists+0x60>)
 8007118:	4413      	add	r3, r2
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fc48 	bl	80059b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3301      	adds	r3, #1
 8007124:	607b      	str	r3, [r7, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b06      	cmp	r3, #6
 800712a:	d9ef      	bls.n	800710c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800712c:	480d      	ldr	r0, [pc, #52]	@ (8007164 <prvInitialiseTaskLists+0x64>)
 800712e:	f7fe fc3f 	bl	80059b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007132:	480d      	ldr	r0, [pc, #52]	@ (8007168 <prvInitialiseTaskLists+0x68>)
 8007134:	f7fe fc3c 	bl	80059b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007138:	480c      	ldr	r0, [pc, #48]	@ (800716c <prvInitialiseTaskLists+0x6c>)
 800713a:	f7fe fc39 	bl	80059b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800713e:	480c      	ldr	r0, [pc, #48]	@ (8007170 <prvInitialiseTaskLists+0x70>)
 8007140:	f7fe fc36 	bl	80059b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007144:	480b      	ldr	r0, [pc, #44]	@ (8007174 <prvInitialiseTaskLists+0x74>)
 8007146:	f7fe fc33 	bl	80059b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800714a:	4b0b      	ldr	r3, [pc, #44]	@ (8007178 <prvInitialiseTaskLists+0x78>)
 800714c:	4a05      	ldr	r2, [pc, #20]	@ (8007164 <prvInitialiseTaskLists+0x64>)
 800714e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007150:	4b0a      	ldr	r3, [pc, #40]	@ (800717c <prvInitialiseTaskLists+0x7c>)
 8007152:	4a05      	ldr	r2, [pc, #20]	@ (8007168 <prvInitialiseTaskLists+0x68>)
 8007154:	601a      	str	r2, [r3, #0]
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000714 	.word	0x20000714
 8007164:	200007a0 	.word	0x200007a0
 8007168:	200007b4 	.word	0x200007b4
 800716c:	200007d0 	.word	0x200007d0
 8007170:	200007e4 	.word	0x200007e4
 8007174:	200007fc 	.word	0x200007fc
 8007178:	200007c8 	.word	0x200007c8
 800717c:	200007cc 	.word	0x200007cc

08007180 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007186:	e019      	b.n	80071bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007188:	f000 fbce 	bl	8007928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800718c:	4b10      	ldr	r3, [pc, #64]	@ (80071d0 <prvCheckTasksWaitingTermination+0x50>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3304      	adds	r3, #4
 8007198:	4618      	mov	r0, r3
 800719a:	f7fe fc93 	bl	8005ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800719e:	4b0d      	ldr	r3, [pc, #52]	@ (80071d4 <prvCheckTasksWaitingTermination+0x54>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	4a0b      	ldr	r2, [pc, #44]	@ (80071d4 <prvCheckTasksWaitingTermination+0x54>)
 80071a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071a8:	4b0b      	ldr	r3, [pc, #44]	@ (80071d8 <prvCheckTasksWaitingTermination+0x58>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	4a0a      	ldr	r2, [pc, #40]	@ (80071d8 <prvCheckTasksWaitingTermination+0x58>)
 80071b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071b2:	f000 fbeb 	bl	800798c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f810 	bl	80071dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071bc:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <prvCheckTasksWaitingTermination+0x58>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e1      	bne.n	8007188 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	200007e4 	.word	0x200007e4
 80071d4:	20000810 	.word	0x20000810
 80071d8:	200007f8 	.word	0x200007f8

080071dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d108      	bne.n	8007200 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fd88 	bl	8007d08 <vPortFree>
				vPortFree( pxTCB );
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fd85 	bl	8007d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071fe:	e019      	b.n	8007234 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007206:	2b01      	cmp	r3, #1
 8007208:	d103      	bne.n	8007212 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fd7c 	bl	8007d08 <vPortFree>
	}
 8007210:	e010      	b.n	8007234 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007218:	2b02      	cmp	r3, #2
 800721a:	d00b      	beq.n	8007234 <prvDeleteTCB+0x58>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	60fb      	str	r3, [r7, #12]
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	e7fd      	b.n	8007230 <prvDeleteTCB+0x54>
	}
 8007234:	bf00      	nop
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007242:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <prvResetNextTaskUnblockTime+0x38>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d104      	bne.n	8007256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800724c:	4b0a      	ldr	r3, [pc, #40]	@ (8007278 <prvResetNextTaskUnblockTime+0x3c>)
 800724e:	f04f 32ff 	mov.w	r2, #4294967295
 8007252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007254:	e008      	b.n	8007268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <prvResetNextTaskUnblockTime+0x38>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4a04      	ldr	r2, [pc, #16]	@ (8007278 <prvResetNextTaskUnblockTime+0x3c>)
 8007266:	6013      	str	r3, [r2, #0]
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	200007c8 	.word	0x200007c8
 8007278:	20000830 	.word	0x20000830

0800727c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007282:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <xTaskGetSchedulerState+0x34>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d102      	bne.n	8007290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800728a:	2301      	movs	r3, #1
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	e008      	b.n	80072a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007290:	4b08      	ldr	r3, [pc, #32]	@ (80072b4 <xTaskGetSchedulerState+0x38>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007298:	2302      	movs	r3, #2
 800729a:	607b      	str	r3, [r7, #4]
 800729c:	e001      	b.n	80072a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800729e:	2300      	movs	r3, #0
 80072a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072a2:	687b      	ldr	r3, [r7, #4]
	}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	2000081c 	.word	0x2000081c
 80072b4:	20000838 	.word	0x20000838

080072b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d05e      	beq.n	800738c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d2:	4b31      	ldr	r3, [pc, #196]	@ (8007398 <xTaskPriorityInherit+0xe0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d8:	429a      	cmp	r2, r3
 80072da:	d24e      	bcs.n	800737a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db06      	blt.n	80072f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072e4:	4b2c      	ldr	r3, [pc, #176]	@ (8007398 <xTaskPriorityInherit+0xe0>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ea:	f1c3 0207 	rsb	r2, r3, #7
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6959      	ldr	r1, [r3, #20]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4a26      	ldr	r2, [pc, #152]	@ (800739c <xTaskPriorityInherit+0xe4>)
 8007304:	4413      	add	r3, r2
 8007306:	4299      	cmp	r1, r3
 8007308:	d12f      	bne.n	800736a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	3304      	adds	r3, #4
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fbd8 	bl	8005ac4 <uxListRemove>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731e:	2201      	movs	r2, #1
 8007320:	fa02 f303 	lsl.w	r3, r2, r3
 8007324:	43da      	mvns	r2, r3
 8007326:	4b1e      	ldr	r3, [pc, #120]	@ (80073a0 <xTaskPriorityInherit+0xe8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4013      	ands	r3, r2
 800732c:	4a1c      	ldr	r2, [pc, #112]	@ (80073a0 <xTaskPriorityInherit+0xe8>)
 800732e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007330:	4b19      	ldr	r3, [pc, #100]	@ (8007398 <xTaskPriorityInherit+0xe0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733e:	2201      	movs	r2, #1
 8007340:	409a      	lsls	r2, r3
 8007342:	4b17      	ldr	r3, [pc, #92]	@ (80073a0 <xTaskPriorityInherit+0xe8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4313      	orrs	r3, r2
 8007348:	4a15      	ldr	r2, [pc, #84]	@ (80073a0 <xTaskPriorityInherit+0xe8>)
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4a10      	ldr	r2, [pc, #64]	@ (800739c <xTaskPriorityInherit+0xe4>)
 800735a:	441a      	add	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f7fe fb51 	bl	8005a0a <vListInsertEnd>
 8007368:	e004      	b.n	8007374 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800736a:	4b0b      	ldr	r3, [pc, #44]	@ (8007398 <xTaskPriorityInherit+0xe0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007374:	2301      	movs	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e008      	b.n	800738c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800737e:	4b06      	ldr	r3, [pc, #24]	@ (8007398 <xTaskPriorityInherit+0xe0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007384:	429a      	cmp	r2, r3
 8007386:	d201      	bcs.n	800738c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007388:	2301      	movs	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800738c:	68fb      	ldr	r3, [r7, #12]
	}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000710 	.word	0x20000710
 800739c:	20000714 	.word	0x20000714
 80073a0:	20000818 	.word	0x20000818

080073a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d070      	beq.n	800749c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073ba:	4b3b      	ldr	r3, [pc, #236]	@ (80074a8 <xTaskPriorityDisinherit+0x104>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d00b      	beq.n	80073dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	60fb      	str	r3, [r7, #12]
}
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	e7fd      	b.n	80073d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10b      	bne.n	80073fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	60bb      	str	r3, [r7, #8]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007400:	1e5a      	subs	r2, r3, #1
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740e:	429a      	cmp	r2, r3
 8007410:	d044      	beq.n	800749c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007416:	2b00      	cmp	r3, #0
 8007418:	d140      	bne.n	800749c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	3304      	adds	r3, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fb50 	bl	8005ac4 <uxListRemove>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d115      	bne.n	8007456 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742e:	491f      	ldr	r1, [pc, #124]	@ (80074ac <xTaskPriorityDisinherit+0x108>)
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <xTaskPriorityDisinherit+0xb2>
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	2201      	movs	r2, #1
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43da      	mvns	r2, r3
 800744c:	4b18      	ldr	r3, [pc, #96]	@ (80074b0 <xTaskPriorityDisinherit+0x10c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4013      	ands	r3, r2
 8007452:	4a17      	ldr	r2, [pc, #92]	@ (80074b0 <xTaskPriorityDisinherit+0x10c>)
 8007454:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	f1c3 0207 	rsb	r2, r3, #7
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	2201      	movs	r2, #1
 8007470:	409a      	lsls	r2, r3
 8007472:	4b0f      	ldr	r3, [pc, #60]	@ (80074b0 <xTaskPriorityDisinherit+0x10c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4313      	orrs	r3, r2
 8007478:	4a0d      	ldr	r2, [pc, #52]	@ (80074b0 <xTaskPriorityDisinherit+0x10c>)
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4a08      	ldr	r2, [pc, #32]	@ (80074ac <xTaskPriorityDisinherit+0x108>)
 800748a:	441a      	add	r2, r3
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f7fe fab9 	bl	8005a0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007498:	2301      	movs	r3, #1
 800749a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800749c:	697b      	ldr	r3, [r7, #20]
	}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000710 	.word	0x20000710
 80074ac:	20000714 	.word	0x20000714
 80074b0:	20000818 	.word	0x20000818

080074b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074c2:	2301      	movs	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d079      	beq.n	80075c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10b      	bne.n	80074ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	60fb      	str	r3, [r7, #12]
}
 80074e6:	bf00      	nop
 80074e8:	bf00      	nop
 80074ea:	e7fd      	b.n	80074e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d902      	bls.n	80074fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	e002      	b.n	8007502 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007500:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007506:	69fa      	ldr	r2, [r7, #28]
 8007508:	429a      	cmp	r2, r3
 800750a:	d059      	beq.n	80075c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	429a      	cmp	r2, r3
 8007514:	d154      	bne.n	80075c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007516:	4b2c      	ldr	r3, [pc, #176]	@ (80075c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	d10b      	bne.n	8007538 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60bb      	str	r3, [r7, #8]
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	db04      	blt.n	8007556 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f1c3 0207 	rsb	r2, r3, #7
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	6959      	ldr	r1, [r3, #20]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4a19      	ldr	r2, [pc, #100]	@ (80075cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007566:	4413      	add	r3, r2
 8007568:	4299      	cmp	r1, r3
 800756a:	d129      	bne.n	80075c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	3304      	adds	r3, #4
 8007570:	4618      	mov	r0, r3
 8007572:	f7fe faa7 	bl	8005ac4 <uxListRemove>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	2201      	movs	r2, #1
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43da      	mvns	r2, r3
 8007588:	4b11      	ldr	r3, [pc, #68]	@ (80075d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4013      	ands	r3, r2
 800758e:	4a10      	ldr	r2, [pc, #64]	@ (80075d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007590:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	2201      	movs	r2, #1
 8007598:	409a      	lsls	r2, r3
 800759a:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4313      	orrs	r3, r2
 80075a0:	4a0b      	ldr	r2, [pc, #44]	@ (80075d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4a06      	ldr	r2, [pc, #24]	@ (80075cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80075b2:	441a      	add	r2, r3
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fe fa25 	bl	8005a0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075c0:	bf00      	nop
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000710 	.word	0x20000710
 80075cc:	20000714 	.word	0x20000714
 80075d0:	20000818 	.word	0x20000818

080075d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075d8:	4b07      	ldr	r3, [pc, #28]	@ (80075f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075e0:	4b05      	ldr	r3, [pc, #20]	@ (80075f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075e6:	3201      	adds	r2, #1
 80075e8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80075ea:	4b03      	ldr	r3, [pc, #12]	@ (80075f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80075ec:	681b      	ldr	r3, [r3, #0]
	}
 80075ee:	4618      	mov	r0, r3
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	20000710 	.word	0x20000710

080075fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007606:	4b29      	ldr	r3, [pc, #164]	@ (80076ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800760c:	4b28      	ldr	r3, [pc, #160]	@ (80076b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3304      	adds	r3, #4
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fa56 	bl	8005ac4 <uxListRemove>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800761e:	4b24      	ldr	r3, [pc, #144]	@ (80076b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007624:	2201      	movs	r2, #1
 8007626:	fa02 f303 	lsl.w	r3, r2, r3
 800762a:	43da      	mvns	r2, r3
 800762c:	4b21      	ldr	r3, [pc, #132]	@ (80076b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4013      	ands	r3, r2
 8007632:	4a20      	ldr	r2, [pc, #128]	@ (80076b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007634:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d10a      	bne.n	8007654 <prvAddCurrentTaskToDelayedList+0x58>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d007      	beq.n	8007654 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007644:	4b1a      	ldr	r3, [pc, #104]	@ (80076b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3304      	adds	r3, #4
 800764a:	4619      	mov	r1, r3
 800764c:	481a      	ldr	r0, [pc, #104]	@ (80076b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800764e:	f7fe f9dc 	bl	8005a0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007652:	e026      	b.n	80076a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4413      	add	r3, r2
 800765a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800765c:	4b14      	ldr	r3, [pc, #80]	@ (80076b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	429a      	cmp	r2, r3
 800766a:	d209      	bcs.n	8007680 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800766c:	4b13      	ldr	r3, [pc, #76]	@ (80076bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	4b0f      	ldr	r3, [pc, #60]	@ (80076b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3304      	adds	r3, #4
 8007676:	4619      	mov	r1, r3
 8007678:	4610      	mov	r0, r2
 800767a:	f7fe f9ea 	bl	8005a52 <vListInsert>
}
 800767e:	e010      	b.n	80076a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007680:	4b0f      	ldr	r3, [pc, #60]	@ (80076c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3304      	adds	r3, #4
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f7fe f9e0 	bl	8005a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007692:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	d202      	bcs.n	80076a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800769c:	4a09      	ldr	r2, [pc, #36]	@ (80076c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	6013      	str	r3, [r2, #0]
}
 80076a2:	bf00      	nop
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000814 	.word	0x20000814
 80076b0:	20000710 	.word	0x20000710
 80076b4:	20000818 	.word	0x20000818
 80076b8:	200007fc 	.word	0x200007fc
 80076bc:	200007cc 	.word	0x200007cc
 80076c0:	200007c8 	.word	0x200007c8
 80076c4:	20000830 	.word	0x20000830

080076c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3b04      	subs	r3, #4
 80076d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3b04      	subs	r3, #4
 80076e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f023 0201 	bic.w	r2, r3, #1
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3b04      	subs	r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076f8:	4a0c      	ldr	r2, [pc, #48]	@ (800772c <pxPortInitialiseStack+0x64>)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3b14      	subs	r3, #20
 8007702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3b04      	subs	r3, #4
 800770e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f06f 0202 	mvn.w	r2, #2
 8007716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3b20      	subs	r3, #32
 800771c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	08007731 	.word	0x08007731

08007730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800773a:	4b13      	ldr	r3, [pc, #76]	@ (8007788 <prvTaskExitError+0x58>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007742:	d00b      	beq.n	800775c <prvTaskExitError+0x2c>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	60fb      	str	r3, [r7, #12]
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	e7fd      	b.n	8007758 <prvTaskExitError+0x28>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	60bb      	str	r3, [r7, #8]
}
 800776e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007770:	bf00      	nop
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0fc      	beq.n	8007772 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	2000000c 	.word	0x2000000c
 800778c:	00000000 	.word	0x00000000

08007790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007790:	4b07      	ldr	r3, [pc, #28]	@ (80077b0 <pxCurrentTCBConst2>)
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f380 8809 	msr	PSP, r0
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8811 	msr	BASEPRI, r0
 80077aa:	4770      	bx	lr
 80077ac:	f3af 8000 	nop.w

080077b0 <pxCurrentTCBConst2>:
 80077b0:	20000710 	.word	0x20000710
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop

080077b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077b8:	4808      	ldr	r0, [pc, #32]	@ (80077dc <prvPortStartFirstTask+0x24>)
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	6800      	ldr	r0, [r0, #0]
 80077be:	f380 8808 	msr	MSP, r0
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8814 	msr	CONTROL, r0
 80077ca:	b662      	cpsie	i
 80077cc:	b661      	cpsie	f
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	df00      	svc	0
 80077d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077da:	bf00      	nop
 80077dc:	e000ed08 	.word	0xe000ed08

080077e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077e6:	4b47      	ldr	r3, [pc, #284]	@ (8007904 <xPortStartScheduler+0x124>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a47      	ldr	r2, [pc, #284]	@ (8007908 <xPortStartScheduler+0x128>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10b      	bne.n	8007808 <xPortStartScheduler+0x28>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	613b      	str	r3, [r7, #16]
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007808:	4b3e      	ldr	r3, [pc, #248]	@ (8007904 <xPortStartScheduler+0x124>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a3f      	ldr	r2, [pc, #252]	@ (800790c <xPortStartScheduler+0x12c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d10b      	bne.n	800782a <xPortStartScheduler+0x4a>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	60fb      	str	r3, [r7, #12]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800782a:	4b39      	ldr	r3, [pc, #228]	@ (8007910 <xPortStartScheduler+0x130>)
 800782c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	22ff      	movs	r2, #255	@ 0xff
 800783a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800784c:	b2da      	uxtb	r2, r3
 800784e:	4b31      	ldr	r3, [pc, #196]	@ (8007914 <xPortStartScheduler+0x134>)
 8007850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007852:	4b31      	ldr	r3, [pc, #196]	@ (8007918 <xPortStartScheduler+0x138>)
 8007854:	2207      	movs	r2, #7
 8007856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007858:	e009      	b.n	800786e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800785a:	4b2f      	ldr	r3, [pc, #188]	@ (8007918 <xPortStartScheduler+0x138>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3b01      	subs	r3, #1
 8007860:	4a2d      	ldr	r2, [pc, #180]	@ (8007918 <xPortStartScheduler+0x138>)
 8007862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007876:	2b80      	cmp	r3, #128	@ 0x80
 8007878:	d0ef      	beq.n	800785a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800787a:	4b27      	ldr	r3, [pc, #156]	@ (8007918 <xPortStartScheduler+0x138>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f1c3 0307 	rsb	r3, r3, #7
 8007882:	2b04      	cmp	r3, #4
 8007884:	d00b      	beq.n	800789e <xPortStartScheduler+0xbe>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60bb      	str	r3, [r7, #8]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800789e:	4b1e      	ldr	r3, [pc, #120]	@ (8007918 <xPortStartScheduler+0x138>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007918 <xPortStartScheduler+0x138>)
 80078a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007918 <xPortStartScheduler+0x138>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078b0:	4a19      	ldr	r2, [pc, #100]	@ (8007918 <xPortStartScheduler+0x138>)
 80078b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078bc:	4b17      	ldr	r3, [pc, #92]	@ (800791c <xPortStartScheduler+0x13c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a16      	ldr	r2, [pc, #88]	@ (800791c <xPortStartScheduler+0x13c>)
 80078c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078c8:	4b14      	ldr	r3, [pc, #80]	@ (800791c <xPortStartScheduler+0x13c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a13      	ldr	r2, [pc, #76]	@ (800791c <xPortStartScheduler+0x13c>)
 80078ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078d4:	f000 f8da 	bl	8007a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078d8:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <xPortStartScheduler+0x140>)
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078de:	f000 f8f9 	bl	8007ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078e2:	4b10      	ldr	r3, [pc, #64]	@ (8007924 <xPortStartScheduler+0x144>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007924 <xPortStartScheduler+0x144>)
 80078e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078ee:	f7ff ff63 	bl	80077b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078f2:	f7ff fa81 	bl	8006df8 <vTaskSwitchContext>
	prvTaskExitError();
 80078f6:	f7ff ff1b 	bl	8007730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	e000ed00 	.word	0xe000ed00
 8007908:	410fc271 	.word	0x410fc271
 800790c:	410fc270 	.word	0x410fc270
 8007910:	e000e400 	.word	0xe000e400
 8007914:	2000083c 	.word	0x2000083c
 8007918:	20000840 	.word	0x20000840
 800791c:	e000ed20 	.word	0xe000ed20
 8007920:	2000000c 	.word	0x2000000c
 8007924:	e000ef34 	.word	0xe000ef34

08007928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
}
 8007940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007942:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <vPortEnterCritical+0x5c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3301      	adds	r3, #1
 8007948:	4a0e      	ldr	r2, [pc, #56]	@ (8007984 <vPortEnterCritical+0x5c>)
 800794a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800794c:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <vPortEnterCritical+0x5c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d110      	bne.n	8007976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007954:	4b0c      	ldr	r3, [pc, #48]	@ (8007988 <vPortEnterCritical+0x60>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <vPortEnterCritical+0x4e>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	603b      	str	r3, [r7, #0]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <vPortEnterCritical+0x4a>
	}
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007992:	4b12      	ldr	r3, [pc, #72]	@ (80079dc <vPortExitCritical+0x50>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <vPortExitCritical+0x26>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	607b      	str	r3, [r7, #4]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079b2:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <vPortExitCritical+0x50>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	4a08      	ldr	r2, [pc, #32]	@ (80079dc <vPortExitCritical+0x50>)
 80079ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079bc:	4b07      	ldr	r3, [pc, #28]	@ (80079dc <vPortExitCritical+0x50>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <vPortExitCritical+0x44>
 80079c4:	2300      	movs	r3, #0
 80079c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f383 8811 	msr	BASEPRI, r3
}
 80079ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	2000000c 	.word	0x2000000c

080079e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079e0:	f3ef 8009 	mrs	r0, PSP
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <pxCurrentTCBConst>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	f01e 0f10 	tst.w	lr, #16
 80079f0:	bf08      	it	eq
 80079f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	6010      	str	r0, [r2, #0]
 80079fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a04:	f380 8811 	msr	BASEPRI, r0
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f7ff f9f2 	bl	8006df8 <vTaskSwitchContext>
 8007a14:	f04f 0000 	mov.w	r0, #0
 8007a18:	f380 8811 	msr	BASEPRI, r0
 8007a1c:	bc09      	pop	{r0, r3}
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	6808      	ldr	r0, [r1, #0]
 8007a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a26:	f01e 0f10 	tst.w	lr, #16
 8007a2a:	bf08      	it	eq
 8007a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a30:	f380 8809 	msr	PSP, r0
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w

08007a40 <pxCurrentTCBConst>:
 8007a40:	20000710 	.word	0x20000710
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	607b      	str	r3, [r7, #4]
}
 8007a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a62:	f7ff f90f 	bl	8006c84 <xTaskIncrementTick>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <xPortSysTickHandler+0x40>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	2300      	movs	r3, #0
 8007a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	f383 8811 	msr	BASEPRI, r3
}
 8007a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a90:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac0 <vPortSetupTimerInterrupt+0x34>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a96:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac4 <vPortSetupTimerInterrupt+0x38>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <vPortSetupTimerInterrupt+0x3c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8007acc <vPortSetupTimerInterrupt+0x40>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	099b      	lsrs	r3, r3, #6
 8007aa8:	4a09      	ldr	r2, [pc, #36]	@ (8007ad0 <vPortSetupTimerInterrupt+0x44>)
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aae:	4b04      	ldr	r3, [pc, #16]	@ (8007ac0 <vPortSetupTimerInterrupt+0x34>)
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	e000e010 	.word	0xe000e010
 8007ac4:	e000e018 	.word	0xe000e018
 8007ac8:	20000000 	.word	0x20000000
 8007acc:	10624dd3 	.word	0x10624dd3
 8007ad0:	e000e014 	.word	0xe000e014

08007ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ae4 <vPortEnableVFP+0x10>
 8007ad8:	6801      	ldr	r1, [r0, #0]
 8007ada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ade:	6001      	str	r1, [r0, #0]
 8007ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ae2:	bf00      	nop
 8007ae4:	e000ed88 	.word	0xe000ed88

08007ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007aee:	f3ef 8305 	mrs	r3, IPSR
 8007af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b0f      	cmp	r3, #15
 8007af8:	d915      	bls.n	8007b26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007afa:	4a18      	ldr	r2, [pc, #96]	@ (8007b5c <vPortValidateInterruptPriority+0x74>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b04:	4b16      	ldr	r3, [pc, #88]	@ (8007b60 <vPortValidateInterruptPriority+0x78>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	7afa      	ldrb	r2, [r7, #11]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d20b      	bcs.n	8007b26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	607b      	str	r3, [r7, #4]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b26:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <vPortValidateInterruptPriority+0x7c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b68 <vPortValidateInterruptPriority+0x80>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d90b      	bls.n	8007b4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	603b      	str	r3, [r7, #0]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vPortValidateInterruptPriority+0x62>
	}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	e000e3f0 	.word	0xe000e3f0
 8007b60:	2000083c 	.word	0x2000083c
 8007b64:	e000ed0c 	.word	0xe000ed0c
 8007b68:	20000840 	.word	0x20000840

08007b6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08a      	sub	sp, #40	@ 0x28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b78:	f7fe ffd8 	bl	8006b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8007cf0 <pvPortMalloc+0x184>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b84:	f000 f924 	bl	8007dd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b88:	4b5a      	ldr	r3, [pc, #360]	@ (8007cf4 <pvPortMalloc+0x188>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 8095 	bne.w	8007cc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01e      	beq.n	8007bda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d015      	beq.n	8007bda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f023 0307 	bic.w	r3, r3, #7
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <pvPortMalloc+0x6e>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	617b      	str	r3, [r7, #20]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d06f      	beq.n	8007cc0 <pvPortMalloc+0x154>
 8007be0:	4b45      	ldr	r3, [pc, #276]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d86a      	bhi.n	8007cc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bea:	4b44      	ldr	r3, [pc, #272]	@ (8007cfc <pvPortMalloc+0x190>)
 8007bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bee:	4b43      	ldr	r3, [pc, #268]	@ (8007cfc <pvPortMalloc+0x190>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf4:	e004      	b.n	8007c00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d903      	bls.n	8007c12 <pvPortMalloc+0xa6>
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f1      	bne.n	8007bf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <pvPortMalloc+0x184>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d051      	beq.n	8007cc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2208      	movs	r2, #8
 8007c22:	4413      	add	r3, r2
 8007c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	2308      	movs	r3, #8
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d920      	bls.n	8007c80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <pvPortMalloc+0xfc>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	613b      	str	r3, [r7, #16]
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c7a:	69b8      	ldr	r0, [r7, #24]
 8007c7c:	f000 f90a 	bl	8007e94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c80:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b1b      	ldr	r3, [pc, #108]	@ (8007d00 <pvPortMalloc+0x194>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d203      	bcs.n	8007ca2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c9a:	4b17      	ldr	r3, [pc, #92]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <pvPortMalloc+0x194>)
 8007ca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	4b13      	ldr	r3, [pc, #76]	@ (8007cf4 <pvPortMalloc+0x188>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	431a      	orrs	r2, r3
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cb6:	4b13      	ldr	r3, [pc, #76]	@ (8007d04 <pvPortMalloc+0x198>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	4a11      	ldr	r2, [pc, #68]	@ (8007d04 <pvPortMalloc+0x198>)
 8007cbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cc0:	f7fe ff42 	bl	8006b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <pvPortMalloc+0x17a>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	60fb      	str	r3, [r7, #12]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	@ 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	2000444c 	.word	0x2000444c
 8007cf4:	20004460 	.word	0x20004460
 8007cf8:	20004450 	.word	0x20004450
 8007cfc:	20004444 	.word	0x20004444
 8007d00:	20004454 	.word	0x20004454
 8007d04:	20004458 	.word	0x20004458

08007d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d04f      	beq.n	8007dba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	425b      	negs	r3, r3
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4413      	add	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b25      	ldr	r3, [pc, #148]	@ (8007dc4 <vPortFree+0xbc>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4013      	ands	r3, r2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <vPortFree+0x46>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	60fb      	str	r3, [r7, #12]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <vPortFree+0x66>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60bb      	str	r3, [r7, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	4b14      	ldr	r3, [pc, #80]	@ (8007dc4 <vPortFree+0xbc>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01e      	beq.n	8007dba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11a      	bne.n	8007dba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc4 <vPortFree+0xbc>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	401a      	ands	r2, r3
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d94:	f7fe feca 	bl	8006b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc8 <vPortFree+0xc0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4413      	add	r3, r2
 8007da2:	4a09      	ldr	r2, [pc, #36]	@ (8007dc8 <vPortFree+0xc0>)
 8007da4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007da6:	6938      	ldr	r0, [r7, #16]
 8007da8:	f000 f874 	bl	8007e94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <vPortFree+0xc4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4a06      	ldr	r2, [pc, #24]	@ (8007dcc <vPortFree+0xc4>)
 8007db4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007db6:	f7fe fec7 	bl	8006b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dba:	bf00      	nop
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20004460 	.word	0x20004460
 8007dc8:	20004450 	.word	0x20004450
 8007dcc:	2000445c 	.word	0x2000445c

08007dd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ddc:	4b27      	ldr	r3, [pc, #156]	@ (8007e7c <prvHeapInit+0xac>)
 8007dde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00c      	beq.n	8007e04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3307      	adds	r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0307 	bic.w	r3, r3, #7
 8007df6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007e7c <prvHeapInit+0xac>)
 8007e00:	4413      	add	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e08:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <prvHeapInit+0xb0>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007e80 <prvHeapInit+0xb0>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4413      	add	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1a9b      	subs	r3, r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a15      	ldr	r2, [pc, #84]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e32:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e3a:	4b12      	ldr	r3, [pc, #72]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e50:	4b0c      	ldr	r3, [pc, #48]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e88 <prvHeapInit+0xb8>)
 8007e5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	4a09      	ldr	r2, [pc, #36]	@ (8007e8c <prvHeapInit+0xbc>)
 8007e66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e68:	4b09      	ldr	r3, [pc, #36]	@ (8007e90 <prvHeapInit+0xc0>)
 8007e6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e6e:	601a      	str	r2, [r3, #0]
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	20000844 	.word	0x20000844
 8007e80:	20004444 	.word	0x20004444
 8007e84:	2000444c 	.word	0x2000444c
 8007e88:	20004454 	.word	0x20004454
 8007e8c:	20004450 	.word	0x20004450
 8007e90:	20004460 	.word	0x20004460

08007e94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e9c:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <prvInsertBlockIntoFreeList+0xac>)
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e002      	b.n	8007ea8 <prvInsertBlockIntoFreeList+0x14>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d8f7      	bhi.n	8007ea2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d108      	bne.n	8007ed6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	441a      	add	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d118      	bne.n	8007f1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b15      	ldr	r3, [pc, #84]	@ (8007f44 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d00d      	beq.n	8007f12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	441a      	add	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	e008      	b.n	8007f24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f12:	4b0c      	ldr	r3, [pc, #48]	@ (8007f44 <prvInsertBlockIntoFreeList+0xb0>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	e003      	b.n	8007f24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d002      	beq.n	8007f32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20004444 	.word	0x20004444
 8007f44:	2000444c 	.word	0x2000444c

08007f48 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8007f4e:	2300      	movs	r3, #0
 8007f50:	71fb      	strb	r3, [r7, #7]
 8007f52:	e026      	b.n	8007fa2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	3b50      	subs	r3, #80	@ 0x50
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f82b 	bl	8007fb8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8007f62:	2100      	movs	r1, #0
 8007f64:	2000      	movs	r0, #0
 8007f66:	f000 f827 	bl	8007fb8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	2010      	movs	r0, #16
 8007f6e:	f000 f823 	bl	8007fb8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8007f72:	2300      	movs	r3, #0
 8007f74:	71bb      	strb	r3, [r7, #6]
 8007f76:	e00d      	b.n	8007f94 <OLED_Refresh_Gram+0x4c>
 8007f78:	79ba      	ldrb	r2, [r7, #6]
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	490d      	ldr	r1, [pc, #52]	@ (8007fb4 <OLED_Refresh_Gram+0x6c>)
 8007f7e:	00d2      	lsls	r2, r2, #3
 8007f80:	440a      	add	r2, r1
 8007f82:	4413      	add	r3, r2
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2101      	movs	r1, #1
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 f815 	bl	8007fb8 <OLED_WR_Byte>
 8007f8e:	79bb      	ldrb	r3, [r7, #6]
 8007f90:	3301      	adds	r3, #1
 8007f92:	71bb      	strb	r3, [r7, #6]
 8007f94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	daed      	bge.n	8007f78 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	71fb      	strb	r3, [r7, #7]
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	2b07      	cmp	r3, #7
 8007fa6:	d9d5      	bls.n	8007f54 <OLED_Refresh_Gram+0xc>
	}   
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20004464 	.word	0x20004464

08007fb8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	460a      	mov	r2, r1
 8007fc2:	71fb      	strb	r3, [r7, #7]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8007fc8:	79bb      	ldrb	r3, [r7, #6]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d006      	beq.n	8007fdc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007fd4:	481c      	ldr	r0, [pc, #112]	@ (8008048 <OLED_WR_Byte+0x90>)
 8007fd6:	f7fa fe73 	bl	8002cc0 <HAL_GPIO_WritePin>
 8007fda:	e005      	b.n	8007fe8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007fe2:	4819      	ldr	r0, [pc, #100]	@ (8008048 <OLED_WR_Byte+0x90>)
 8007fe4:	f7fa fe6c 	bl	8002cc0 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
 8007fec:	e01e      	b.n	800802c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2120      	movs	r1, #32
 8007ff2:	4815      	ldr	r0, [pc, #84]	@ (8008048 <OLED_WR_Byte+0x90>)
 8007ff4:	f7fa fe64 	bl	8002cc0 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8007ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	da05      	bge.n	800800c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8008000:	2201      	movs	r2, #1
 8008002:	2140      	movs	r1, #64	@ 0x40
 8008004:	4810      	ldr	r0, [pc, #64]	@ (8008048 <OLED_WR_Byte+0x90>)
 8008006:	f7fa fe5b 	bl	8002cc0 <HAL_GPIO_WritePin>
 800800a:	e004      	b.n	8008016 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800800c:	2200      	movs	r2, #0
 800800e:	2140      	movs	r1, #64	@ 0x40
 8008010:	480d      	ldr	r0, [pc, #52]	@ (8008048 <OLED_WR_Byte+0x90>)
 8008012:	f7fa fe55 	bl	8002cc0 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8008016:	2201      	movs	r2, #1
 8008018:	2120      	movs	r1, #32
 800801a:	480b      	ldr	r0, [pc, #44]	@ (8008048 <OLED_WR_Byte+0x90>)
 800801c:	f7fa fe50 	bl	8002cc0 <HAL_GPIO_WritePin>
		dat<<=1;   
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	3301      	adds	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2b07      	cmp	r3, #7
 8008030:	d9dd      	bls.n	8007fee <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8008032:	2201      	movs	r2, #1
 8008034:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008038:	4803      	ldr	r0, [pc, #12]	@ (8008048 <OLED_WR_Byte+0x90>)
 800803a:	f7fa fe41 	bl	8002cc0 <HAL_GPIO_WritePin>
} 
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	40021000 	.word	0x40021000

0800804c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008052:	2300      	movs	r3, #0
 8008054:	71fb      	strb	r3, [r7, #7]
 8008056:	e014      	b.n	8008082 <OLED_Clear+0x36>
 8008058:	2300      	movs	r3, #0
 800805a:	71bb      	strb	r3, [r7, #6]
 800805c:	e00a      	b.n	8008074 <OLED_Clear+0x28>
 800805e:	79ba      	ldrb	r2, [r7, #6]
 8008060:	79fb      	ldrb	r3, [r7, #7]
 8008062:	490c      	ldr	r1, [pc, #48]	@ (8008094 <OLED_Clear+0x48>)
 8008064:	00d2      	lsls	r2, r2, #3
 8008066:	440a      	add	r2, r1
 8008068:	4413      	add	r3, r2
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	79bb      	ldrb	r3, [r7, #6]
 8008070:	3301      	adds	r3, #1
 8008072:	71bb      	strb	r3, [r7, #6]
 8008074:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008078:	2b00      	cmp	r3, #0
 800807a:	daf0      	bge.n	800805e <OLED_Clear+0x12>
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	3301      	adds	r3, #1
 8008080:	71fb      	strb	r3, [r7, #7]
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	2b07      	cmp	r3, #7
 8008086:	d9e7      	bls.n	8008058 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8008088:	f7ff ff5e 	bl	8007f48 <OLED_Refresh_Gram>
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20004464 	.word	0x20004464

08008098 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	71fb      	strb	r3, [r7, #7]
 80080a2:	460b      	mov	r3, r1
 80080a4:	71bb      	strb	r3, [r7, #6]
 80080a6:	4613      	mov	r3, r2
 80080a8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80080ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	db41      	blt.n	800813a <OLED_DrawPoint+0xa2>
 80080b6:	79bb      	ldrb	r3, [r7, #6]
 80080b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80080ba:	d83e      	bhi.n	800813a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80080bc:	79bb      	ldrb	r3, [r7, #6]
 80080be:	08db      	lsrs	r3, r3, #3
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f1c3 0307 	rsb	r3, r3, #7
 80080c6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80080c8:	79bb      	ldrb	r3, [r7, #6]
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80080d0:	7b7b      	ldrb	r3, [r7, #13]
 80080d2:	f1c3 0307 	rsb	r3, r3, #7
 80080d6:	2201      	movs	r2, #1
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80080de:	797b      	ldrb	r3, [r7, #5]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d012      	beq.n	800810a <OLED_DrawPoint+0x72>
 80080e4:	79fa      	ldrb	r2, [r7, #7]
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	4917      	ldr	r1, [pc, #92]	@ (8008148 <OLED_DrawPoint+0xb0>)
 80080ea:	00d2      	lsls	r2, r2, #3
 80080ec:	440a      	add	r2, r1
 80080ee:	4413      	add	r3, r2
 80080f0:	7818      	ldrb	r0, [r3, #0]
 80080f2:	79fa      	ldrb	r2, [r7, #7]
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	7bf9      	ldrb	r1, [r7, #15]
 80080f8:	4301      	orrs	r1, r0
 80080fa:	b2c8      	uxtb	r0, r1
 80080fc:	4912      	ldr	r1, [pc, #72]	@ (8008148 <OLED_DrawPoint+0xb0>)
 80080fe:	00d2      	lsls	r2, r2, #3
 8008100:	440a      	add	r2, r1
 8008102:	4413      	add	r3, r2
 8008104:	4602      	mov	r2, r0
 8008106:	701a      	strb	r2, [r3, #0]
 8008108:	e018      	b.n	800813c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800810a:	79fa      	ldrb	r2, [r7, #7]
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	490e      	ldr	r1, [pc, #56]	@ (8008148 <OLED_DrawPoint+0xb0>)
 8008110:	00d2      	lsls	r2, r2, #3
 8008112:	440a      	add	r2, r1
 8008114:	4413      	add	r3, r2
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	b25a      	sxtb	r2, r3
 800811a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800811e:	43db      	mvns	r3, r3
 8008120:	b25b      	sxtb	r3, r3
 8008122:	4013      	ands	r3, r2
 8008124:	b259      	sxtb	r1, r3
 8008126:	79fa      	ldrb	r2, [r7, #7]
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	b2c8      	uxtb	r0, r1
 800812c:	4906      	ldr	r1, [pc, #24]	@ (8008148 <OLED_DrawPoint+0xb0>)
 800812e:	00d2      	lsls	r2, r2, #3
 8008130:	440a      	add	r2, r1
 8008132:	4413      	add	r3, r2
 8008134:	4602      	mov	r2, r0
 8008136:	701a      	strb	r2, [r3, #0]
 8008138:	e000      	b.n	800813c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800813a:	bf00      	nop
}
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20004464 	.word	0x20004464

0800814c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800814c:	b590      	push	{r4, r7, lr}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	4611      	mov	r1, r2
 8008158:	461a      	mov	r2, r3
 800815a:	4623      	mov	r3, r4
 800815c:	71fb      	strb	r3, [r7, #7]
 800815e:	4603      	mov	r3, r0
 8008160:	71bb      	strb	r3, [r7, #6]
 8008162:	460b      	mov	r3, r1
 8008164:	717b      	strb	r3, [r7, #5]
 8008166:	4613      	mov	r3, r2
 8008168:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800816a:	79bb      	ldrb	r3, [r7, #6]
 800816c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800816e:	797b      	ldrb	r3, [r7, #5]
 8008170:	3b20      	subs	r3, #32
 8008172:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8008174:	2300      	movs	r3, #0
 8008176:	73bb      	strb	r3, [r7, #14]
 8008178:	e04d      	b.n	8008216 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800817a:	793b      	ldrb	r3, [r7, #4]
 800817c:	2b0c      	cmp	r3, #12
 800817e:	d10b      	bne.n	8008198 <OLED_ShowChar+0x4c>
 8008180:	797a      	ldrb	r2, [r7, #5]
 8008182:	7bb9      	ldrb	r1, [r7, #14]
 8008184:	4828      	ldr	r0, [pc, #160]	@ (8008228 <OLED_ShowChar+0xdc>)
 8008186:	4613      	mov	r3, r2
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4403      	add	r3, r0
 8008190:	440b      	add	r3, r1
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	73fb      	strb	r3, [r7, #15]
 8008196:	e007      	b.n	80081a8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8008198:	797a      	ldrb	r2, [r7, #5]
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	4923      	ldr	r1, [pc, #140]	@ (800822c <OLED_ShowChar+0xe0>)
 800819e:	0112      	lsls	r2, r2, #4
 80081a0:	440a      	add	r2, r1
 80081a2:	4413      	add	r3, r2
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80081a8:	2300      	movs	r3, #0
 80081aa:	737b      	strb	r3, [r7, #13]
 80081ac:	e02d      	b.n	800820a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80081ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	da07      	bge.n	80081c6 <OLED_ShowChar+0x7a>
 80081b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80081ba:	79b9      	ldrb	r1, [r7, #6]
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff ff6a 	bl	8008098 <OLED_DrawPoint>
 80081c4:	e00c      	b.n	80081e0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80081c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bf0c      	ite	eq
 80081ce:	2301      	moveq	r3, #1
 80081d0:	2300      	movne	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	79b9      	ldrb	r1, [r7, #6]
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff ff5c 	bl	8008098 <OLED_DrawPoint>
			temp<<=1;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	73fb      	strb	r3, [r7, #15]
			y++;
 80081e6:	79bb      	ldrb	r3, [r7, #6]
 80081e8:	3301      	adds	r3, #1
 80081ea:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80081ec:	79ba      	ldrb	r2, [r7, #6]
 80081ee:	7b3b      	ldrb	r3, [r7, #12]
 80081f0:	1ad2      	subs	r2, r2, r3
 80081f2:	793b      	ldrb	r3, [r7, #4]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d105      	bne.n	8008204 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80081f8:	7b3b      	ldrb	r3, [r7, #12]
 80081fa:	71bb      	strb	r3, [r7, #6]
				x++;
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	3301      	adds	r3, #1
 8008200:	71fb      	strb	r3, [r7, #7]
				break;
 8008202:	e005      	b.n	8008210 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8008204:	7b7b      	ldrb	r3, [r7, #13]
 8008206:	3301      	adds	r3, #1
 8008208:	737b      	strb	r3, [r7, #13]
 800820a:	7b7b      	ldrb	r3, [r7, #13]
 800820c:	2b07      	cmp	r3, #7
 800820e:	d9ce      	bls.n	80081ae <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	3301      	adds	r3, #1
 8008214:	73bb      	strb	r3, [r7, #14]
 8008216:	7bba      	ldrb	r2, [r7, #14]
 8008218:	793b      	ldrb	r3, [r7, #4]
 800821a:	429a      	cmp	r2, r3
 800821c:	d3ad      	bcc.n	800817a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	bd90      	pop	{r4, r7, pc}
 8008228:	0800b148 	.word	0x0800b148
 800822c:	0800b5bc 	.word	0x0800b5bc

08008230 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af02      	add	r7, sp, #8
 8008236:	4603      	mov	r3, r0
 8008238:	603a      	str	r2, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
 800823c:	460b      	mov	r3, r1
 800823e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8008240:	e01f      	b.n	8008282 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	2b7a      	cmp	r3, #122	@ 0x7a
 8008246:	d904      	bls.n	8008252 <OLED_ShowString+0x22>
 8008248:	2300      	movs	r3, #0
 800824a:	71fb      	strb	r3, [r7, #7]
 800824c:	79bb      	ldrb	r3, [r7, #6]
 800824e:	3310      	adds	r3, #16
 8008250:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8008252:	79bb      	ldrb	r3, [r7, #6]
 8008254:	2b3a      	cmp	r3, #58	@ 0x3a
 8008256:	d905      	bls.n	8008264 <OLED_ShowString+0x34>
 8008258:	2300      	movs	r3, #0
 800825a:	71fb      	strb	r3, [r7, #7]
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	71bb      	strb	r3, [r7, #6]
 8008260:	f7ff fef4 	bl	800804c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	781a      	ldrb	r2, [r3, #0]
 8008268:	79b9      	ldrb	r1, [r7, #6]
 800826a:	79f8      	ldrb	r0, [r7, #7]
 800826c:	2301      	movs	r3, #1
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	230c      	movs	r3, #12
 8008272:	f7ff ff6b 	bl	800814c <OLED_ShowChar>
        x+=8;
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	3308      	adds	r3, #8
 800827a:	71fb      	strb	r3, [r7, #7]
        p++;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	3301      	adds	r3, #1
 8008280:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1db      	bne.n	8008242 <OLED_ShowString+0x12>
    }  
}	 
 800828a:	bf00      	nop
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <OLED_Init>:

void OLED_Init(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8008298:	f7fa fd46 	bl	8002d28 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800829c:	4b41      	ldr	r3, [pc, #260]	@ (80083a4 <OLED_Init+0x110>)
 800829e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a0:	4a40      	ldr	r2, [pc, #256]	@ (80083a4 <OLED_Init+0x110>)
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a8:	4b3e      	ldr	r3, [pc, #248]	@ (80083a4 <OLED_Init+0x110>)
 80082aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ac:	4a3d      	ldr	r2, [pc, #244]	@ (80083a4 <OLED_Init+0x110>)
 80082ae:	f023 0304 	bic.w	r3, r3, #4
 80082b2:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80082b4:	f7fa fd4c 	bl	8002d50 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80082b8:	2200      	movs	r2, #0
 80082ba:	2180      	movs	r1, #128	@ 0x80
 80082bc:	483a      	ldr	r0, [pc, #232]	@ (80083a8 <OLED_Init+0x114>)
 80082be:	f7fa fcff 	bl	8002cc0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80082c2:	2064      	movs	r0, #100	@ 0x64
 80082c4:	f7fa f998 	bl	80025f8 <HAL_Delay>
	OLED_RST_Set();
 80082c8:	2201      	movs	r2, #1
 80082ca:	2180      	movs	r1, #128	@ 0x80
 80082cc:	4836      	ldr	r0, [pc, #216]	@ (80083a8 <OLED_Init+0x114>)
 80082ce:	f7fa fcf7 	bl	8002cc0 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80082d2:	2100      	movs	r1, #0
 80082d4:	20ae      	movs	r0, #174	@ 0xae
 80082d6:	f7ff fe6f 	bl	8007fb8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80082da:	2100      	movs	r1, #0
 80082dc:	20d5      	movs	r0, #213	@ 0xd5
 80082de:	f7ff fe6b 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80082e2:	2100      	movs	r1, #0
 80082e4:	2050      	movs	r0, #80	@ 0x50
 80082e6:	f7ff fe67 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80082ea:	2100      	movs	r1, #0
 80082ec:	20a8      	movs	r0, #168	@ 0xa8
 80082ee:	f7ff fe63 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80082f2:	2100      	movs	r1, #0
 80082f4:	203f      	movs	r0, #63	@ 0x3f
 80082f6:	f7ff fe5f 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80082fa:	2100      	movs	r1, #0
 80082fc:	20d3      	movs	r0, #211	@ 0xd3
 80082fe:	f7ff fe5b 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8008302:	2100      	movs	r1, #0
 8008304:	2000      	movs	r0, #0
 8008306:	f7ff fe57 	bl	8007fb8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800830a:	2100      	movs	r1, #0
 800830c:	2040      	movs	r0, #64	@ 0x40
 800830e:	f7ff fe53 	bl	8007fb8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8008312:	2100      	movs	r1, #0
 8008314:	208d      	movs	r0, #141	@ 0x8d
 8008316:	f7ff fe4f 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800831a:	2100      	movs	r1, #0
 800831c:	2014      	movs	r0, #20
 800831e:	f7ff fe4b 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8008322:	2100      	movs	r1, #0
 8008324:	2020      	movs	r0, #32
 8008326:	f7ff fe47 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800832a:	2100      	movs	r1, #0
 800832c:	2002      	movs	r0, #2
 800832e:	f7ff fe43 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8008332:	2100      	movs	r1, #0
 8008334:	20a1      	movs	r0, #161	@ 0xa1
 8008336:	f7ff fe3f 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800833a:	2100      	movs	r1, #0
 800833c:	20c0      	movs	r0, #192	@ 0xc0
 800833e:	f7ff fe3b 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8008342:	2100      	movs	r1, #0
 8008344:	20da      	movs	r0, #218	@ 0xda
 8008346:	f7ff fe37 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800834a:	2100      	movs	r1, #0
 800834c:	2012      	movs	r0, #18
 800834e:	f7ff fe33 	bl	8007fb8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8008352:	2100      	movs	r1, #0
 8008354:	2081      	movs	r0, #129	@ 0x81
 8008356:	f7ff fe2f 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800835a:	2100      	movs	r1, #0
 800835c:	20ef      	movs	r0, #239	@ 0xef
 800835e:	f7ff fe2b 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8008362:	2100      	movs	r1, #0
 8008364:	20d9      	movs	r0, #217	@ 0xd9
 8008366:	f7ff fe27 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800836a:	2100      	movs	r1, #0
 800836c:	20f1      	movs	r0, #241	@ 0xf1
 800836e:	f7ff fe23 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8008372:	2100      	movs	r1, #0
 8008374:	20db      	movs	r0, #219	@ 0xdb
 8008376:	f7ff fe1f 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800837a:	2100      	movs	r1, #0
 800837c:	2030      	movs	r0, #48	@ 0x30
 800837e:	f7ff fe1b 	bl	8007fb8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8008382:	2100      	movs	r1, #0
 8008384:	20a4      	movs	r0, #164	@ 0xa4
 8008386:	f7ff fe17 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800838a:	2100      	movs	r1, #0
 800838c:	20a6      	movs	r0, #166	@ 0xa6
 800838e:	f7ff fe13 	bl	8007fb8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8008392:	2100      	movs	r1, #0
 8008394:	20af      	movs	r0, #175	@ 0xaf
 8008396:	f7ff fe0f 	bl	8007fb8 <OLED_WR_Byte>
	OLED_Clear(); 
 800839a:	f7ff fe57 	bl	800804c <OLED_Clear>
 800839e:	bf00      	nop
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40023800 	.word	0x40023800
 80083a8:	40021000 	.word	0x40021000

080083ac <__cvt>:
 80083ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083b0:	ec57 6b10 	vmov	r6, r7, d0
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	460c      	mov	r4, r1
 80083b8:	4619      	mov	r1, r3
 80083ba:	463b      	mov	r3, r7
 80083bc:	bfbb      	ittet	lt
 80083be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80083c2:	461f      	movlt	r7, r3
 80083c4:	2300      	movge	r3, #0
 80083c6:	232d      	movlt	r3, #45	@ 0x2d
 80083c8:	700b      	strb	r3, [r1, #0]
 80083ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80083d0:	4691      	mov	r9, r2
 80083d2:	f023 0820 	bic.w	r8, r3, #32
 80083d6:	bfbc      	itt	lt
 80083d8:	4632      	movlt	r2, r6
 80083da:	4616      	movlt	r6, r2
 80083dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083e0:	d005      	beq.n	80083ee <__cvt+0x42>
 80083e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80083e6:	d100      	bne.n	80083ea <__cvt+0x3e>
 80083e8:	3401      	adds	r4, #1
 80083ea:	2102      	movs	r1, #2
 80083ec:	e000      	b.n	80083f0 <__cvt+0x44>
 80083ee:	2103      	movs	r1, #3
 80083f0:	ab03      	add	r3, sp, #12
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	ab02      	add	r3, sp, #8
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	ec47 6b10 	vmov	d0, r6, r7
 80083fc:	4653      	mov	r3, sl
 80083fe:	4622      	mov	r2, r4
 8008400:	f000 fe6a 	bl	80090d8 <_dtoa_r>
 8008404:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008408:	4605      	mov	r5, r0
 800840a:	d119      	bne.n	8008440 <__cvt+0x94>
 800840c:	f019 0f01 	tst.w	r9, #1
 8008410:	d00e      	beq.n	8008430 <__cvt+0x84>
 8008412:	eb00 0904 	add.w	r9, r0, r4
 8008416:	2200      	movs	r2, #0
 8008418:	2300      	movs	r3, #0
 800841a:	4630      	mov	r0, r6
 800841c:	4639      	mov	r1, r7
 800841e:	f7f8 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 8008422:	b108      	cbz	r0, 8008428 <__cvt+0x7c>
 8008424:	f8cd 900c 	str.w	r9, [sp, #12]
 8008428:	2230      	movs	r2, #48	@ 0x30
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	454b      	cmp	r3, r9
 800842e:	d31e      	bcc.n	800846e <__cvt+0xc2>
 8008430:	9b03      	ldr	r3, [sp, #12]
 8008432:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008434:	1b5b      	subs	r3, r3, r5
 8008436:	4628      	mov	r0, r5
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	b004      	add	sp, #16
 800843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008440:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008444:	eb00 0904 	add.w	r9, r0, r4
 8008448:	d1e5      	bne.n	8008416 <__cvt+0x6a>
 800844a:	7803      	ldrb	r3, [r0, #0]
 800844c:	2b30      	cmp	r3, #48	@ 0x30
 800844e:	d10a      	bne.n	8008466 <__cvt+0xba>
 8008450:	2200      	movs	r2, #0
 8008452:	2300      	movs	r3, #0
 8008454:	4630      	mov	r0, r6
 8008456:	4639      	mov	r1, r7
 8008458:	f7f8 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800845c:	b918      	cbnz	r0, 8008466 <__cvt+0xba>
 800845e:	f1c4 0401 	rsb	r4, r4, #1
 8008462:	f8ca 4000 	str.w	r4, [sl]
 8008466:	f8da 3000 	ldr.w	r3, [sl]
 800846a:	4499      	add	r9, r3
 800846c:	e7d3      	b.n	8008416 <__cvt+0x6a>
 800846e:	1c59      	adds	r1, r3, #1
 8008470:	9103      	str	r1, [sp, #12]
 8008472:	701a      	strb	r2, [r3, #0]
 8008474:	e7d9      	b.n	800842a <__cvt+0x7e>

08008476 <__exponent>:
 8008476:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008478:	2900      	cmp	r1, #0
 800847a:	bfba      	itte	lt
 800847c:	4249      	neglt	r1, r1
 800847e:	232d      	movlt	r3, #45	@ 0x2d
 8008480:	232b      	movge	r3, #43	@ 0x2b
 8008482:	2909      	cmp	r1, #9
 8008484:	7002      	strb	r2, [r0, #0]
 8008486:	7043      	strb	r3, [r0, #1]
 8008488:	dd29      	ble.n	80084de <__exponent+0x68>
 800848a:	f10d 0307 	add.w	r3, sp, #7
 800848e:	461d      	mov	r5, r3
 8008490:	270a      	movs	r7, #10
 8008492:	461a      	mov	r2, r3
 8008494:	fbb1 f6f7 	udiv	r6, r1, r7
 8008498:	fb07 1416 	mls	r4, r7, r6, r1
 800849c:	3430      	adds	r4, #48	@ 0x30
 800849e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80084a2:	460c      	mov	r4, r1
 80084a4:	2c63      	cmp	r4, #99	@ 0x63
 80084a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80084aa:	4631      	mov	r1, r6
 80084ac:	dcf1      	bgt.n	8008492 <__exponent+0x1c>
 80084ae:	3130      	adds	r1, #48	@ 0x30
 80084b0:	1e94      	subs	r4, r2, #2
 80084b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084b6:	1c41      	adds	r1, r0, #1
 80084b8:	4623      	mov	r3, r4
 80084ba:	42ab      	cmp	r3, r5
 80084bc:	d30a      	bcc.n	80084d4 <__exponent+0x5e>
 80084be:	f10d 0309 	add.w	r3, sp, #9
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	42ac      	cmp	r4, r5
 80084c6:	bf88      	it	hi
 80084c8:	2300      	movhi	r3, #0
 80084ca:	3302      	adds	r3, #2
 80084cc:	4403      	add	r3, r0
 80084ce:	1a18      	subs	r0, r3, r0
 80084d0:	b003      	add	sp, #12
 80084d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80084d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80084dc:	e7ed      	b.n	80084ba <__exponent+0x44>
 80084de:	2330      	movs	r3, #48	@ 0x30
 80084e0:	3130      	adds	r1, #48	@ 0x30
 80084e2:	7083      	strb	r3, [r0, #2]
 80084e4:	70c1      	strb	r1, [r0, #3]
 80084e6:	1d03      	adds	r3, r0, #4
 80084e8:	e7f1      	b.n	80084ce <__exponent+0x58>
	...

080084ec <_printf_float>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	b08d      	sub	sp, #52	@ 0x34
 80084f2:	460c      	mov	r4, r1
 80084f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80084f8:	4616      	mov	r6, r2
 80084fa:	461f      	mov	r7, r3
 80084fc:	4605      	mov	r5, r0
 80084fe:	f000 fcdb 	bl	8008eb8 <_localeconv_r>
 8008502:	6803      	ldr	r3, [r0, #0]
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	4618      	mov	r0, r3
 8008508:	f7f7 feb2 	bl	8000270 <strlen>
 800850c:	2300      	movs	r3, #0
 800850e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008510:	f8d8 3000 	ldr.w	r3, [r8]
 8008514:	9005      	str	r0, [sp, #20]
 8008516:	3307      	adds	r3, #7
 8008518:	f023 0307 	bic.w	r3, r3, #7
 800851c:	f103 0208 	add.w	r2, r3, #8
 8008520:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008524:	f8d4 b000 	ldr.w	fp, [r4]
 8008528:	f8c8 2000 	str.w	r2, [r8]
 800852c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008530:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	f8cd 8018 	str.w	r8, [sp, #24]
 800853a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800853e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008542:	4b9c      	ldr	r3, [pc, #624]	@ (80087b4 <_printf_float+0x2c8>)
 8008544:	f04f 32ff 	mov.w	r2, #4294967295
 8008548:	f7f8 faf0 	bl	8000b2c <__aeabi_dcmpun>
 800854c:	bb70      	cbnz	r0, 80085ac <_printf_float+0xc0>
 800854e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008552:	4b98      	ldr	r3, [pc, #608]	@ (80087b4 <_printf_float+0x2c8>)
 8008554:	f04f 32ff 	mov.w	r2, #4294967295
 8008558:	f7f8 faca 	bl	8000af0 <__aeabi_dcmple>
 800855c:	bb30      	cbnz	r0, 80085ac <_printf_float+0xc0>
 800855e:	2200      	movs	r2, #0
 8008560:	2300      	movs	r3, #0
 8008562:	4640      	mov	r0, r8
 8008564:	4649      	mov	r1, r9
 8008566:	f7f8 fab9 	bl	8000adc <__aeabi_dcmplt>
 800856a:	b110      	cbz	r0, 8008572 <_printf_float+0x86>
 800856c:	232d      	movs	r3, #45	@ 0x2d
 800856e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008572:	4a91      	ldr	r2, [pc, #580]	@ (80087b8 <_printf_float+0x2cc>)
 8008574:	4b91      	ldr	r3, [pc, #580]	@ (80087bc <_printf_float+0x2d0>)
 8008576:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800857a:	bf94      	ite	ls
 800857c:	4690      	movls	r8, r2
 800857e:	4698      	movhi	r8, r3
 8008580:	2303      	movs	r3, #3
 8008582:	6123      	str	r3, [r4, #16]
 8008584:	f02b 0304 	bic.w	r3, fp, #4
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	f04f 0900 	mov.w	r9, #0
 800858e:	9700      	str	r7, [sp, #0]
 8008590:	4633      	mov	r3, r6
 8008592:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008594:	4621      	mov	r1, r4
 8008596:	4628      	mov	r0, r5
 8008598:	f000 f9d2 	bl	8008940 <_printf_common>
 800859c:	3001      	adds	r0, #1
 800859e:	f040 808d 	bne.w	80086bc <_printf_float+0x1d0>
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295
 80085a6:	b00d      	add	sp, #52	@ 0x34
 80085a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ac:	4642      	mov	r2, r8
 80085ae:	464b      	mov	r3, r9
 80085b0:	4640      	mov	r0, r8
 80085b2:	4649      	mov	r1, r9
 80085b4:	f7f8 faba 	bl	8000b2c <__aeabi_dcmpun>
 80085b8:	b140      	cbz	r0, 80085cc <_printf_float+0xe0>
 80085ba:	464b      	mov	r3, r9
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bfbc      	itt	lt
 80085c0:	232d      	movlt	r3, #45	@ 0x2d
 80085c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80085c6:	4a7e      	ldr	r2, [pc, #504]	@ (80087c0 <_printf_float+0x2d4>)
 80085c8:	4b7e      	ldr	r3, [pc, #504]	@ (80087c4 <_printf_float+0x2d8>)
 80085ca:	e7d4      	b.n	8008576 <_printf_float+0x8a>
 80085cc:	6863      	ldr	r3, [r4, #4]
 80085ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80085d2:	9206      	str	r2, [sp, #24]
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	d13b      	bne.n	8008650 <_printf_float+0x164>
 80085d8:	2306      	movs	r3, #6
 80085da:	6063      	str	r3, [r4, #4]
 80085dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80085e0:	2300      	movs	r3, #0
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	9303      	str	r3, [sp, #12]
 80085e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80085e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80085ec:	ab09      	add	r3, sp, #36	@ 0x24
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	6861      	ldr	r1, [r4, #4]
 80085f2:	ec49 8b10 	vmov	d0, r8, r9
 80085f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80085fa:	4628      	mov	r0, r5
 80085fc:	f7ff fed6 	bl	80083ac <__cvt>
 8008600:	9b06      	ldr	r3, [sp, #24]
 8008602:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008604:	2b47      	cmp	r3, #71	@ 0x47
 8008606:	4680      	mov	r8, r0
 8008608:	d129      	bne.n	800865e <_printf_float+0x172>
 800860a:	1cc8      	adds	r0, r1, #3
 800860c:	db02      	blt.n	8008614 <_printf_float+0x128>
 800860e:	6863      	ldr	r3, [r4, #4]
 8008610:	4299      	cmp	r1, r3
 8008612:	dd41      	ble.n	8008698 <_printf_float+0x1ac>
 8008614:	f1aa 0a02 	sub.w	sl, sl, #2
 8008618:	fa5f fa8a 	uxtb.w	sl, sl
 800861c:	3901      	subs	r1, #1
 800861e:	4652      	mov	r2, sl
 8008620:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008624:	9109      	str	r1, [sp, #36]	@ 0x24
 8008626:	f7ff ff26 	bl	8008476 <__exponent>
 800862a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800862c:	1813      	adds	r3, r2, r0
 800862e:	2a01      	cmp	r2, #1
 8008630:	4681      	mov	r9, r0
 8008632:	6123      	str	r3, [r4, #16]
 8008634:	dc02      	bgt.n	800863c <_printf_float+0x150>
 8008636:	6822      	ldr	r2, [r4, #0]
 8008638:	07d2      	lsls	r2, r2, #31
 800863a:	d501      	bpl.n	8008640 <_printf_float+0x154>
 800863c:	3301      	adds	r3, #1
 800863e:	6123      	str	r3, [r4, #16]
 8008640:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0a2      	beq.n	800858e <_printf_float+0xa2>
 8008648:	232d      	movs	r3, #45	@ 0x2d
 800864a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800864e:	e79e      	b.n	800858e <_printf_float+0xa2>
 8008650:	9a06      	ldr	r2, [sp, #24]
 8008652:	2a47      	cmp	r2, #71	@ 0x47
 8008654:	d1c2      	bne.n	80085dc <_printf_float+0xf0>
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1c0      	bne.n	80085dc <_printf_float+0xf0>
 800865a:	2301      	movs	r3, #1
 800865c:	e7bd      	b.n	80085da <_printf_float+0xee>
 800865e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008662:	d9db      	bls.n	800861c <_printf_float+0x130>
 8008664:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008668:	d118      	bne.n	800869c <_printf_float+0x1b0>
 800866a:	2900      	cmp	r1, #0
 800866c:	6863      	ldr	r3, [r4, #4]
 800866e:	dd0b      	ble.n	8008688 <_printf_float+0x19c>
 8008670:	6121      	str	r1, [r4, #16]
 8008672:	b913      	cbnz	r3, 800867a <_printf_float+0x18e>
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	07d0      	lsls	r0, r2, #31
 8008678:	d502      	bpl.n	8008680 <_printf_float+0x194>
 800867a:	3301      	adds	r3, #1
 800867c:	440b      	add	r3, r1
 800867e:	6123      	str	r3, [r4, #16]
 8008680:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008682:	f04f 0900 	mov.w	r9, #0
 8008686:	e7db      	b.n	8008640 <_printf_float+0x154>
 8008688:	b913      	cbnz	r3, 8008690 <_printf_float+0x1a4>
 800868a:	6822      	ldr	r2, [r4, #0]
 800868c:	07d2      	lsls	r2, r2, #31
 800868e:	d501      	bpl.n	8008694 <_printf_float+0x1a8>
 8008690:	3302      	adds	r3, #2
 8008692:	e7f4      	b.n	800867e <_printf_float+0x192>
 8008694:	2301      	movs	r3, #1
 8008696:	e7f2      	b.n	800867e <_printf_float+0x192>
 8008698:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800869c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800869e:	4299      	cmp	r1, r3
 80086a0:	db05      	blt.n	80086ae <_printf_float+0x1c2>
 80086a2:	6823      	ldr	r3, [r4, #0]
 80086a4:	6121      	str	r1, [r4, #16]
 80086a6:	07d8      	lsls	r0, r3, #31
 80086a8:	d5ea      	bpl.n	8008680 <_printf_float+0x194>
 80086aa:	1c4b      	adds	r3, r1, #1
 80086ac:	e7e7      	b.n	800867e <_printf_float+0x192>
 80086ae:	2900      	cmp	r1, #0
 80086b0:	bfd4      	ite	le
 80086b2:	f1c1 0202 	rsble	r2, r1, #2
 80086b6:	2201      	movgt	r2, #1
 80086b8:	4413      	add	r3, r2
 80086ba:	e7e0      	b.n	800867e <_printf_float+0x192>
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	055a      	lsls	r2, r3, #21
 80086c0:	d407      	bmi.n	80086d2 <_printf_float+0x1e6>
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	4642      	mov	r2, r8
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	d12b      	bne.n	8008728 <_printf_float+0x23c>
 80086d0:	e767      	b.n	80085a2 <_printf_float+0xb6>
 80086d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086d6:	f240 80dd 	bls.w	8008894 <_printf_float+0x3a8>
 80086da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086de:	2200      	movs	r2, #0
 80086e0:	2300      	movs	r3, #0
 80086e2:	f7f8 f9f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d033      	beq.n	8008752 <_printf_float+0x266>
 80086ea:	4a37      	ldr	r2, [pc, #220]	@ (80087c8 <_printf_float+0x2dc>)
 80086ec:	2301      	movs	r3, #1
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	f43f af54 	beq.w	80085a2 <_printf_float+0xb6>
 80086fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80086fe:	4543      	cmp	r3, r8
 8008700:	db02      	blt.n	8008708 <_printf_float+0x21c>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	07d8      	lsls	r0, r3, #31
 8008706:	d50f      	bpl.n	8008728 <_printf_float+0x23c>
 8008708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	47b8      	blx	r7
 8008712:	3001      	adds	r0, #1
 8008714:	f43f af45 	beq.w	80085a2 <_printf_float+0xb6>
 8008718:	f04f 0900 	mov.w	r9, #0
 800871c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008720:	f104 0a1a 	add.w	sl, r4, #26
 8008724:	45c8      	cmp	r8, r9
 8008726:	dc09      	bgt.n	800873c <_printf_float+0x250>
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	079b      	lsls	r3, r3, #30
 800872c:	f100 8103 	bmi.w	8008936 <_printf_float+0x44a>
 8008730:	68e0      	ldr	r0, [r4, #12]
 8008732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008734:	4298      	cmp	r0, r3
 8008736:	bfb8      	it	lt
 8008738:	4618      	movlt	r0, r3
 800873a:	e734      	b.n	80085a6 <_printf_float+0xba>
 800873c:	2301      	movs	r3, #1
 800873e:	4652      	mov	r2, sl
 8008740:	4631      	mov	r1, r6
 8008742:	4628      	mov	r0, r5
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f af2b 	beq.w	80085a2 <_printf_float+0xb6>
 800874c:	f109 0901 	add.w	r9, r9, #1
 8008750:	e7e8      	b.n	8008724 <_printf_float+0x238>
 8008752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	dc39      	bgt.n	80087cc <_printf_float+0x2e0>
 8008758:	4a1b      	ldr	r2, [pc, #108]	@ (80087c8 <_printf_float+0x2dc>)
 800875a:	2301      	movs	r3, #1
 800875c:	4631      	mov	r1, r6
 800875e:	4628      	mov	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	f43f af1d 	beq.w	80085a2 <_printf_float+0xb6>
 8008768:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800876c:	ea59 0303 	orrs.w	r3, r9, r3
 8008770:	d102      	bne.n	8008778 <_printf_float+0x28c>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	07d9      	lsls	r1, r3, #31
 8008776:	d5d7      	bpl.n	8008728 <_printf_float+0x23c>
 8008778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800877c:	4631      	mov	r1, r6
 800877e:	4628      	mov	r0, r5
 8008780:	47b8      	blx	r7
 8008782:	3001      	adds	r0, #1
 8008784:	f43f af0d 	beq.w	80085a2 <_printf_float+0xb6>
 8008788:	f04f 0a00 	mov.w	sl, #0
 800878c:	f104 0b1a 	add.w	fp, r4, #26
 8008790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008792:	425b      	negs	r3, r3
 8008794:	4553      	cmp	r3, sl
 8008796:	dc01      	bgt.n	800879c <_printf_float+0x2b0>
 8008798:	464b      	mov	r3, r9
 800879a:	e793      	b.n	80086c4 <_printf_float+0x1d8>
 800879c:	2301      	movs	r3, #1
 800879e:	465a      	mov	r2, fp
 80087a0:	4631      	mov	r1, r6
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b8      	blx	r7
 80087a6:	3001      	adds	r0, #1
 80087a8:	f43f aefb 	beq.w	80085a2 <_printf_float+0xb6>
 80087ac:	f10a 0a01 	add.w	sl, sl, #1
 80087b0:	e7ee      	b.n	8008790 <_printf_float+0x2a4>
 80087b2:	bf00      	nop
 80087b4:	7fefffff 	.word	0x7fefffff
 80087b8:	0800bbac 	.word	0x0800bbac
 80087bc:	0800bbb0 	.word	0x0800bbb0
 80087c0:	0800bbb4 	.word	0x0800bbb4
 80087c4:	0800bbb8 	.word	0x0800bbb8
 80087c8:	0800bbbc 	.word	0x0800bbbc
 80087cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80087d2:	4553      	cmp	r3, sl
 80087d4:	bfa8      	it	ge
 80087d6:	4653      	movge	r3, sl
 80087d8:	2b00      	cmp	r3, #0
 80087da:	4699      	mov	r9, r3
 80087dc:	dc36      	bgt.n	800884c <_printf_float+0x360>
 80087de:	f04f 0b00 	mov.w	fp, #0
 80087e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087e6:	f104 021a 	add.w	r2, r4, #26
 80087ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087ec:	9306      	str	r3, [sp, #24]
 80087ee:	eba3 0309 	sub.w	r3, r3, r9
 80087f2:	455b      	cmp	r3, fp
 80087f4:	dc31      	bgt.n	800885a <_printf_float+0x36e>
 80087f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f8:	459a      	cmp	sl, r3
 80087fa:	dc3a      	bgt.n	8008872 <_printf_float+0x386>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	07da      	lsls	r2, r3, #31
 8008800:	d437      	bmi.n	8008872 <_printf_float+0x386>
 8008802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008804:	ebaa 0903 	sub.w	r9, sl, r3
 8008808:	9b06      	ldr	r3, [sp, #24]
 800880a:	ebaa 0303 	sub.w	r3, sl, r3
 800880e:	4599      	cmp	r9, r3
 8008810:	bfa8      	it	ge
 8008812:	4699      	movge	r9, r3
 8008814:	f1b9 0f00 	cmp.w	r9, #0
 8008818:	dc33      	bgt.n	8008882 <_printf_float+0x396>
 800881a:	f04f 0800 	mov.w	r8, #0
 800881e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008822:	f104 0b1a 	add.w	fp, r4, #26
 8008826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008828:	ebaa 0303 	sub.w	r3, sl, r3
 800882c:	eba3 0309 	sub.w	r3, r3, r9
 8008830:	4543      	cmp	r3, r8
 8008832:	f77f af79 	ble.w	8008728 <_printf_float+0x23c>
 8008836:	2301      	movs	r3, #1
 8008838:	465a      	mov	r2, fp
 800883a:	4631      	mov	r1, r6
 800883c:	4628      	mov	r0, r5
 800883e:	47b8      	blx	r7
 8008840:	3001      	adds	r0, #1
 8008842:	f43f aeae 	beq.w	80085a2 <_printf_float+0xb6>
 8008846:	f108 0801 	add.w	r8, r8, #1
 800884a:	e7ec      	b.n	8008826 <_printf_float+0x33a>
 800884c:	4642      	mov	r2, r8
 800884e:	4631      	mov	r1, r6
 8008850:	4628      	mov	r0, r5
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	d1c2      	bne.n	80087de <_printf_float+0x2f2>
 8008858:	e6a3      	b.n	80085a2 <_printf_float+0xb6>
 800885a:	2301      	movs	r3, #1
 800885c:	4631      	mov	r1, r6
 800885e:	4628      	mov	r0, r5
 8008860:	9206      	str	r2, [sp, #24]
 8008862:	47b8      	blx	r7
 8008864:	3001      	adds	r0, #1
 8008866:	f43f ae9c 	beq.w	80085a2 <_printf_float+0xb6>
 800886a:	9a06      	ldr	r2, [sp, #24]
 800886c:	f10b 0b01 	add.w	fp, fp, #1
 8008870:	e7bb      	b.n	80087ea <_printf_float+0x2fe>
 8008872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	47b8      	blx	r7
 800887c:	3001      	adds	r0, #1
 800887e:	d1c0      	bne.n	8008802 <_printf_float+0x316>
 8008880:	e68f      	b.n	80085a2 <_printf_float+0xb6>
 8008882:	9a06      	ldr	r2, [sp, #24]
 8008884:	464b      	mov	r3, r9
 8008886:	4442      	add	r2, r8
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	47b8      	blx	r7
 800888e:	3001      	adds	r0, #1
 8008890:	d1c3      	bne.n	800881a <_printf_float+0x32e>
 8008892:	e686      	b.n	80085a2 <_printf_float+0xb6>
 8008894:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008898:	f1ba 0f01 	cmp.w	sl, #1
 800889c:	dc01      	bgt.n	80088a2 <_printf_float+0x3b6>
 800889e:	07db      	lsls	r3, r3, #31
 80088a0:	d536      	bpl.n	8008910 <_printf_float+0x424>
 80088a2:	2301      	movs	r3, #1
 80088a4:	4642      	mov	r2, r8
 80088a6:	4631      	mov	r1, r6
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b8      	blx	r7
 80088ac:	3001      	adds	r0, #1
 80088ae:	f43f ae78 	beq.w	80085a2 <_printf_float+0xb6>
 80088b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b6:	4631      	mov	r1, r6
 80088b8:	4628      	mov	r0, r5
 80088ba:	47b8      	blx	r7
 80088bc:	3001      	adds	r0, #1
 80088be:	f43f ae70 	beq.w	80085a2 <_printf_float+0xb6>
 80088c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088c6:	2200      	movs	r2, #0
 80088c8:	2300      	movs	r3, #0
 80088ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088ce:	f7f8 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d2:	b9c0      	cbnz	r0, 8008906 <_printf_float+0x41a>
 80088d4:	4653      	mov	r3, sl
 80088d6:	f108 0201 	add.w	r2, r8, #1
 80088da:	4631      	mov	r1, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	d10c      	bne.n	80088fe <_printf_float+0x412>
 80088e4:	e65d      	b.n	80085a2 <_printf_float+0xb6>
 80088e6:	2301      	movs	r3, #1
 80088e8:	465a      	mov	r2, fp
 80088ea:	4631      	mov	r1, r6
 80088ec:	4628      	mov	r0, r5
 80088ee:	47b8      	blx	r7
 80088f0:	3001      	adds	r0, #1
 80088f2:	f43f ae56 	beq.w	80085a2 <_printf_float+0xb6>
 80088f6:	f108 0801 	add.w	r8, r8, #1
 80088fa:	45d0      	cmp	r8, sl
 80088fc:	dbf3      	blt.n	80088e6 <_printf_float+0x3fa>
 80088fe:	464b      	mov	r3, r9
 8008900:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008904:	e6df      	b.n	80086c6 <_printf_float+0x1da>
 8008906:	f04f 0800 	mov.w	r8, #0
 800890a:	f104 0b1a 	add.w	fp, r4, #26
 800890e:	e7f4      	b.n	80088fa <_printf_float+0x40e>
 8008910:	2301      	movs	r3, #1
 8008912:	4642      	mov	r2, r8
 8008914:	e7e1      	b.n	80088da <_printf_float+0x3ee>
 8008916:	2301      	movs	r3, #1
 8008918:	464a      	mov	r2, r9
 800891a:	4631      	mov	r1, r6
 800891c:	4628      	mov	r0, r5
 800891e:	47b8      	blx	r7
 8008920:	3001      	adds	r0, #1
 8008922:	f43f ae3e 	beq.w	80085a2 <_printf_float+0xb6>
 8008926:	f108 0801 	add.w	r8, r8, #1
 800892a:	68e3      	ldr	r3, [r4, #12]
 800892c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800892e:	1a5b      	subs	r3, r3, r1
 8008930:	4543      	cmp	r3, r8
 8008932:	dcf0      	bgt.n	8008916 <_printf_float+0x42a>
 8008934:	e6fc      	b.n	8008730 <_printf_float+0x244>
 8008936:	f04f 0800 	mov.w	r8, #0
 800893a:	f104 0919 	add.w	r9, r4, #25
 800893e:	e7f4      	b.n	800892a <_printf_float+0x43e>

08008940 <_printf_common>:
 8008940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008944:	4616      	mov	r6, r2
 8008946:	4698      	mov	r8, r3
 8008948:	688a      	ldr	r2, [r1, #8]
 800894a:	690b      	ldr	r3, [r1, #16]
 800894c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008950:	4293      	cmp	r3, r2
 8008952:	bfb8      	it	lt
 8008954:	4613      	movlt	r3, r2
 8008956:	6033      	str	r3, [r6, #0]
 8008958:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800895c:	4607      	mov	r7, r0
 800895e:	460c      	mov	r4, r1
 8008960:	b10a      	cbz	r2, 8008966 <_printf_common+0x26>
 8008962:	3301      	adds	r3, #1
 8008964:	6033      	str	r3, [r6, #0]
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	0699      	lsls	r1, r3, #26
 800896a:	bf42      	ittt	mi
 800896c:	6833      	ldrmi	r3, [r6, #0]
 800896e:	3302      	addmi	r3, #2
 8008970:	6033      	strmi	r3, [r6, #0]
 8008972:	6825      	ldr	r5, [r4, #0]
 8008974:	f015 0506 	ands.w	r5, r5, #6
 8008978:	d106      	bne.n	8008988 <_printf_common+0x48>
 800897a:	f104 0a19 	add.w	sl, r4, #25
 800897e:	68e3      	ldr	r3, [r4, #12]
 8008980:	6832      	ldr	r2, [r6, #0]
 8008982:	1a9b      	subs	r3, r3, r2
 8008984:	42ab      	cmp	r3, r5
 8008986:	dc26      	bgt.n	80089d6 <_printf_common+0x96>
 8008988:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800898c:	6822      	ldr	r2, [r4, #0]
 800898e:	3b00      	subs	r3, #0
 8008990:	bf18      	it	ne
 8008992:	2301      	movne	r3, #1
 8008994:	0692      	lsls	r2, r2, #26
 8008996:	d42b      	bmi.n	80089f0 <_printf_common+0xb0>
 8008998:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800899c:	4641      	mov	r1, r8
 800899e:	4638      	mov	r0, r7
 80089a0:	47c8      	blx	r9
 80089a2:	3001      	adds	r0, #1
 80089a4:	d01e      	beq.n	80089e4 <_printf_common+0xa4>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	6922      	ldr	r2, [r4, #16]
 80089aa:	f003 0306 	and.w	r3, r3, #6
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	bf02      	ittt	eq
 80089b2:	68e5      	ldreq	r5, [r4, #12]
 80089b4:	6833      	ldreq	r3, [r6, #0]
 80089b6:	1aed      	subeq	r5, r5, r3
 80089b8:	68a3      	ldr	r3, [r4, #8]
 80089ba:	bf0c      	ite	eq
 80089bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089c0:	2500      	movne	r5, #0
 80089c2:	4293      	cmp	r3, r2
 80089c4:	bfc4      	itt	gt
 80089c6:	1a9b      	subgt	r3, r3, r2
 80089c8:	18ed      	addgt	r5, r5, r3
 80089ca:	2600      	movs	r6, #0
 80089cc:	341a      	adds	r4, #26
 80089ce:	42b5      	cmp	r5, r6
 80089d0:	d11a      	bne.n	8008a08 <_printf_common+0xc8>
 80089d2:	2000      	movs	r0, #0
 80089d4:	e008      	b.n	80089e8 <_printf_common+0xa8>
 80089d6:	2301      	movs	r3, #1
 80089d8:	4652      	mov	r2, sl
 80089da:	4641      	mov	r1, r8
 80089dc:	4638      	mov	r0, r7
 80089de:	47c8      	blx	r9
 80089e0:	3001      	adds	r0, #1
 80089e2:	d103      	bne.n	80089ec <_printf_common+0xac>
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ec:	3501      	adds	r5, #1
 80089ee:	e7c6      	b.n	800897e <_printf_common+0x3e>
 80089f0:	18e1      	adds	r1, r4, r3
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	2030      	movs	r0, #48	@ 0x30
 80089f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089fa:	4422      	add	r2, r4
 80089fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a04:	3302      	adds	r3, #2
 8008a06:	e7c7      	b.n	8008998 <_printf_common+0x58>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4641      	mov	r1, r8
 8008a0e:	4638      	mov	r0, r7
 8008a10:	47c8      	blx	r9
 8008a12:	3001      	adds	r0, #1
 8008a14:	d0e6      	beq.n	80089e4 <_printf_common+0xa4>
 8008a16:	3601      	adds	r6, #1
 8008a18:	e7d9      	b.n	80089ce <_printf_common+0x8e>
	...

08008a1c <_printf_i>:
 8008a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a20:	7e0f      	ldrb	r7, [r1, #24]
 8008a22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a24:	2f78      	cmp	r7, #120	@ 0x78
 8008a26:	4691      	mov	r9, r2
 8008a28:	4680      	mov	r8, r0
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	469a      	mov	sl, r3
 8008a2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a32:	d807      	bhi.n	8008a44 <_printf_i+0x28>
 8008a34:	2f62      	cmp	r7, #98	@ 0x62
 8008a36:	d80a      	bhi.n	8008a4e <_printf_i+0x32>
 8008a38:	2f00      	cmp	r7, #0
 8008a3a:	f000 80d2 	beq.w	8008be2 <_printf_i+0x1c6>
 8008a3e:	2f58      	cmp	r7, #88	@ 0x58
 8008a40:	f000 80b9 	beq.w	8008bb6 <_printf_i+0x19a>
 8008a44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a4c:	e03a      	b.n	8008ac4 <_printf_i+0xa8>
 8008a4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a52:	2b15      	cmp	r3, #21
 8008a54:	d8f6      	bhi.n	8008a44 <_printf_i+0x28>
 8008a56:	a101      	add	r1, pc, #4	@ (adr r1, 8008a5c <_printf_i+0x40>)
 8008a58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a5c:	08008ab5 	.word	0x08008ab5
 8008a60:	08008ac9 	.word	0x08008ac9
 8008a64:	08008a45 	.word	0x08008a45
 8008a68:	08008a45 	.word	0x08008a45
 8008a6c:	08008a45 	.word	0x08008a45
 8008a70:	08008a45 	.word	0x08008a45
 8008a74:	08008ac9 	.word	0x08008ac9
 8008a78:	08008a45 	.word	0x08008a45
 8008a7c:	08008a45 	.word	0x08008a45
 8008a80:	08008a45 	.word	0x08008a45
 8008a84:	08008a45 	.word	0x08008a45
 8008a88:	08008bc9 	.word	0x08008bc9
 8008a8c:	08008af3 	.word	0x08008af3
 8008a90:	08008b83 	.word	0x08008b83
 8008a94:	08008a45 	.word	0x08008a45
 8008a98:	08008a45 	.word	0x08008a45
 8008a9c:	08008beb 	.word	0x08008beb
 8008aa0:	08008a45 	.word	0x08008a45
 8008aa4:	08008af3 	.word	0x08008af3
 8008aa8:	08008a45 	.word	0x08008a45
 8008aac:	08008a45 	.word	0x08008a45
 8008ab0:	08008b8b 	.word	0x08008b8b
 8008ab4:	6833      	ldr	r3, [r6, #0]
 8008ab6:	1d1a      	adds	r2, r3, #4
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6032      	str	r2, [r6, #0]
 8008abc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ac0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e09d      	b.n	8008c04 <_printf_i+0x1e8>
 8008ac8:	6833      	ldr	r3, [r6, #0]
 8008aca:	6820      	ldr	r0, [r4, #0]
 8008acc:	1d19      	adds	r1, r3, #4
 8008ace:	6031      	str	r1, [r6, #0]
 8008ad0:	0606      	lsls	r6, r0, #24
 8008ad2:	d501      	bpl.n	8008ad8 <_printf_i+0xbc>
 8008ad4:	681d      	ldr	r5, [r3, #0]
 8008ad6:	e003      	b.n	8008ae0 <_printf_i+0xc4>
 8008ad8:	0645      	lsls	r5, r0, #25
 8008ada:	d5fb      	bpl.n	8008ad4 <_printf_i+0xb8>
 8008adc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ae0:	2d00      	cmp	r5, #0
 8008ae2:	da03      	bge.n	8008aec <_printf_i+0xd0>
 8008ae4:	232d      	movs	r3, #45	@ 0x2d
 8008ae6:	426d      	negs	r5, r5
 8008ae8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aec:	4859      	ldr	r0, [pc, #356]	@ (8008c54 <_printf_i+0x238>)
 8008aee:	230a      	movs	r3, #10
 8008af0:	e011      	b.n	8008b16 <_printf_i+0xfa>
 8008af2:	6821      	ldr	r1, [r4, #0]
 8008af4:	6833      	ldr	r3, [r6, #0]
 8008af6:	0608      	lsls	r0, r1, #24
 8008af8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008afc:	d402      	bmi.n	8008b04 <_printf_i+0xe8>
 8008afe:	0649      	lsls	r1, r1, #25
 8008b00:	bf48      	it	mi
 8008b02:	b2ad      	uxthmi	r5, r5
 8008b04:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b06:	4853      	ldr	r0, [pc, #332]	@ (8008c54 <_printf_i+0x238>)
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	bf14      	ite	ne
 8008b0c:	230a      	movne	r3, #10
 8008b0e:	2308      	moveq	r3, #8
 8008b10:	2100      	movs	r1, #0
 8008b12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b16:	6866      	ldr	r6, [r4, #4]
 8008b18:	60a6      	str	r6, [r4, #8]
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	bfa2      	ittt	ge
 8008b1e:	6821      	ldrge	r1, [r4, #0]
 8008b20:	f021 0104 	bicge.w	r1, r1, #4
 8008b24:	6021      	strge	r1, [r4, #0]
 8008b26:	b90d      	cbnz	r5, 8008b2c <_printf_i+0x110>
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	d04b      	beq.n	8008bc4 <_printf_i+0x1a8>
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b32:	fb03 5711 	mls	r7, r3, r1, r5
 8008b36:	5dc7      	ldrb	r7, [r0, r7]
 8008b38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b3c:	462f      	mov	r7, r5
 8008b3e:	42bb      	cmp	r3, r7
 8008b40:	460d      	mov	r5, r1
 8008b42:	d9f4      	bls.n	8008b2e <_printf_i+0x112>
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d10b      	bne.n	8008b60 <_printf_i+0x144>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	07df      	lsls	r7, r3, #31
 8008b4c:	d508      	bpl.n	8008b60 <_printf_i+0x144>
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	6861      	ldr	r1, [r4, #4]
 8008b52:	4299      	cmp	r1, r3
 8008b54:	bfde      	ittt	le
 8008b56:	2330      	movle	r3, #48	@ 0x30
 8008b58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b60:	1b92      	subs	r2, r2, r6
 8008b62:	6122      	str	r2, [r4, #16]
 8008b64:	f8cd a000 	str.w	sl, [sp]
 8008b68:	464b      	mov	r3, r9
 8008b6a:	aa03      	add	r2, sp, #12
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4640      	mov	r0, r8
 8008b70:	f7ff fee6 	bl	8008940 <_printf_common>
 8008b74:	3001      	adds	r0, #1
 8008b76:	d14a      	bne.n	8008c0e <_printf_i+0x1f2>
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	b004      	add	sp, #16
 8008b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	f043 0320 	orr.w	r3, r3, #32
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	4833      	ldr	r0, [pc, #204]	@ (8008c58 <_printf_i+0x23c>)
 8008b8c:	2778      	movs	r7, #120	@ 0x78
 8008b8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	6831      	ldr	r1, [r6, #0]
 8008b96:	061f      	lsls	r7, r3, #24
 8008b98:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b9c:	d402      	bmi.n	8008ba4 <_printf_i+0x188>
 8008b9e:	065f      	lsls	r7, r3, #25
 8008ba0:	bf48      	it	mi
 8008ba2:	b2ad      	uxthmi	r5, r5
 8008ba4:	6031      	str	r1, [r6, #0]
 8008ba6:	07d9      	lsls	r1, r3, #31
 8008ba8:	bf44      	itt	mi
 8008baa:	f043 0320 	orrmi.w	r3, r3, #32
 8008bae:	6023      	strmi	r3, [r4, #0]
 8008bb0:	b11d      	cbz	r5, 8008bba <_printf_i+0x19e>
 8008bb2:	2310      	movs	r3, #16
 8008bb4:	e7ac      	b.n	8008b10 <_printf_i+0xf4>
 8008bb6:	4827      	ldr	r0, [pc, #156]	@ (8008c54 <_printf_i+0x238>)
 8008bb8:	e7e9      	b.n	8008b8e <_printf_i+0x172>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	f023 0320 	bic.w	r3, r3, #32
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	e7f6      	b.n	8008bb2 <_printf_i+0x196>
 8008bc4:	4616      	mov	r6, r2
 8008bc6:	e7bd      	b.n	8008b44 <_printf_i+0x128>
 8008bc8:	6833      	ldr	r3, [r6, #0]
 8008bca:	6825      	ldr	r5, [r4, #0]
 8008bcc:	6961      	ldr	r1, [r4, #20]
 8008bce:	1d18      	adds	r0, r3, #4
 8008bd0:	6030      	str	r0, [r6, #0]
 8008bd2:	062e      	lsls	r6, r5, #24
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	d501      	bpl.n	8008bdc <_printf_i+0x1c0>
 8008bd8:	6019      	str	r1, [r3, #0]
 8008bda:	e002      	b.n	8008be2 <_printf_i+0x1c6>
 8008bdc:	0668      	lsls	r0, r5, #25
 8008bde:	d5fb      	bpl.n	8008bd8 <_printf_i+0x1bc>
 8008be0:	8019      	strh	r1, [r3, #0]
 8008be2:	2300      	movs	r3, #0
 8008be4:	6123      	str	r3, [r4, #16]
 8008be6:	4616      	mov	r6, r2
 8008be8:	e7bc      	b.n	8008b64 <_printf_i+0x148>
 8008bea:	6833      	ldr	r3, [r6, #0]
 8008bec:	1d1a      	adds	r2, r3, #4
 8008bee:	6032      	str	r2, [r6, #0]
 8008bf0:	681e      	ldr	r6, [r3, #0]
 8008bf2:	6862      	ldr	r2, [r4, #4]
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7f7 faea 	bl	80001d0 <memchr>
 8008bfc:	b108      	cbz	r0, 8008c02 <_printf_i+0x1e6>
 8008bfe:	1b80      	subs	r0, r0, r6
 8008c00:	6060      	str	r0, [r4, #4]
 8008c02:	6863      	ldr	r3, [r4, #4]
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	2300      	movs	r3, #0
 8008c08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c0c:	e7aa      	b.n	8008b64 <_printf_i+0x148>
 8008c0e:	6923      	ldr	r3, [r4, #16]
 8008c10:	4632      	mov	r2, r6
 8008c12:	4649      	mov	r1, r9
 8008c14:	4640      	mov	r0, r8
 8008c16:	47d0      	blx	sl
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d0ad      	beq.n	8008b78 <_printf_i+0x15c>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	079b      	lsls	r3, r3, #30
 8008c20:	d413      	bmi.n	8008c4a <_printf_i+0x22e>
 8008c22:	68e0      	ldr	r0, [r4, #12]
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	4298      	cmp	r0, r3
 8008c28:	bfb8      	it	lt
 8008c2a:	4618      	movlt	r0, r3
 8008c2c:	e7a6      	b.n	8008b7c <_printf_i+0x160>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4632      	mov	r2, r6
 8008c32:	4649      	mov	r1, r9
 8008c34:	4640      	mov	r0, r8
 8008c36:	47d0      	blx	sl
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d09d      	beq.n	8008b78 <_printf_i+0x15c>
 8008c3c:	3501      	adds	r5, #1
 8008c3e:	68e3      	ldr	r3, [r4, #12]
 8008c40:	9903      	ldr	r1, [sp, #12]
 8008c42:	1a5b      	subs	r3, r3, r1
 8008c44:	42ab      	cmp	r3, r5
 8008c46:	dcf2      	bgt.n	8008c2e <_printf_i+0x212>
 8008c48:	e7eb      	b.n	8008c22 <_printf_i+0x206>
 8008c4a:	2500      	movs	r5, #0
 8008c4c:	f104 0619 	add.w	r6, r4, #25
 8008c50:	e7f5      	b.n	8008c3e <_printf_i+0x222>
 8008c52:	bf00      	nop
 8008c54:	0800bbbe 	.word	0x0800bbbe
 8008c58:	0800bbcf 	.word	0x0800bbcf

08008c5c <std>:
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	4604      	mov	r4, r0
 8008c62:	e9c0 3300 	strd	r3, r3, [r0]
 8008c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c6a:	6083      	str	r3, [r0, #8]
 8008c6c:	8181      	strh	r1, [r0, #12]
 8008c6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c70:	81c2      	strh	r2, [r0, #14]
 8008c72:	6183      	str	r3, [r0, #24]
 8008c74:	4619      	mov	r1, r3
 8008c76:	2208      	movs	r2, #8
 8008c78:	305c      	adds	r0, #92	@ 0x5c
 8008c7a:	f000 f914 	bl	8008ea6 <memset>
 8008c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb4 <std+0x58>)
 8008c80:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c82:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb8 <std+0x5c>)
 8008c84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c86:	4b0d      	ldr	r3, [pc, #52]	@ (8008cbc <std+0x60>)
 8008c88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc0 <std+0x64>)
 8008c8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc4 <std+0x68>)
 8008c90:	6224      	str	r4, [r4, #32]
 8008c92:	429c      	cmp	r4, r3
 8008c94:	d006      	beq.n	8008ca4 <std+0x48>
 8008c96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c9a:	4294      	cmp	r4, r2
 8008c9c:	d002      	beq.n	8008ca4 <std+0x48>
 8008c9e:	33d0      	adds	r3, #208	@ 0xd0
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d105      	bne.n	8008cb0 <std+0x54>
 8008ca4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cac:	f000 b978 	b.w	8008fa0 <__retarget_lock_init_recursive>
 8008cb0:	bd10      	pop	{r4, pc}
 8008cb2:	bf00      	nop
 8008cb4:	08008e21 	.word	0x08008e21
 8008cb8:	08008e43 	.word	0x08008e43
 8008cbc:	08008e7b 	.word	0x08008e7b
 8008cc0:	08008e9f 	.word	0x08008e9f
 8008cc4:	20004864 	.word	0x20004864

08008cc8 <stdio_exit_handler>:
 8008cc8:	4a02      	ldr	r2, [pc, #8]	@ (8008cd4 <stdio_exit_handler+0xc>)
 8008cca:	4903      	ldr	r1, [pc, #12]	@ (8008cd8 <stdio_exit_handler+0x10>)
 8008ccc:	4803      	ldr	r0, [pc, #12]	@ (8008cdc <stdio_exit_handler+0x14>)
 8008cce:	f000 b869 	b.w	8008da4 <_fwalk_sglue>
 8008cd2:	bf00      	nop
 8008cd4:	20000010 	.word	0x20000010
 8008cd8:	0800a91d 	.word	0x0800a91d
 8008cdc:	20000020 	.word	0x20000020

08008ce0 <cleanup_stdio>:
 8008ce0:	6841      	ldr	r1, [r0, #4]
 8008ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d14 <cleanup_stdio+0x34>)
 8008ce4:	4299      	cmp	r1, r3
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	4604      	mov	r4, r0
 8008cea:	d001      	beq.n	8008cf0 <cleanup_stdio+0x10>
 8008cec:	f001 fe16 	bl	800a91c <_fflush_r>
 8008cf0:	68a1      	ldr	r1, [r4, #8]
 8008cf2:	4b09      	ldr	r3, [pc, #36]	@ (8008d18 <cleanup_stdio+0x38>)
 8008cf4:	4299      	cmp	r1, r3
 8008cf6:	d002      	beq.n	8008cfe <cleanup_stdio+0x1e>
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f001 fe0f 	bl	800a91c <_fflush_r>
 8008cfe:	68e1      	ldr	r1, [r4, #12]
 8008d00:	4b06      	ldr	r3, [pc, #24]	@ (8008d1c <cleanup_stdio+0x3c>)
 8008d02:	4299      	cmp	r1, r3
 8008d04:	d004      	beq.n	8008d10 <cleanup_stdio+0x30>
 8008d06:	4620      	mov	r0, r4
 8008d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d0c:	f001 be06 	b.w	800a91c <_fflush_r>
 8008d10:	bd10      	pop	{r4, pc}
 8008d12:	bf00      	nop
 8008d14:	20004864 	.word	0x20004864
 8008d18:	200048cc 	.word	0x200048cc
 8008d1c:	20004934 	.word	0x20004934

08008d20 <global_stdio_init.part.0>:
 8008d20:	b510      	push	{r4, lr}
 8008d22:	4b0b      	ldr	r3, [pc, #44]	@ (8008d50 <global_stdio_init.part.0+0x30>)
 8008d24:	4c0b      	ldr	r4, [pc, #44]	@ (8008d54 <global_stdio_init.part.0+0x34>)
 8008d26:	4a0c      	ldr	r2, [pc, #48]	@ (8008d58 <global_stdio_init.part.0+0x38>)
 8008d28:	601a      	str	r2, [r3, #0]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2104      	movs	r1, #4
 8008d30:	f7ff ff94 	bl	8008c5c <std>
 8008d34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d38:	2201      	movs	r2, #1
 8008d3a:	2109      	movs	r1, #9
 8008d3c:	f7ff ff8e 	bl	8008c5c <std>
 8008d40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d44:	2202      	movs	r2, #2
 8008d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4a:	2112      	movs	r1, #18
 8008d4c:	f7ff bf86 	b.w	8008c5c <std>
 8008d50:	2000499c 	.word	0x2000499c
 8008d54:	20004864 	.word	0x20004864
 8008d58:	08008cc9 	.word	0x08008cc9

08008d5c <__sfp_lock_acquire>:
 8008d5c:	4801      	ldr	r0, [pc, #4]	@ (8008d64 <__sfp_lock_acquire+0x8>)
 8008d5e:	f000 b920 	b.w	8008fa2 <__retarget_lock_acquire_recursive>
 8008d62:	bf00      	nop
 8008d64:	200049a5 	.word	0x200049a5

08008d68 <__sfp_lock_release>:
 8008d68:	4801      	ldr	r0, [pc, #4]	@ (8008d70 <__sfp_lock_release+0x8>)
 8008d6a:	f000 b91b 	b.w	8008fa4 <__retarget_lock_release_recursive>
 8008d6e:	bf00      	nop
 8008d70:	200049a5 	.word	0x200049a5

08008d74 <__sinit>:
 8008d74:	b510      	push	{r4, lr}
 8008d76:	4604      	mov	r4, r0
 8008d78:	f7ff fff0 	bl	8008d5c <__sfp_lock_acquire>
 8008d7c:	6a23      	ldr	r3, [r4, #32]
 8008d7e:	b11b      	cbz	r3, 8008d88 <__sinit+0x14>
 8008d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d84:	f7ff bff0 	b.w	8008d68 <__sfp_lock_release>
 8008d88:	4b04      	ldr	r3, [pc, #16]	@ (8008d9c <__sinit+0x28>)
 8008d8a:	6223      	str	r3, [r4, #32]
 8008d8c:	4b04      	ldr	r3, [pc, #16]	@ (8008da0 <__sinit+0x2c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1f5      	bne.n	8008d80 <__sinit+0xc>
 8008d94:	f7ff ffc4 	bl	8008d20 <global_stdio_init.part.0>
 8008d98:	e7f2      	b.n	8008d80 <__sinit+0xc>
 8008d9a:	bf00      	nop
 8008d9c:	08008ce1 	.word	0x08008ce1
 8008da0:	2000499c 	.word	0x2000499c

08008da4 <_fwalk_sglue>:
 8008da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da8:	4607      	mov	r7, r0
 8008daa:	4688      	mov	r8, r1
 8008dac:	4614      	mov	r4, r2
 8008dae:	2600      	movs	r6, #0
 8008db0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008db4:	f1b9 0901 	subs.w	r9, r9, #1
 8008db8:	d505      	bpl.n	8008dc6 <_fwalk_sglue+0x22>
 8008dba:	6824      	ldr	r4, [r4, #0]
 8008dbc:	2c00      	cmp	r4, #0
 8008dbe:	d1f7      	bne.n	8008db0 <_fwalk_sglue+0xc>
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d907      	bls.n	8008ddc <_fwalk_sglue+0x38>
 8008dcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	d003      	beq.n	8008ddc <_fwalk_sglue+0x38>
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	47c0      	blx	r8
 8008dda:	4306      	orrs	r6, r0
 8008ddc:	3568      	adds	r5, #104	@ 0x68
 8008dde:	e7e9      	b.n	8008db4 <_fwalk_sglue+0x10>

08008de0 <siprintf>:
 8008de0:	b40e      	push	{r1, r2, r3}
 8008de2:	b500      	push	{lr}
 8008de4:	b09c      	sub	sp, #112	@ 0x70
 8008de6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008de8:	9002      	str	r0, [sp, #8]
 8008dea:	9006      	str	r0, [sp, #24]
 8008dec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008df0:	4809      	ldr	r0, [pc, #36]	@ (8008e18 <siprintf+0x38>)
 8008df2:	9107      	str	r1, [sp, #28]
 8008df4:	9104      	str	r1, [sp, #16]
 8008df6:	4909      	ldr	r1, [pc, #36]	@ (8008e1c <siprintf+0x3c>)
 8008df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfc:	9105      	str	r1, [sp, #20]
 8008dfe:	6800      	ldr	r0, [r0, #0]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	a902      	add	r1, sp, #8
 8008e04:	f001 fc0a 	bl	800a61c <_svfiprintf_r>
 8008e08:	9b02      	ldr	r3, [sp, #8]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
 8008e0e:	b01c      	add	sp, #112	@ 0x70
 8008e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e14:	b003      	add	sp, #12
 8008e16:	4770      	bx	lr
 8008e18:	2000001c 	.word	0x2000001c
 8008e1c:	ffff0208 	.word	0xffff0208

08008e20 <__sread>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	460c      	mov	r4, r1
 8008e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e28:	f000 f86c 	bl	8008f04 <_read_r>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	bfab      	itete	ge
 8008e30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e32:	89a3      	ldrhlt	r3, [r4, #12]
 8008e34:	181b      	addge	r3, r3, r0
 8008e36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e3a:	bfac      	ite	ge
 8008e3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e3e:	81a3      	strhlt	r3, [r4, #12]
 8008e40:	bd10      	pop	{r4, pc}

08008e42 <__swrite>:
 8008e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e46:	461f      	mov	r7, r3
 8008e48:	898b      	ldrh	r3, [r1, #12]
 8008e4a:	05db      	lsls	r3, r3, #23
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	4616      	mov	r6, r2
 8008e52:	d505      	bpl.n	8008e60 <__swrite+0x1e>
 8008e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e58:	2302      	movs	r3, #2
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f000 f840 	bl	8008ee0 <_lseek_r>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	463b      	mov	r3, r7
 8008e70:	4628      	mov	r0, r5
 8008e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e76:	f000 b857 	b.w	8008f28 <_write_r>

08008e7a <__sseek>:
 8008e7a:	b510      	push	{r4, lr}
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e82:	f000 f82d 	bl	8008ee0 <_lseek_r>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	bf15      	itete	ne
 8008e8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e96:	81a3      	strheq	r3, [r4, #12]
 8008e98:	bf18      	it	ne
 8008e9a:	81a3      	strhne	r3, [r4, #12]
 8008e9c:	bd10      	pop	{r4, pc}

08008e9e <__sclose>:
 8008e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea2:	f000 b80d 	b.w	8008ec0 <_close_r>

08008ea6 <memset>:
 8008ea6:	4402      	add	r2, r0
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d100      	bne.n	8008eb0 <memset+0xa>
 8008eae:	4770      	bx	lr
 8008eb0:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb4:	e7f9      	b.n	8008eaa <memset+0x4>
	...

08008eb8 <_localeconv_r>:
 8008eb8:	4800      	ldr	r0, [pc, #0]	@ (8008ebc <_localeconv_r+0x4>)
 8008eba:	4770      	bx	lr
 8008ebc:	2000015c 	.word	0x2000015c

08008ec0 <_close_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d06      	ldr	r5, [pc, #24]	@ (8008edc <_close_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7f9 fa7c 	bl	80023c8 <_close>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_close_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_close_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	200049a0 	.word	0x200049a0

08008ee0 <_lseek_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d07      	ldr	r5, [pc, #28]	@ (8008f00 <_lseek_r+0x20>)
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	4611      	mov	r1, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	602a      	str	r2, [r5, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f7f9 fa91 	bl	8002416 <_lseek>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d102      	bne.n	8008efe <_lseek_r+0x1e>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	b103      	cbz	r3, 8008efe <_lseek_r+0x1e>
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	200049a0 	.word	0x200049a0

08008f04 <_read_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4d07      	ldr	r5, [pc, #28]	@ (8008f24 <_read_r+0x20>)
 8008f08:	4604      	mov	r4, r0
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	2200      	movs	r2, #0
 8008f10:	602a      	str	r2, [r5, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	f7f9 fa1f 	bl	8002356 <_read>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_read_r+0x1e>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_read_r+0x1e>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	200049a0 	.word	0x200049a0

08008f28 <_write_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d07      	ldr	r5, [pc, #28]	@ (8008f48 <_write_r+0x20>)
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	4608      	mov	r0, r1
 8008f30:	4611      	mov	r1, r2
 8008f32:	2200      	movs	r2, #0
 8008f34:	602a      	str	r2, [r5, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	f7f9 fa2a 	bl	8002390 <_write>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_write_r+0x1e>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_write_r+0x1e>
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	200049a0 	.word	0x200049a0

08008f4c <__errno>:
 8008f4c:	4b01      	ldr	r3, [pc, #4]	@ (8008f54 <__errno+0x8>)
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	2000001c 	.word	0x2000001c

08008f58 <__libc_init_array>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f90 <__libc_init_array+0x38>)
 8008f5c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f94 <__libc_init_array+0x3c>)
 8008f5e:	1b64      	subs	r4, r4, r5
 8008f60:	10a4      	asrs	r4, r4, #2
 8008f62:	2600      	movs	r6, #0
 8008f64:	42a6      	cmp	r6, r4
 8008f66:	d109      	bne.n	8008f7c <__libc_init_array+0x24>
 8008f68:	4d0b      	ldr	r5, [pc, #44]	@ (8008f98 <__libc_init_array+0x40>)
 8008f6a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f9c <__libc_init_array+0x44>)
 8008f6c:	f002 f866 	bl	800b03c <_init>
 8008f70:	1b64      	subs	r4, r4, r5
 8008f72:	10a4      	asrs	r4, r4, #2
 8008f74:	2600      	movs	r6, #0
 8008f76:	42a6      	cmp	r6, r4
 8008f78:	d105      	bne.n	8008f86 <__libc_init_array+0x2e>
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f80:	4798      	blx	r3
 8008f82:	3601      	adds	r6, #1
 8008f84:	e7ee      	b.n	8008f64 <__libc_init_array+0xc>
 8008f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f8a:	4798      	blx	r3
 8008f8c:	3601      	adds	r6, #1
 8008f8e:	e7f2      	b.n	8008f76 <__libc_init_array+0x1e>
 8008f90:	0800bf28 	.word	0x0800bf28
 8008f94:	0800bf28 	.word	0x0800bf28
 8008f98:	0800bf28 	.word	0x0800bf28
 8008f9c:	0800bf2c 	.word	0x0800bf2c

08008fa0 <__retarget_lock_init_recursive>:
 8008fa0:	4770      	bx	lr

08008fa2 <__retarget_lock_acquire_recursive>:
 8008fa2:	4770      	bx	lr

08008fa4 <__retarget_lock_release_recursive>:
 8008fa4:	4770      	bx	lr

08008fa6 <memcpy>:
 8008fa6:	440a      	add	r2, r1
 8008fa8:	4291      	cmp	r1, r2
 8008faa:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fae:	d100      	bne.n	8008fb2 <memcpy+0xc>
 8008fb0:	4770      	bx	lr
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fbc:	4291      	cmp	r1, r2
 8008fbe:	d1f9      	bne.n	8008fb4 <memcpy+0xe>
 8008fc0:	bd10      	pop	{r4, pc}

08008fc2 <quorem>:
 8008fc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc6:	6903      	ldr	r3, [r0, #16]
 8008fc8:	690c      	ldr	r4, [r1, #16]
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	4607      	mov	r7, r0
 8008fce:	db7e      	blt.n	80090ce <quorem+0x10c>
 8008fd0:	3c01      	subs	r4, #1
 8008fd2:	f101 0814 	add.w	r8, r1, #20
 8008fd6:	00a3      	lsls	r3, r4, #2
 8008fd8:	f100 0514 	add.w	r5, r0, #20
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fec:	3301      	adds	r3, #1
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ff4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ff8:	d32e      	bcc.n	8009058 <quorem+0x96>
 8008ffa:	f04f 0a00 	mov.w	sl, #0
 8008ffe:	46c4      	mov	ip, r8
 8009000:	46ae      	mov	lr, r5
 8009002:	46d3      	mov	fp, sl
 8009004:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009008:	b298      	uxth	r0, r3
 800900a:	fb06 a000 	mla	r0, r6, r0, sl
 800900e:	0c02      	lsrs	r2, r0, #16
 8009010:	0c1b      	lsrs	r3, r3, #16
 8009012:	fb06 2303 	mla	r3, r6, r3, r2
 8009016:	f8de 2000 	ldr.w	r2, [lr]
 800901a:	b280      	uxth	r0, r0
 800901c:	b292      	uxth	r2, r2
 800901e:	1a12      	subs	r2, r2, r0
 8009020:	445a      	add	r2, fp
 8009022:	f8de 0000 	ldr.w	r0, [lr]
 8009026:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800902a:	b29b      	uxth	r3, r3
 800902c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009030:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009034:	b292      	uxth	r2, r2
 8009036:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800903a:	45e1      	cmp	r9, ip
 800903c:	f84e 2b04 	str.w	r2, [lr], #4
 8009040:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009044:	d2de      	bcs.n	8009004 <quorem+0x42>
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	58eb      	ldr	r3, [r5, r3]
 800904a:	b92b      	cbnz	r3, 8009058 <quorem+0x96>
 800904c:	9b01      	ldr	r3, [sp, #4]
 800904e:	3b04      	subs	r3, #4
 8009050:	429d      	cmp	r5, r3
 8009052:	461a      	mov	r2, r3
 8009054:	d32f      	bcc.n	80090b6 <quorem+0xf4>
 8009056:	613c      	str	r4, [r7, #16]
 8009058:	4638      	mov	r0, r7
 800905a:	f001 f97b 	bl	800a354 <__mcmp>
 800905e:	2800      	cmp	r0, #0
 8009060:	db25      	blt.n	80090ae <quorem+0xec>
 8009062:	4629      	mov	r1, r5
 8009064:	2000      	movs	r0, #0
 8009066:	f858 2b04 	ldr.w	r2, [r8], #4
 800906a:	f8d1 c000 	ldr.w	ip, [r1]
 800906e:	fa1f fe82 	uxth.w	lr, r2
 8009072:	fa1f f38c 	uxth.w	r3, ip
 8009076:	eba3 030e 	sub.w	r3, r3, lr
 800907a:	4403      	add	r3, r0
 800907c:	0c12      	lsrs	r2, r2, #16
 800907e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009082:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009086:	b29b      	uxth	r3, r3
 8009088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800908c:	45c1      	cmp	r9, r8
 800908e:	f841 3b04 	str.w	r3, [r1], #4
 8009092:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009096:	d2e6      	bcs.n	8009066 <quorem+0xa4>
 8009098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800909c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090a0:	b922      	cbnz	r2, 80090ac <quorem+0xea>
 80090a2:	3b04      	subs	r3, #4
 80090a4:	429d      	cmp	r5, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	d30b      	bcc.n	80090c2 <quorem+0x100>
 80090aa:	613c      	str	r4, [r7, #16]
 80090ac:	3601      	adds	r6, #1
 80090ae:	4630      	mov	r0, r6
 80090b0:	b003      	add	sp, #12
 80090b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b6:	6812      	ldr	r2, [r2, #0]
 80090b8:	3b04      	subs	r3, #4
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	d1cb      	bne.n	8009056 <quorem+0x94>
 80090be:	3c01      	subs	r4, #1
 80090c0:	e7c6      	b.n	8009050 <quorem+0x8e>
 80090c2:	6812      	ldr	r2, [r2, #0]
 80090c4:	3b04      	subs	r3, #4
 80090c6:	2a00      	cmp	r2, #0
 80090c8:	d1ef      	bne.n	80090aa <quorem+0xe8>
 80090ca:	3c01      	subs	r4, #1
 80090cc:	e7ea      	b.n	80090a4 <quorem+0xe2>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e7ee      	b.n	80090b0 <quorem+0xee>
 80090d2:	0000      	movs	r0, r0
 80090d4:	0000      	movs	r0, r0
	...

080090d8 <_dtoa_r>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	69c7      	ldr	r7, [r0, #28]
 80090de:	b099      	sub	sp, #100	@ 0x64
 80090e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090e4:	ec55 4b10 	vmov	r4, r5, d0
 80090e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80090ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80090ec:	4683      	mov	fp, r0
 80090ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80090f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090f2:	b97f      	cbnz	r7, 8009114 <_dtoa_r+0x3c>
 80090f4:	2010      	movs	r0, #16
 80090f6:	f000 fdfd 	bl	8009cf4 <malloc>
 80090fa:	4602      	mov	r2, r0
 80090fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8009100:	b920      	cbnz	r0, 800910c <_dtoa_r+0x34>
 8009102:	4ba7      	ldr	r3, [pc, #668]	@ (80093a0 <_dtoa_r+0x2c8>)
 8009104:	21ef      	movs	r1, #239	@ 0xef
 8009106:	48a7      	ldr	r0, [pc, #668]	@ (80093a4 <_dtoa_r+0x2cc>)
 8009108:	f001 fc5a 	bl	800a9c0 <__assert_func>
 800910c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009110:	6007      	str	r7, [r0, #0]
 8009112:	60c7      	str	r7, [r0, #12]
 8009114:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009118:	6819      	ldr	r1, [r3, #0]
 800911a:	b159      	cbz	r1, 8009134 <_dtoa_r+0x5c>
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	604a      	str	r2, [r1, #4]
 8009120:	2301      	movs	r3, #1
 8009122:	4093      	lsls	r3, r2
 8009124:	608b      	str	r3, [r1, #8]
 8009126:	4658      	mov	r0, fp
 8009128:	f000 feda 	bl	8009ee0 <_Bfree>
 800912c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	1e2b      	subs	r3, r5, #0
 8009136:	bfb9      	ittee	lt
 8009138:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800913c:	9303      	strlt	r3, [sp, #12]
 800913e:	2300      	movge	r3, #0
 8009140:	6033      	strge	r3, [r6, #0]
 8009142:	9f03      	ldr	r7, [sp, #12]
 8009144:	4b98      	ldr	r3, [pc, #608]	@ (80093a8 <_dtoa_r+0x2d0>)
 8009146:	bfbc      	itt	lt
 8009148:	2201      	movlt	r2, #1
 800914a:	6032      	strlt	r2, [r6, #0]
 800914c:	43bb      	bics	r3, r7
 800914e:	d112      	bne.n	8009176 <_dtoa_r+0x9e>
 8009150:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009152:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800915c:	4323      	orrs	r3, r4
 800915e:	f000 854d 	beq.w	8009bfc <_dtoa_r+0xb24>
 8009162:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009164:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80093bc <_dtoa_r+0x2e4>
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 854f 	beq.w	8009c0c <_dtoa_r+0xb34>
 800916e:	f10a 0303 	add.w	r3, sl, #3
 8009172:	f000 bd49 	b.w	8009c08 <_dtoa_r+0xb30>
 8009176:	ed9d 7b02 	vldr	d7, [sp, #8]
 800917a:	2200      	movs	r2, #0
 800917c:	ec51 0b17 	vmov	r0, r1, d7
 8009180:	2300      	movs	r3, #0
 8009182:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009186:	f7f7 fc9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800918a:	4680      	mov	r8, r0
 800918c:	b158      	cbz	r0, 80091a6 <_dtoa_r+0xce>
 800918e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009190:	2301      	movs	r3, #1
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009196:	b113      	cbz	r3, 800919e <_dtoa_r+0xc6>
 8009198:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800919a:	4b84      	ldr	r3, [pc, #528]	@ (80093ac <_dtoa_r+0x2d4>)
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80093c0 <_dtoa_r+0x2e8>
 80091a2:	f000 bd33 	b.w	8009c0c <_dtoa_r+0xb34>
 80091a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80091aa:	aa16      	add	r2, sp, #88	@ 0x58
 80091ac:	a917      	add	r1, sp, #92	@ 0x5c
 80091ae:	4658      	mov	r0, fp
 80091b0:	f001 f980 	bl	800a4b4 <__d2b>
 80091b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80091b8:	4681      	mov	r9, r0
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	d077      	beq.n	80092ae <_dtoa_r+0x1d6>
 80091be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80091c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80091d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80091d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091d8:	4619      	mov	r1, r3
 80091da:	2200      	movs	r2, #0
 80091dc:	4b74      	ldr	r3, [pc, #464]	@ (80093b0 <_dtoa_r+0x2d8>)
 80091de:	f7f7 f853 	bl	8000288 <__aeabi_dsub>
 80091e2:	a369      	add	r3, pc, #420	@ (adr r3, 8009388 <_dtoa_r+0x2b0>)
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f7f7 fa06 	bl	80005f8 <__aeabi_dmul>
 80091ec:	a368      	add	r3, pc, #416	@ (adr r3, 8009390 <_dtoa_r+0x2b8>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f84b 	bl	800028c <__adddf3>
 80091f6:	4604      	mov	r4, r0
 80091f8:	4630      	mov	r0, r6
 80091fa:	460d      	mov	r5, r1
 80091fc:	f7f7 f992 	bl	8000524 <__aeabi_i2d>
 8009200:	a365      	add	r3, pc, #404	@ (adr r3, 8009398 <_dtoa_r+0x2c0>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f7f7 f9f7 	bl	80005f8 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	f7f7 f83b 	bl	800028c <__adddf3>
 8009216:	4604      	mov	r4, r0
 8009218:	460d      	mov	r5, r1
 800921a:	f7f7 fc9d 	bl	8000b58 <__aeabi_d2iz>
 800921e:	2200      	movs	r2, #0
 8009220:	4607      	mov	r7, r0
 8009222:	2300      	movs	r3, #0
 8009224:	4620      	mov	r0, r4
 8009226:	4629      	mov	r1, r5
 8009228:	f7f7 fc58 	bl	8000adc <__aeabi_dcmplt>
 800922c:	b140      	cbz	r0, 8009240 <_dtoa_r+0x168>
 800922e:	4638      	mov	r0, r7
 8009230:	f7f7 f978 	bl	8000524 <__aeabi_i2d>
 8009234:	4622      	mov	r2, r4
 8009236:	462b      	mov	r3, r5
 8009238:	f7f7 fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800923c:	b900      	cbnz	r0, 8009240 <_dtoa_r+0x168>
 800923e:	3f01      	subs	r7, #1
 8009240:	2f16      	cmp	r7, #22
 8009242:	d851      	bhi.n	80092e8 <_dtoa_r+0x210>
 8009244:	4b5b      	ldr	r3, [pc, #364]	@ (80093b4 <_dtoa_r+0x2dc>)
 8009246:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009252:	f7f7 fc43 	bl	8000adc <__aeabi_dcmplt>
 8009256:	2800      	cmp	r0, #0
 8009258:	d048      	beq.n	80092ec <_dtoa_r+0x214>
 800925a:	3f01      	subs	r7, #1
 800925c:	2300      	movs	r3, #0
 800925e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009260:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009262:	1b9b      	subs	r3, r3, r6
 8009264:	1e5a      	subs	r2, r3, #1
 8009266:	bf44      	itt	mi
 8009268:	f1c3 0801 	rsbmi	r8, r3, #1
 800926c:	2300      	movmi	r3, #0
 800926e:	9208      	str	r2, [sp, #32]
 8009270:	bf54      	ite	pl
 8009272:	f04f 0800 	movpl.w	r8, #0
 8009276:	9308      	strmi	r3, [sp, #32]
 8009278:	2f00      	cmp	r7, #0
 800927a:	db39      	blt.n	80092f0 <_dtoa_r+0x218>
 800927c:	9b08      	ldr	r3, [sp, #32]
 800927e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009280:	443b      	add	r3, r7
 8009282:	9308      	str	r3, [sp, #32]
 8009284:	2300      	movs	r3, #0
 8009286:	930a      	str	r3, [sp, #40]	@ 0x28
 8009288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800928a:	2b09      	cmp	r3, #9
 800928c:	d864      	bhi.n	8009358 <_dtoa_r+0x280>
 800928e:	2b05      	cmp	r3, #5
 8009290:	bfc4      	itt	gt
 8009292:	3b04      	subgt	r3, #4
 8009294:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009298:	f1a3 0302 	sub.w	r3, r3, #2
 800929c:	bfcc      	ite	gt
 800929e:	2400      	movgt	r4, #0
 80092a0:	2401      	movle	r4, #1
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d863      	bhi.n	800936e <_dtoa_r+0x296>
 80092a6:	e8df f003 	tbb	[pc, r3]
 80092aa:	372a      	.short	0x372a
 80092ac:	5535      	.short	0x5535
 80092ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80092b2:	441e      	add	r6, r3
 80092b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	bfc1      	itttt	gt
 80092bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80092c0:	409f      	lslgt	r7, r3
 80092c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80092c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80092ca:	bfd6      	itet	le
 80092cc:	f1c3 0320 	rsble	r3, r3, #32
 80092d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80092d4:	fa04 f003 	lslle.w	r0, r4, r3
 80092d8:	f7f7 f914 	bl	8000504 <__aeabi_ui2d>
 80092dc:	2201      	movs	r2, #1
 80092de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092e2:	3e01      	subs	r6, #1
 80092e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80092e6:	e777      	b.n	80091d8 <_dtoa_r+0x100>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e7b8      	b.n	800925e <_dtoa_r+0x186>
 80092ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80092ee:	e7b7      	b.n	8009260 <_dtoa_r+0x188>
 80092f0:	427b      	negs	r3, r7
 80092f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80092f4:	2300      	movs	r3, #0
 80092f6:	eba8 0807 	sub.w	r8, r8, r7
 80092fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092fc:	e7c4      	b.n	8009288 <_dtoa_r+0x1b0>
 80092fe:	2300      	movs	r3, #0
 8009300:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009302:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009304:	2b00      	cmp	r3, #0
 8009306:	dc35      	bgt.n	8009374 <_dtoa_r+0x29c>
 8009308:	2301      	movs	r3, #1
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	9307      	str	r3, [sp, #28]
 800930e:	461a      	mov	r2, r3
 8009310:	920e      	str	r2, [sp, #56]	@ 0x38
 8009312:	e00b      	b.n	800932c <_dtoa_r+0x254>
 8009314:	2301      	movs	r3, #1
 8009316:	e7f3      	b.n	8009300 <_dtoa_r+0x228>
 8009318:	2300      	movs	r3, #0
 800931a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800931c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800931e:	18fb      	adds	r3, r7, r3
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	3301      	adds	r3, #1
 8009324:	2b01      	cmp	r3, #1
 8009326:	9307      	str	r3, [sp, #28]
 8009328:	bfb8      	it	lt
 800932a:	2301      	movlt	r3, #1
 800932c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009330:	2100      	movs	r1, #0
 8009332:	2204      	movs	r2, #4
 8009334:	f102 0514 	add.w	r5, r2, #20
 8009338:	429d      	cmp	r5, r3
 800933a:	d91f      	bls.n	800937c <_dtoa_r+0x2a4>
 800933c:	6041      	str	r1, [r0, #4]
 800933e:	4658      	mov	r0, fp
 8009340:	f000 fd8e 	bl	8009e60 <_Balloc>
 8009344:	4682      	mov	sl, r0
 8009346:	2800      	cmp	r0, #0
 8009348:	d13c      	bne.n	80093c4 <_dtoa_r+0x2ec>
 800934a:	4b1b      	ldr	r3, [pc, #108]	@ (80093b8 <_dtoa_r+0x2e0>)
 800934c:	4602      	mov	r2, r0
 800934e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009352:	e6d8      	b.n	8009106 <_dtoa_r+0x2e>
 8009354:	2301      	movs	r3, #1
 8009356:	e7e0      	b.n	800931a <_dtoa_r+0x242>
 8009358:	2401      	movs	r4, #1
 800935a:	2300      	movs	r3, #0
 800935c:	9309      	str	r3, [sp, #36]	@ 0x24
 800935e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009360:	f04f 33ff 	mov.w	r3, #4294967295
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	9307      	str	r3, [sp, #28]
 8009368:	2200      	movs	r2, #0
 800936a:	2312      	movs	r3, #18
 800936c:	e7d0      	b.n	8009310 <_dtoa_r+0x238>
 800936e:	2301      	movs	r3, #1
 8009370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009372:	e7f5      	b.n	8009360 <_dtoa_r+0x288>
 8009374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	9307      	str	r3, [sp, #28]
 800937a:	e7d7      	b.n	800932c <_dtoa_r+0x254>
 800937c:	3101      	adds	r1, #1
 800937e:	0052      	lsls	r2, r2, #1
 8009380:	e7d8      	b.n	8009334 <_dtoa_r+0x25c>
 8009382:	bf00      	nop
 8009384:	f3af 8000 	nop.w
 8009388:	636f4361 	.word	0x636f4361
 800938c:	3fd287a7 	.word	0x3fd287a7
 8009390:	8b60c8b3 	.word	0x8b60c8b3
 8009394:	3fc68a28 	.word	0x3fc68a28
 8009398:	509f79fb 	.word	0x509f79fb
 800939c:	3fd34413 	.word	0x3fd34413
 80093a0:	0800bbed 	.word	0x0800bbed
 80093a4:	0800bc04 	.word	0x0800bc04
 80093a8:	7ff00000 	.word	0x7ff00000
 80093ac:	0800bbbd 	.word	0x0800bbbd
 80093b0:	3ff80000 	.word	0x3ff80000
 80093b4:	0800bd00 	.word	0x0800bd00
 80093b8:	0800bc5c 	.word	0x0800bc5c
 80093bc:	0800bbe9 	.word	0x0800bbe9
 80093c0:	0800bbbc 	.word	0x0800bbbc
 80093c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093c8:	6018      	str	r0, [r3, #0]
 80093ca:	9b07      	ldr	r3, [sp, #28]
 80093cc:	2b0e      	cmp	r3, #14
 80093ce:	f200 80a4 	bhi.w	800951a <_dtoa_r+0x442>
 80093d2:	2c00      	cmp	r4, #0
 80093d4:	f000 80a1 	beq.w	800951a <_dtoa_r+0x442>
 80093d8:	2f00      	cmp	r7, #0
 80093da:	dd33      	ble.n	8009444 <_dtoa_r+0x36c>
 80093dc:	4bad      	ldr	r3, [pc, #692]	@ (8009694 <_dtoa_r+0x5bc>)
 80093de:	f007 020f 	and.w	r2, r7, #15
 80093e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093e6:	ed93 7b00 	vldr	d7, [r3]
 80093ea:	05f8      	lsls	r0, r7, #23
 80093ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80093f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80093f4:	d516      	bpl.n	8009424 <_dtoa_r+0x34c>
 80093f6:	4ba8      	ldr	r3, [pc, #672]	@ (8009698 <_dtoa_r+0x5c0>)
 80093f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009400:	f7f7 fa24 	bl	800084c <__aeabi_ddiv>
 8009404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009408:	f004 040f 	and.w	r4, r4, #15
 800940c:	2603      	movs	r6, #3
 800940e:	4da2      	ldr	r5, [pc, #648]	@ (8009698 <_dtoa_r+0x5c0>)
 8009410:	b954      	cbnz	r4, 8009428 <_dtoa_r+0x350>
 8009412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800941a:	f7f7 fa17 	bl	800084c <__aeabi_ddiv>
 800941e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009422:	e028      	b.n	8009476 <_dtoa_r+0x39e>
 8009424:	2602      	movs	r6, #2
 8009426:	e7f2      	b.n	800940e <_dtoa_r+0x336>
 8009428:	07e1      	lsls	r1, r4, #31
 800942a:	d508      	bpl.n	800943e <_dtoa_r+0x366>
 800942c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009430:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009434:	f7f7 f8e0 	bl	80005f8 <__aeabi_dmul>
 8009438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800943c:	3601      	adds	r6, #1
 800943e:	1064      	asrs	r4, r4, #1
 8009440:	3508      	adds	r5, #8
 8009442:	e7e5      	b.n	8009410 <_dtoa_r+0x338>
 8009444:	f000 80d2 	beq.w	80095ec <_dtoa_r+0x514>
 8009448:	427c      	negs	r4, r7
 800944a:	4b92      	ldr	r3, [pc, #584]	@ (8009694 <_dtoa_r+0x5bc>)
 800944c:	4d92      	ldr	r5, [pc, #584]	@ (8009698 <_dtoa_r+0x5c0>)
 800944e:	f004 020f 	and.w	r2, r4, #15
 8009452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800945e:	f7f7 f8cb 	bl	80005f8 <__aeabi_dmul>
 8009462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009466:	1124      	asrs	r4, r4, #4
 8009468:	2300      	movs	r3, #0
 800946a:	2602      	movs	r6, #2
 800946c:	2c00      	cmp	r4, #0
 800946e:	f040 80b2 	bne.w	80095d6 <_dtoa_r+0x4fe>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1d3      	bne.n	800941e <_dtoa_r+0x346>
 8009476:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009478:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80b7 	beq.w	80095f0 <_dtoa_r+0x518>
 8009482:	4b86      	ldr	r3, [pc, #536]	@ (800969c <_dtoa_r+0x5c4>)
 8009484:	2200      	movs	r2, #0
 8009486:	4620      	mov	r0, r4
 8009488:	4629      	mov	r1, r5
 800948a:	f7f7 fb27 	bl	8000adc <__aeabi_dcmplt>
 800948e:	2800      	cmp	r0, #0
 8009490:	f000 80ae 	beq.w	80095f0 <_dtoa_r+0x518>
 8009494:	9b07      	ldr	r3, [sp, #28]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 80aa 	beq.w	80095f0 <_dtoa_r+0x518>
 800949c:	9b00      	ldr	r3, [sp, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	dd37      	ble.n	8009512 <_dtoa_r+0x43a>
 80094a2:	1e7b      	subs	r3, r7, #1
 80094a4:	9304      	str	r3, [sp, #16]
 80094a6:	4620      	mov	r0, r4
 80094a8:	4b7d      	ldr	r3, [pc, #500]	@ (80096a0 <_dtoa_r+0x5c8>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	4629      	mov	r1, r5
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094b6:	9c00      	ldr	r4, [sp, #0]
 80094b8:	3601      	adds	r6, #1
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7f7 f832 	bl	8000524 <__aeabi_i2d>
 80094c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094c4:	f7f7 f898 	bl	80005f8 <__aeabi_dmul>
 80094c8:	4b76      	ldr	r3, [pc, #472]	@ (80096a4 <_dtoa_r+0x5cc>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	f7f6 fede 	bl	800028c <__adddf3>
 80094d0:	4605      	mov	r5, r0
 80094d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80094d6:	2c00      	cmp	r4, #0
 80094d8:	f040 808d 	bne.w	80095f6 <_dtoa_r+0x51e>
 80094dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094e0:	4b71      	ldr	r3, [pc, #452]	@ (80096a8 <_dtoa_r+0x5d0>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	f7f6 fed0 	bl	8000288 <__aeabi_dsub>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094f0:	462a      	mov	r2, r5
 80094f2:	4633      	mov	r3, r6
 80094f4:	f7f7 fb10 	bl	8000b18 <__aeabi_dcmpgt>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f040 828b 	bne.w	8009a14 <_dtoa_r+0x93c>
 80094fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009502:	462a      	mov	r2, r5
 8009504:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009508:	f7f7 fae8 	bl	8000adc <__aeabi_dcmplt>
 800950c:	2800      	cmp	r0, #0
 800950e:	f040 8128 	bne.w	8009762 <_dtoa_r+0x68a>
 8009512:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009516:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800951a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800951c:	2b00      	cmp	r3, #0
 800951e:	f2c0 815a 	blt.w	80097d6 <_dtoa_r+0x6fe>
 8009522:	2f0e      	cmp	r7, #14
 8009524:	f300 8157 	bgt.w	80097d6 <_dtoa_r+0x6fe>
 8009528:	4b5a      	ldr	r3, [pc, #360]	@ (8009694 <_dtoa_r+0x5bc>)
 800952a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800952e:	ed93 7b00 	vldr	d7, [r3]
 8009532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009534:	2b00      	cmp	r3, #0
 8009536:	ed8d 7b00 	vstr	d7, [sp]
 800953a:	da03      	bge.n	8009544 <_dtoa_r+0x46c>
 800953c:	9b07      	ldr	r3, [sp, #28]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f340 8101 	ble.w	8009746 <_dtoa_r+0x66e>
 8009544:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009548:	4656      	mov	r6, sl
 800954a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800954e:	4620      	mov	r0, r4
 8009550:	4629      	mov	r1, r5
 8009552:	f7f7 f97b 	bl	800084c <__aeabi_ddiv>
 8009556:	f7f7 faff 	bl	8000b58 <__aeabi_d2iz>
 800955a:	4680      	mov	r8, r0
 800955c:	f7f6 ffe2 	bl	8000524 <__aeabi_i2d>
 8009560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009564:	f7f7 f848 	bl	80005f8 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009574:	f7f6 fe88 	bl	8000288 <__aeabi_dsub>
 8009578:	f806 4b01 	strb.w	r4, [r6], #1
 800957c:	9d07      	ldr	r5, [sp, #28]
 800957e:	eba6 040a 	sub.w	r4, r6, sl
 8009582:	42a5      	cmp	r5, r4
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	f040 8117 	bne.w	80097ba <_dtoa_r+0x6e2>
 800958c:	f7f6 fe7e 	bl	800028c <__adddf3>
 8009590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009594:	4604      	mov	r4, r0
 8009596:	460d      	mov	r5, r1
 8009598:	f7f7 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 800959c:	2800      	cmp	r0, #0
 800959e:	f040 80f9 	bne.w	8009794 <_dtoa_r+0x6bc>
 80095a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095a6:	4620      	mov	r0, r4
 80095a8:	4629      	mov	r1, r5
 80095aa:	f7f7 fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80095ae:	b118      	cbz	r0, 80095b8 <_dtoa_r+0x4e0>
 80095b0:	f018 0f01 	tst.w	r8, #1
 80095b4:	f040 80ee 	bne.w	8009794 <_dtoa_r+0x6bc>
 80095b8:	4649      	mov	r1, r9
 80095ba:	4658      	mov	r0, fp
 80095bc:	f000 fc90 	bl	8009ee0 <_Bfree>
 80095c0:	2300      	movs	r3, #0
 80095c2:	7033      	strb	r3, [r6, #0]
 80095c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095c6:	3701      	adds	r7, #1
 80095c8:	601f      	str	r7, [r3, #0]
 80095ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 831d 	beq.w	8009c0c <_dtoa_r+0xb34>
 80095d2:	601e      	str	r6, [r3, #0]
 80095d4:	e31a      	b.n	8009c0c <_dtoa_r+0xb34>
 80095d6:	07e2      	lsls	r2, r4, #31
 80095d8:	d505      	bpl.n	80095e6 <_dtoa_r+0x50e>
 80095da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095de:	f7f7 f80b 	bl	80005f8 <__aeabi_dmul>
 80095e2:	3601      	adds	r6, #1
 80095e4:	2301      	movs	r3, #1
 80095e6:	1064      	asrs	r4, r4, #1
 80095e8:	3508      	adds	r5, #8
 80095ea:	e73f      	b.n	800946c <_dtoa_r+0x394>
 80095ec:	2602      	movs	r6, #2
 80095ee:	e742      	b.n	8009476 <_dtoa_r+0x39e>
 80095f0:	9c07      	ldr	r4, [sp, #28]
 80095f2:	9704      	str	r7, [sp, #16]
 80095f4:	e761      	b.n	80094ba <_dtoa_r+0x3e2>
 80095f6:	4b27      	ldr	r3, [pc, #156]	@ (8009694 <_dtoa_r+0x5bc>)
 80095f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009602:	4454      	add	r4, sl
 8009604:	2900      	cmp	r1, #0
 8009606:	d053      	beq.n	80096b0 <_dtoa_r+0x5d8>
 8009608:	4928      	ldr	r1, [pc, #160]	@ (80096ac <_dtoa_r+0x5d4>)
 800960a:	2000      	movs	r0, #0
 800960c:	f7f7 f91e 	bl	800084c <__aeabi_ddiv>
 8009610:	4633      	mov	r3, r6
 8009612:	462a      	mov	r2, r5
 8009614:	f7f6 fe38 	bl	8000288 <__aeabi_dsub>
 8009618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800961c:	4656      	mov	r6, sl
 800961e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009622:	f7f7 fa99 	bl	8000b58 <__aeabi_d2iz>
 8009626:	4605      	mov	r5, r0
 8009628:	f7f6 ff7c 	bl	8000524 <__aeabi_i2d>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009634:	f7f6 fe28 	bl	8000288 <__aeabi_dsub>
 8009638:	3530      	adds	r5, #48	@ 0x30
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009642:	f806 5b01 	strb.w	r5, [r6], #1
 8009646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800964a:	f7f7 fa47 	bl	8000adc <__aeabi_dcmplt>
 800964e:	2800      	cmp	r0, #0
 8009650:	d171      	bne.n	8009736 <_dtoa_r+0x65e>
 8009652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009656:	4911      	ldr	r1, [pc, #68]	@ (800969c <_dtoa_r+0x5c4>)
 8009658:	2000      	movs	r0, #0
 800965a:	f7f6 fe15 	bl	8000288 <__aeabi_dsub>
 800965e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009662:	f7f7 fa3b 	bl	8000adc <__aeabi_dcmplt>
 8009666:	2800      	cmp	r0, #0
 8009668:	f040 8095 	bne.w	8009796 <_dtoa_r+0x6be>
 800966c:	42a6      	cmp	r6, r4
 800966e:	f43f af50 	beq.w	8009512 <_dtoa_r+0x43a>
 8009672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009676:	4b0a      	ldr	r3, [pc, #40]	@ (80096a0 <_dtoa_r+0x5c8>)
 8009678:	2200      	movs	r2, #0
 800967a:	f7f6 ffbd 	bl	80005f8 <__aeabi_dmul>
 800967e:	4b08      	ldr	r3, [pc, #32]	@ (80096a0 <_dtoa_r+0x5c8>)
 8009680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009684:	2200      	movs	r2, #0
 8009686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800968a:	f7f6 ffb5 	bl	80005f8 <__aeabi_dmul>
 800968e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009692:	e7c4      	b.n	800961e <_dtoa_r+0x546>
 8009694:	0800bd00 	.word	0x0800bd00
 8009698:	0800bcd8 	.word	0x0800bcd8
 800969c:	3ff00000 	.word	0x3ff00000
 80096a0:	40240000 	.word	0x40240000
 80096a4:	401c0000 	.word	0x401c0000
 80096a8:	40140000 	.word	0x40140000
 80096ac:	3fe00000 	.word	0x3fe00000
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	f7f6 ffa0 	bl	80005f8 <__aeabi_dmul>
 80096b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80096be:	4656      	mov	r6, sl
 80096c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c4:	f7f7 fa48 	bl	8000b58 <__aeabi_d2iz>
 80096c8:	4605      	mov	r5, r0
 80096ca:	f7f6 ff2b 	bl	8000524 <__aeabi_i2d>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096d6:	f7f6 fdd7 	bl	8000288 <__aeabi_dsub>
 80096da:	3530      	adds	r5, #48	@ 0x30
 80096dc:	f806 5b01 	strb.w	r5, [r6], #1
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	42a6      	cmp	r6, r4
 80096e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096ea:	f04f 0200 	mov.w	r2, #0
 80096ee:	d124      	bne.n	800973a <_dtoa_r+0x662>
 80096f0:	4bac      	ldr	r3, [pc, #688]	@ (80099a4 <_dtoa_r+0x8cc>)
 80096f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096f6:	f7f6 fdc9 	bl	800028c <__adddf3>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009702:	f7f7 fa09 	bl	8000b18 <__aeabi_dcmpgt>
 8009706:	2800      	cmp	r0, #0
 8009708:	d145      	bne.n	8009796 <_dtoa_r+0x6be>
 800970a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800970e:	49a5      	ldr	r1, [pc, #660]	@ (80099a4 <_dtoa_r+0x8cc>)
 8009710:	2000      	movs	r0, #0
 8009712:	f7f6 fdb9 	bl	8000288 <__aeabi_dsub>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800971e:	f7f7 f9dd 	bl	8000adc <__aeabi_dcmplt>
 8009722:	2800      	cmp	r0, #0
 8009724:	f43f aef5 	beq.w	8009512 <_dtoa_r+0x43a>
 8009728:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800972a:	1e73      	subs	r3, r6, #1
 800972c:	9315      	str	r3, [sp, #84]	@ 0x54
 800972e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009732:	2b30      	cmp	r3, #48	@ 0x30
 8009734:	d0f8      	beq.n	8009728 <_dtoa_r+0x650>
 8009736:	9f04      	ldr	r7, [sp, #16]
 8009738:	e73e      	b.n	80095b8 <_dtoa_r+0x4e0>
 800973a:	4b9b      	ldr	r3, [pc, #620]	@ (80099a8 <_dtoa_r+0x8d0>)
 800973c:	f7f6 ff5c 	bl	80005f8 <__aeabi_dmul>
 8009740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009744:	e7bc      	b.n	80096c0 <_dtoa_r+0x5e8>
 8009746:	d10c      	bne.n	8009762 <_dtoa_r+0x68a>
 8009748:	4b98      	ldr	r3, [pc, #608]	@ (80099ac <_dtoa_r+0x8d4>)
 800974a:	2200      	movs	r2, #0
 800974c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009750:	f7f6 ff52 	bl	80005f8 <__aeabi_dmul>
 8009754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009758:	f7f7 f9d4 	bl	8000b04 <__aeabi_dcmpge>
 800975c:	2800      	cmp	r0, #0
 800975e:	f000 8157 	beq.w	8009a10 <_dtoa_r+0x938>
 8009762:	2400      	movs	r4, #0
 8009764:	4625      	mov	r5, r4
 8009766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009768:	43db      	mvns	r3, r3
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	4656      	mov	r6, sl
 800976e:	2700      	movs	r7, #0
 8009770:	4621      	mov	r1, r4
 8009772:	4658      	mov	r0, fp
 8009774:	f000 fbb4 	bl	8009ee0 <_Bfree>
 8009778:	2d00      	cmp	r5, #0
 800977a:	d0dc      	beq.n	8009736 <_dtoa_r+0x65e>
 800977c:	b12f      	cbz	r7, 800978a <_dtoa_r+0x6b2>
 800977e:	42af      	cmp	r7, r5
 8009780:	d003      	beq.n	800978a <_dtoa_r+0x6b2>
 8009782:	4639      	mov	r1, r7
 8009784:	4658      	mov	r0, fp
 8009786:	f000 fbab 	bl	8009ee0 <_Bfree>
 800978a:	4629      	mov	r1, r5
 800978c:	4658      	mov	r0, fp
 800978e:	f000 fba7 	bl	8009ee0 <_Bfree>
 8009792:	e7d0      	b.n	8009736 <_dtoa_r+0x65e>
 8009794:	9704      	str	r7, [sp, #16]
 8009796:	4633      	mov	r3, r6
 8009798:	461e      	mov	r6, r3
 800979a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800979e:	2a39      	cmp	r2, #57	@ 0x39
 80097a0:	d107      	bne.n	80097b2 <_dtoa_r+0x6da>
 80097a2:	459a      	cmp	sl, r3
 80097a4:	d1f8      	bne.n	8009798 <_dtoa_r+0x6c0>
 80097a6:	9a04      	ldr	r2, [sp, #16]
 80097a8:	3201      	adds	r2, #1
 80097aa:	9204      	str	r2, [sp, #16]
 80097ac:	2230      	movs	r2, #48	@ 0x30
 80097ae:	f88a 2000 	strb.w	r2, [sl]
 80097b2:	781a      	ldrb	r2, [r3, #0]
 80097b4:	3201      	adds	r2, #1
 80097b6:	701a      	strb	r2, [r3, #0]
 80097b8:	e7bd      	b.n	8009736 <_dtoa_r+0x65e>
 80097ba:	4b7b      	ldr	r3, [pc, #492]	@ (80099a8 <_dtoa_r+0x8d0>)
 80097bc:	2200      	movs	r2, #0
 80097be:	f7f6 ff1b 	bl	80005f8 <__aeabi_dmul>
 80097c2:	2200      	movs	r2, #0
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	460d      	mov	r5, r1
 80097ca:	f7f7 f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f43f aebb 	beq.w	800954a <_dtoa_r+0x472>
 80097d4:	e6f0      	b.n	80095b8 <_dtoa_r+0x4e0>
 80097d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80097d8:	2a00      	cmp	r2, #0
 80097da:	f000 80db 	beq.w	8009994 <_dtoa_r+0x8bc>
 80097de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097e0:	2a01      	cmp	r2, #1
 80097e2:	f300 80bf 	bgt.w	8009964 <_dtoa_r+0x88c>
 80097e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	f000 80b7 	beq.w	800995c <_dtoa_r+0x884>
 80097ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80097f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80097f4:	4646      	mov	r6, r8
 80097f6:	9a08      	ldr	r2, [sp, #32]
 80097f8:	2101      	movs	r1, #1
 80097fa:	441a      	add	r2, r3
 80097fc:	4658      	mov	r0, fp
 80097fe:	4498      	add	r8, r3
 8009800:	9208      	str	r2, [sp, #32]
 8009802:	f000 fc21 	bl	800a048 <__i2b>
 8009806:	4605      	mov	r5, r0
 8009808:	b15e      	cbz	r6, 8009822 <_dtoa_r+0x74a>
 800980a:	9b08      	ldr	r3, [sp, #32]
 800980c:	2b00      	cmp	r3, #0
 800980e:	dd08      	ble.n	8009822 <_dtoa_r+0x74a>
 8009810:	42b3      	cmp	r3, r6
 8009812:	9a08      	ldr	r2, [sp, #32]
 8009814:	bfa8      	it	ge
 8009816:	4633      	movge	r3, r6
 8009818:	eba8 0803 	sub.w	r8, r8, r3
 800981c:	1af6      	subs	r6, r6, r3
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	9308      	str	r3, [sp, #32]
 8009822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009824:	b1f3      	cbz	r3, 8009864 <_dtoa_r+0x78c>
 8009826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 80b7 	beq.w	800999c <_dtoa_r+0x8c4>
 800982e:	b18c      	cbz	r4, 8009854 <_dtoa_r+0x77c>
 8009830:	4629      	mov	r1, r5
 8009832:	4622      	mov	r2, r4
 8009834:	4658      	mov	r0, fp
 8009836:	f000 fcc7 	bl	800a1c8 <__pow5mult>
 800983a:	464a      	mov	r2, r9
 800983c:	4601      	mov	r1, r0
 800983e:	4605      	mov	r5, r0
 8009840:	4658      	mov	r0, fp
 8009842:	f000 fc17 	bl	800a074 <__multiply>
 8009846:	4649      	mov	r1, r9
 8009848:	9004      	str	r0, [sp, #16]
 800984a:	4658      	mov	r0, fp
 800984c:	f000 fb48 	bl	8009ee0 <_Bfree>
 8009850:	9b04      	ldr	r3, [sp, #16]
 8009852:	4699      	mov	r9, r3
 8009854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009856:	1b1a      	subs	r2, r3, r4
 8009858:	d004      	beq.n	8009864 <_dtoa_r+0x78c>
 800985a:	4649      	mov	r1, r9
 800985c:	4658      	mov	r0, fp
 800985e:	f000 fcb3 	bl	800a1c8 <__pow5mult>
 8009862:	4681      	mov	r9, r0
 8009864:	2101      	movs	r1, #1
 8009866:	4658      	mov	r0, fp
 8009868:	f000 fbee 	bl	800a048 <__i2b>
 800986c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800986e:	4604      	mov	r4, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 81cf 	beq.w	8009c14 <_dtoa_r+0xb3c>
 8009876:	461a      	mov	r2, r3
 8009878:	4601      	mov	r1, r0
 800987a:	4658      	mov	r0, fp
 800987c:	f000 fca4 	bl	800a1c8 <__pow5mult>
 8009880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009882:	2b01      	cmp	r3, #1
 8009884:	4604      	mov	r4, r0
 8009886:	f300 8095 	bgt.w	80099b4 <_dtoa_r+0x8dc>
 800988a:	9b02      	ldr	r3, [sp, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	f040 8087 	bne.w	80099a0 <_dtoa_r+0x8c8>
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009898:	2b00      	cmp	r3, #0
 800989a:	f040 8089 	bne.w	80099b0 <_dtoa_r+0x8d8>
 800989e:	9b03      	ldr	r3, [sp, #12]
 80098a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098a4:	0d1b      	lsrs	r3, r3, #20
 80098a6:	051b      	lsls	r3, r3, #20
 80098a8:	b12b      	cbz	r3, 80098b6 <_dtoa_r+0x7de>
 80098aa:	9b08      	ldr	r3, [sp, #32]
 80098ac:	3301      	adds	r3, #1
 80098ae:	9308      	str	r3, [sp, #32]
 80098b0:	f108 0801 	add.w	r8, r8, #1
 80098b4:	2301      	movs	r3, #1
 80098b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 81b0 	beq.w	8009c20 <_dtoa_r+0xb48>
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098c6:	6918      	ldr	r0, [r3, #16]
 80098c8:	f000 fb72 	bl	8009fb0 <__hi0bits>
 80098cc:	f1c0 0020 	rsb	r0, r0, #32
 80098d0:	9b08      	ldr	r3, [sp, #32]
 80098d2:	4418      	add	r0, r3
 80098d4:	f010 001f 	ands.w	r0, r0, #31
 80098d8:	d077      	beq.n	80099ca <_dtoa_r+0x8f2>
 80098da:	f1c0 0320 	rsb	r3, r0, #32
 80098de:	2b04      	cmp	r3, #4
 80098e0:	dd6b      	ble.n	80099ba <_dtoa_r+0x8e2>
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	f1c0 001c 	rsb	r0, r0, #28
 80098e8:	4403      	add	r3, r0
 80098ea:	4480      	add	r8, r0
 80098ec:	4406      	add	r6, r0
 80098ee:	9308      	str	r3, [sp, #32]
 80098f0:	f1b8 0f00 	cmp.w	r8, #0
 80098f4:	dd05      	ble.n	8009902 <_dtoa_r+0x82a>
 80098f6:	4649      	mov	r1, r9
 80098f8:	4642      	mov	r2, r8
 80098fa:	4658      	mov	r0, fp
 80098fc:	f000 fcbe 	bl	800a27c <__lshift>
 8009900:	4681      	mov	r9, r0
 8009902:	9b08      	ldr	r3, [sp, #32]
 8009904:	2b00      	cmp	r3, #0
 8009906:	dd05      	ble.n	8009914 <_dtoa_r+0x83c>
 8009908:	4621      	mov	r1, r4
 800990a:	461a      	mov	r2, r3
 800990c:	4658      	mov	r0, fp
 800990e:	f000 fcb5 	bl	800a27c <__lshift>
 8009912:	4604      	mov	r4, r0
 8009914:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009916:	2b00      	cmp	r3, #0
 8009918:	d059      	beq.n	80099ce <_dtoa_r+0x8f6>
 800991a:	4621      	mov	r1, r4
 800991c:	4648      	mov	r0, r9
 800991e:	f000 fd19 	bl	800a354 <__mcmp>
 8009922:	2800      	cmp	r0, #0
 8009924:	da53      	bge.n	80099ce <_dtoa_r+0x8f6>
 8009926:	1e7b      	subs	r3, r7, #1
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	4649      	mov	r1, r9
 800992c:	2300      	movs	r3, #0
 800992e:	220a      	movs	r2, #10
 8009930:	4658      	mov	r0, fp
 8009932:	f000 faf7 	bl	8009f24 <__multadd>
 8009936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009938:	4681      	mov	r9, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 8172 	beq.w	8009c24 <_dtoa_r+0xb4c>
 8009940:	2300      	movs	r3, #0
 8009942:	4629      	mov	r1, r5
 8009944:	220a      	movs	r2, #10
 8009946:	4658      	mov	r0, fp
 8009948:	f000 faec 	bl	8009f24 <__multadd>
 800994c:	9b00      	ldr	r3, [sp, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	4605      	mov	r5, r0
 8009952:	dc67      	bgt.n	8009a24 <_dtoa_r+0x94c>
 8009954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009956:	2b02      	cmp	r3, #2
 8009958:	dc41      	bgt.n	80099de <_dtoa_r+0x906>
 800995a:	e063      	b.n	8009a24 <_dtoa_r+0x94c>
 800995c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800995e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009962:	e746      	b.n	80097f2 <_dtoa_r+0x71a>
 8009964:	9b07      	ldr	r3, [sp, #28]
 8009966:	1e5c      	subs	r4, r3, #1
 8009968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800996a:	42a3      	cmp	r3, r4
 800996c:	bfbf      	itttt	lt
 800996e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009970:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009972:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009974:	1ae3      	sublt	r3, r4, r3
 8009976:	bfb4      	ite	lt
 8009978:	18d2      	addlt	r2, r2, r3
 800997a:	1b1c      	subge	r4, r3, r4
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	bfbc      	itt	lt
 8009980:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009982:	2400      	movlt	r4, #0
 8009984:	2b00      	cmp	r3, #0
 8009986:	bfb5      	itete	lt
 8009988:	eba8 0603 	sublt.w	r6, r8, r3
 800998c:	9b07      	ldrge	r3, [sp, #28]
 800998e:	2300      	movlt	r3, #0
 8009990:	4646      	movge	r6, r8
 8009992:	e730      	b.n	80097f6 <_dtoa_r+0x71e>
 8009994:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009996:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009998:	4646      	mov	r6, r8
 800999a:	e735      	b.n	8009808 <_dtoa_r+0x730>
 800999c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800999e:	e75c      	b.n	800985a <_dtoa_r+0x782>
 80099a0:	2300      	movs	r3, #0
 80099a2:	e788      	b.n	80098b6 <_dtoa_r+0x7de>
 80099a4:	3fe00000 	.word	0x3fe00000
 80099a8:	40240000 	.word	0x40240000
 80099ac:	40140000 	.word	0x40140000
 80099b0:	9b02      	ldr	r3, [sp, #8]
 80099b2:	e780      	b.n	80098b6 <_dtoa_r+0x7de>
 80099b4:	2300      	movs	r3, #0
 80099b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099b8:	e782      	b.n	80098c0 <_dtoa_r+0x7e8>
 80099ba:	d099      	beq.n	80098f0 <_dtoa_r+0x818>
 80099bc:	9a08      	ldr	r2, [sp, #32]
 80099be:	331c      	adds	r3, #28
 80099c0:	441a      	add	r2, r3
 80099c2:	4498      	add	r8, r3
 80099c4:	441e      	add	r6, r3
 80099c6:	9208      	str	r2, [sp, #32]
 80099c8:	e792      	b.n	80098f0 <_dtoa_r+0x818>
 80099ca:	4603      	mov	r3, r0
 80099cc:	e7f6      	b.n	80099bc <_dtoa_r+0x8e4>
 80099ce:	9b07      	ldr	r3, [sp, #28]
 80099d0:	9704      	str	r7, [sp, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	dc20      	bgt.n	8009a18 <_dtoa_r+0x940>
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099da:	2b02      	cmp	r3, #2
 80099dc:	dd1e      	ble.n	8009a1c <_dtoa_r+0x944>
 80099de:	9b00      	ldr	r3, [sp, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f47f aec0 	bne.w	8009766 <_dtoa_r+0x68e>
 80099e6:	4621      	mov	r1, r4
 80099e8:	2205      	movs	r2, #5
 80099ea:	4658      	mov	r0, fp
 80099ec:	f000 fa9a 	bl	8009f24 <__multadd>
 80099f0:	4601      	mov	r1, r0
 80099f2:	4604      	mov	r4, r0
 80099f4:	4648      	mov	r0, r9
 80099f6:	f000 fcad 	bl	800a354 <__mcmp>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	f77f aeb3 	ble.w	8009766 <_dtoa_r+0x68e>
 8009a00:	4656      	mov	r6, sl
 8009a02:	2331      	movs	r3, #49	@ 0x31
 8009a04:	f806 3b01 	strb.w	r3, [r6], #1
 8009a08:	9b04      	ldr	r3, [sp, #16]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	9304      	str	r3, [sp, #16]
 8009a0e:	e6ae      	b.n	800976e <_dtoa_r+0x696>
 8009a10:	9c07      	ldr	r4, [sp, #28]
 8009a12:	9704      	str	r7, [sp, #16]
 8009a14:	4625      	mov	r5, r4
 8009a16:	e7f3      	b.n	8009a00 <_dtoa_r+0x928>
 8009a18:	9b07      	ldr	r3, [sp, #28]
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f000 8104 	beq.w	8009c2c <_dtoa_r+0xb54>
 8009a24:	2e00      	cmp	r6, #0
 8009a26:	dd05      	ble.n	8009a34 <_dtoa_r+0x95c>
 8009a28:	4629      	mov	r1, r5
 8009a2a:	4632      	mov	r2, r6
 8009a2c:	4658      	mov	r0, fp
 8009a2e:	f000 fc25 	bl	800a27c <__lshift>
 8009a32:	4605      	mov	r5, r0
 8009a34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d05a      	beq.n	8009af0 <_dtoa_r+0xa18>
 8009a3a:	6869      	ldr	r1, [r5, #4]
 8009a3c:	4658      	mov	r0, fp
 8009a3e:	f000 fa0f 	bl	8009e60 <_Balloc>
 8009a42:	4606      	mov	r6, r0
 8009a44:	b928      	cbnz	r0, 8009a52 <_dtoa_r+0x97a>
 8009a46:	4b84      	ldr	r3, [pc, #528]	@ (8009c58 <_dtoa_r+0xb80>)
 8009a48:	4602      	mov	r2, r0
 8009a4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a4e:	f7ff bb5a 	b.w	8009106 <_dtoa_r+0x2e>
 8009a52:	692a      	ldr	r2, [r5, #16]
 8009a54:	3202      	adds	r2, #2
 8009a56:	0092      	lsls	r2, r2, #2
 8009a58:	f105 010c 	add.w	r1, r5, #12
 8009a5c:	300c      	adds	r0, #12
 8009a5e:	f7ff faa2 	bl	8008fa6 <memcpy>
 8009a62:	2201      	movs	r2, #1
 8009a64:	4631      	mov	r1, r6
 8009a66:	4658      	mov	r0, fp
 8009a68:	f000 fc08 	bl	800a27c <__lshift>
 8009a6c:	f10a 0301 	add.w	r3, sl, #1
 8009a70:	9307      	str	r3, [sp, #28]
 8009a72:	9b00      	ldr	r3, [sp, #0]
 8009a74:	4453      	add	r3, sl
 8009a76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a78:	9b02      	ldr	r3, [sp, #8]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	462f      	mov	r7, r5
 8009a80:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a82:	4605      	mov	r5, r0
 8009a84:	9b07      	ldr	r3, [sp, #28]
 8009a86:	4621      	mov	r1, r4
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	4648      	mov	r0, r9
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	f7ff fa98 	bl	8008fc2 <quorem>
 8009a92:	4639      	mov	r1, r7
 8009a94:	9002      	str	r0, [sp, #8]
 8009a96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a9a:	4648      	mov	r0, r9
 8009a9c:	f000 fc5a 	bl	800a354 <__mcmp>
 8009aa0:	462a      	mov	r2, r5
 8009aa2:	9008      	str	r0, [sp, #32]
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4658      	mov	r0, fp
 8009aa8:	f000 fc70 	bl	800a38c <__mdiff>
 8009aac:	68c2      	ldr	r2, [r0, #12]
 8009aae:	4606      	mov	r6, r0
 8009ab0:	bb02      	cbnz	r2, 8009af4 <_dtoa_r+0xa1c>
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	4648      	mov	r0, r9
 8009ab6:	f000 fc4d 	bl	800a354 <__mcmp>
 8009aba:	4602      	mov	r2, r0
 8009abc:	4631      	mov	r1, r6
 8009abe:	4658      	mov	r0, fp
 8009ac0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ac2:	f000 fa0d 	bl	8009ee0 <_Bfree>
 8009ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009aca:	9e07      	ldr	r6, [sp, #28]
 8009acc:	ea43 0102 	orr.w	r1, r3, r2
 8009ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ad2:	4319      	orrs	r1, r3
 8009ad4:	d110      	bne.n	8009af8 <_dtoa_r+0xa20>
 8009ad6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ada:	d029      	beq.n	8009b30 <_dtoa_r+0xa58>
 8009adc:	9b08      	ldr	r3, [sp, #32]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dd02      	ble.n	8009ae8 <_dtoa_r+0xa10>
 8009ae2:	9b02      	ldr	r3, [sp, #8]
 8009ae4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ae8:	9b00      	ldr	r3, [sp, #0]
 8009aea:	f883 8000 	strb.w	r8, [r3]
 8009aee:	e63f      	b.n	8009770 <_dtoa_r+0x698>
 8009af0:	4628      	mov	r0, r5
 8009af2:	e7bb      	b.n	8009a6c <_dtoa_r+0x994>
 8009af4:	2201      	movs	r2, #1
 8009af6:	e7e1      	b.n	8009abc <_dtoa_r+0x9e4>
 8009af8:	9b08      	ldr	r3, [sp, #32]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	db04      	blt.n	8009b08 <_dtoa_r+0xa30>
 8009afe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b00:	430b      	orrs	r3, r1
 8009b02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b04:	430b      	orrs	r3, r1
 8009b06:	d120      	bne.n	8009b4a <_dtoa_r+0xa72>
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	dded      	ble.n	8009ae8 <_dtoa_r+0xa10>
 8009b0c:	4649      	mov	r1, r9
 8009b0e:	2201      	movs	r2, #1
 8009b10:	4658      	mov	r0, fp
 8009b12:	f000 fbb3 	bl	800a27c <__lshift>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4681      	mov	r9, r0
 8009b1a:	f000 fc1b 	bl	800a354 <__mcmp>
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	dc03      	bgt.n	8009b2a <_dtoa_r+0xa52>
 8009b22:	d1e1      	bne.n	8009ae8 <_dtoa_r+0xa10>
 8009b24:	f018 0f01 	tst.w	r8, #1
 8009b28:	d0de      	beq.n	8009ae8 <_dtoa_r+0xa10>
 8009b2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b2e:	d1d8      	bne.n	8009ae2 <_dtoa_r+0xa0a>
 8009b30:	9a00      	ldr	r2, [sp, #0]
 8009b32:	2339      	movs	r3, #57	@ 0x39
 8009b34:	7013      	strb	r3, [r2, #0]
 8009b36:	4633      	mov	r3, r6
 8009b38:	461e      	mov	r6, r3
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b40:	2a39      	cmp	r2, #57	@ 0x39
 8009b42:	d052      	beq.n	8009bea <_dtoa_r+0xb12>
 8009b44:	3201      	adds	r2, #1
 8009b46:	701a      	strb	r2, [r3, #0]
 8009b48:	e612      	b.n	8009770 <_dtoa_r+0x698>
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	dd07      	ble.n	8009b5e <_dtoa_r+0xa86>
 8009b4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b52:	d0ed      	beq.n	8009b30 <_dtoa_r+0xa58>
 8009b54:	9a00      	ldr	r2, [sp, #0]
 8009b56:	f108 0301 	add.w	r3, r8, #1
 8009b5a:	7013      	strb	r3, [r2, #0]
 8009b5c:	e608      	b.n	8009770 <_dtoa_r+0x698>
 8009b5e:	9b07      	ldr	r3, [sp, #28]
 8009b60:	9a07      	ldr	r2, [sp, #28]
 8009b62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d028      	beq.n	8009bbe <_dtoa_r+0xae6>
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	2300      	movs	r3, #0
 8009b70:	220a      	movs	r2, #10
 8009b72:	4658      	mov	r0, fp
 8009b74:	f000 f9d6 	bl	8009f24 <__multadd>
 8009b78:	42af      	cmp	r7, r5
 8009b7a:	4681      	mov	r9, r0
 8009b7c:	f04f 0300 	mov.w	r3, #0
 8009b80:	f04f 020a 	mov.w	r2, #10
 8009b84:	4639      	mov	r1, r7
 8009b86:	4658      	mov	r0, fp
 8009b88:	d107      	bne.n	8009b9a <_dtoa_r+0xac2>
 8009b8a:	f000 f9cb 	bl	8009f24 <__multadd>
 8009b8e:	4607      	mov	r7, r0
 8009b90:	4605      	mov	r5, r0
 8009b92:	9b07      	ldr	r3, [sp, #28]
 8009b94:	3301      	adds	r3, #1
 8009b96:	9307      	str	r3, [sp, #28]
 8009b98:	e774      	b.n	8009a84 <_dtoa_r+0x9ac>
 8009b9a:	f000 f9c3 	bl	8009f24 <__multadd>
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	220a      	movs	r2, #10
 8009ba6:	4658      	mov	r0, fp
 8009ba8:	f000 f9bc 	bl	8009f24 <__multadd>
 8009bac:	4605      	mov	r5, r0
 8009bae:	e7f0      	b.n	8009b92 <_dtoa_r+0xaba>
 8009bb0:	9b00      	ldr	r3, [sp, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	bfcc      	ite	gt
 8009bb6:	461e      	movgt	r6, r3
 8009bb8:	2601      	movle	r6, #1
 8009bba:	4456      	add	r6, sl
 8009bbc:	2700      	movs	r7, #0
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	4658      	mov	r0, fp
 8009bc4:	f000 fb5a 	bl	800a27c <__lshift>
 8009bc8:	4621      	mov	r1, r4
 8009bca:	4681      	mov	r9, r0
 8009bcc:	f000 fbc2 	bl	800a354 <__mcmp>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	dcb0      	bgt.n	8009b36 <_dtoa_r+0xa5e>
 8009bd4:	d102      	bne.n	8009bdc <_dtoa_r+0xb04>
 8009bd6:	f018 0f01 	tst.w	r8, #1
 8009bda:	d1ac      	bne.n	8009b36 <_dtoa_r+0xa5e>
 8009bdc:	4633      	mov	r3, r6
 8009bde:	461e      	mov	r6, r3
 8009be0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009be4:	2a30      	cmp	r2, #48	@ 0x30
 8009be6:	d0fa      	beq.n	8009bde <_dtoa_r+0xb06>
 8009be8:	e5c2      	b.n	8009770 <_dtoa_r+0x698>
 8009bea:	459a      	cmp	sl, r3
 8009bec:	d1a4      	bne.n	8009b38 <_dtoa_r+0xa60>
 8009bee:	9b04      	ldr	r3, [sp, #16]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	2331      	movs	r3, #49	@ 0x31
 8009bf6:	f88a 3000 	strb.w	r3, [sl]
 8009bfa:	e5b9      	b.n	8009770 <_dtoa_r+0x698>
 8009bfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c5c <_dtoa_r+0xb84>
 8009c02:	b11b      	cbz	r3, 8009c0c <_dtoa_r+0xb34>
 8009c04:	f10a 0308 	add.w	r3, sl, #8
 8009c08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	4650      	mov	r0, sl
 8009c0e:	b019      	add	sp, #100	@ 0x64
 8009c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	f77f ae37 	ble.w	800988a <_dtoa_r+0x7b2>
 8009c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c20:	2001      	movs	r0, #1
 8009c22:	e655      	b.n	80098d0 <_dtoa_r+0x7f8>
 8009c24:	9b00      	ldr	r3, [sp, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f77f aed6 	ble.w	80099d8 <_dtoa_r+0x900>
 8009c2c:	4656      	mov	r6, sl
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4648      	mov	r0, r9
 8009c32:	f7ff f9c6 	bl	8008fc2 <quorem>
 8009c36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c3a:	f806 8b01 	strb.w	r8, [r6], #1
 8009c3e:	9b00      	ldr	r3, [sp, #0]
 8009c40:	eba6 020a 	sub.w	r2, r6, sl
 8009c44:	4293      	cmp	r3, r2
 8009c46:	ddb3      	ble.n	8009bb0 <_dtoa_r+0xad8>
 8009c48:	4649      	mov	r1, r9
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	220a      	movs	r2, #10
 8009c4e:	4658      	mov	r0, fp
 8009c50:	f000 f968 	bl	8009f24 <__multadd>
 8009c54:	4681      	mov	r9, r0
 8009c56:	e7ea      	b.n	8009c2e <_dtoa_r+0xb56>
 8009c58:	0800bc5c 	.word	0x0800bc5c
 8009c5c:	0800bbe0 	.word	0x0800bbe0

08009c60 <_free_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4605      	mov	r5, r0
 8009c64:	2900      	cmp	r1, #0
 8009c66:	d041      	beq.n	8009cec <_free_r+0x8c>
 8009c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c6c:	1f0c      	subs	r4, r1, #4
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	bfb8      	it	lt
 8009c72:	18e4      	addlt	r4, r4, r3
 8009c74:	f000 f8e8 	bl	8009e48 <__malloc_lock>
 8009c78:	4a1d      	ldr	r2, [pc, #116]	@ (8009cf0 <_free_r+0x90>)
 8009c7a:	6813      	ldr	r3, [r2, #0]
 8009c7c:	b933      	cbnz	r3, 8009c8c <_free_r+0x2c>
 8009c7e:	6063      	str	r3, [r4, #4]
 8009c80:	6014      	str	r4, [r2, #0]
 8009c82:	4628      	mov	r0, r5
 8009c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c88:	f000 b8e4 	b.w	8009e54 <__malloc_unlock>
 8009c8c:	42a3      	cmp	r3, r4
 8009c8e:	d908      	bls.n	8009ca2 <_free_r+0x42>
 8009c90:	6820      	ldr	r0, [r4, #0]
 8009c92:	1821      	adds	r1, r4, r0
 8009c94:	428b      	cmp	r3, r1
 8009c96:	bf01      	itttt	eq
 8009c98:	6819      	ldreq	r1, [r3, #0]
 8009c9a:	685b      	ldreq	r3, [r3, #4]
 8009c9c:	1809      	addeq	r1, r1, r0
 8009c9e:	6021      	streq	r1, [r4, #0]
 8009ca0:	e7ed      	b.n	8009c7e <_free_r+0x1e>
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	b10b      	cbz	r3, 8009cac <_free_r+0x4c>
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	d9fa      	bls.n	8009ca2 <_free_r+0x42>
 8009cac:	6811      	ldr	r1, [r2, #0]
 8009cae:	1850      	adds	r0, r2, r1
 8009cb0:	42a0      	cmp	r0, r4
 8009cb2:	d10b      	bne.n	8009ccc <_free_r+0x6c>
 8009cb4:	6820      	ldr	r0, [r4, #0]
 8009cb6:	4401      	add	r1, r0
 8009cb8:	1850      	adds	r0, r2, r1
 8009cba:	4283      	cmp	r3, r0
 8009cbc:	6011      	str	r1, [r2, #0]
 8009cbe:	d1e0      	bne.n	8009c82 <_free_r+0x22>
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	6053      	str	r3, [r2, #4]
 8009cc6:	4408      	add	r0, r1
 8009cc8:	6010      	str	r0, [r2, #0]
 8009cca:	e7da      	b.n	8009c82 <_free_r+0x22>
 8009ccc:	d902      	bls.n	8009cd4 <_free_r+0x74>
 8009cce:	230c      	movs	r3, #12
 8009cd0:	602b      	str	r3, [r5, #0]
 8009cd2:	e7d6      	b.n	8009c82 <_free_r+0x22>
 8009cd4:	6820      	ldr	r0, [r4, #0]
 8009cd6:	1821      	adds	r1, r4, r0
 8009cd8:	428b      	cmp	r3, r1
 8009cda:	bf04      	itt	eq
 8009cdc:	6819      	ldreq	r1, [r3, #0]
 8009cde:	685b      	ldreq	r3, [r3, #4]
 8009ce0:	6063      	str	r3, [r4, #4]
 8009ce2:	bf04      	itt	eq
 8009ce4:	1809      	addeq	r1, r1, r0
 8009ce6:	6021      	streq	r1, [r4, #0]
 8009ce8:	6054      	str	r4, [r2, #4]
 8009cea:	e7ca      	b.n	8009c82 <_free_r+0x22>
 8009cec:	bd38      	pop	{r3, r4, r5, pc}
 8009cee:	bf00      	nop
 8009cf0:	200049ac 	.word	0x200049ac

08009cf4 <malloc>:
 8009cf4:	4b02      	ldr	r3, [pc, #8]	@ (8009d00 <malloc+0xc>)
 8009cf6:	4601      	mov	r1, r0
 8009cf8:	6818      	ldr	r0, [r3, #0]
 8009cfa:	f000 b825 	b.w	8009d48 <_malloc_r>
 8009cfe:	bf00      	nop
 8009d00:	2000001c 	.word	0x2000001c

08009d04 <sbrk_aligned>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	4e0f      	ldr	r6, [pc, #60]	@ (8009d44 <sbrk_aligned+0x40>)
 8009d08:	460c      	mov	r4, r1
 8009d0a:	6831      	ldr	r1, [r6, #0]
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	b911      	cbnz	r1, 8009d16 <sbrk_aligned+0x12>
 8009d10:	f000 fe46 	bl	800a9a0 <_sbrk_r>
 8009d14:	6030      	str	r0, [r6, #0]
 8009d16:	4621      	mov	r1, r4
 8009d18:	4628      	mov	r0, r5
 8009d1a:	f000 fe41 	bl	800a9a0 <_sbrk_r>
 8009d1e:	1c43      	adds	r3, r0, #1
 8009d20:	d103      	bne.n	8009d2a <sbrk_aligned+0x26>
 8009d22:	f04f 34ff 	mov.w	r4, #4294967295
 8009d26:	4620      	mov	r0, r4
 8009d28:	bd70      	pop	{r4, r5, r6, pc}
 8009d2a:	1cc4      	adds	r4, r0, #3
 8009d2c:	f024 0403 	bic.w	r4, r4, #3
 8009d30:	42a0      	cmp	r0, r4
 8009d32:	d0f8      	beq.n	8009d26 <sbrk_aligned+0x22>
 8009d34:	1a21      	subs	r1, r4, r0
 8009d36:	4628      	mov	r0, r5
 8009d38:	f000 fe32 	bl	800a9a0 <_sbrk_r>
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d1f2      	bne.n	8009d26 <sbrk_aligned+0x22>
 8009d40:	e7ef      	b.n	8009d22 <sbrk_aligned+0x1e>
 8009d42:	bf00      	nop
 8009d44:	200049a8 	.word	0x200049a8

08009d48 <_malloc_r>:
 8009d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d4c:	1ccd      	adds	r5, r1, #3
 8009d4e:	f025 0503 	bic.w	r5, r5, #3
 8009d52:	3508      	adds	r5, #8
 8009d54:	2d0c      	cmp	r5, #12
 8009d56:	bf38      	it	cc
 8009d58:	250c      	movcc	r5, #12
 8009d5a:	2d00      	cmp	r5, #0
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	db01      	blt.n	8009d64 <_malloc_r+0x1c>
 8009d60:	42a9      	cmp	r1, r5
 8009d62:	d904      	bls.n	8009d6e <_malloc_r+0x26>
 8009d64:	230c      	movs	r3, #12
 8009d66:	6033      	str	r3, [r6, #0]
 8009d68:	2000      	movs	r0, #0
 8009d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e44 <_malloc_r+0xfc>
 8009d72:	f000 f869 	bl	8009e48 <__malloc_lock>
 8009d76:	f8d8 3000 	ldr.w	r3, [r8]
 8009d7a:	461c      	mov	r4, r3
 8009d7c:	bb44      	cbnz	r4, 8009dd0 <_malloc_r+0x88>
 8009d7e:	4629      	mov	r1, r5
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff ffbf 	bl	8009d04 <sbrk_aligned>
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	4604      	mov	r4, r0
 8009d8a:	d158      	bne.n	8009e3e <_malloc_r+0xf6>
 8009d8c:	f8d8 4000 	ldr.w	r4, [r8]
 8009d90:	4627      	mov	r7, r4
 8009d92:	2f00      	cmp	r7, #0
 8009d94:	d143      	bne.n	8009e1e <_malloc_r+0xd6>
 8009d96:	2c00      	cmp	r4, #0
 8009d98:	d04b      	beq.n	8009e32 <_malloc_r+0xea>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	4639      	mov	r1, r7
 8009d9e:	4630      	mov	r0, r6
 8009da0:	eb04 0903 	add.w	r9, r4, r3
 8009da4:	f000 fdfc 	bl	800a9a0 <_sbrk_r>
 8009da8:	4581      	cmp	r9, r0
 8009daa:	d142      	bne.n	8009e32 <_malloc_r+0xea>
 8009dac:	6821      	ldr	r1, [r4, #0]
 8009dae:	1a6d      	subs	r5, r5, r1
 8009db0:	4629      	mov	r1, r5
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7ff ffa6 	bl	8009d04 <sbrk_aligned>
 8009db8:	3001      	adds	r0, #1
 8009dba:	d03a      	beq.n	8009e32 <_malloc_r+0xea>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	442b      	add	r3, r5
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	bb62      	cbnz	r2, 8009e24 <_malloc_r+0xdc>
 8009dca:	f8c8 7000 	str.w	r7, [r8]
 8009dce:	e00f      	b.n	8009df0 <_malloc_r+0xa8>
 8009dd0:	6822      	ldr	r2, [r4, #0]
 8009dd2:	1b52      	subs	r2, r2, r5
 8009dd4:	d420      	bmi.n	8009e18 <_malloc_r+0xd0>
 8009dd6:	2a0b      	cmp	r2, #11
 8009dd8:	d917      	bls.n	8009e0a <_malloc_r+0xc2>
 8009dda:	1961      	adds	r1, r4, r5
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	6025      	str	r5, [r4, #0]
 8009de0:	bf18      	it	ne
 8009de2:	6059      	strne	r1, [r3, #4]
 8009de4:	6863      	ldr	r3, [r4, #4]
 8009de6:	bf08      	it	eq
 8009de8:	f8c8 1000 	streq.w	r1, [r8]
 8009dec:	5162      	str	r2, [r4, r5]
 8009dee:	604b      	str	r3, [r1, #4]
 8009df0:	4630      	mov	r0, r6
 8009df2:	f000 f82f 	bl	8009e54 <__malloc_unlock>
 8009df6:	f104 000b 	add.w	r0, r4, #11
 8009dfa:	1d23      	adds	r3, r4, #4
 8009dfc:	f020 0007 	bic.w	r0, r0, #7
 8009e00:	1ac2      	subs	r2, r0, r3
 8009e02:	bf1c      	itt	ne
 8009e04:	1a1b      	subne	r3, r3, r0
 8009e06:	50a3      	strne	r3, [r4, r2]
 8009e08:	e7af      	b.n	8009d6a <_malloc_r+0x22>
 8009e0a:	6862      	ldr	r2, [r4, #4]
 8009e0c:	42a3      	cmp	r3, r4
 8009e0e:	bf0c      	ite	eq
 8009e10:	f8c8 2000 	streq.w	r2, [r8]
 8009e14:	605a      	strne	r2, [r3, #4]
 8009e16:	e7eb      	b.n	8009df0 <_malloc_r+0xa8>
 8009e18:	4623      	mov	r3, r4
 8009e1a:	6864      	ldr	r4, [r4, #4]
 8009e1c:	e7ae      	b.n	8009d7c <_malloc_r+0x34>
 8009e1e:	463c      	mov	r4, r7
 8009e20:	687f      	ldr	r7, [r7, #4]
 8009e22:	e7b6      	b.n	8009d92 <_malloc_r+0x4a>
 8009e24:	461a      	mov	r2, r3
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	42a3      	cmp	r3, r4
 8009e2a:	d1fb      	bne.n	8009e24 <_malloc_r+0xdc>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	6053      	str	r3, [r2, #4]
 8009e30:	e7de      	b.n	8009df0 <_malloc_r+0xa8>
 8009e32:	230c      	movs	r3, #12
 8009e34:	6033      	str	r3, [r6, #0]
 8009e36:	4630      	mov	r0, r6
 8009e38:	f000 f80c 	bl	8009e54 <__malloc_unlock>
 8009e3c:	e794      	b.n	8009d68 <_malloc_r+0x20>
 8009e3e:	6005      	str	r5, [r0, #0]
 8009e40:	e7d6      	b.n	8009df0 <_malloc_r+0xa8>
 8009e42:	bf00      	nop
 8009e44:	200049ac 	.word	0x200049ac

08009e48 <__malloc_lock>:
 8009e48:	4801      	ldr	r0, [pc, #4]	@ (8009e50 <__malloc_lock+0x8>)
 8009e4a:	f7ff b8aa 	b.w	8008fa2 <__retarget_lock_acquire_recursive>
 8009e4e:	bf00      	nop
 8009e50:	200049a4 	.word	0x200049a4

08009e54 <__malloc_unlock>:
 8009e54:	4801      	ldr	r0, [pc, #4]	@ (8009e5c <__malloc_unlock+0x8>)
 8009e56:	f7ff b8a5 	b.w	8008fa4 <__retarget_lock_release_recursive>
 8009e5a:	bf00      	nop
 8009e5c:	200049a4 	.word	0x200049a4

08009e60 <_Balloc>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	69c6      	ldr	r6, [r0, #28]
 8009e64:	4604      	mov	r4, r0
 8009e66:	460d      	mov	r5, r1
 8009e68:	b976      	cbnz	r6, 8009e88 <_Balloc+0x28>
 8009e6a:	2010      	movs	r0, #16
 8009e6c:	f7ff ff42 	bl	8009cf4 <malloc>
 8009e70:	4602      	mov	r2, r0
 8009e72:	61e0      	str	r0, [r4, #28]
 8009e74:	b920      	cbnz	r0, 8009e80 <_Balloc+0x20>
 8009e76:	4b18      	ldr	r3, [pc, #96]	@ (8009ed8 <_Balloc+0x78>)
 8009e78:	4818      	ldr	r0, [pc, #96]	@ (8009edc <_Balloc+0x7c>)
 8009e7a:	216b      	movs	r1, #107	@ 0x6b
 8009e7c:	f000 fda0 	bl	800a9c0 <__assert_func>
 8009e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e84:	6006      	str	r6, [r0, #0]
 8009e86:	60c6      	str	r6, [r0, #12]
 8009e88:	69e6      	ldr	r6, [r4, #28]
 8009e8a:	68f3      	ldr	r3, [r6, #12]
 8009e8c:	b183      	cbz	r3, 8009eb0 <_Balloc+0x50>
 8009e8e:	69e3      	ldr	r3, [r4, #28]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e96:	b9b8      	cbnz	r0, 8009ec8 <_Balloc+0x68>
 8009e98:	2101      	movs	r1, #1
 8009e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8009e9e:	1d72      	adds	r2, r6, #5
 8009ea0:	0092      	lsls	r2, r2, #2
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 fdaa 	bl	800a9fc <_calloc_r>
 8009ea8:	b160      	cbz	r0, 8009ec4 <_Balloc+0x64>
 8009eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eae:	e00e      	b.n	8009ece <_Balloc+0x6e>
 8009eb0:	2221      	movs	r2, #33	@ 0x21
 8009eb2:	2104      	movs	r1, #4
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 fda1 	bl	800a9fc <_calloc_r>
 8009eba:	69e3      	ldr	r3, [r4, #28]
 8009ebc:	60f0      	str	r0, [r6, #12]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1e4      	bne.n	8009e8e <_Balloc+0x2e>
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}
 8009ec8:	6802      	ldr	r2, [r0, #0]
 8009eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ed4:	e7f7      	b.n	8009ec6 <_Balloc+0x66>
 8009ed6:	bf00      	nop
 8009ed8:	0800bbed 	.word	0x0800bbed
 8009edc:	0800bc6d 	.word	0x0800bc6d

08009ee0 <_Bfree>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	69c6      	ldr	r6, [r0, #28]
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	b976      	cbnz	r6, 8009f08 <_Bfree+0x28>
 8009eea:	2010      	movs	r0, #16
 8009eec:	f7ff ff02 	bl	8009cf4 <malloc>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	61e8      	str	r0, [r5, #28]
 8009ef4:	b920      	cbnz	r0, 8009f00 <_Bfree+0x20>
 8009ef6:	4b09      	ldr	r3, [pc, #36]	@ (8009f1c <_Bfree+0x3c>)
 8009ef8:	4809      	ldr	r0, [pc, #36]	@ (8009f20 <_Bfree+0x40>)
 8009efa:	218f      	movs	r1, #143	@ 0x8f
 8009efc:	f000 fd60 	bl	800a9c0 <__assert_func>
 8009f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f04:	6006      	str	r6, [r0, #0]
 8009f06:	60c6      	str	r6, [r0, #12]
 8009f08:	b13c      	cbz	r4, 8009f1a <_Bfree+0x3a>
 8009f0a:	69eb      	ldr	r3, [r5, #28]
 8009f0c:	6862      	ldr	r2, [r4, #4]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f14:	6021      	str	r1, [r4, #0]
 8009f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}
 8009f1c:	0800bbed 	.word	0x0800bbed
 8009f20:	0800bc6d 	.word	0x0800bc6d

08009f24 <__multadd>:
 8009f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f28:	690d      	ldr	r5, [r1, #16]
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	461e      	mov	r6, r3
 8009f30:	f101 0c14 	add.w	ip, r1, #20
 8009f34:	2000      	movs	r0, #0
 8009f36:	f8dc 3000 	ldr.w	r3, [ip]
 8009f3a:	b299      	uxth	r1, r3
 8009f3c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f40:	0c1e      	lsrs	r6, r3, #16
 8009f42:	0c0b      	lsrs	r3, r1, #16
 8009f44:	fb02 3306 	mla	r3, r2, r6, r3
 8009f48:	b289      	uxth	r1, r1
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f50:	4285      	cmp	r5, r0
 8009f52:	f84c 1b04 	str.w	r1, [ip], #4
 8009f56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f5a:	dcec      	bgt.n	8009f36 <__multadd+0x12>
 8009f5c:	b30e      	cbz	r6, 8009fa2 <__multadd+0x7e>
 8009f5e:	68a3      	ldr	r3, [r4, #8]
 8009f60:	42ab      	cmp	r3, r5
 8009f62:	dc19      	bgt.n	8009f98 <__multadd+0x74>
 8009f64:	6861      	ldr	r1, [r4, #4]
 8009f66:	4638      	mov	r0, r7
 8009f68:	3101      	adds	r1, #1
 8009f6a:	f7ff ff79 	bl	8009e60 <_Balloc>
 8009f6e:	4680      	mov	r8, r0
 8009f70:	b928      	cbnz	r0, 8009f7e <__multadd+0x5a>
 8009f72:	4602      	mov	r2, r0
 8009f74:	4b0c      	ldr	r3, [pc, #48]	@ (8009fa8 <__multadd+0x84>)
 8009f76:	480d      	ldr	r0, [pc, #52]	@ (8009fac <__multadd+0x88>)
 8009f78:	21ba      	movs	r1, #186	@ 0xba
 8009f7a:	f000 fd21 	bl	800a9c0 <__assert_func>
 8009f7e:	6922      	ldr	r2, [r4, #16]
 8009f80:	3202      	adds	r2, #2
 8009f82:	f104 010c 	add.w	r1, r4, #12
 8009f86:	0092      	lsls	r2, r2, #2
 8009f88:	300c      	adds	r0, #12
 8009f8a:	f7ff f80c 	bl	8008fa6 <memcpy>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4638      	mov	r0, r7
 8009f92:	f7ff ffa5 	bl	8009ee0 <_Bfree>
 8009f96:	4644      	mov	r4, r8
 8009f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f9c:	3501      	adds	r5, #1
 8009f9e:	615e      	str	r6, [r3, #20]
 8009fa0:	6125      	str	r5, [r4, #16]
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa8:	0800bc5c 	.word	0x0800bc5c
 8009fac:	0800bc6d 	.word	0x0800bc6d

08009fb0 <__hi0bits>:
 8009fb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	bf36      	itet	cc
 8009fb8:	0403      	lslcc	r3, r0, #16
 8009fba:	2000      	movcs	r0, #0
 8009fbc:	2010      	movcc	r0, #16
 8009fbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fc2:	bf3c      	itt	cc
 8009fc4:	021b      	lslcc	r3, r3, #8
 8009fc6:	3008      	addcc	r0, #8
 8009fc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fcc:	bf3c      	itt	cc
 8009fce:	011b      	lslcc	r3, r3, #4
 8009fd0:	3004      	addcc	r0, #4
 8009fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fd6:	bf3c      	itt	cc
 8009fd8:	009b      	lslcc	r3, r3, #2
 8009fda:	3002      	addcc	r0, #2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	db05      	blt.n	8009fec <__hi0bits+0x3c>
 8009fe0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009fe4:	f100 0001 	add.w	r0, r0, #1
 8009fe8:	bf08      	it	eq
 8009fea:	2020      	moveq	r0, #32
 8009fec:	4770      	bx	lr

08009fee <__lo0bits>:
 8009fee:	6803      	ldr	r3, [r0, #0]
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	f013 0007 	ands.w	r0, r3, #7
 8009ff6:	d00b      	beq.n	800a010 <__lo0bits+0x22>
 8009ff8:	07d9      	lsls	r1, r3, #31
 8009ffa:	d421      	bmi.n	800a040 <__lo0bits+0x52>
 8009ffc:	0798      	lsls	r0, r3, #30
 8009ffe:	bf49      	itett	mi
 800a000:	085b      	lsrmi	r3, r3, #1
 800a002:	089b      	lsrpl	r3, r3, #2
 800a004:	2001      	movmi	r0, #1
 800a006:	6013      	strmi	r3, [r2, #0]
 800a008:	bf5c      	itt	pl
 800a00a:	6013      	strpl	r3, [r2, #0]
 800a00c:	2002      	movpl	r0, #2
 800a00e:	4770      	bx	lr
 800a010:	b299      	uxth	r1, r3
 800a012:	b909      	cbnz	r1, 800a018 <__lo0bits+0x2a>
 800a014:	0c1b      	lsrs	r3, r3, #16
 800a016:	2010      	movs	r0, #16
 800a018:	b2d9      	uxtb	r1, r3
 800a01a:	b909      	cbnz	r1, 800a020 <__lo0bits+0x32>
 800a01c:	3008      	adds	r0, #8
 800a01e:	0a1b      	lsrs	r3, r3, #8
 800a020:	0719      	lsls	r1, r3, #28
 800a022:	bf04      	itt	eq
 800a024:	091b      	lsreq	r3, r3, #4
 800a026:	3004      	addeq	r0, #4
 800a028:	0799      	lsls	r1, r3, #30
 800a02a:	bf04      	itt	eq
 800a02c:	089b      	lsreq	r3, r3, #2
 800a02e:	3002      	addeq	r0, #2
 800a030:	07d9      	lsls	r1, r3, #31
 800a032:	d403      	bmi.n	800a03c <__lo0bits+0x4e>
 800a034:	085b      	lsrs	r3, r3, #1
 800a036:	f100 0001 	add.w	r0, r0, #1
 800a03a:	d003      	beq.n	800a044 <__lo0bits+0x56>
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	4770      	bx	lr
 800a040:	2000      	movs	r0, #0
 800a042:	4770      	bx	lr
 800a044:	2020      	movs	r0, #32
 800a046:	4770      	bx	lr

0800a048 <__i2b>:
 800a048:	b510      	push	{r4, lr}
 800a04a:	460c      	mov	r4, r1
 800a04c:	2101      	movs	r1, #1
 800a04e:	f7ff ff07 	bl	8009e60 <_Balloc>
 800a052:	4602      	mov	r2, r0
 800a054:	b928      	cbnz	r0, 800a062 <__i2b+0x1a>
 800a056:	4b05      	ldr	r3, [pc, #20]	@ (800a06c <__i2b+0x24>)
 800a058:	4805      	ldr	r0, [pc, #20]	@ (800a070 <__i2b+0x28>)
 800a05a:	f240 1145 	movw	r1, #325	@ 0x145
 800a05e:	f000 fcaf 	bl	800a9c0 <__assert_func>
 800a062:	2301      	movs	r3, #1
 800a064:	6144      	str	r4, [r0, #20]
 800a066:	6103      	str	r3, [r0, #16]
 800a068:	bd10      	pop	{r4, pc}
 800a06a:	bf00      	nop
 800a06c:	0800bc5c 	.word	0x0800bc5c
 800a070:	0800bc6d 	.word	0x0800bc6d

0800a074 <__multiply>:
 800a074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a078:	4614      	mov	r4, r2
 800a07a:	690a      	ldr	r2, [r1, #16]
 800a07c:	6923      	ldr	r3, [r4, #16]
 800a07e:	429a      	cmp	r2, r3
 800a080:	bfa8      	it	ge
 800a082:	4623      	movge	r3, r4
 800a084:	460f      	mov	r7, r1
 800a086:	bfa4      	itt	ge
 800a088:	460c      	movge	r4, r1
 800a08a:	461f      	movge	r7, r3
 800a08c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a090:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a094:	68a3      	ldr	r3, [r4, #8]
 800a096:	6861      	ldr	r1, [r4, #4]
 800a098:	eb0a 0609 	add.w	r6, sl, r9
 800a09c:	42b3      	cmp	r3, r6
 800a09e:	b085      	sub	sp, #20
 800a0a0:	bfb8      	it	lt
 800a0a2:	3101      	addlt	r1, #1
 800a0a4:	f7ff fedc 	bl	8009e60 <_Balloc>
 800a0a8:	b930      	cbnz	r0, 800a0b8 <__multiply+0x44>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	4b44      	ldr	r3, [pc, #272]	@ (800a1c0 <__multiply+0x14c>)
 800a0ae:	4845      	ldr	r0, [pc, #276]	@ (800a1c4 <__multiply+0x150>)
 800a0b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a0b4:	f000 fc84 	bl	800a9c0 <__assert_func>
 800a0b8:	f100 0514 	add.w	r5, r0, #20
 800a0bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0c0:	462b      	mov	r3, r5
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4543      	cmp	r3, r8
 800a0c6:	d321      	bcc.n	800a10c <__multiply+0x98>
 800a0c8:	f107 0114 	add.w	r1, r7, #20
 800a0cc:	f104 0214 	add.w	r2, r4, #20
 800a0d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a0d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a0d8:	9302      	str	r3, [sp, #8]
 800a0da:	1b13      	subs	r3, r2, r4
 800a0dc:	3b15      	subs	r3, #21
 800a0de:	f023 0303 	bic.w	r3, r3, #3
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	f104 0715 	add.w	r7, r4, #21
 800a0e8:	42ba      	cmp	r2, r7
 800a0ea:	bf38      	it	cc
 800a0ec:	2304      	movcc	r3, #4
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	9b02      	ldr	r3, [sp, #8]
 800a0f2:	9103      	str	r1, [sp, #12]
 800a0f4:	428b      	cmp	r3, r1
 800a0f6:	d80c      	bhi.n	800a112 <__multiply+0x9e>
 800a0f8:	2e00      	cmp	r6, #0
 800a0fa:	dd03      	ble.n	800a104 <__multiply+0x90>
 800a0fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a100:	2b00      	cmp	r3, #0
 800a102:	d05b      	beq.n	800a1bc <__multiply+0x148>
 800a104:	6106      	str	r6, [r0, #16]
 800a106:	b005      	add	sp, #20
 800a108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10c:	f843 2b04 	str.w	r2, [r3], #4
 800a110:	e7d8      	b.n	800a0c4 <__multiply+0x50>
 800a112:	f8b1 a000 	ldrh.w	sl, [r1]
 800a116:	f1ba 0f00 	cmp.w	sl, #0
 800a11a:	d024      	beq.n	800a166 <__multiply+0xf2>
 800a11c:	f104 0e14 	add.w	lr, r4, #20
 800a120:	46a9      	mov	r9, r5
 800a122:	f04f 0c00 	mov.w	ip, #0
 800a126:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a12a:	f8d9 3000 	ldr.w	r3, [r9]
 800a12e:	fa1f fb87 	uxth.w	fp, r7
 800a132:	b29b      	uxth	r3, r3
 800a134:	fb0a 330b 	mla	r3, sl, fp, r3
 800a138:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a13c:	f8d9 7000 	ldr.w	r7, [r9]
 800a140:	4463      	add	r3, ip
 800a142:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a146:	fb0a c70b 	mla	r7, sl, fp, ip
 800a14a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a14e:	b29b      	uxth	r3, r3
 800a150:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a154:	4572      	cmp	r2, lr
 800a156:	f849 3b04 	str.w	r3, [r9], #4
 800a15a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a15e:	d8e2      	bhi.n	800a126 <__multiply+0xb2>
 800a160:	9b01      	ldr	r3, [sp, #4]
 800a162:	f845 c003 	str.w	ip, [r5, r3]
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a16c:	3104      	adds	r1, #4
 800a16e:	f1b9 0f00 	cmp.w	r9, #0
 800a172:	d021      	beq.n	800a1b8 <__multiply+0x144>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	f104 0c14 	add.w	ip, r4, #20
 800a17a:	46ae      	mov	lr, r5
 800a17c:	f04f 0a00 	mov.w	sl, #0
 800a180:	f8bc b000 	ldrh.w	fp, [ip]
 800a184:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a188:	fb09 770b 	mla	r7, r9, fp, r7
 800a18c:	4457      	add	r7, sl
 800a18e:	b29b      	uxth	r3, r3
 800a190:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a194:	f84e 3b04 	str.w	r3, [lr], #4
 800a198:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a19c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1a0:	f8be 3000 	ldrh.w	r3, [lr]
 800a1a4:	fb09 330a 	mla	r3, r9, sl, r3
 800a1a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a1ac:	4562      	cmp	r2, ip
 800a1ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1b2:	d8e5      	bhi.n	800a180 <__multiply+0x10c>
 800a1b4:	9f01      	ldr	r7, [sp, #4]
 800a1b6:	51eb      	str	r3, [r5, r7]
 800a1b8:	3504      	adds	r5, #4
 800a1ba:	e799      	b.n	800a0f0 <__multiply+0x7c>
 800a1bc:	3e01      	subs	r6, #1
 800a1be:	e79b      	b.n	800a0f8 <__multiply+0x84>
 800a1c0:	0800bc5c 	.word	0x0800bc5c
 800a1c4:	0800bc6d 	.word	0x0800bc6d

0800a1c8 <__pow5mult>:
 800a1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1cc:	4615      	mov	r5, r2
 800a1ce:	f012 0203 	ands.w	r2, r2, #3
 800a1d2:	4607      	mov	r7, r0
 800a1d4:	460e      	mov	r6, r1
 800a1d6:	d007      	beq.n	800a1e8 <__pow5mult+0x20>
 800a1d8:	4c25      	ldr	r4, [pc, #148]	@ (800a270 <__pow5mult+0xa8>)
 800a1da:	3a01      	subs	r2, #1
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1e2:	f7ff fe9f 	bl	8009f24 <__multadd>
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	10ad      	asrs	r5, r5, #2
 800a1ea:	d03d      	beq.n	800a268 <__pow5mult+0xa0>
 800a1ec:	69fc      	ldr	r4, [r7, #28]
 800a1ee:	b97c      	cbnz	r4, 800a210 <__pow5mult+0x48>
 800a1f0:	2010      	movs	r0, #16
 800a1f2:	f7ff fd7f 	bl	8009cf4 <malloc>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	61f8      	str	r0, [r7, #28]
 800a1fa:	b928      	cbnz	r0, 800a208 <__pow5mult+0x40>
 800a1fc:	4b1d      	ldr	r3, [pc, #116]	@ (800a274 <__pow5mult+0xac>)
 800a1fe:	481e      	ldr	r0, [pc, #120]	@ (800a278 <__pow5mult+0xb0>)
 800a200:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a204:	f000 fbdc 	bl	800a9c0 <__assert_func>
 800a208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a20c:	6004      	str	r4, [r0, #0]
 800a20e:	60c4      	str	r4, [r0, #12]
 800a210:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a218:	b94c      	cbnz	r4, 800a22e <__pow5mult+0x66>
 800a21a:	f240 2171 	movw	r1, #625	@ 0x271
 800a21e:	4638      	mov	r0, r7
 800a220:	f7ff ff12 	bl	800a048 <__i2b>
 800a224:	2300      	movs	r3, #0
 800a226:	f8c8 0008 	str.w	r0, [r8, #8]
 800a22a:	4604      	mov	r4, r0
 800a22c:	6003      	str	r3, [r0, #0]
 800a22e:	f04f 0900 	mov.w	r9, #0
 800a232:	07eb      	lsls	r3, r5, #31
 800a234:	d50a      	bpl.n	800a24c <__pow5mult+0x84>
 800a236:	4631      	mov	r1, r6
 800a238:	4622      	mov	r2, r4
 800a23a:	4638      	mov	r0, r7
 800a23c:	f7ff ff1a 	bl	800a074 <__multiply>
 800a240:	4631      	mov	r1, r6
 800a242:	4680      	mov	r8, r0
 800a244:	4638      	mov	r0, r7
 800a246:	f7ff fe4b 	bl	8009ee0 <_Bfree>
 800a24a:	4646      	mov	r6, r8
 800a24c:	106d      	asrs	r5, r5, #1
 800a24e:	d00b      	beq.n	800a268 <__pow5mult+0xa0>
 800a250:	6820      	ldr	r0, [r4, #0]
 800a252:	b938      	cbnz	r0, 800a264 <__pow5mult+0x9c>
 800a254:	4622      	mov	r2, r4
 800a256:	4621      	mov	r1, r4
 800a258:	4638      	mov	r0, r7
 800a25a:	f7ff ff0b 	bl	800a074 <__multiply>
 800a25e:	6020      	str	r0, [r4, #0]
 800a260:	f8c0 9000 	str.w	r9, [r0]
 800a264:	4604      	mov	r4, r0
 800a266:	e7e4      	b.n	800a232 <__pow5mult+0x6a>
 800a268:	4630      	mov	r0, r6
 800a26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a26e:	bf00      	nop
 800a270:	0800bcc8 	.word	0x0800bcc8
 800a274:	0800bbed 	.word	0x0800bbed
 800a278:	0800bc6d 	.word	0x0800bc6d

0800a27c <__lshift>:
 800a27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a280:	460c      	mov	r4, r1
 800a282:	6849      	ldr	r1, [r1, #4]
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	4607      	mov	r7, r0
 800a28e:	4691      	mov	r9, r2
 800a290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a294:	f108 0601 	add.w	r6, r8, #1
 800a298:	42b3      	cmp	r3, r6
 800a29a:	db0b      	blt.n	800a2b4 <__lshift+0x38>
 800a29c:	4638      	mov	r0, r7
 800a29e:	f7ff fddf 	bl	8009e60 <_Balloc>
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	b948      	cbnz	r0, 800a2ba <__lshift+0x3e>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	4b28      	ldr	r3, [pc, #160]	@ (800a34c <__lshift+0xd0>)
 800a2aa:	4829      	ldr	r0, [pc, #164]	@ (800a350 <__lshift+0xd4>)
 800a2ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a2b0:	f000 fb86 	bl	800a9c0 <__assert_func>
 800a2b4:	3101      	adds	r1, #1
 800a2b6:	005b      	lsls	r3, r3, #1
 800a2b8:	e7ee      	b.n	800a298 <__lshift+0x1c>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f100 0114 	add.w	r1, r0, #20
 800a2c0:	f100 0210 	add.w	r2, r0, #16
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	4553      	cmp	r3, sl
 800a2c8:	db33      	blt.n	800a332 <__lshift+0xb6>
 800a2ca:	6920      	ldr	r0, [r4, #16]
 800a2cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2d0:	f104 0314 	add.w	r3, r4, #20
 800a2d4:	f019 091f 	ands.w	r9, r9, #31
 800a2d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2e0:	d02b      	beq.n	800a33a <__lshift+0xbe>
 800a2e2:	f1c9 0e20 	rsb	lr, r9, #32
 800a2e6:	468a      	mov	sl, r1
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	6818      	ldr	r0, [r3, #0]
 800a2ec:	fa00 f009 	lsl.w	r0, r0, r9
 800a2f0:	4310      	orrs	r0, r2
 800a2f2:	f84a 0b04 	str.w	r0, [sl], #4
 800a2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2fa:	459c      	cmp	ip, r3
 800a2fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a300:	d8f3      	bhi.n	800a2ea <__lshift+0x6e>
 800a302:	ebac 0304 	sub.w	r3, ip, r4
 800a306:	3b15      	subs	r3, #21
 800a308:	f023 0303 	bic.w	r3, r3, #3
 800a30c:	3304      	adds	r3, #4
 800a30e:	f104 0015 	add.w	r0, r4, #21
 800a312:	4584      	cmp	ip, r0
 800a314:	bf38      	it	cc
 800a316:	2304      	movcc	r3, #4
 800a318:	50ca      	str	r2, [r1, r3]
 800a31a:	b10a      	cbz	r2, 800a320 <__lshift+0xa4>
 800a31c:	f108 0602 	add.w	r6, r8, #2
 800a320:	3e01      	subs	r6, #1
 800a322:	4638      	mov	r0, r7
 800a324:	612e      	str	r6, [r5, #16]
 800a326:	4621      	mov	r1, r4
 800a328:	f7ff fdda 	bl	8009ee0 <_Bfree>
 800a32c:	4628      	mov	r0, r5
 800a32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a332:	f842 0f04 	str.w	r0, [r2, #4]!
 800a336:	3301      	adds	r3, #1
 800a338:	e7c5      	b.n	800a2c6 <__lshift+0x4a>
 800a33a:	3904      	subs	r1, #4
 800a33c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a340:	f841 2f04 	str.w	r2, [r1, #4]!
 800a344:	459c      	cmp	ip, r3
 800a346:	d8f9      	bhi.n	800a33c <__lshift+0xc0>
 800a348:	e7ea      	b.n	800a320 <__lshift+0xa4>
 800a34a:	bf00      	nop
 800a34c:	0800bc5c 	.word	0x0800bc5c
 800a350:	0800bc6d 	.word	0x0800bc6d

0800a354 <__mcmp>:
 800a354:	690a      	ldr	r2, [r1, #16]
 800a356:	4603      	mov	r3, r0
 800a358:	6900      	ldr	r0, [r0, #16]
 800a35a:	1a80      	subs	r0, r0, r2
 800a35c:	b530      	push	{r4, r5, lr}
 800a35e:	d10e      	bne.n	800a37e <__mcmp+0x2a>
 800a360:	3314      	adds	r3, #20
 800a362:	3114      	adds	r1, #20
 800a364:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a368:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a36c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a370:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a374:	4295      	cmp	r5, r2
 800a376:	d003      	beq.n	800a380 <__mcmp+0x2c>
 800a378:	d205      	bcs.n	800a386 <__mcmp+0x32>
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295
 800a37e:	bd30      	pop	{r4, r5, pc}
 800a380:	42a3      	cmp	r3, r4
 800a382:	d3f3      	bcc.n	800a36c <__mcmp+0x18>
 800a384:	e7fb      	b.n	800a37e <__mcmp+0x2a>
 800a386:	2001      	movs	r0, #1
 800a388:	e7f9      	b.n	800a37e <__mcmp+0x2a>
	...

0800a38c <__mdiff>:
 800a38c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	4689      	mov	r9, r1
 800a392:	4606      	mov	r6, r0
 800a394:	4611      	mov	r1, r2
 800a396:	4648      	mov	r0, r9
 800a398:	4614      	mov	r4, r2
 800a39a:	f7ff ffdb 	bl	800a354 <__mcmp>
 800a39e:	1e05      	subs	r5, r0, #0
 800a3a0:	d112      	bne.n	800a3c8 <__mdiff+0x3c>
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7ff fd5b 	bl	8009e60 <_Balloc>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	b928      	cbnz	r0, 800a3ba <__mdiff+0x2e>
 800a3ae:	4b3f      	ldr	r3, [pc, #252]	@ (800a4ac <__mdiff+0x120>)
 800a3b0:	f240 2137 	movw	r1, #567	@ 0x237
 800a3b4:	483e      	ldr	r0, [pc, #248]	@ (800a4b0 <__mdiff+0x124>)
 800a3b6:	f000 fb03 	bl	800a9c0 <__assert_func>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	b003      	add	sp, #12
 800a3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c8:	bfbc      	itt	lt
 800a3ca:	464b      	movlt	r3, r9
 800a3cc:	46a1      	movlt	r9, r4
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3d4:	bfba      	itte	lt
 800a3d6:	461c      	movlt	r4, r3
 800a3d8:	2501      	movlt	r5, #1
 800a3da:	2500      	movge	r5, #0
 800a3dc:	f7ff fd40 	bl	8009e60 <_Balloc>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	b918      	cbnz	r0, 800a3ec <__mdiff+0x60>
 800a3e4:	4b31      	ldr	r3, [pc, #196]	@ (800a4ac <__mdiff+0x120>)
 800a3e6:	f240 2145 	movw	r1, #581	@ 0x245
 800a3ea:	e7e3      	b.n	800a3b4 <__mdiff+0x28>
 800a3ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a3f0:	6926      	ldr	r6, [r4, #16]
 800a3f2:	60c5      	str	r5, [r0, #12]
 800a3f4:	f109 0310 	add.w	r3, r9, #16
 800a3f8:	f109 0514 	add.w	r5, r9, #20
 800a3fc:	f104 0e14 	add.w	lr, r4, #20
 800a400:	f100 0b14 	add.w	fp, r0, #20
 800a404:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a408:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a40c:	9301      	str	r3, [sp, #4]
 800a40e:	46d9      	mov	r9, fp
 800a410:	f04f 0c00 	mov.w	ip, #0
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a41a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	fa1f f38a 	uxth.w	r3, sl
 800a424:	4619      	mov	r1, r3
 800a426:	b283      	uxth	r3, r0
 800a428:	1acb      	subs	r3, r1, r3
 800a42a:	0c00      	lsrs	r0, r0, #16
 800a42c:	4463      	add	r3, ip
 800a42e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a432:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a436:	b29b      	uxth	r3, r3
 800a438:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a43c:	4576      	cmp	r6, lr
 800a43e:	f849 3b04 	str.w	r3, [r9], #4
 800a442:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a446:	d8e5      	bhi.n	800a414 <__mdiff+0x88>
 800a448:	1b33      	subs	r3, r6, r4
 800a44a:	3b15      	subs	r3, #21
 800a44c:	f023 0303 	bic.w	r3, r3, #3
 800a450:	3415      	adds	r4, #21
 800a452:	3304      	adds	r3, #4
 800a454:	42a6      	cmp	r6, r4
 800a456:	bf38      	it	cc
 800a458:	2304      	movcc	r3, #4
 800a45a:	441d      	add	r5, r3
 800a45c:	445b      	add	r3, fp
 800a45e:	461e      	mov	r6, r3
 800a460:	462c      	mov	r4, r5
 800a462:	4544      	cmp	r4, r8
 800a464:	d30e      	bcc.n	800a484 <__mdiff+0xf8>
 800a466:	f108 0103 	add.w	r1, r8, #3
 800a46a:	1b49      	subs	r1, r1, r5
 800a46c:	f021 0103 	bic.w	r1, r1, #3
 800a470:	3d03      	subs	r5, #3
 800a472:	45a8      	cmp	r8, r5
 800a474:	bf38      	it	cc
 800a476:	2100      	movcc	r1, #0
 800a478:	440b      	add	r3, r1
 800a47a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a47e:	b191      	cbz	r1, 800a4a6 <__mdiff+0x11a>
 800a480:	6117      	str	r7, [r2, #16]
 800a482:	e79d      	b.n	800a3c0 <__mdiff+0x34>
 800a484:	f854 1b04 	ldr.w	r1, [r4], #4
 800a488:	46e6      	mov	lr, ip
 800a48a:	0c08      	lsrs	r0, r1, #16
 800a48c:	fa1c fc81 	uxtah	ip, ip, r1
 800a490:	4471      	add	r1, lr
 800a492:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a496:	b289      	uxth	r1, r1
 800a498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a49c:	f846 1b04 	str.w	r1, [r6], #4
 800a4a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4a4:	e7dd      	b.n	800a462 <__mdiff+0xd6>
 800a4a6:	3f01      	subs	r7, #1
 800a4a8:	e7e7      	b.n	800a47a <__mdiff+0xee>
 800a4aa:	bf00      	nop
 800a4ac:	0800bc5c 	.word	0x0800bc5c
 800a4b0:	0800bc6d 	.word	0x0800bc6d

0800a4b4 <__d2b>:
 800a4b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4b8:	460f      	mov	r7, r1
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	ec59 8b10 	vmov	r8, r9, d0
 800a4c0:	4616      	mov	r6, r2
 800a4c2:	f7ff fccd 	bl	8009e60 <_Balloc>
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	b930      	cbnz	r0, 800a4d8 <__d2b+0x24>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	4b23      	ldr	r3, [pc, #140]	@ (800a55c <__d2b+0xa8>)
 800a4ce:	4824      	ldr	r0, [pc, #144]	@ (800a560 <__d2b+0xac>)
 800a4d0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4d4:	f000 fa74 	bl	800a9c0 <__assert_func>
 800a4d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4e0:	b10d      	cbz	r5, 800a4e6 <__d2b+0x32>
 800a4e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	f1b8 0300 	subs.w	r3, r8, #0
 800a4ec:	d023      	beq.n	800a536 <__d2b+0x82>
 800a4ee:	4668      	mov	r0, sp
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	f7ff fd7c 	bl	8009fee <__lo0bits>
 800a4f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4fa:	b1d0      	cbz	r0, 800a532 <__d2b+0x7e>
 800a4fc:	f1c0 0320 	rsb	r3, r0, #32
 800a500:	fa02 f303 	lsl.w	r3, r2, r3
 800a504:	430b      	orrs	r3, r1
 800a506:	40c2      	lsrs	r2, r0
 800a508:	6163      	str	r3, [r4, #20]
 800a50a:	9201      	str	r2, [sp, #4]
 800a50c:	9b01      	ldr	r3, [sp, #4]
 800a50e:	61a3      	str	r3, [r4, #24]
 800a510:	2b00      	cmp	r3, #0
 800a512:	bf0c      	ite	eq
 800a514:	2201      	moveq	r2, #1
 800a516:	2202      	movne	r2, #2
 800a518:	6122      	str	r2, [r4, #16]
 800a51a:	b1a5      	cbz	r5, 800a546 <__d2b+0x92>
 800a51c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a520:	4405      	add	r5, r0
 800a522:	603d      	str	r5, [r7, #0]
 800a524:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a528:	6030      	str	r0, [r6, #0]
 800a52a:	4620      	mov	r0, r4
 800a52c:	b003      	add	sp, #12
 800a52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a532:	6161      	str	r1, [r4, #20]
 800a534:	e7ea      	b.n	800a50c <__d2b+0x58>
 800a536:	a801      	add	r0, sp, #4
 800a538:	f7ff fd59 	bl	8009fee <__lo0bits>
 800a53c:	9b01      	ldr	r3, [sp, #4]
 800a53e:	6163      	str	r3, [r4, #20]
 800a540:	3020      	adds	r0, #32
 800a542:	2201      	movs	r2, #1
 800a544:	e7e8      	b.n	800a518 <__d2b+0x64>
 800a546:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a54a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a54e:	6038      	str	r0, [r7, #0]
 800a550:	6918      	ldr	r0, [r3, #16]
 800a552:	f7ff fd2d 	bl	8009fb0 <__hi0bits>
 800a556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a55a:	e7e5      	b.n	800a528 <__d2b+0x74>
 800a55c:	0800bc5c 	.word	0x0800bc5c
 800a560:	0800bc6d 	.word	0x0800bc6d

0800a564 <__ssputs_r>:
 800a564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a568:	688e      	ldr	r6, [r1, #8]
 800a56a:	461f      	mov	r7, r3
 800a56c:	42be      	cmp	r6, r7
 800a56e:	680b      	ldr	r3, [r1, #0]
 800a570:	4682      	mov	sl, r0
 800a572:	460c      	mov	r4, r1
 800a574:	4690      	mov	r8, r2
 800a576:	d82d      	bhi.n	800a5d4 <__ssputs_r+0x70>
 800a578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a57c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a580:	d026      	beq.n	800a5d0 <__ssputs_r+0x6c>
 800a582:	6965      	ldr	r5, [r4, #20]
 800a584:	6909      	ldr	r1, [r1, #16]
 800a586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a58a:	eba3 0901 	sub.w	r9, r3, r1
 800a58e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a592:	1c7b      	adds	r3, r7, #1
 800a594:	444b      	add	r3, r9
 800a596:	106d      	asrs	r5, r5, #1
 800a598:	429d      	cmp	r5, r3
 800a59a:	bf38      	it	cc
 800a59c:	461d      	movcc	r5, r3
 800a59e:	0553      	lsls	r3, r2, #21
 800a5a0:	d527      	bpl.n	800a5f2 <__ssputs_r+0x8e>
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	f7ff fbd0 	bl	8009d48 <_malloc_r>
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	b360      	cbz	r0, 800a606 <__ssputs_r+0xa2>
 800a5ac:	6921      	ldr	r1, [r4, #16]
 800a5ae:	464a      	mov	r2, r9
 800a5b0:	f7fe fcf9 	bl	8008fa6 <memcpy>
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a5ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5be:	81a3      	strh	r3, [r4, #12]
 800a5c0:	6126      	str	r6, [r4, #16]
 800a5c2:	6165      	str	r5, [r4, #20]
 800a5c4:	444e      	add	r6, r9
 800a5c6:	eba5 0509 	sub.w	r5, r5, r9
 800a5ca:	6026      	str	r6, [r4, #0]
 800a5cc:	60a5      	str	r5, [r4, #8]
 800a5ce:	463e      	mov	r6, r7
 800a5d0:	42be      	cmp	r6, r7
 800a5d2:	d900      	bls.n	800a5d6 <__ssputs_r+0x72>
 800a5d4:	463e      	mov	r6, r7
 800a5d6:	6820      	ldr	r0, [r4, #0]
 800a5d8:	4632      	mov	r2, r6
 800a5da:	4641      	mov	r1, r8
 800a5dc:	f000 f9c6 	bl	800a96c <memmove>
 800a5e0:	68a3      	ldr	r3, [r4, #8]
 800a5e2:	1b9b      	subs	r3, r3, r6
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	4433      	add	r3, r6
 800a5ea:	6023      	str	r3, [r4, #0]
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	f000 fa28 	bl	800aa48 <_realloc_r>
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d1e0      	bne.n	800a5c0 <__ssputs_r+0x5c>
 800a5fe:	6921      	ldr	r1, [r4, #16]
 800a600:	4650      	mov	r0, sl
 800a602:	f7ff fb2d 	bl	8009c60 <_free_r>
 800a606:	230c      	movs	r3, #12
 800a608:	f8ca 3000 	str.w	r3, [sl]
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	e7e9      	b.n	800a5ee <__ssputs_r+0x8a>
	...

0800a61c <_svfiprintf_r>:
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	4698      	mov	r8, r3
 800a622:	898b      	ldrh	r3, [r1, #12]
 800a624:	061b      	lsls	r3, r3, #24
 800a626:	b09d      	sub	sp, #116	@ 0x74
 800a628:	4607      	mov	r7, r0
 800a62a:	460d      	mov	r5, r1
 800a62c:	4614      	mov	r4, r2
 800a62e:	d510      	bpl.n	800a652 <_svfiprintf_r+0x36>
 800a630:	690b      	ldr	r3, [r1, #16]
 800a632:	b973      	cbnz	r3, 800a652 <_svfiprintf_r+0x36>
 800a634:	2140      	movs	r1, #64	@ 0x40
 800a636:	f7ff fb87 	bl	8009d48 <_malloc_r>
 800a63a:	6028      	str	r0, [r5, #0]
 800a63c:	6128      	str	r0, [r5, #16]
 800a63e:	b930      	cbnz	r0, 800a64e <_svfiprintf_r+0x32>
 800a640:	230c      	movs	r3, #12
 800a642:	603b      	str	r3, [r7, #0]
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	b01d      	add	sp, #116	@ 0x74
 800a64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64e:	2340      	movs	r3, #64	@ 0x40
 800a650:	616b      	str	r3, [r5, #20]
 800a652:	2300      	movs	r3, #0
 800a654:	9309      	str	r3, [sp, #36]	@ 0x24
 800a656:	2320      	movs	r3, #32
 800a658:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a65c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a660:	2330      	movs	r3, #48	@ 0x30
 800a662:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a800 <_svfiprintf_r+0x1e4>
 800a666:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a66a:	f04f 0901 	mov.w	r9, #1
 800a66e:	4623      	mov	r3, r4
 800a670:	469a      	mov	sl, r3
 800a672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a676:	b10a      	cbz	r2, 800a67c <_svfiprintf_r+0x60>
 800a678:	2a25      	cmp	r2, #37	@ 0x25
 800a67a:	d1f9      	bne.n	800a670 <_svfiprintf_r+0x54>
 800a67c:	ebba 0b04 	subs.w	fp, sl, r4
 800a680:	d00b      	beq.n	800a69a <_svfiprintf_r+0x7e>
 800a682:	465b      	mov	r3, fp
 800a684:	4622      	mov	r2, r4
 800a686:	4629      	mov	r1, r5
 800a688:	4638      	mov	r0, r7
 800a68a:	f7ff ff6b 	bl	800a564 <__ssputs_r>
 800a68e:	3001      	adds	r0, #1
 800a690:	f000 80a7 	beq.w	800a7e2 <_svfiprintf_r+0x1c6>
 800a694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a696:	445a      	add	r2, fp
 800a698:	9209      	str	r2, [sp, #36]	@ 0x24
 800a69a:	f89a 3000 	ldrb.w	r3, [sl]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 809f 	beq.w	800a7e2 <_svfiprintf_r+0x1c6>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6ae:	f10a 0a01 	add.w	sl, sl, #1
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	9307      	str	r3, [sp, #28]
 800a6b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6bc:	4654      	mov	r4, sl
 800a6be:	2205      	movs	r2, #5
 800a6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c4:	484e      	ldr	r0, [pc, #312]	@ (800a800 <_svfiprintf_r+0x1e4>)
 800a6c6:	f7f5 fd83 	bl	80001d0 <memchr>
 800a6ca:	9a04      	ldr	r2, [sp, #16]
 800a6cc:	b9d8      	cbnz	r0, 800a706 <_svfiprintf_r+0xea>
 800a6ce:	06d0      	lsls	r0, r2, #27
 800a6d0:	bf44      	itt	mi
 800a6d2:	2320      	movmi	r3, #32
 800a6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6d8:	0711      	lsls	r1, r2, #28
 800a6da:	bf44      	itt	mi
 800a6dc:	232b      	movmi	r3, #43	@ 0x2b
 800a6de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6e8:	d015      	beq.n	800a716 <_svfiprintf_r+0xfa>
 800a6ea:	9a07      	ldr	r2, [sp, #28]
 800a6ec:	4654      	mov	r4, sl
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	f04f 0c0a 	mov.w	ip, #10
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6fa:	3b30      	subs	r3, #48	@ 0x30
 800a6fc:	2b09      	cmp	r3, #9
 800a6fe:	d94b      	bls.n	800a798 <_svfiprintf_r+0x17c>
 800a700:	b1b0      	cbz	r0, 800a730 <_svfiprintf_r+0x114>
 800a702:	9207      	str	r2, [sp, #28]
 800a704:	e014      	b.n	800a730 <_svfiprintf_r+0x114>
 800a706:	eba0 0308 	sub.w	r3, r0, r8
 800a70a:	fa09 f303 	lsl.w	r3, r9, r3
 800a70e:	4313      	orrs	r3, r2
 800a710:	9304      	str	r3, [sp, #16]
 800a712:	46a2      	mov	sl, r4
 800a714:	e7d2      	b.n	800a6bc <_svfiprintf_r+0xa0>
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	1d19      	adds	r1, r3, #4
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	9103      	str	r1, [sp, #12]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bfbb      	ittet	lt
 800a722:	425b      	neglt	r3, r3
 800a724:	f042 0202 	orrlt.w	r2, r2, #2
 800a728:	9307      	strge	r3, [sp, #28]
 800a72a:	9307      	strlt	r3, [sp, #28]
 800a72c:	bfb8      	it	lt
 800a72e:	9204      	strlt	r2, [sp, #16]
 800a730:	7823      	ldrb	r3, [r4, #0]
 800a732:	2b2e      	cmp	r3, #46	@ 0x2e
 800a734:	d10a      	bne.n	800a74c <_svfiprintf_r+0x130>
 800a736:	7863      	ldrb	r3, [r4, #1]
 800a738:	2b2a      	cmp	r3, #42	@ 0x2a
 800a73a:	d132      	bne.n	800a7a2 <_svfiprintf_r+0x186>
 800a73c:	9b03      	ldr	r3, [sp, #12]
 800a73e:	1d1a      	adds	r2, r3, #4
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	9203      	str	r2, [sp, #12]
 800a744:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a748:	3402      	adds	r4, #2
 800a74a:	9305      	str	r3, [sp, #20]
 800a74c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a810 <_svfiprintf_r+0x1f4>
 800a750:	7821      	ldrb	r1, [r4, #0]
 800a752:	2203      	movs	r2, #3
 800a754:	4650      	mov	r0, sl
 800a756:	f7f5 fd3b 	bl	80001d0 <memchr>
 800a75a:	b138      	cbz	r0, 800a76c <_svfiprintf_r+0x150>
 800a75c:	9b04      	ldr	r3, [sp, #16]
 800a75e:	eba0 000a 	sub.w	r0, r0, sl
 800a762:	2240      	movs	r2, #64	@ 0x40
 800a764:	4082      	lsls	r2, r0
 800a766:	4313      	orrs	r3, r2
 800a768:	3401      	adds	r4, #1
 800a76a:	9304      	str	r3, [sp, #16]
 800a76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a770:	4824      	ldr	r0, [pc, #144]	@ (800a804 <_svfiprintf_r+0x1e8>)
 800a772:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a776:	2206      	movs	r2, #6
 800a778:	f7f5 fd2a 	bl	80001d0 <memchr>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d036      	beq.n	800a7ee <_svfiprintf_r+0x1d2>
 800a780:	4b21      	ldr	r3, [pc, #132]	@ (800a808 <_svfiprintf_r+0x1ec>)
 800a782:	bb1b      	cbnz	r3, 800a7cc <_svfiprintf_r+0x1b0>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	3307      	adds	r3, #7
 800a788:	f023 0307 	bic.w	r3, r3, #7
 800a78c:	3308      	adds	r3, #8
 800a78e:	9303      	str	r3, [sp, #12]
 800a790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a792:	4433      	add	r3, r6
 800a794:	9309      	str	r3, [sp, #36]	@ 0x24
 800a796:	e76a      	b.n	800a66e <_svfiprintf_r+0x52>
 800a798:	fb0c 3202 	mla	r2, ip, r2, r3
 800a79c:	460c      	mov	r4, r1
 800a79e:	2001      	movs	r0, #1
 800a7a0:	e7a8      	b.n	800a6f4 <_svfiprintf_r+0xd8>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	3401      	adds	r4, #1
 800a7a6:	9305      	str	r3, [sp, #20]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f04f 0c0a 	mov.w	ip, #10
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7b4:	3a30      	subs	r2, #48	@ 0x30
 800a7b6:	2a09      	cmp	r2, #9
 800a7b8:	d903      	bls.n	800a7c2 <_svfiprintf_r+0x1a6>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0c6      	beq.n	800a74c <_svfiprintf_r+0x130>
 800a7be:	9105      	str	r1, [sp, #20]
 800a7c0:	e7c4      	b.n	800a74c <_svfiprintf_r+0x130>
 800a7c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e7f0      	b.n	800a7ae <_svfiprintf_r+0x192>
 800a7cc:	ab03      	add	r3, sp, #12
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	462a      	mov	r2, r5
 800a7d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a80c <_svfiprintf_r+0x1f0>)
 800a7d4:	a904      	add	r1, sp, #16
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	f7fd fe88 	bl	80084ec <_printf_float>
 800a7dc:	1c42      	adds	r2, r0, #1
 800a7de:	4606      	mov	r6, r0
 800a7e0:	d1d6      	bne.n	800a790 <_svfiprintf_r+0x174>
 800a7e2:	89ab      	ldrh	r3, [r5, #12]
 800a7e4:	065b      	lsls	r3, r3, #25
 800a7e6:	f53f af2d 	bmi.w	800a644 <_svfiprintf_r+0x28>
 800a7ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7ec:	e72c      	b.n	800a648 <_svfiprintf_r+0x2c>
 800a7ee:	ab03      	add	r3, sp, #12
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	462a      	mov	r2, r5
 800a7f4:	4b05      	ldr	r3, [pc, #20]	@ (800a80c <_svfiprintf_r+0x1f0>)
 800a7f6:	a904      	add	r1, sp, #16
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	f7fe f90f 	bl	8008a1c <_printf_i>
 800a7fe:	e7ed      	b.n	800a7dc <_svfiprintf_r+0x1c0>
 800a800:	0800bdc8 	.word	0x0800bdc8
 800a804:	0800bdd2 	.word	0x0800bdd2
 800a808:	080084ed 	.word	0x080084ed
 800a80c:	0800a565 	.word	0x0800a565
 800a810:	0800bdce 	.word	0x0800bdce

0800a814 <__sflush_r>:
 800a814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81c:	0716      	lsls	r6, r2, #28
 800a81e:	4605      	mov	r5, r0
 800a820:	460c      	mov	r4, r1
 800a822:	d454      	bmi.n	800a8ce <__sflush_r+0xba>
 800a824:	684b      	ldr	r3, [r1, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	dc02      	bgt.n	800a830 <__sflush_r+0x1c>
 800a82a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dd48      	ble.n	800a8c2 <__sflush_r+0xae>
 800a830:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a832:	2e00      	cmp	r6, #0
 800a834:	d045      	beq.n	800a8c2 <__sflush_r+0xae>
 800a836:	2300      	movs	r3, #0
 800a838:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a83c:	682f      	ldr	r7, [r5, #0]
 800a83e:	6a21      	ldr	r1, [r4, #32]
 800a840:	602b      	str	r3, [r5, #0]
 800a842:	d030      	beq.n	800a8a6 <__sflush_r+0x92>
 800a844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a846:	89a3      	ldrh	r3, [r4, #12]
 800a848:	0759      	lsls	r1, r3, #29
 800a84a:	d505      	bpl.n	800a858 <__sflush_r+0x44>
 800a84c:	6863      	ldr	r3, [r4, #4]
 800a84e:	1ad2      	subs	r2, r2, r3
 800a850:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a852:	b10b      	cbz	r3, 800a858 <__sflush_r+0x44>
 800a854:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a856:	1ad2      	subs	r2, r2, r3
 800a858:	2300      	movs	r3, #0
 800a85a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a85c:	6a21      	ldr	r1, [r4, #32]
 800a85e:	4628      	mov	r0, r5
 800a860:	47b0      	blx	r6
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	89a3      	ldrh	r3, [r4, #12]
 800a866:	d106      	bne.n	800a876 <__sflush_r+0x62>
 800a868:	6829      	ldr	r1, [r5, #0]
 800a86a:	291d      	cmp	r1, #29
 800a86c:	d82b      	bhi.n	800a8c6 <__sflush_r+0xb2>
 800a86e:	4a2a      	ldr	r2, [pc, #168]	@ (800a918 <__sflush_r+0x104>)
 800a870:	410a      	asrs	r2, r1
 800a872:	07d6      	lsls	r6, r2, #31
 800a874:	d427      	bmi.n	800a8c6 <__sflush_r+0xb2>
 800a876:	2200      	movs	r2, #0
 800a878:	6062      	str	r2, [r4, #4]
 800a87a:	04d9      	lsls	r1, r3, #19
 800a87c:	6922      	ldr	r2, [r4, #16]
 800a87e:	6022      	str	r2, [r4, #0]
 800a880:	d504      	bpl.n	800a88c <__sflush_r+0x78>
 800a882:	1c42      	adds	r2, r0, #1
 800a884:	d101      	bne.n	800a88a <__sflush_r+0x76>
 800a886:	682b      	ldr	r3, [r5, #0]
 800a888:	b903      	cbnz	r3, 800a88c <__sflush_r+0x78>
 800a88a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a88c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a88e:	602f      	str	r7, [r5, #0]
 800a890:	b1b9      	cbz	r1, 800a8c2 <__sflush_r+0xae>
 800a892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a896:	4299      	cmp	r1, r3
 800a898:	d002      	beq.n	800a8a0 <__sflush_r+0x8c>
 800a89a:	4628      	mov	r0, r5
 800a89c:	f7ff f9e0 	bl	8009c60 <_free_r>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8a4:	e00d      	b.n	800a8c2 <__sflush_r+0xae>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b0      	blx	r6
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	1c50      	adds	r0, r2, #1
 800a8b0:	d1c9      	bne.n	800a846 <__sflush_r+0x32>
 800a8b2:	682b      	ldr	r3, [r5, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d0c6      	beq.n	800a846 <__sflush_r+0x32>
 800a8b8:	2b1d      	cmp	r3, #29
 800a8ba:	d001      	beq.n	800a8c0 <__sflush_r+0xac>
 800a8bc:	2b16      	cmp	r3, #22
 800a8be:	d11e      	bne.n	800a8fe <__sflush_r+0xea>
 800a8c0:	602f      	str	r7, [r5, #0]
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	e022      	b.n	800a90c <__sflush_r+0xf8>
 800a8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ca:	b21b      	sxth	r3, r3
 800a8cc:	e01b      	b.n	800a906 <__sflush_r+0xf2>
 800a8ce:	690f      	ldr	r7, [r1, #16]
 800a8d0:	2f00      	cmp	r7, #0
 800a8d2:	d0f6      	beq.n	800a8c2 <__sflush_r+0xae>
 800a8d4:	0793      	lsls	r3, r2, #30
 800a8d6:	680e      	ldr	r6, [r1, #0]
 800a8d8:	bf08      	it	eq
 800a8da:	694b      	ldreq	r3, [r1, #20]
 800a8dc:	600f      	str	r7, [r1, #0]
 800a8de:	bf18      	it	ne
 800a8e0:	2300      	movne	r3, #0
 800a8e2:	eba6 0807 	sub.w	r8, r6, r7
 800a8e6:	608b      	str	r3, [r1, #8]
 800a8e8:	f1b8 0f00 	cmp.w	r8, #0
 800a8ec:	dde9      	ble.n	800a8c2 <__sflush_r+0xae>
 800a8ee:	6a21      	ldr	r1, [r4, #32]
 800a8f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8f2:	4643      	mov	r3, r8
 800a8f4:	463a      	mov	r2, r7
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b0      	blx	r6
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	dc08      	bgt.n	800a910 <__sflush_r+0xfc>
 800a8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a910:	4407      	add	r7, r0
 800a912:	eba8 0800 	sub.w	r8, r8, r0
 800a916:	e7e7      	b.n	800a8e8 <__sflush_r+0xd4>
 800a918:	dfbffffe 	.word	0xdfbffffe

0800a91c <_fflush_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	690b      	ldr	r3, [r1, #16]
 800a920:	4605      	mov	r5, r0
 800a922:	460c      	mov	r4, r1
 800a924:	b913      	cbnz	r3, 800a92c <_fflush_r+0x10>
 800a926:	2500      	movs	r5, #0
 800a928:	4628      	mov	r0, r5
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	b118      	cbz	r0, 800a936 <_fflush_r+0x1a>
 800a92e:	6a03      	ldr	r3, [r0, #32]
 800a930:	b90b      	cbnz	r3, 800a936 <_fflush_r+0x1a>
 800a932:	f7fe fa1f 	bl	8008d74 <__sinit>
 800a936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0f3      	beq.n	800a926 <_fflush_r+0xa>
 800a93e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a940:	07d0      	lsls	r0, r2, #31
 800a942:	d404      	bmi.n	800a94e <_fflush_r+0x32>
 800a944:	0599      	lsls	r1, r3, #22
 800a946:	d402      	bmi.n	800a94e <_fflush_r+0x32>
 800a948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a94a:	f7fe fb2a 	bl	8008fa2 <__retarget_lock_acquire_recursive>
 800a94e:	4628      	mov	r0, r5
 800a950:	4621      	mov	r1, r4
 800a952:	f7ff ff5f 	bl	800a814 <__sflush_r>
 800a956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a958:	07da      	lsls	r2, r3, #31
 800a95a:	4605      	mov	r5, r0
 800a95c:	d4e4      	bmi.n	800a928 <_fflush_r+0xc>
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	059b      	lsls	r3, r3, #22
 800a962:	d4e1      	bmi.n	800a928 <_fflush_r+0xc>
 800a964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a966:	f7fe fb1d 	bl	8008fa4 <__retarget_lock_release_recursive>
 800a96a:	e7dd      	b.n	800a928 <_fflush_r+0xc>

0800a96c <memmove>:
 800a96c:	4288      	cmp	r0, r1
 800a96e:	b510      	push	{r4, lr}
 800a970:	eb01 0402 	add.w	r4, r1, r2
 800a974:	d902      	bls.n	800a97c <memmove+0x10>
 800a976:	4284      	cmp	r4, r0
 800a978:	4623      	mov	r3, r4
 800a97a:	d807      	bhi.n	800a98c <memmove+0x20>
 800a97c:	1e43      	subs	r3, r0, #1
 800a97e:	42a1      	cmp	r1, r4
 800a980:	d008      	beq.n	800a994 <memmove+0x28>
 800a982:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a98a:	e7f8      	b.n	800a97e <memmove+0x12>
 800a98c:	4402      	add	r2, r0
 800a98e:	4601      	mov	r1, r0
 800a990:	428a      	cmp	r2, r1
 800a992:	d100      	bne.n	800a996 <memmove+0x2a>
 800a994:	bd10      	pop	{r4, pc}
 800a996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a99a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a99e:	e7f7      	b.n	800a990 <memmove+0x24>

0800a9a0 <_sbrk_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4d06      	ldr	r5, [pc, #24]	@ (800a9bc <_sbrk_r+0x1c>)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	602b      	str	r3, [r5, #0]
 800a9ac:	f7f7 fd40 	bl	8002430 <_sbrk>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	d102      	bne.n	800a9ba <_sbrk_r+0x1a>
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	b103      	cbz	r3, 800a9ba <_sbrk_r+0x1a>
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	200049a0 	.word	0x200049a0

0800a9c0 <__assert_func>:
 800a9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9c2:	4614      	mov	r4, r2
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	4b09      	ldr	r3, [pc, #36]	@ (800a9ec <__assert_func+0x2c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4605      	mov	r5, r0
 800a9cc:	68d8      	ldr	r0, [r3, #12]
 800a9ce:	b954      	cbnz	r4, 800a9e6 <__assert_func+0x26>
 800a9d0:	4b07      	ldr	r3, [pc, #28]	@ (800a9f0 <__assert_func+0x30>)
 800a9d2:	461c      	mov	r4, r3
 800a9d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9d8:	9100      	str	r1, [sp, #0]
 800a9da:	462b      	mov	r3, r5
 800a9dc:	4905      	ldr	r1, [pc, #20]	@ (800a9f4 <__assert_func+0x34>)
 800a9de:	f000 f86f 	bl	800aac0 <fiprintf>
 800a9e2:	f000 f87f 	bl	800aae4 <abort>
 800a9e6:	4b04      	ldr	r3, [pc, #16]	@ (800a9f8 <__assert_func+0x38>)
 800a9e8:	e7f4      	b.n	800a9d4 <__assert_func+0x14>
 800a9ea:	bf00      	nop
 800a9ec:	2000001c 	.word	0x2000001c
 800a9f0:	0800be1e 	.word	0x0800be1e
 800a9f4:	0800bdf0 	.word	0x0800bdf0
 800a9f8:	0800bde3 	.word	0x0800bde3

0800a9fc <_calloc_r>:
 800a9fc:	b570      	push	{r4, r5, r6, lr}
 800a9fe:	fba1 5402 	umull	r5, r4, r1, r2
 800aa02:	b93c      	cbnz	r4, 800aa14 <_calloc_r+0x18>
 800aa04:	4629      	mov	r1, r5
 800aa06:	f7ff f99f 	bl	8009d48 <_malloc_r>
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	b928      	cbnz	r0, 800aa1a <_calloc_r+0x1e>
 800aa0e:	2600      	movs	r6, #0
 800aa10:	4630      	mov	r0, r6
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
 800aa14:	220c      	movs	r2, #12
 800aa16:	6002      	str	r2, [r0, #0]
 800aa18:	e7f9      	b.n	800aa0e <_calloc_r+0x12>
 800aa1a:	462a      	mov	r2, r5
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	f7fe fa42 	bl	8008ea6 <memset>
 800aa22:	e7f5      	b.n	800aa10 <_calloc_r+0x14>

0800aa24 <__ascii_mbtowc>:
 800aa24:	b082      	sub	sp, #8
 800aa26:	b901      	cbnz	r1, 800aa2a <__ascii_mbtowc+0x6>
 800aa28:	a901      	add	r1, sp, #4
 800aa2a:	b142      	cbz	r2, 800aa3e <__ascii_mbtowc+0x1a>
 800aa2c:	b14b      	cbz	r3, 800aa42 <__ascii_mbtowc+0x1e>
 800aa2e:	7813      	ldrb	r3, [r2, #0]
 800aa30:	600b      	str	r3, [r1, #0]
 800aa32:	7812      	ldrb	r2, [r2, #0]
 800aa34:	1e10      	subs	r0, r2, #0
 800aa36:	bf18      	it	ne
 800aa38:	2001      	movne	r0, #1
 800aa3a:	b002      	add	sp, #8
 800aa3c:	4770      	bx	lr
 800aa3e:	4610      	mov	r0, r2
 800aa40:	e7fb      	b.n	800aa3a <__ascii_mbtowc+0x16>
 800aa42:	f06f 0001 	mvn.w	r0, #1
 800aa46:	e7f8      	b.n	800aa3a <__ascii_mbtowc+0x16>

0800aa48 <_realloc_r>:
 800aa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4c:	4680      	mov	r8, r0
 800aa4e:	4615      	mov	r5, r2
 800aa50:	460c      	mov	r4, r1
 800aa52:	b921      	cbnz	r1, 800aa5e <_realloc_r+0x16>
 800aa54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa58:	4611      	mov	r1, r2
 800aa5a:	f7ff b975 	b.w	8009d48 <_malloc_r>
 800aa5e:	b92a      	cbnz	r2, 800aa6c <_realloc_r+0x24>
 800aa60:	f7ff f8fe 	bl	8009c60 <_free_r>
 800aa64:	2400      	movs	r4, #0
 800aa66:	4620      	mov	r0, r4
 800aa68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa6c:	f000 f841 	bl	800aaf2 <_malloc_usable_size_r>
 800aa70:	4285      	cmp	r5, r0
 800aa72:	4606      	mov	r6, r0
 800aa74:	d802      	bhi.n	800aa7c <_realloc_r+0x34>
 800aa76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa7a:	d8f4      	bhi.n	800aa66 <_realloc_r+0x1e>
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4640      	mov	r0, r8
 800aa80:	f7ff f962 	bl	8009d48 <_malloc_r>
 800aa84:	4607      	mov	r7, r0
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d0ec      	beq.n	800aa64 <_realloc_r+0x1c>
 800aa8a:	42b5      	cmp	r5, r6
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	4621      	mov	r1, r4
 800aa90:	bf28      	it	cs
 800aa92:	4632      	movcs	r2, r6
 800aa94:	f7fe fa87 	bl	8008fa6 <memcpy>
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4640      	mov	r0, r8
 800aa9c:	f7ff f8e0 	bl	8009c60 <_free_r>
 800aaa0:	463c      	mov	r4, r7
 800aaa2:	e7e0      	b.n	800aa66 <_realloc_r+0x1e>

0800aaa4 <__ascii_wctomb>:
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	4608      	mov	r0, r1
 800aaa8:	b141      	cbz	r1, 800aabc <__ascii_wctomb+0x18>
 800aaaa:	2aff      	cmp	r2, #255	@ 0xff
 800aaac:	d904      	bls.n	800aab8 <__ascii_wctomb+0x14>
 800aaae:	228a      	movs	r2, #138	@ 0x8a
 800aab0:	601a      	str	r2, [r3, #0]
 800aab2:	f04f 30ff 	mov.w	r0, #4294967295
 800aab6:	4770      	bx	lr
 800aab8:	700a      	strb	r2, [r1, #0]
 800aaba:	2001      	movs	r0, #1
 800aabc:	4770      	bx	lr
	...

0800aac0 <fiprintf>:
 800aac0:	b40e      	push	{r1, r2, r3}
 800aac2:	b503      	push	{r0, r1, lr}
 800aac4:	4601      	mov	r1, r0
 800aac6:	ab03      	add	r3, sp, #12
 800aac8:	4805      	ldr	r0, [pc, #20]	@ (800aae0 <fiprintf+0x20>)
 800aaca:	f853 2b04 	ldr.w	r2, [r3], #4
 800aace:	6800      	ldr	r0, [r0, #0]
 800aad0:	9301      	str	r3, [sp, #4]
 800aad2:	f000 f83f 	bl	800ab54 <_vfiprintf_r>
 800aad6:	b002      	add	sp, #8
 800aad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aadc:	b003      	add	sp, #12
 800aade:	4770      	bx	lr
 800aae0:	2000001c 	.word	0x2000001c

0800aae4 <abort>:
 800aae4:	b508      	push	{r3, lr}
 800aae6:	2006      	movs	r0, #6
 800aae8:	f000 fa08 	bl	800aefc <raise>
 800aaec:	2001      	movs	r0, #1
 800aaee:	f7f7 fc27 	bl	8002340 <_exit>

0800aaf2 <_malloc_usable_size_r>:
 800aaf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf6:	1f18      	subs	r0, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bfbc      	itt	lt
 800aafc:	580b      	ldrlt	r3, [r1, r0]
 800aafe:	18c0      	addlt	r0, r0, r3
 800ab00:	4770      	bx	lr

0800ab02 <__sfputc_r>:
 800ab02:	6893      	ldr	r3, [r2, #8]
 800ab04:	3b01      	subs	r3, #1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	b410      	push	{r4}
 800ab0a:	6093      	str	r3, [r2, #8]
 800ab0c:	da08      	bge.n	800ab20 <__sfputc_r+0x1e>
 800ab0e:	6994      	ldr	r4, [r2, #24]
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	db01      	blt.n	800ab18 <__sfputc_r+0x16>
 800ab14:	290a      	cmp	r1, #10
 800ab16:	d103      	bne.n	800ab20 <__sfputc_r+0x1e>
 800ab18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab1c:	f000 b932 	b.w	800ad84 <__swbuf_r>
 800ab20:	6813      	ldr	r3, [r2, #0]
 800ab22:	1c58      	adds	r0, r3, #1
 800ab24:	6010      	str	r0, [r2, #0]
 800ab26:	7019      	strb	r1, [r3, #0]
 800ab28:	4608      	mov	r0, r1
 800ab2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <__sfputs_r>:
 800ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab32:	4606      	mov	r6, r0
 800ab34:	460f      	mov	r7, r1
 800ab36:	4614      	mov	r4, r2
 800ab38:	18d5      	adds	r5, r2, r3
 800ab3a:	42ac      	cmp	r4, r5
 800ab3c:	d101      	bne.n	800ab42 <__sfputs_r+0x12>
 800ab3e:	2000      	movs	r0, #0
 800ab40:	e007      	b.n	800ab52 <__sfputs_r+0x22>
 800ab42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab46:	463a      	mov	r2, r7
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7ff ffda 	bl	800ab02 <__sfputc_r>
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	d1f3      	bne.n	800ab3a <__sfputs_r+0xa>
 800ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab54 <_vfiprintf_r>:
 800ab54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	460d      	mov	r5, r1
 800ab5a:	b09d      	sub	sp, #116	@ 0x74
 800ab5c:	4614      	mov	r4, r2
 800ab5e:	4698      	mov	r8, r3
 800ab60:	4606      	mov	r6, r0
 800ab62:	b118      	cbz	r0, 800ab6c <_vfiprintf_r+0x18>
 800ab64:	6a03      	ldr	r3, [r0, #32]
 800ab66:	b90b      	cbnz	r3, 800ab6c <_vfiprintf_r+0x18>
 800ab68:	f7fe f904 	bl	8008d74 <__sinit>
 800ab6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab6e:	07d9      	lsls	r1, r3, #31
 800ab70:	d405      	bmi.n	800ab7e <_vfiprintf_r+0x2a>
 800ab72:	89ab      	ldrh	r3, [r5, #12]
 800ab74:	059a      	lsls	r2, r3, #22
 800ab76:	d402      	bmi.n	800ab7e <_vfiprintf_r+0x2a>
 800ab78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab7a:	f7fe fa12 	bl	8008fa2 <__retarget_lock_acquire_recursive>
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	071b      	lsls	r3, r3, #28
 800ab82:	d501      	bpl.n	800ab88 <_vfiprintf_r+0x34>
 800ab84:	692b      	ldr	r3, [r5, #16]
 800ab86:	b99b      	cbnz	r3, 800abb0 <_vfiprintf_r+0x5c>
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f000 f938 	bl	800ae00 <__swsetup_r>
 800ab90:	b170      	cbz	r0, 800abb0 <_vfiprintf_r+0x5c>
 800ab92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab94:	07dc      	lsls	r4, r3, #31
 800ab96:	d504      	bpl.n	800aba2 <_vfiprintf_r+0x4e>
 800ab98:	f04f 30ff 	mov.w	r0, #4294967295
 800ab9c:	b01d      	add	sp, #116	@ 0x74
 800ab9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba2:	89ab      	ldrh	r3, [r5, #12]
 800aba4:	0598      	lsls	r0, r3, #22
 800aba6:	d4f7      	bmi.n	800ab98 <_vfiprintf_r+0x44>
 800aba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abaa:	f7fe f9fb 	bl	8008fa4 <__retarget_lock_release_recursive>
 800abae:	e7f3      	b.n	800ab98 <_vfiprintf_r+0x44>
 800abb0:	2300      	movs	r3, #0
 800abb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800abb4:	2320      	movs	r3, #32
 800abb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abba:	f8cd 800c 	str.w	r8, [sp, #12]
 800abbe:	2330      	movs	r3, #48	@ 0x30
 800abc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad70 <_vfiprintf_r+0x21c>
 800abc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abc8:	f04f 0901 	mov.w	r9, #1
 800abcc:	4623      	mov	r3, r4
 800abce:	469a      	mov	sl, r3
 800abd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd4:	b10a      	cbz	r2, 800abda <_vfiprintf_r+0x86>
 800abd6:	2a25      	cmp	r2, #37	@ 0x25
 800abd8:	d1f9      	bne.n	800abce <_vfiprintf_r+0x7a>
 800abda:	ebba 0b04 	subs.w	fp, sl, r4
 800abde:	d00b      	beq.n	800abf8 <_vfiprintf_r+0xa4>
 800abe0:	465b      	mov	r3, fp
 800abe2:	4622      	mov	r2, r4
 800abe4:	4629      	mov	r1, r5
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7ff ffa2 	bl	800ab30 <__sfputs_r>
 800abec:	3001      	adds	r0, #1
 800abee:	f000 80a7 	beq.w	800ad40 <_vfiprintf_r+0x1ec>
 800abf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abf4:	445a      	add	r2, fp
 800abf6:	9209      	str	r2, [sp, #36]	@ 0x24
 800abf8:	f89a 3000 	ldrb.w	r3, [sl]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 809f 	beq.w	800ad40 <_vfiprintf_r+0x1ec>
 800ac02:	2300      	movs	r3, #0
 800ac04:	f04f 32ff 	mov.w	r2, #4294967295
 800ac08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac0c:	f10a 0a01 	add.w	sl, sl, #1
 800ac10:	9304      	str	r3, [sp, #16]
 800ac12:	9307      	str	r3, [sp, #28]
 800ac14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac18:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac1a:	4654      	mov	r4, sl
 800ac1c:	2205      	movs	r2, #5
 800ac1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac22:	4853      	ldr	r0, [pc, #332]	@ (800ad70 <_vfiprintf_r+0x21c>)
 800ac24:	f7f5 fad4 	bl	80001d0 <memchr>
 800ac28:	9a04      	ldr	r2, [sp, #16]
 800ac2a:	b9d8      	cbnz	r0, 800ac64 <_vfiprintf_r+0x110>
 800ac2c:	06d1      	lsls	r1, r2, #27
 800ac2e:	bf44      	itt	mi
 800ac30:	2320      	movmi	r3, #32
 800ac32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac36:	0713      	lsls	r3, r2, #28
 800ac38:	bf44      	itt	mi
 800ac3a:	232b      	movmi	r3, #43	@ 0x2b
 800ac3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac40:	f89a 3000 	ldrb.w	r3, [sl]
 800ac44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac46:	d015      	beq.n	800ac74 <_vfiprintf_r+0x120>
 800ac48:	9a07      	ldr	r2, [sp, #28]
 800ac4a:	4654      	mov	r4, sl
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	f04f 0c0a 	mov.w	ip, #10
 800ac52:	4621      	mov	r1, r4
 800ac54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac58:	3b30      	subs	r3, #48	@ 0x30
 800ac5a:	2b09      	cmp	r3, #9
 800ac5c:	d94b      	bls.n	800acf6 <_vfiprintf_r+0x1a2>
 800ac5e:	b1b0      	cbz	r0, 800ac8e <_vfiprintf_r+0x13a>
 800ac60:	9207      	str	r2, [sp, #28]
 800ac62:	e014      	b.n	800ac8e <_vfiprintf_r+0x13a>
 800ac64:	eba0 0308 	sub.w	r3, r0, r8
 800ac68:	fa09 f303 	lsl.w	r3, r9, r3
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	9304      	str	r3, [sp, #16]
 800ac70:	46a2      	mov	sl, r4
 800ac72:	e7d2      	b.n	800ac1a <_vfiprintf_r+0xc6>
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	1d19      	adds	r1, r3, #4
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	9103      	str	r1, [sp, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	bfbb      	ittet	lt
 800ac80:	425b      	neglt	r3, r3
 800ac82:	f042 0202 	orrlt.w	r2, r2, #2
 800ac86:	9307      	strge	r3, [sp, #28]
 800ac88:	9307      	strlt	r3, [sp, #28]
 800ac8a:	bfb8      	it	lt
 800ac8c:	9204      	strlt	r2, [sp, #16]
 800ac8e:	7823      	ldrb	r3, [r4, #0]
 800ac90:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac92:	d10a      	bne.n	800acaa <_vfiprintf_r+0x156>
 800ac94:	7863      	ldrb	r3, [r4, #1]
 800ac96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac98:	d132      	bne.n	800ad00 <_vfiprintf_r+0x1ac>
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	1d1a      	adds	r2, r3, #4
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	9203      	str	r2, [sp, #12]
 800aca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aca6:	3402      	adds	r4, #2
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad80 <_vfiprintf_r+0x22c>
 800acae:	7821      	ldrb	r1, [r4, #0]
 800acb0:	2203      	movs	r2, #3
 800acb2:	4650      	mov	r0, sl
 800acb4:	f7f5 fa8c 	bl	80001d0 <memchr>
 800acb8:	b138      	cbz	r0, 800acca <_vfiprintf_r+0x176>
 800acba:	9b04      	ldr	r3, [sp, #16]
 800acbc:	eba0 000a 	sub.w	r0, r0, sl
 800acc0:	2240      	movs	r2, #64	@ 0x40
 800acc2:	4082      	lsls	r2, r0
 800acc4:	4313      	orrs	r3, r2
 800acc6:	3401      	adds	r4, #1
 800acc8:	9304      	str	r3, [sp, #16]
 800acca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acce:	4829      	ldr	r0, [pc, #164]	@ (800ad74 <_vfiprintf_r+0x220>)
 800acd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acd4:	2206      	movs	r2, #6
 800acd6:	f7f5 fa7b 	bl	80001d0 <memchr>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d03f      	beq.n	800ad5e <_vfiprintf_r+0x20a>
 800acde:	4b26      	ldr	r3, [pc, #152]	@ (800ad78 <_vfiprintf_r+0x224>)
 800ace0:	bb1b      	cbnz	r3, 800ad2a <_vfiprintf_r+0x1d6>
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	3307      	adds	r3, #7
 800ace6:	f023 0307 	bic.w	r3, r3, #7
 800acea:	3308      	adds	r3, #8
 800acec:	9303      	str	r3, [sp, #12]
 800acee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf0:	443b      	add	r3, r7
 800acf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800acf4:	e76a      	b.n	800abcc <_vfiprintf_r+0x78>
 800acf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800acfa:	460c      	mov	r4, r1
 800acfc:	2001      	movs	r0, #1
 800acfe:	e7a8      	b.n	800ac52 <_vfiprintf_r+0xfe>
 800ad00:	2300      	movs	r3, #0
 800ad02:	3401      	adds	r4, #1
 800ad04:	9305      	str	r3, [sp, #20]
 800ad06:	4619      	mov	r1, r3
 800ad08:	f04f 0c0a 	mov.w	ip, #10
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad12:	3a30      	subs	r2, #48	@ 0x30
 800ad14:	2a09      	cmp	r2, #9
 800ad16:	d903      	bls.n	800ad20 <_vfiprintf_r+0x1cc>
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0c6      	beq.n	800acaa <_vfiprintf_r+0x156>
 800ad1c:	9105      	str	r1, [sp, #20]
 800ad1e:	e7c4      	b.n	800acaa <_vfiprintf_r+0x156>
 800ad20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad24:	4604      	mov	r4, r0
 800ad26:	2301      	movs	r3, #1
 800ad28:	e7f0      	b.n	800ad0c <_vfiprintf_r+0x1b8>
 800ad2a:	ab03      	add	r3, sp, #12
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	462a      	mov	r2, r5
 800ad30:	4b12      	ldr	r3, [pc, #72]	@ (800ad7c <_vfiprintf_r+0x228>)
 800ad32:	a904      	add	r1, sp, #16
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7fd fbd9 	bl	80084ec <_printf_float>
 800ad3a:	4607      	mov	r7, r0
 800ad3c:	1c78      	adds	r0, r7, #1
 800ad3e:	d1d6      	bne.n	800acee <_vfiprintf_r+0x19a>
 800ad40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad42:	07d9      	lsls	r1, r3, #31
 800ad44:	d405      	bmi.n	800ad52 <_vfiprintf_r+0x1fe>
 800ad46:	89ab      	ldrh	r3, [r5, #12]
 800ad48:	059a      	lsls	r2, r3, #22
 800ad4a:	d402      	bmi.n	800ad52 <_vfiprintf_r+0x1fe>
 800ad4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad4e:	f7fe f929 	bl	8008fa4 <__retarget_lock_release_recursive>
 800ad52:	89ab      	ldrh	r3, [r5, #12]
 800ad54:	065b      	lsls	r3, r3, #25
 800ad56:	f53f af1f 	bmi.w	800ab98 <_vfiprintf_r+0x44>
 800ad5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad5c:	e71e      	b.n	800ab9c <_vfiprintf_r+0x48>
 800ad5e:	ab03      	add	r3, sp, #12
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	462a      	mov	r2, r5
 800ad64:	4b05      	ldr	r3, [pc, #20]	@ (800ad7c <_vfiprintf_r+0x228>)
 800ad66:	a904      	add	r1, sp, #16
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f7fd fe57 	bl	8008a1c <_printf_i>
 800ad6e:	e7e4      	b.n	800ad3a <_vfiprintf_r+0x1e6>
 800ad70:	0800bdc8 	.word	0x0800bdc8
 800ad74:	0800bdd2 	.word	0x0800bdd2
 800ad78:	080084ed 	.word	0x080084ed
 800ad7c:	0800ab31 	.word	0x0800ab31
 800ad80:	0800bdce 	.word	0x0800bdce

0800ad84 <__swbuf_r>:
 800ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad86:	460e      	mov	r6, r1
 800ad88:	4614      	mov	r4, r2
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	b118      	cbz	r0, 800ad96 <__swbuf_r+0x12>
 800ad8e:	6a03      	ldr	r3, [r0, #32]
 800ad90:	b90b      	cbnz	r3, 800ad96 <__swbuf_r+0x12>
 800ad92:	f7fd ffef 	bl	8008d74 <__sinit>
 800ad96:	69a3      	ldr	r3, [r4, #24]
 800ad98:	60a3      	str	r3, [r4, #8]
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	071a      	lsls	r2, r3, #28
 800ad9e:	d501      	bpl.n	800ada4 <__swbuf_r+0x20>
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	b943      	cbnz	r3, 800adb6 <__swbuf_r+0x32>
 800ada4:	4621      	mov	r1, r4
 800ada6:	4628      	mov	r0, r5
 800ada8:	f000 f82a 	bl	800ae00 <__swsetup_r>
 800adac:	b118      	cbz	r0, 800adb6 <__swbuf_r+0x32>
 800adae:	f04f 37ff 	mov.w	r7, #4294967295
 800adb2:	4638      	mov	r0, r7
 800adb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	6922      	ldr	r2, [r4, #16]
 800adba:	1a98      	subs	r0, r3, r2
 800adbc:	6963      	ldr	r3, [r4, #20]
 800adbe:	b2f6      	uxtb	r6, r6
 800adc0:	4283      	cmp	r3, r0
 800adc2:	4637      	mov	r7, r6
 800adc4:	dc05      	bgt.n	800add2 <__swbuf_r+0x4e>
 800adc6:	4621      	mov	r1, r4
 800adc8:	4628      	mov	r0, r5
 800adca:	f7ff fda7 	bl	800a91c <_fflush_r>
 800adce:	2800      	cmp	r0, #0
 800add0:	d1ed      	bne.n	800adae <__swbuf_r+0x2a>
 800add2:	68a3      	ldr	r3, [r4, #8]
 800add4:	3b01      	subs	r3, #1
 800add6:	60a3      	str	r3, [r4, #8]
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	6022      	str	r2, [r4, #0]
 800adde:	701e      	strb	r6, [r3, #0]
 800ade0:	6962      	ldr	r2, [r4, #20]
 800ade2:	1c43      	adds	r3, r0, #1
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d004      	beq.n	800adf2 <__swbuf_r+0x6e>
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	07db      	lsls	r3, r3, #31
 800adec:	d5e1      	bpl.n	800adb2 <__swbuf_r+0x2e>
 800adee:	2e0a      	cmp	r6, #10
 800adf0:	d1df      	bne.n	800adb2 <__swbuf_r+0x2e>
 800adf2:	4621      	mov	r1, r4
 800adf4:	4628      	mov	r0, r5
 800adf6:	f7ff fd91 	bl	800a91c <_fflush_r>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d0d9      	beq.n	800adb2 <__swbuf_r+0x2e>
 800adfe:	e7d6      	b.n	800adae <__swbuf_r+0x2a>

0800ae00 <__swsetup_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4b29      	ldr	r3, [pc, #164]	@ (800aea8 <__swsetup_r+0xa8>)
 800ae04:	4605      	mov	r5, r0
 800ae06:	6818      	ldr	r0, [r3, #0]
 800ae08:	460c      	mov	r4, r1
 800ae0a:	b118      	cbz	r0, 800ae14 <__swsetup_r+0x14>
 800ae0c:	6a03      	ldr	r3, [r0, #32]
 800ae0e:	b90b      	cbnz	r3, 800ae14 <__swsetup_r+0x14>
 800ae10:	f7fd ffb0 	bl	8008d74 <__sinit>
 800ae14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae18:	0719      	lsls	r1, r3, #28
 800ae1a:	d422      	bmi.n	800ae62 <__swsetup_r+0x62>
 800ae1c:	06da      	lsls	r2, r3, #27
 800ae1e:	d407      	bmi.n	800ae30 <__swsetup_r+0x30>
 800ae20:	2209      	movs	r2, #9
 800ae22:	602a      	str	r2, [r5, #0]
 800ae24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2e:	e033      	b.n	800ae98 <__swsetup_r+0x98>
 800ae30:	0758      	lsls	r0, r3, #29
 800ae32:	d512      	bpl.n	800ae5a <__swsetup_r+0x5a>
 800ae34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae36:	b141      	cbz	r1, 800ae4a <__swsetup_r+0x4a>
 800ae38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae3c:	4299      	cmp	r1, r3
 800ae3e:	d002      	beq.n	800ae46 <__swsetup_r+0x46>
 800ae40:	4628      	mov	r0, r5
 800ae42:	f7fe ff0d 	bl	8009c60 <_free_r>
 800ae46:	2300      	movs	r3, #0
 800ae48:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	2300      	movs	r3, #0
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	f043 0308 	orr.w	r3, r3, #8
 800ae60:	81a3      	strh	r3, [r4, #12]
 800ae62:	6923      	ldr	r3, [r4, #16]
 800ae64:	b94b      	cbnz	r3, 800ae7a <__swsetup_r+0x7a>
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae70:	d003      	beq.n	800ae7a <__swsetup_r+0x7a>
 800ae72:	4621      	mov	r1, r4
 800ae74:	4628      	mov	r0, r5
 800ae76:	f000 f883 	bl	800af80 <__smakebuf_r>
 800ae7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7e:	f013 0201 	ands.w	r2, r3, #1
 800ae82:	d00a      	beq.n	800ae9a <__swsetup_r+0x9a>
 800ae84:	2200      	movs	r2, #0
 800ae86:	60a2      	str	r2, [r4, #8]
 800ae88:	6962      	ldr	r2, [r4, #20]
 800ae8a:	4252      	negs	r2, r2
 800ae8c:	61a2      	str	r2, [r4, #24]
 800ae8e:	6922      	ldr	r2, [r4, #16]
 800ae90:	b942      	cbnz	r2, 800aea4 <__swsetup_r+0xa4>
 800ae92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae96:	d1c5      	bne.n	800ae24 <__swsetup_r+0x24>
 800ae98:	bd38      	pop	{r3, r4, r5, pc}
 800ae9a:	0799      	lsls	r1, r3, #30
 800ae9c:	bf58      	it	pl
 800ae9e:	6962      	ldrpl	r2, [r4, #20]
 800aea0:	60a2      	str	r2, [r4, #8]
 800aea2:	e7f4      	b.n	800ae8e <__swsetup_r+0x8e>
 800aea4:	2000      	movs	r0, #0
 800aea6:	e7f7      	b.n	800ae98 <__swsetup_r+0x98>
 800aea8:	2000001c 	.word	0x2000001c

0800aeac <_raise_r>:
 800aeac:	291f      	cmp	r1, #31
 800aeae:	b538      	push	{r3, r4, r5, lr}
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	d904      	bls.n	800aec0 <_raise_r+0x14>
 800aeb6:	2316      	movs	r3, #22
 800aeb8:	6003      	str	r3, [r0, #0]
 800aeba:	f04f 30ff 	mov.w	r0, #4294967295
 800aebe:	bd38      	pop	{r3, r4, r5, pc}
 800aec0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aec2:	b112      	cbz	r2, 800aeca <_raise_r+0x1e>
 800aec4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aec8:	b94b      	cbnz	r3, 800aede <_raise_r+0x32>
 800aeca:	4628      	mov	r0, r5
 800aecc:	f000 f830 	bl	800af30 <_getpid_r>
 800aed0:	4622      	mov	r2, r4
 800aed2:	4601      	mov	r1, r0
 800aed4:	4628      	mov	r0, r5
 800aed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeda:	f000 b817 	b.w	800af0c <_kill_r>
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d00a      	beq.n	800aef8 <_raise_r+0x4c>
 800aee2:	1c59      	adds	r1, r3, #1
 800aee4:	d103      	bne.n	800aeee <_raise_r+0x42>
 800aee6:	2316      	movs	r3, #22
 800aee8:	6003      	str	r3, [r0, #0]
 800aeea:	2001      	movs	r0, #1
 800aeec:	e7e7      	b.n	800aebe <_raise_r+0x12>
 800aeee:	2100      	movs	r1, #0
 800aef0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aef4:	4620      	mov	r0, r4
 800aef6:	4798      	blx	r3
 800aef8:	2000      	movs	r0, #0
 800aefa:	e7e0      	b.n	800aebe <_raise_r+0x12>

0800aefc <raise>:
 800aefc:	4b02      	ldr	r3, [pc, #8]	@ (800af08 <raise+0xc>)
 800aefe:	4601      	mov	r1, r0
 800af00:	6818      	ldr	r0, [r3, #0]
 800af02:	f7ff bfd3 	b.w	800aeac <_raise_r>
 800af06:	bf00      	nop
 800af08:	2000001c 	.word	0x2000001c

0800af0c <_kill_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d07      	ldr	r5, [pc, #28]	@ (800af2c <_kill_r+0x20>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	4611      	mov	r1, r2
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	f7f7 fa01 	bl	8002320 <_kill>
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	d102      	bne.n	800af28 <_kill_r+0x1c>
 800af22:	682b      	ldr	r3, [r5, #0]
 800af24:	b103      	cbz	r3, 800af28 <_kill_r+0x1c>
 800af26:	6023      	str	r3, [r4, #0]
 800af28:	bd38      	pop	{r3, r4, r5, pc}
 800af2a:	bf00      	nop
 800af2c:	200049a0 	.word	0x200049a0

0800af30 <_getpid_r>:
 800af30:	f7f7 b9ee 	b.w	8002310 <_getpid>

0800af34 <__swhatbuf_r>:
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	460c      	mov	r4, r1
 800af38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af3c:	2900      	cmp	r1, #0
 800af3e:	b096      	sub	sp, #88	@ 0x58
 800af40:	4615      	mov	r5, r2
 800af42:	461e      	mov	r6, r3
 800af44:	da0d      	bge.n	800af62 <__swhatbuf_r+0x2e>
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af4c:	f04f 0100 	mov.w	r1, #0
 800af50:	bf14      	ite	ne
 800af52:	2340      	movne	r3, #64	@ 0x40
 800af54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af58:	2000      	movs	r0, #0
 800af5a:	6031      	str	r1, [r6, #0]
 800af5c:	602b      	str	r3, [r5, #0]
 800af5e:	b016      	add	sp, #88	@ 0x58
 800af60:	bd70      	pop	{r4, r5, r6, pc}
 800af62:	466a      	mov	r2, sp
 800af64:	f000 f848 	bl	800aff8 <_fstat_r>
 800af68:	2800      	cmp	r0, #0
 800af6a:	dbec      	blt.n	800af46 <__swhatbuf_r+0x12>
 800af6c:	9901      	ldr	r1, [sp, #4]
 800af6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af76:	4259      	negs	r1, r3
 800af78:	4159      	adcs	r1, r3
 800af7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af7e:	e7eb      	b.n	800af58 <__swhatbuf_r+0x24>

0800af80 <__smakebuf_r>:
 800af80:	898b      	ldrh	r3, [r1, #12]
 800af82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af84:	079d      	lsls	r5, r3, #30
 800af86:	4606      	mov	r6, r0
 800af88:	460c      	mov	r4, r1
 800af8a:	d507      	bpl.n	800af9c <__smakebuf_r+0x1c>
 800af8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	6123      	str	r3, [r4, #16]
 800af94:	2301      	movs	r3, #1
 800af96:	6163      	str	r3, [r4, #20]
 800af98:	b003      	add	sp, #12
 800af9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af9c:	ab01      	add	r3, sp, #4
 800af9e:	466a      	mov	r2, sp
 800afa0:	f7ff ffc8 	bl	800af34 <__swhatbuf_r>
 800afa4:	9f00      	ldr	r7, [sp, #0]
 800afa6:	4605      	mov	r5, r0
 800afa8:	4639      	mov	r1, r7
 800afaa:	4630      	mov	r0, r6
 800afac:	f7fe fecc 	bl	8009d48 <_malloc_r>
 800afb0:	b948      	cbnz	r0, 800afc6 <__smakebuf_r+0x46>
 800afb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb6:	059a      	lsls	r2, r3, #22
 800afb8:	d4ee      	bmi.n	800af98 <__smakebuf_r+0x18>
 800afba:	f023 0303 	bic.w	r3, r3, #3
 800afbe:	f043 0302 	orr.w	r3, r3, #2
 800afc2:	81a3      	strh	r3, [r4, #12]
 800afc4:	e7e2      	b.n	800af8c <__smakebuf_r+0xc>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	6020      	str	r0, [r4, #0]
 800afca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afce:	81a3      	strh	r3, [r4, #12]
 800afd0:	9b01      	ldr	r3, [sp, #4]
 800afd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800afd6:	b15b      	cbz	r3, 800aff0 <__smakebuf_r+0x70>
 800afd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afdc:	4630      	mov	r0, r6
 800afde:	f000 f81d 	bl	800b01c <_isatty_r>
 800afe2:	b128      	cbz	r0, 800aff0 <__smakebuf_r+0x70>
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	f023 0303 	bic.w	r3, r3, #3
 800afea:	f043 0301 	orr.w	r3, r3, #1
 800afee:	81a3      	strh	r3, [r4, #12]
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	431d      	orrs	r5, r3
 800aff4:	81a5      	strh	r5, [r4, #12]
 800aff6:	e7cf      	b.n	800af98 <__smakebuf_r+0x18>

0800aff8 <_fstat_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d07      	ldr	r5, [pc, #28]	@ (800b018 <_fstat_r+0x20>)
 800affc:	2300      	movs	r3, #0
 800affe:	4604      	mov	r4, r0
 800b000:	4608      	mov	r0, r1
 800b002:	4611      	mov	r1, r2
 800b004:	602b      	str	r3, [r5, #0]
 800b006:	f7f7 f9eb 	bl	80023e0 <_fstat>
 800b00a:	1c43      	adds	r3, r0, #1
 800b00c:	d102      	bne.n	800b014 <_fstat_r+0x1c>
 800b00e:	682b      	ldr	r3, [r5, #0]
 800b010:	b103      	cbz	r3, 800b014 <_fstat_r+0x1c>
 800b012:	6023      	str	r3, [r4, #0]
 800b014:	bd38      	pop	{r3, r4, r5, pc}
 800b016:	bf00      	nop
 800b018:	200049a0 	.word	0x200049a0

0800b01c <_isatty_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d06      	ldr	r5, [pc, #24]	@ (800b038 <_isatty_r+0x1c>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	602b      	str	r3, [r5, #0]
 800b028:	f7f7 f9ea 	bl	8002400 <_isatty>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_isatty_r+0x1a>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_isatty_r+0x1a>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	200049a0 	.word	0x200049a0

0800b03c <_init>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	bf00      	nop
 800b040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b042:	bc08      	pop	{r3}
 800b044:	469e      	mov	lr, r3
 800b046:	4770      	bx	lr

0800b048 <_fini>:
 800b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04a:	bf00      	nop
 800b04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04e:	bc08      	pop	{r3}
 800b050:	469e      	mov	lr, r3
 800b052:	4770      	bx	lr
