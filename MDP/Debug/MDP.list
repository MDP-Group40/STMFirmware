
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f20  08010ed8  08010ed8  00011ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011df8  08011df8  000131dc  2**0
                  CONTENTS
  4 .ARM          00000008  08011df8  08011df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e00  08011e00  000131dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e00  08011e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011e04  08011e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08011e08  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000131dc  2**0
                  CONTENTS
 10 .bss          00004e68  200001e0  200001e0  000131e0  2**3
                  ALLOC
 11 ._user_heap_stack 00007000  20005048  20005048  000131e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000131dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b4bc  00000000  00000000  0001320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d1c  00000000  00000000  0002e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  000323e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000148e  00000000  00000000  00033e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266dc  00000000  00000000  0003529e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e98a  00000000  00000000  0005b97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e80f9  00000000  00000000  0007a304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001623fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008040  00000000  00000000  00162440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0016a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010ebc 	.word	0x08010ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08010ebc 	.word	0x08010ebc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8000f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200001fc 	.word	0x200001fc
 8000fa8:	20000250 	.word	0x20000250
 8000fac:	00000000 	.word	0x00000000

08000fb0 <HAL_TIM_IC_CaptureCallback>:
//    return PROG;  // Return progress state
//}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7f1b      	ldrb	r3, [r3, #28]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d178      	bne.n	80010b2 <HAL_TIM_IC_CaptureCallback+0x102>
    {
        if (Is_First_Captured==0) // if the first value is not captured
 8000fc0:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d11a      	bne.n	8000ffe <HAL_TIM_IC_CaptureCallback+0x4e>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000fc8:	2100      	movs	r1, #0
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f007 fe4a 	bl	8008c64 <HAL_TIM_ReadCapturedValue>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000fd4:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;  // set the first captured as true
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80010c8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
            // Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a1a      	ldr	r2, [r3, #32]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 020a 	bic.w	r2, r2, #10
 8000fea:	621a      	str	r2, [r3, #32]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a1a      	ldr	r2, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0202 	orr.w	r2, r2, #2
 8000ffa:	621a      	str	r2, [r3, #32]
            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
        }
    }
}
 8000ffc:	e059      	b.n	80010b2 <HAL_TIM_IC_CaptureCallback+0x102>
        else if (Is_First_Captured==1)   // if the first is already captured
 8000ffe:	4b32      	ldr	r3, [pc, #200]	@ (80010c8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d155      	bne.n	80010b2 <HAL_TIM_IC_CaptureCallback+0x102>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001006:	2100      	movs	r1, #0
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f007 fe2b 	bl	8008c64 <HAL_TIM_ReadCapturedValue>
 800100e:	4603      	mov	r3, r0
 8001010:	4a2f      	ldr	r2, [pc, #188]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001012:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	@ 0x24
            if (IC_Val2 > IC_Val1)
 800101c:	4b2c      	ldr	r3, [pc, #176]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d907      	bls.n	8001038 <HAL_TIM_IC_CaptureCallback+0x88>
                Difference = IC_Val2-IC_Val1;
 8001028:	4b29      	ldr	r3, [pc, #164]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0x11c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	4a28      	ldr	r2, [pc, #160]	@ (80010d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e00f      	b.n	8001058 <HAL_TIM_IC_CaptureCallback+0xa8>
            else if (IC_Val1 > IC_Val2)
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0x11c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d909      	bls.n	8001058 <HAL_TIM_IC_CaptureCallback+0xa8>
                Difference = (0xffff - IC_Val1) + IC_Val2;
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0x11c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001052:	33ff      	adds	r3, #255	@ 0xff
 8001054:	4a1f      	ldr	r2, [pc, #124]	@ (80010d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001056:	6013      	str	r3, [r2, #0]
            UltraRead.frontDist = Difference * (0.034/2);
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <HAL_TIM_IC_CaptureCallback+0x124>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa51 	bl	8000504 <__aeabi_ui2d>
 8001062:	a317      	add	r3, pc, #92	@ (adr r3, 80010c0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fac6 	bl	80005f8 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd98 	bl	8000ba8 <__aeabi_d2uiz>
 8001078:	4603      	mov	r3, r0
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800107e:	801a      	strh	r2, [r3, #0]
            Is_First_Captured = 0; // set it back to false
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6a1a      	ldr	r2, [r3, #32]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 020a 	bic.w	r2, r2, #10
 8001094:	621a      	str	r2, [r3, #32]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6a12      	ldr	r2, [r2, #32]
 80010a0:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0202 	bic.w	r2, r2, #2
 80010b0:	60da      	str	r2, [r3, #12]
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	b020c49c 	.word	0xb020c49c
 80010c4:	3f916872 	.word	0x3f916872
 80010c8:	20000a5c 	.word	0x20000a5c
 80010cc:	20000a50 	.word	0x20000a50
 80010d0:	20000a54 	.word	0x20000a54
 80010d4:	20000a58 	.word	0x20000a58
 80010d8:	200009a8 	.word	0x200009a8
 80010dc:	200006cc 	.word	0x200006cc

080010e0 <HCSR04_Read>:
 
void HCSR04_Read (void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ULTRA_TRIG_GPIO_Port, ULTRA_TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ea:	480b      	ldr	r0, [pc, #44]	@ (8001118 <HCSR04_Read+0x38>)
 80010ec:	f005 f966 	bl	80063bc <HAL_GPIO_WritePin>
    delay_us(10);  // wait for 10 us
 80010f0:	200a      	movs	r0, #10
 80010f2:	f000 f815 	bl	8001120 <delay_us>
    HAL_GPIO_WritePin(ULTRA_TRIG_GPIO_Port, ULTRA_TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010fc:	4806      	ldr	r0, [pc, #24]	@ (8001118 <HCSR04_Read+0x38>)
 80010fe:	f005 f95d 	bl	80063bc <HAL_GPIO_WritePin>
 
    __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HCSR04_Read+0x3c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <HCSR04_Read+0x3c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0202 	orr.w	r2, r2, #2
 8001110:	60da      	str	r2, [r3, #12]
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40020c00 	.word	0x40020c00
 800111c:	200006cc 	.word	0x200006cc

08001120 <delay_us>:

void delay_us (uint16_t us)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <delay_us+0x30>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8001132:	bf00      	nop
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <delay_us+0x30>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3f9      	bcc.n	8001134 <delay_us+0x14>
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	200005f4 	.word	0x200005f4

08001154 <get_time_difference>:

float get_time_difference(uint32_t current_time, uint32_t last_time)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
    if (current_time >= last_time)
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d30b      	bcc.n	800117e <get_time_difference+0x2a>
    {
        return (float)(current_time - last_time) / 1000000.0f;  // Convert from microseconds to seconds
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001174:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80011a8 <get_time_difference+0x54>
 8001178:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800117c:	e00c      	b.n	8001198 <get_time_difference+0x44>
    }
    else
    {
        // Handle counter overflow
        return (float)((0xFFFF - last_time) + current_time + 1) / 1000000.0f;
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001190:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80011a8 <get_time_difference+0x54>
 8001194:	eec7 7a26 	vdiv.f32	s15, s14, s13
    }
}
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	49742400 	.word	0x49742400

080011ac <PID_Init>:
 * @param  Kd: Derivative gain.
 * @param  outputMin: Minimum output limit.
 * @param  outputMax: Maximum output limit.
 * @retval None
 */
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, int32_t outputMin, int32_t outputMax) {
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6178      	str	r0, [r7, #20]
 80011b4:	ed87 0a04 	vstr	s0, [r7, #16]
 80011b8:	edc7 0a03 	vstr	s1, [r7, #12]
 80011bc:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c0:	6079      	str	r1, [r7, #4]
 80011c2:	603a      	str	r2, [r7, #0]
    pid->Kp = Kp;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	609a      	str	r2, [r3, #8]
    pid->previousError = 0.0;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
    pid->outputMin = outputMin;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	615a      	str	r2, [r3, #20]
    pid->outputMax = outputMax;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	619a      	str	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <UART_Transmit>:

    return (uint32_t)output;
}


void UART_Transmit(char* message) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_IT(&huart3, (uint8_t*)message, strlen(message));
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff f833 	bl	8000270 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	b29b      	uxth	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <UART_Transmit+0x24>)
 8001214:	f008 fb95 	bl	8009942 <HAL_UART_Transmit_IT>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200007a4 	.word	0x200007a4

08001224 <SetDir>:

void SetDir(bool right, bool forward){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
	if (right){
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d01b      	beq.n	8001272 <SetDir+0x4e>
		if(!forward){
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	f083 0301 	eor.w	r3, r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00a      	beq.n	800125c <SetDir+0x38>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2110      	movs	r1, #16
 800124a:	4819      	ldr	r0, [pc, #100]	@ (80012b0 <SetDir+0x8c>)
 800124c:	f005 f8b6 	bl	80063bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2120      	movs	r1, #32
 8001254:	4816      	ldr	r0, [pc, #88]	@ (80012b0 <SetDir+0x8c>)
 8001256:	f005 f8b1 	bl	80063bc <HAL_GPIO_WritePin>
		else{
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
		}
	}
}
 800125a:	e025      	b.n	80012a8 <SetDir+0x84>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2110      	movs	r1, #16
 8001260:	4813      	ldr	r0, [pc, #76]	@ (80012b0 <SetDir+0x8c>)
 8001262:	f005 f8ab 	bl	80063bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	4811      	ldr	r0, [pc, #68]	@ (80012b0 <SetDir+0x8c>)
 800126c:	f005 f8a6 	bl	80063bc <HAL_GPIO_WritePin>
}
 8001270:	e01a      	b.n	80012a8 <SetDir+0x84>
		if(!forward){
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	f083 0301 	eor.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00a      	beq.n	8001294 <SetDir+0x70>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2108      	movs	r1, #8
 8001282:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <SetDir+0x8c>)
 8001284:	f005 f89a 	bl	80063bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2104      	movs	r1, #4
 800128c:	4808      	ldr	r0, [pc, #32]	@ (80012b0 <SetDir+0x8c>)
 800128e:	f005 f895 	bl	80063bc <HAL_GPIO_WritePin>
}
 8001292:	e009      	b.n	80012a8 <SetDir+0x84>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2108      	movs	r1, #8
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <SetDir+0x8c>)
 800129a:	f005 f88f 	bl	80063bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2104      	movs	r1, #4
 80012a2:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <SetDir+0x8c>)
 80012a4:	f005 f88a 	bl	80063bc <HAL_GPIO_WritePin>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40020000 	.word	0x40020000

080012b4 <SetSpeed>:

void SetSpeed(bool right, uint32_t pwmVal){
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
	if(right){
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d004      	beq.n	80012d0 <SetSpeed+0x1c>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2,pwmVal);
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <SetSpeed+0x30>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	else __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1,pwmVal);
}
 80012ce:	e003      	b.n	80012d8 <SetSpeed+0x24>
	else __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1,pwmVal);
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <SetSpeed+0x30>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	2000075c 	.word	0x2000075c

080012e8 <EncoderReset>:

void EncoderReset(bool right, EncoderDat EncoderData){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	if(right){
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d03b      	beq.n	8001376 <EncoderReset+0x8e>
		switch (EncoderData){
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <EncoderReset+0x22>
 8001304:	2b01      	cmp	r3, #1
 8001306:	d010      	beq.n	800132a <EncoderReset+0x42>
 8001308:	e01f      	b.n	800134a <EncoderReset+0x62>
		case POSITION:
			osMutexWait(EncoderRightMutexHandle, osWaitForever);
 800130a:	4b3b      	ldr	r3, [pc, #236]	@ (80013f8 <EncoderReset+0x110>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f04f 31ff 	mov.w	r1, #4294967295
 8001312:	4618      	mov	r0, r3
 8001314:	f009 fb70 	bl	800a9f8 <osMutexWait>
			encoderRight.position = 0;
 8001318:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <EncoderReset+0x114>)
 800131a:	2200      	movs	r2, #0
 800131c:	801a      	strh	r2, [r3, #0]
			osMutexRelease(EncoderRightMutexHandle);
 800131e:	4b36      	ldr	r3, [pc, #216]	@ (80013f8 <EncoderReset+0x110>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f009 fbb6 	bl	800aa94 <osMutexRelease>
			break;
 8001328:	e061      	b.n	80013ee <EncoderReset+0x106>
		case SPEED:
			osMutexWait(EncoderRightMutexHandle, osWaitForever);
 800132a:	4b33      	ldr	r3, [pc, #204]	@ (80013f8 <EncoderReset+0x110>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f04f 31ff 	mov.w	r1, #4294967295
 8001332:	4618      	mov	r0, r3
 8001334:	f009 fb60 	bl	800a9f8 <osMutexWait>
			encoderRight.speed = 0;
 8001338:	4b30      	ldr	r3, [pc, #192]	@ (80013fc <EncoderReset+0x114>)
 800133a:	2200      	movs	r2, #0
 800133c:	805a      	strh	r2, [r3, #2]
			osMutexRelease(EncoderRightMutexHandle);
 800133e:	4b2e      	ldr	r3, [pc, #184]	@ (80013f8 <EncoderReset+0x110>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f009 fba6 	bl	800aa94 <osMutexRelease>
			break;
 8001348:	e051      	b.n	80013ee <EncoderReset+0x106>
		case ALL:
		default:
			osMutexWait(EncoderRightMutexHandle, osWaitForever);
 800134a:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <EncoderReset+0x110>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f04f 31ff 	mov.w	r1, #4294967295
 8001352:	4618      	mov	r0, r3
 8001354:	f009 fb50 	bl	800a9f8 <osMutexWait>
			encoderRight.speed = 0;
 8001358:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <EncoderReset+0x114>)
 800135a:	2200      	movs	r2, #0
 800135c:	805a      	strh	r2, [r3, #2]
			encoderRight.position = 0;
 800135e:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <EncoderReset+0x114>)
 8001360:	2200      	movs	r2, #0
 8001362:	801a      	strh	r2, [r3, #0]
			encoderRight.direction = 0;
 8001364:	4b25      	ldr	r3, [pc, #148]	@ (80013fc <EncoderReset+0x114>)
 8001366:	2200      	movs	r2, #0
 8001368:	809a      	strh	r2, [r3, #4]
			osMutexRelease(EncoderRightMutexHandle);
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <EncoderReset+0x110>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f009 fb90 	bl	800aa94 <osMutexRelease>
			break;
 8001374:	e03b      	b.n	80013ee <EncoderReset+0x106>
		}
	}
	else{
		switch (EncoderData){
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <EncoderReset+0x9a>
 800137c:	2b01      	cmp	r3, #1
 800137e:	d010      	beq.n	80013a2 <EncoderReset+0xba>
 8001380:	e01f      	b.n	80013c2 <EncoderReset+0xda>
			case POSITION:
				osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <EncoderReset+0x118>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f04f 31ff 	mov.w	r1, #4294967295
 800138a:	4618      	mov	r0, r3
 800138c:	f009 fb34 	bl	800a9f8 <osMutexWait>
				encoderLeft.position = 0;
 8001390:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <EncoderReset+0x11c>)
 8001392:	2200      	movs	r2, #0
 8001394:	801a      	strh	r2, [r3, #0]
				osMutexRelease(EncoderLeftMutexHandle);
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <EncoderReset+0x118>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f009 fb7a 	bl	800aa94 <osMutexRelease>
				break;
 80013a0:	e025      	b.n	80013ee <EncoderReset+0x106>
			case SPEED:
				osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <EncoderReset+0x118>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f04f 31ff 	mov.w	r1, #4294967295
 80013aa:	4618      	mov	r0, r3
 80013ac:	f009 fb24 	bl	800a9f8 <osMutexWait>
				encoderLeft.speed = 0;
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <EncoderReset+0x11c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	805a      	strh	r2, [r3, #2]
				osMutexRelease(EncoderLeftMutexHandle);
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <EncoderReset+0x118>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f009 fb6a 	bl	800aa94 <osMutexRelease>
				break;
 80013c0:	e015      	b.n	80013ee <EncoderReset+0x106>
			case ALL:
			default:
				osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <EncoderReset+0x118>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f04f 31ff 	mov.w	r1, #4294967295
 80013ca:	4618      	mov	r0, r3
 80013cc:	f009 fb14 	bl	800a9f8 <osMutexWait>
				encoderLeft.speed = 0;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <EncoderReset+0x11c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	805a      	strh	r2, [r3, #2]
				encoderLeft.position = 0;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <EncoderReset+0x11c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	801a      	strh	r2, [r3, #0]
				encoderLeft.direction = 0;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <EncoderReset+0x11c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	809a      	strh	r2, [r3, #4]
				osMutexRelease(EncoderLeftMutexHandle);
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <EncoderReset+0x118>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f009 fb54 	bl	800aa94 <osMutexRelease>
				break;
 80013ec:	bf00      	nop
		}
	}
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000850 	.word	0x20000850
 80013fc:	20000988 	.word	0x20000988
 8001400:	20000804 	.word	0x20000804
 8001404:	20000980 	.word	0x20000980

08001408 <HeadingReset>:

void HeadingReset (){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	osMutexWait(IMUReadMutexHandle, HAL_MAX_DELAY);
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HeadingReset+0x30>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	4618      	mov	r0, r3
 8001416:	f009 faef 	bl	800a9f8 <osMutexWait>
  CurrentHeading = 0.0f;
 800141a:	4908      	ldr	r1, [pc, #32]	@ (800143c <HeadingReset+0x34>)
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c1 2300 	strd	r2, r3, [r1]
  osMutexRelease(IMUReadMutexHandle);
 8001428:	4b03      	ldr	r3, [pc, #12]	@ (8001438 <HeadingReset+0x30>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f009 fb31 	bl	800aa94 <osMutexRelease>
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000089c 	.word	0x2000089c
 800143c:	20000990 	.word	0x20000990

08001440 <SetFacing>:

void SetFacing(DIRECTION direction) {
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d826      	bhi.n	800149e <SetFacing+0x5e>
 8001450:	a201      	add	r2, pc, #4	@ (adr r2, 8001458 <SetFacing+0x18>)
 8001452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001456:	bf00      	nop
 8001458:	0800146d 	.word	0x0800146d
 800145c:	08001477 	.word	0x08001477
 8001460:	08001481 	.word	0x08001481
 8001464:	0800148b 	.word	0x0800148b
 8001468:	08001495 	.word	0x08001495
	case STRAIGHT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,SERVO_STRAIGHT);
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <SetFacing+0x74>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2296      	movs	r2, #150	@ 0x96
 8001472:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8001474:	e018      	b.n	80014a8 <SetFacing+0x68>
	case RIGHT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,SERVO_RIGHT);
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <SetFacing+0x74>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	22d7      	movs	r2, #215	@ 0xd7
 800147c:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 800147e:	e013      	b.n	80014a8 <SetFacing+0x68>
	case LEFT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,SERVO_LEFT);
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <SetFacing+0x74>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2264      	movs	r2, #100	@ 0x64
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8001488:	e00e      	b.n	80014a8 <SetFacing+0x68>
	case HALF_RIGHT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 185);
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <SetFacing+0x74>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	22b9      	movs	r2, #185	@ 0xb9
 8001490:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8001492:	e009      	b.n	80014a8 <SetFacing+0x68>
	case HALF_LEFT:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 120);
 8001494:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <SetFacing+0x74>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2278      	movs	r2, #120	@ 0x78
 800149a:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 800149c:	e004      	b.n	80014a8 <SetFacing+0x68>
	default:
		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4,150);
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SetFacing+0x74>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2296      	movs	r2, #150	@ 0x96
 80014a4:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 80014a6:	bf00      	nop
	}
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	200005f4 	.word	0x200005f4

080014b8 <compute_polynomial>:

double compute_polynomial(double x) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	@ 0x38
 80014bc:	af00      	add	r7, sp, #0
 80014be:	ed87 0b00 	vstr	d0, [r7]
    // Coefficients of the polynomial
    double b5 = -207.6802923;
 80014c2:	a33b      	add	r3, pc, #236	@ (adr r3, 80015b0 <compute_polynomial+0xf8>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double b4 = 1644.417156;
 80014cc:	a33a      	add	r3, pc, #232	@ (adr r3, 80015b8 <compute_polynomial+0x100>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double b3 = -5142.954895;
 80014d6:	a33a      	add	r3, pc, #232	@ (adr r3, 80015c0 <compute_polynomial+0x108>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double b2 = 8014.646796;
 80014e0:	a339      	add	r3, pc, #228	@ (adr r3, 80015c8 <compute_polynomial+0x110>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double b1 = -6396.634059;
 80014ea:	a339      	add	r3, pc, #228	@ (adr r3, 80015d0 <compute_polynomial+0x118>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double b0 = 2328.775415;
 80014f4:	a338      	add	r3, pc, #224	@ (adr r3, 80015d8 <compute_polynomial+0x120>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // Using Horner's method for efficient computation
    return ((((b5 * x + b4) * x + b3) * x + b2) * x + b1) * x + b0;
 80014fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001502:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001506:	f7ff f877 	bl	80005f8 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001516:	f7fe feb9 	bl	800028c <__adddf3>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001526:	f7ff f867 	bl	80005f8 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001536:	f7fe fea9 	bl	800028c <__adddf3>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001546:	f7ff f857 	bl	80005f8 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001556:	f7fe fe99 	bl	800028c <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001566:	f7ff f847 	bl	80005f8 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001576:	f7fe fe89 	bl	800028c <__adddf3>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001586:	f7ff f837 	bl	80005f8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001596:	f7fe fe79 	bl	800028c <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	ec43 2b17 	vmov	d7, r2, r3
}
 80015a2:	eeb0 0a47 	vmov.f32	s0, s14
 80015a6:	eef0 0a67 	vmov.f32	s1, s15
 80015aa:	3738      	adds	r7, #56	@ 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	f45b870f 	.word	0xf45b870f
 80015b4:	c069f5c4 	.word	0xc069f5c4
 80015b8:	2af14552 	.word	0x2af14552
 80015bc:	4099b1ab 	.word	0x4099b1ab
 80015c0:	73ffac1d 	.word	0x73ffac1d
 80015c4:	c0b416f4 	.word	0xc0b416f4
 80015c8:	946c332f 	.word	0x946c332f
 80015cc:	40bf4ea5 	.word	0x40bf4ea5
 80015d0:	51b0ccbc 	.word	0x51b0ccbc
 80015d4:	c0b8fca2 	.word	0xc0b8fca2
 80015d8:	0331e3a8 	.word	0x0331e3a8
 80015dc:	40a2318d 	.word	0x40a2318d

080015e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b0b4      	sub	sp, #208	@ 0xd0
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e6:	f003 fb91 	bl	8004d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ea:	f000 f979 	bl	80018e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ee:	f000 fd89 	bl	8002104 <MX_GPIO_Init>
  MX_DMA_Init();
 80015f2:	f000 fd65 	bl	80020c0 <MX_DMA_Init>
  MX_TIM8_Init();
 80015f6:	f000 fc8f 	bl	8001f18 <MX_TIM8_Init>
  MX_TIM2_Init();
 80015fa:	f000 fb3f 	bl	8001c7c <MX_TIM2_Init>
  MX_TIM3_Init();
 80015fe:	f000 fb91 	bl	8001d24 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001602:	f000 fa9d 	bl	8001b40 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001606:	f000 fd31 	bl	800206c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800160a:	f000 fa6b 	bl	8001ae4 <MX_I2C1_Init>
  MX_ADC1_Init();
 800160e:	f000 f9c5 	bl	800199c <MX_ADC1_Init>
  MX_TIM4_Init();
 8001612:	f000 fbdb 	bl	8001dcc <MX_TIM4_Init>
  MX_ADC2_Init();
 8001616:	f000 fa13 	bl	8001a40 <MX_ADC2_Init>
  MX_TIM6_Init();
 800161a:	f000 fc47 	bl	8001eac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800161e:	f00c fd79 	bl	800e114 <OLED_Init>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 8001622:	2201      	movs	r2, #1
 8001624:	4987      	ldr	r1, [pc, #540]	@ (8001844 <main+0x264>)
 8001626:	4888      	ldr	r0, [pc, #544]	@ (8001848 <main+0x268>)
 8001628:	f008 f9c1 	bl	80099ae <HAL_UART_Receive_IT>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800162c:	4b86      	ldr	r3, [pc, #536]	@ (8001848 <main+0x268>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	4b85      	ldr	r3, [pc, #532]	@ (8001848 <main+0x268>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0220 	orr.w	r2, r2, #32
 800163a:	60da      	str	r2, [r3, #12]
  UART_Transmit("Hello");
 800163c:	4883      	ldr	r0, [pc, #524]	@ (800184c <main+0x26c>)
 800163e:	f7ff fddd 	bl	80011fc <UART_Transmit>
  icm20948_init();
 8001642:	f00b fd5f 	bl	800d104 <icm20948_init>
//  ak09916_init();

//  HAL_UART_Transmit_IT(&huart3, (uint8_t *)aRxBuffer, 10);
  // Start Encoders
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8001646:	213c      	movs	r1, #60	@ 0x3c
 8001648:	4881      	ldr	r0, [pc, #516]	@ (8001850 <main+0x270>)
 800164a:	f006 ff67 	bl	800851c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Right encoder
 800164e:	213c      	movs	r1, #60	@ 0x3c
 8001650:	4880      	ldr	r0, [pc, #512]	@ (8001854 <main+0x274>)
 8001652:	f006 ff63 	bl	800851c <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0); // Left encoder
 8001656:	4b7e      	ldr	r3, [pc, #504]	@ (8001850 <main+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_SET_COUNTER(&htim3, 0); // Right encoder
 800165e:	4b7d      	ldr	r3, [pc, #500]	@ (8001854 <main+0x274>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24

  // Start PWM for motors
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // Left motor PWM
 8001666:	2100      	movs	r1, #0
 8001668:	487b      	ldr	r0, [pc, #492]	@ (8001858 <main+0x278>)
 800166a:	f006 fc67 	bl	8007f3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); // Right motor PWM
 800166e:	2104      	movs	r1, #4
 8001670:	4879      	ldr	r0, [pc, #484]	@ (8001858 <main+0x278>)
 8001672:	f006 fc63 	bl	8007f3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Servo motor PWM
 8001676:	210c      	movs	r1, #12
 8001678:	4878      	ldr	r0, [pc, #480]	@ (800185c <main+0x27c>)
 800167a:	f006 fc5f 	bl	8007f3c <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, LEFT_IR_RES_BUFFER, 2);
 800167e:	2202      	movs	r2, #2
 8001680:	4977      	ldr	r1, [pc, #476]	@ (8001860 <main+0x280>)
 8001682:	4878      	ldr	r0, [pc, #480]	@ (8001864 <main+0x284>)
 8001684:	f003 fc1c 	bl	8004ec0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, RIGHT_IR_RES_BUFFER, 2);
 8001688:	2202      	movs	r2, #2
 800168a:	4977      	ldr	r1, [pc, #476]	@ (8001868 <main+0x288>)
 800168c:	4877      	ldr	r0, [pc, #476]	@ (800186c <main+0x28c>)
 800168e:	f003 fc17 	bl	8004ec0 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim4);
 8001692:	4877      	ldr	r0, [pc, #476]	@ (8001870 <main+0x290>)
 8001694:	f006 fb90 	bl	8007db8 <HAL_TIM_Base_Start>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001698:	2100      	movs	r1, #0
 800169a:	4875      	ldr	r0, [pc, #468]	@ (8001870 <main+0x290>)
 800169c:	f006 fd70 	bl	8008180 <HAL_TIM_IC_Start_IT>

  // Initialize the PID controllers for each motor
  PID_Init(&leftPID, 1, 0.95, 0.002, 0, 2000);  // Set your PID constants and output limits
 80016a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80016a4:	2100      	movs	r1, #0
 80016a6:	ed9f 1a73 	vldr	s2, [pc, #460]	@ 8001874 <main+0x294>
 80016aa:	eddf 0a73 	vldr	s1, [pc, #460]	@ 8001878 <main+0x298>
 80016ae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80016b2:	4872      	ldr	r0, [pc, #456]	@ (800187c <main+0x29c>)
 80016b4:	f7ff fd7a 	bl	80011ac <PID_Init>
  PID_Init(&rightPID, 1, 0.01, 0.01, 0, 1500); // Set your PID constants and output limits
 80016b8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80016bc:	2100      	movs	r1, #0
 80016be:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 8001880 <main+0x2a0>
 80016c2:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 8001880 <main+0x2a0>
 80016c6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80016ca:	486e      	ldr	r0, [pc, #440]	@ (8001884 <main+0x2a4>)
 80016cc:	f7ff fd6e 	bl	80011ac <PID_Init>
//  SetFacing(RIGHT);
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of EncoderLeftMutex */
  osMutexStaticDef(EncoderLeftMutex, &EncoderLeftMutexControlBlock);
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80016d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001888 <main+0x2a8>)
 80016d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  EncoderLeftMutexHandle = osMutexCreate(osMutex(EncoderLeftMutex));
 80016dc:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80016e0:	4618      	mov	r0, r3
 80016e2:	f009 f970 	bl	800a9c6 <osMutexCreate>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4a68      	ldr	r2, [pc, #416]	@ (800188c <main+0x2ac>)
 80016ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderRightMutex */
  osMutexStaticDef(EncoderRightMutex, &EncoderRightMutexControlBlock);
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80016f2:	4b67      	ldr	r3, [pc, #412]	@ (8001890 <main+0x2b0>)
 80016f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  EncoderRightMutexHandle = osMutexCreate(osMutex(EncoderRightMutex));
 80016f8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f009 f962 	bl	800a9c6 <osMutexCreate>
 8001702:	4603      	mov	r3, r0
 8001704:	4a63      	ldr	r2, [pc, #396]	@ (8001894 <main+0x2b4>)
 8001706:	6013      	str	r3, [r2, #0]

  /* definition and creation of IMUReadMutex */
  osMutexStaticDef(IMUReadMutex, &IMUReadMutexControlBlock);
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800170e:	4b62      	ldr	r3, [pc, #392]	@ (8001898 <main+0x2b8>)
 8001710:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  IMUReadMutexHandle = osMutexCreate(osMutex(IMUReadMutex));
 8001714:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001718:	4618      	mov	r0, r3
 800171a:	f009 f954 	bl	800a9c6 <osMutexCreate>
 800171e:	4603      	mov	r3, r0
 8001720:	4a5e      	ldr	r2, [pc, #376]	@ (800189c <main+0x2bc>)
 8001722:	6013      	str	r3, [r2, #0]

  /* definition and creation of IRMutex */
  osMutexStaticDef(IRMutex, &IRMutexControlBlock);
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800172a:	4b5d      	ldr	r3, [pc, #372]	@ (80018a0 <main+0x2c0>)
 800172c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  IRMutexHandle = osMutexCreate(osMutex(IRMutex));
 8001730:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001734:	4618      	mov	r0, r3
 8001736:	f009 f946 	bl	800a9c6 <osMutexCreate>
 800173a:	4603      	mov	r3, r0
 800173c:	4a59      	ldr	r2, [pc, #356]	@ (80018a4 <main+0x2c4>)
 800173e:	6013      	str	r3, [r2, #0]

  /* definition and creation of UltrasonicMutex */
  osMutexStaticDef(UltrasonicMutex, &UltrasonicMutexControlBlock);
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001746:	4b58      	ldr	r3, [pc, #352]	@ (80018a8 <main+0x2c8>)
 8001748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  UltrasonicMutexHandle = osMutexCreate(osMutex(UltrasonicMutex));
 800174c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001750:	4618      	mov	r0, r3
 8001752:	f009 f938 	bl	800a9c6 <osMutexCreate>
 8001756:	4603      	mov	r3, r0
 8001758:	4a54      	ldr	r2, [pc, #336]	@ (80018ac <main+0x2cc>)
 800175a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800175c:	4b54      	ldr	r3, [pc, #336]	@ (80018b0 <main+0x2d0>)
 800175e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001762:	461d      	mov	r5, r3
 8001764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800176c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001770:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f009 f8c5 	bl	800a906 <osThreadCreate>
 800177c:	4603      	mov	r3, r0
 800177e:	4a4d      	ldr	r2, [pc, #308]	@ (80018b4 <main+0x2d4>)
 8001780:	6013      	str	r3, [r2, #0]
  /* definition and creation of show */
//  osThreadDef(show, StartTask02, osPriorityIdle, 0, 128);
//  showHandle = osThreadCreate(osThread(show), NULL);

  /* definition and creation of Encoder */
  osThreadDef(Encoder, EncoderTask, osPriorityHigh, 0, 256);
 8001782:	4b4d      	ldr	r3, [pc, #308]	@ (80018b8 <main+0x2d8>)
 8001784:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001788:	461d      	mov	r5, r3
 800178a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800178c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800178e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderHandle = osThreadCreate(osThread(Encoder), NULL);
 8001796:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f009 f8b2 	bl	800a906 <osThreadCreate>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a45      	ldr	r2, [pc, #276]	@ (80018bc <main+0x2dc>)
 80017a6:	6013      	str	r3, [r2, #0]
  /* definition and creation of MoveStraight */
//  osThreadDef(MoveStraight, StartStraight, osPriorityIdle, 0, 256);
//  MoveStraightHandle = osThreadCreate(osThread(MoveStraight), NULL);

  /* definition and creation of motorTask */
  osThreadDef(motorTask, MotorTask, osPriorityNormal, 0, 1024);
 80017a8:	4b45      	ldr	r3, [pc, #276]	@ (80018c0 <main+0x2e0>)
 80017aa:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80017ae:	461d      	mov	r5, r3
 80017b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 80017bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f009 f89f 	bl	800a906 <osThreadCreate>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a3e      	ldr	r2, [pc, #248]	@ (80018c4 <main+0x2e4>)
 80017cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of icmTask */
  osThreadDef(icmTask, ICMUpdate, osPriorityHigh, 0, 1024);
 80017ce:	4b3e      	ldr	r3, [pc, #248]	@ (80018c8 <main+0x2e8>)
 80017d0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80017d4:	461d      	mov	r5, r3
 80017d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  icmTaskHandle = osThreadCreate(osThread(icmTask), NULL);
 80017e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f009 f88c 	bl	800a906 <osThreadCreate>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a36      	ldr	r2, [pc, #216]	@ (80018cc <main+0x2ec>)
 80017f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of infraTask */
  osThreadDef(infraTask, IRTask, osPriorityRealtime, 0, 1024);
 80017f4:	4b36      	ldr	r3, [pc, #216]	@ (80018d0 <main+0x2f0>)
 80017f6:	f107 041c 	add.w	r4, r7, #28
 80017fa:	461d      	mov	r5, r3
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  infraTaskHandle = osThreadCreate(osThread(infraTask), NULL);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f009 f879 	bl	800a906 <osThreadCreate>
 8001814:	4603      	mov	r3, r0
 8001816:	4a2f      	ldr	r2, [pc, #188]	@ (80018d4 <main+0x2f4>)
 8001818:	6013      	str	r3, [r2, #0]

  /* definition and creation of ultrasonicTask */
  osThreadDef(ultrasonicTask, UltrasonicTask, osPriorityNormal, 0, 128);
 800181a:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <main+0x2f8>)
 800181c:	463c      	mov	r4, r7
 800181e:	461d      	mov	r5, r3
 8001820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001824:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001828:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ultrasonicTaskHandle = osThreadCreate(osThread(ultrasonicTask), NULL);
 800182c:	463b      	mov	r3, r7
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f009 f868 	bl	800a906 <osThreadCreate>
 8001836:	4603      	mov	r3, r0
 8001838:	4a28      	ldr	r2, [pc, #160]	@ (80018dc <main+0x2fc>)
 800183a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800183c:	f009 f85c 	bl	800a8f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <main+0x260>
 8001844:	200009f8 	.word	0x200009f8
 8001848:	200007a4 	.word	0x200007a4
 800184c:	08010ed8 	.word	0x08010ed8
 8001850:	2000063c 	.word	0x2000063c
 8001854:	20000684 	.word	0x20000684
 8001858:	2000075c 	.word	0x2000075c
 800185c:	200005f4 	.word	0x200005f4
 8001860:	200009ac 	.word	0x200009ac
 8001864:	20000450 	.word	0x20000450
 8001868:	200009b4 	.word	0x200009b4
 800186c:	20000498 	.word	0x20000498
 8001870:	200006cc 	.word	0x200006cc
 8001874:	3b03126f 	.word	0x3b03126f
 8001878:	3f733333 	.word	0x3f733333
 800187c:	200009bc 	.word	0x200009bc
 8001880:	3c23d70a 	.word	0x3c23d70a
 8001884:	200009d8 	.word	0x200009d8
 8001888:	20000808 	.word	0x20000808
 800188c:	20000804 	.word	0x20000804
 8001890:	20000854 	.word	0x20000854
 8001894:	20000850 	.word	0x20000850
 8001898:	200008a0 	.word	0x200008a0
 800189c:	2000089c 	.word	0x2000089c
 80018a0:	200008ec 	.word	0x200008ec
 80018a4:	200008e8 	.word	0x200008e8
 80018a8:	20000938 	.word	0x20000938
 80018ac:	20000934 	.word	0x20000934
 80018b0:	08010eec 	.word	0x08010eec
 80018b4:	200007ec 	.word	0x200007ec
 80018b8:	08010f10 	.word	0x08010f10
 80018bc:	200007f0 	.word	0x200007f0
 80018c0:	08010f38 	.word	0x08010f38
 80018c4:	200007f4 	.word	0x200007f4
 80018c8:	08010f5c 	.word	0x08010f5c
 80018cc:	200007f8 	.word	0x200007f8
 80018d0:	08010f84 	.word	0x08010f84
 80018d4:	200007fc 	.word	0x200007fc
 80018d8:	08010fb0 	.word	0x08010fb0
 80018dc:	20000800 	.word	0x20000800

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b094      	sub	sp, #80	@ 0x50
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	2230      	movs	r2, #48	@ 0x30
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00d fa19 	bl	800ed26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <SystemClock_Config+0xb4>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	4a21      	ldr	r2, [pc, #132]	@ (8001994 <SystemClock_Config+0xb4>)
 800190e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001912:	6413      	str	r3, [r2, #64]	@ 0x40
 8001914:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <SystemClock_Config+0xb4>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <SystemClock_Config+0xb8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1b      	ldr	r2, [pc, #108]	@ (8001998 <SystemClock_Config+0xb8>)
 800192a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <SystemClock_Config+0xb8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800193c:	2302      	movs	r3, #2
 800193e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001940:	2301      	movs	r3, #1
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001944:	2310      	movs	r3, #16
 8001946:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001948:	2300      	movs	r3, #0
 800194a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4618      	mov	r0, r3
 8001952:	f005 fd89 	bl	8007468 <HAL_RCC_OscConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800195c:	f002 fd57 	bl	800440e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001960:	230f      	movs	r3, #15
 8001962:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f005 ffec 	bl	8007958 <HAL_RCC_ClockConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001986:	f002 fd42 	bl	800440e <Error_Handler>
  }
}
 800198a:	bf00      	nop
 800198c:	3750      	adds	r7, #80	@ 0x50
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019a2:	463b      	mov	r3, r7
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019ae:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019b0:	4a21      	ldr	r2, [pc, #132]	@ (8001a38 <MX_ADC1_Init+0x9c>)
 80019b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019b6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019d6:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019dc:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019de:	4a17      	ldr	r2, [pc, #92]	@ (8001a3c <MX_ADC1_Init+0xa0>)
 80019e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fc:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <MX_ADC1_Init+0x98>)
 80019fe:	f003 fa1b 	bl	8004e38 <HAL_ADC_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a08:	f002 fd01 	bl	800440e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001a0c:	230d      	movs	r3, #13
 8001a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001a14:	2307      	movs	r3, #7
 8001a16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_ADC1_Init+0x98>)
 8001a1e:	f003 fb7d 	bl	800511c <HAL_ADC_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a28:	f002 fcf1 	bl	800440e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000450 	.word	0x20000450
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	0f000001 	.word	0x0f000001

08001a40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a54:	4a21      	ldr	r2, [pc, #132]	@ (8001adc <MX_ADC2_Init+0x9c>)
 8001a56:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a5a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a5e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a80:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a82:	4a17      	ldr	r2, [pc, #92]	@ (8001ae0 <MX_ADC2_Init+0xa0>)
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001aa0:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001aa2:	f003 f9c9 	bl	8004e38 <HAL_ADC_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001aac:	f002 fcaf 	bl	800440e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001ab0:	230b      	movs	r3, #11
 8001ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001abc:	463b      	mov	r3, r7
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <MX_ADC2_Init+0x98>)
 8001ac2:	f003 fb2b 	bl	800511c <HAL_ADC_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001acc:	f002 fc9f 	bl	800440e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000498 	.word	0x20000498
 8001adc:	40012100 	.word	0x40012100
 8001ae0:	0f000001 	.word	0x0f000001

08001ae4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001aea:	4a13      	ldr	r2, [pc, #76]	@ (8001b38 <MX_I2C1_Init+0x54>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001af0:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <MX_I2C1_Init+0x58>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b14:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <MX_I2C1_Init+0x50>)
 8001b22:	f004 fc7f 	bl	8006424 <HAL_I2C_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f002 fc6f 	bl	800440e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200005a0 	.word	0x200005a0
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	000186a0 	.word	0x000186a0

08001b40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b096      	sub	sp, #88	@ 0x58
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	615a      	str	r2, [r3, #20]
 8001b70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2220      	movs	r2, #32
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00d f8d4 	bl	800ed26 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001b80:	4a3d      	ldr	r2, [pc, #244]	@ (8001c78 <MX_TIM1_Init+0x138>)
 8001b82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001b84:	4b3b      	ldr	r3, [pc, #236]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001b86:	22a0      	movs	r2, #160	@ 0xa0
 8001b88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8001b90:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001b92:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b36      	ldr	r3, [pc, #216]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b9e:	4b35      	ldr	r3, [pc, #212]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba4:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001ba6:	2280      	movs	r2, #128	@ 0x80
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001baa:	4832      	ldr	r0, [pc, #200]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001bac:	f006 f8b4 	bl	8007d18 <HAL_TIM_Base_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001bb6:	f002 fc2a 	bl	800440e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bc0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	482b      	ldr	r0, [pc, #172]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001bc8:	f006 ff84 	bl	8008ad4 <HAL_TIM_ConfigClockSource>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001bd2:	f002 fc1c 	bl	800440e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bd6:	4827      	ldr	r0, [pc, #156]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001bd8:	f006 f956 	bl	8007e88 <HAL_TIM_PWM_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001be2:	f002 fc14 	bl	800440e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	481f      	ldr	r0, [pc, #124]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001bf6:	f007 fce7 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001c00:	f002 fc05 	bl	800440e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c04:	2360      	movs	r3, #96	@ 0x60
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c20:	220c      	movs	r2, #12
 8001c22:	4619      	mov	r1, r3
 8001c24:	4813      	ldr	r0, [pc, #76]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001c26:	f006 fe93 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001c30:	f002 fbed 	bl	800440e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4807      	ldr	r0, [pc, #28]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001c58:	f007 fd32 	bl	80096c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001c62:	f002 fbd4 	bl	800440e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c66:	4803      	ldr	r0, [pc, #12]	@ (8001c74 <MX_TIM1_Init+0x134>)
 8001c68:	f002 fe74 	bl	8004954 <HAL_TIM_MspPostInit>

}
 8001c6c:	bf00      	nop
 8001c6e:	3758      	adds	r7, #88	@ 0x58
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200005f4 	.word	0x200005f4
 8001c78:	40010000 	.word	0x40010000

08001c7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	@ 0x30
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2224      	movs	r2, #36	@ 0x24
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00d f84b 	bl	800ed26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c98:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <MX_TIM2_Init+0xa4>)
 8001c9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <MX_TIM2_Init+0xa4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <MX_TIM2_Init+0xa4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <MX_TIM2_Init+0xa4>)
 8001cae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <MX_TIM2_Init+0xa4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <MX_TIM2_Init+0xa4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001cd0:	230a      	movs	r3, #10
 8001cd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480d      	ldr	r0, [pc, #52]	@ (8001d20 <MX_TIM2_Init+0xa4>)
 8001cec:	f006 fb70 	bl	80083d0 <HAL_TIM_Encoder_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cf6:	f002 fb8a 	bl	800440e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <MX_TIM2_Init+0xa4>)
 8001d08:	f007 fc5e 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d12:	f002 fb7c 	bl	800440e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3730      	adds	r7, #48	@ 0x30
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000063c 	.word	0x2000063c

08001d24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	@ 0x30
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2224      	movs	r2, #36	@ 0x24
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f00c fff7 	bl	800ed26 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d40:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <MX_TIM3_Init+0xa0>)
 8001d42:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <MX_TIM3_Init+0xa4>)
 8001d44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d46:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <MX_TIM3_Init+0xa0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <MX_TIM3_Init+0xa0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <MX_TIM3_Init+0xa0>)
 8001d54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <MX_TIM3_Init+0xa0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <MX_TIM3_Init+0xa0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001d76:	230a      	movs	r3, #10
 8001d78:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001d86:	230a      	movs	r3, #10
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <MX_TIM3_Init+0xa0>)
 8001d92:	f006 fb1d 	bl	80083d0 <HAL_TIM_Encoder_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d9c:	f002 fb37 	bl	800440e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4805      	ldr	r0, [pc, #20]	@ (8001dc4 <MX_TIM3_Init+0xa0>)
 8001dae:	f007 fc0b 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001db8:	f002 fb29 	bl	800440e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	3730      	adds	r7, #48	@ 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000684 	.word	0x20000684
 8001dc8:	40000400 	.word	0x40000400

08001dcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	@ 0x28
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd2:	f107 0318 	add.w	r3, r7, #24
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001dea:	463b      	mov	r3, r7
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001df6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001df8:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea8 <MX_TIM4_Init+0xdc>)
 8001dfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001dfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001dfe:	220f      	movs	r2, #15
 8001e00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8001e08:	4b26      	ldr	r3, [pc, #152]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001e0a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001e0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b23      	ldr	r3, [pc, #140]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e1c:	4821      	ldr	r0, [pc, #132]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001e1e:	f005 ff7b 	bl	8007d18 <HAL_TIM_Base_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001e28:	f002 faf1 	bl	800440e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e30:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e32:	f107 0318 	add.w	r3, r7, #24
 8001e36:	4619      	mov	r1, r3
 8001e38:	481a      	ldr	r0, [pc, #104]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001e3a:	f006 fe4b 	bl	8008ad4 <HAL_TIM_ConfigClockSource>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001e44:	f002 fae3 	bl	800440e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001e48:	4816      	ldr	r0, [pc, #88]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001e4a:	f006 f93f 	bl	80080cc <HAL_TIM_IC_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e54:	f002 fadb 	bl	800440e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	4619      	mov	r1, r3
 8001e66:	480f      	ldr	r0, [pc, #60]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001e68:	f007 fbae 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001e72:	f002 facc 	bl	800440e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e86:	463b      	mov	r3, r7
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <MX_TIM4_Init+0xd8>)
 8001e8e:	f006 fcc3 	bl	8008818 <HAL_TIM_IC_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001e98:	f002 fab9 	bl	800440e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	@ 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200006cc 	.word	0x200006cc
 8001ea8:	40000800 	.word	0x40000800

08001eac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001eba:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <MX_TIM6_Init+0x64>)
 8001ebc:	4a15      	ldr	r2, [pc, #84]	@ (8001f14 <MX_TIM6_Init+0x68>)
 8001ebe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <MX_TIM6_Init+0x64>)
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <MX_TIM6_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001ecc:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <MX_TIM6_Init+0x64>)
 8001ece:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ed2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <MX_TIM6_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eda:	480d      	ldr	r0, [pc, #52]	@ (8001f10 <MX_TIM6_Init+0x64>)
 8001edc:	f005 ff1c 	bl	8007d18 <HAL_TIM_Base_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001ee6:	f002 fa92 	bl	800440e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <MX_TIM6_Init+0x64>)
 8001ef8:	f007 fb66 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f02:	f002 fa84 	bl	800440e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000714 	.word	0x20000714
 8001f14:	40001000 	.word	0x40001000

08001f18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b096      	sub	sp, #88	@ 0x58
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	611a      	str	r2, [r3, #16]
 8001f46:	615a      	str	r2, [r3, #20]
 8001f48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00c fee8 	bl	800ed26 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f56:	4b43      	ldr	r3, [pc, #268]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001f58:	4a43      	ldr	r2, [pc, #268]	@ (8002068 <MX_TIM8_Init+0x150>)
 8001f5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f5c:	4b41      	ldr	r3, [pc, #260]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f62:	4b40      	ldr	r3, [pc, #256]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001f68:	4b3e      	ldr	r3, [pc, #248]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001f6a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001f6e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f70:	4b3c      	ldr	r3, [pc, #240]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f76:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7c:	4b39      	ldr	r3, [pc, #228]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f82:	4838      	ldr	r0, [pc, #224]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001f84:	f005 fec8 	bl	8007d18 <HAL_TIM_Base_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001f8e:	f002 fa3e 	bl	800440e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4831      	ldr	r0, [pc, #196]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001fa0:	f006 fd98 	bl	8008ad4 <HAL_TIM_ConfigClockSource>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001faa:	f002 fa30 	bl	800440e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fae:	482d      	ldr	r0, [pc, #180]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001fb0:	f005 ff6a 	bl	8007e88 <HAL_TIM_PWM_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001fba:	f002 fa28 	bl	800440e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fc6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4825      	ldr	r0, [pc, #148]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8001fce:	f007 fafb 	bl	80095c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001fd8:	f002 fa19 	bl	800440e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fdc:	2360      	movs	r3, #96	@ 0x60
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	4619      	mov	r1, r3
 8002000:	4818      	ldr	r0, [pc, #96]	@ (8002064 <MX_TIM8_Init+0x14c>)
 8002002:	f006 fca5 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800200c:	f002 f9ff 	bl	800440e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002014:	2204      	movs	r2, #4
 8002016:	4619      	mov	r1, r3
 8002018:	4812      	ldr	r0, [pc, #72]	@ (8002064 <MX_TIM8_Init+0x14c>)
 800201a:	f006 fc99 	bl	8008950 <HAL_TIM_PWM_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002024:	f002 f9f3 	bl	800440e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800203c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002040:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4806      	ldr	r0, [pc, #24]	@ (8002064 <MX_TIM8_Init+0x14c>)
 800204c:	f007 fb38 	bl	80096c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002056:	f002 f9da 	bl	800440e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	3758      	adds	r7, #88	@ 0x58
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000075c 	.word	0x2000075c
 8002068:	40010400 	.word	0x40010400

0800206c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <MX_USART3_UART_Init+0x50>)
 8002074:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002078:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800207c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <MX_USART3_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <MX_USART3_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <MX_USART3_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <MX_USART3_UART_Init+0x4c>)
 80020a4:	f007 fb72 	bl	800978c <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020ae:	f002 f9ae 	bl	800440e <Error_Handler>
//  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
//  HAL_NVIC_EnableIRQ(USART3_IRQn);

  /* USER CODE END USART3_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200007a4 	.word	0x200007a4
 80020bc:	40004800 	.word	0x40004800

080020c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <MX_DMA_Init+0x40>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <MX_DMA_Init+0x40>)
 80020d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <MX_DMA_Init+0x40>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2105      	movs	r1, #5
 80020e6:	2038      	movs	r0, #56	@ 0x38
 80020e8:	f003 fb93 	bl	8005812 <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2105      	movs	r1, #5
 80020f0:	203a      	movs	r0, #58	@ 0x3a
 80020f2:	f003 fb8e 	bl	8005812 <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800

08002104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	@ 0x28
 8002108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b49      	ldr	r3, [pc, #292]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	4a48      	ldr	r2, [pc, #288]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002124:	f043 0310 	orr.w	r3, r3, #16
 8002128:	6313      	str	r3, [r2, #48]	@ 0x30
 800212a:	4b46      	ldr	r3, [pc, #280]	@ (8002244 <MX_GPIO_Init+0x140>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b42      	ldr	r3, [pc, #264]	@ (8002244 <MX_GPIO_Init+0x140>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	4a41      	ldr	r2, [pc, #260]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	@ 0x30
 8002146:	4b3f      	ldr	r3, [pc, #252]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b3b      	ldr	r3, [pc, #236]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <MX_GPIO_Init+0x140>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b34      	ldr	r3, [pc, #208]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a33      	ldr	r2, [pc, #204]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a2c      	ldr	r2, [pc, #176]	@ (8002244 <MX_GPIO_Init+0x140>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <MX_GPIO_Init+0x140>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SCL_Pin|SDA_Pin|RESET_Pin|DC_Pin
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 80021ac:	4826      	ldr	r0, [pc, #152]	@ (8002248 <MX_GPIO_Init+0x144>)
 80021ae:	f004 f905 	bl	80063bc <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	213c      	movs	r1, #60	@ 0x3c
 80021b6:	4825      	ldr	r0, [pc, #148]	@ (800224c <MX_GPIO_Init+0x148>)
 80021b8:	f004 f900 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRA_TRIG_GPIO_Port, ULTRA_TRIG_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021c2:	4823      	ldr	r0, [pc, #140]	@ (8002250 <MX_GPIO_Init+0x14c>)
 80021c4:	f004 f8fa 	bl	80063bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SCL_Pin SDA_Pin RESET_Pin DC_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin|RESET_Pin|DC_Pin
 80021c8:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 80021cc:	617b      	str	r3, [r7, #20]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4819      	ldr	r0, [pc, #100]	@ (8002248 <MX_GPIO_Init+0x144>)
 80021e2:	f003 ff4f 	bl	8006084 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80021e6:	233c      	movs	r3, #60	@ 0x3c
 80021e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4813      	ldr	r0, [pc, #76]	@ (800224c <MX_GPIO_Init+0x148>)
 80021fe:	f003 ff41 	bl	8006084 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_LEFT_Pin IR_RIGHT_Pin */
  GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_RIGHT_Pin;
 8002202:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002208:	2303      	movs	r3, #3
 800220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	480c      	ldr	r0, [pc, #48]	@ (8002248 <MX_GPIO_Init+0x144>)
 8002218:	f003 ff34 	bl	8006084 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRA_TRIG_Pin */
  GPIO_InitStruct.Pin = ULTRA_TRIG_Pin;
 800221c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	2301      	movs	r3, #1
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ULTRA_TRIG_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4806      	ldr	r0, [pc, #24]	@ (8002250 <MX_GPIO_Init+0x14c>)
 8002236:	f003 ff25 	bl	8006084 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	@ 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40021000 	.word	0x40021000
 800224c:	40020000 	.word	0x40020000
 8002250:	40020c00 	.word	0x40020c00

08002254 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	circularBuffer[writeIndex] = aRxBuffer[0];  // Assuming a single byte command for simplicity
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <HAL_UART_RxCpltCallback+0x48>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_UART_RxCpltCallback+0x4c>)
 8002266:	7819      	ldrb	r1, [r3, #0]
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_UART_RxCpltCallback+0x50>)
 800226a:	5499      	strb	r1, [r3, r2]

	writeIndex = (writeIndex + 1) % BUFFER_SIZE;
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_UART_RxCpltCallback+0x48>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	425a      	negs	r2, r3
 8002276:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800227a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800227e:	bf58      	it	pl
 8002280:	4253      	negpl	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <HAL_UART_RxCpltCallback+0x48>)
 8002286:	801a      	strh	r2, [r3, #0]

//	HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
	// Re-enable UART reception for the next byte
	HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 1);
 8002288:	2201      	movs	r2, #1
 800228a:	4905      	ldr	r1, [pc, #20]	@ (80022a0 <HAL_UART_RxCpltCallback+0x4c>)
 800228c:	4806      	ldr	r0, [pc, #24]	@ (80022a8 <HAL_UART_RxCpltCallback+0x54>)
 800228e:	f007 fb8e 	bl	80099ae <HAL_UART_Receive_IT>

}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000a4c 	.word	0x20000a4c
 80022a0:	200009f8 	.word	0x200009f8
 80022a4:	20000a0c 	.word	0x20000a0c
 80022a8:	200007a4 	.word	0x200007a4

080022ac <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    char *pcTaskName ){
 80022ac:	b480      	push	{r7}
 80022ae:	b09d      	sub	sp, #116	@ 0x74
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	uint8_t hello[100];
	for (int i = 0; i < 100; ++i){
 80022b6:	2300      	movs	r3, #0
 80022b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022ba:	e008      	b.n	80022ce <vApplicationStackOverflowHook+0x22>
		hello[i] = 1+1;
 80022bc:	f107 0208 	add.w	r2, r7, #8
 80022c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c2:	4413      	add	r3, r2
 80022c4:	2202      	movs	r2, #2
 80022c6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; ++i){
 80022c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ca:	3301      	adds	r3, #1
 80022cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022d0:	2b63      	cmp	r3, #99	@ 0x63
 80022d2:	ddf3      	ble.n	80022bc <vApplicationStackOverflowHook+0x10>
	}
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3774      	adds	r7, #116	@ 0x74
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( ){
 80022e2:	b480      	push	{r7}
 80022e4:	b09b      	sub	sp, #108	@ 0x6c
 80022e6:	af00      	add	r7, sp, #0
	uint8_t hello[100];
		for (int i = 0; i < 100; ++i){
 80022e8:	2300      	movs	r3, #0
 80022ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80022ec:	e007      	b.n	80022fe <vApplicationMallocFailedHook+0x1c>
			hello[i] = 1+1;
 80022ee:	463a      	mov	r2, r7
 80022f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022f2:	4413      	add	r3, r2
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 100; ++i){
 80022f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022fa:	3301      	adds	r3, #1
 80022fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80022fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002300:	2b63      	cmp	r3, #99	@ 0x63
 8002302:	ddf4      	ble.n	80022ee <vApplicationMallocFailedHook+0xc>
		}
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	376c      	adds	r7, #108	@ 0x6c
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <RampMotors>:

// Assume that the SetSpeed function is already defined
// void SetSpeed(bool right, uint16_t pwm);

// Non-blocking motor ramping function
void RampMotors(MotorRampState* state) {
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
    // If ramping is already complete, return immediately
    if (state->rampingComplete) {
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7d1b      	ldrb	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d160      	bne.n	80023e4 <RampMotors+0xd2>
        return;
    }

    // Check if the delay time between steps has passed
    if (HAL_GetTick() - state->lastTick >= state->stepDelay) {
 8002322:	f002 fd59 	bl	8004dd8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	1ad2      	subs	r2, r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	d357      	bcc.n	80023e6 <RampMotors+0xd4>
        // Update the last tick time
        state->lastTick = HAL_GetTick();
 8002336:	f002 fd4f 	bl	8004dd8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	611a      	str	r2, [r3, #16]

        // Increase left motor PWM
        if (state->pwmLeft < state->targetLeft) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	889b      	ldrh	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d211      	bcs.n	8002370 <RampMotors+0x5e>
            state->pwmLeft += state->rampStep;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	881a      	ldrh	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	891b      	ldrh	r3, [r3, #8]
 8002354:	4413      	add	r3, r2
 8002356:	b29a      	uxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	801a      	strh	r2, [r3, #0]
            if (state->pwmLeft > state->targetLeft) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	889b      	ldrh	r3, [r3, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d903      	bls.n	8002370 <RampMotors+0x5e>
                state->pwmLeft = state->targetLeft;  // Clamp to the target
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	889a      	ldrh	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	801a      	strh	r2, [r3, #0]
            }
        }

        // Increase right motor PWM proportionally
        if (state->pwmRight < state->targetRight) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	885a      	ldrh	r2, [r3, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	88db      	ldrh	r3, [r3, #6]
 8002378:	429a      	cmp	r2, r3
 800237a:	d217      	bcs.n	80023ac <RampMotors+0x9a>
            state->pwmRight = state->pwmLeft * state->targetRight / state->targetLeft;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	88db      	ldrh	r3, [r3, #6]
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	8892      	ldrh	r2, [r2, #4]
 800238e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002392:	b29a      	uxth	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	805a      	strh	r2, [r3, #2]
            if (state->pwmRight > state->targetRight) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	885a      	ldrh	r2, [r3, #2]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	88db      	ldrh	r3, [r3, #6]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d903      	bls.n	80023ac <RampMotors+0x9a>
                state->pwmRight = state->targetRight;  // Clamp to the target
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	88da      	ldrh	r2, [r3, #6]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	805a      	strh	r2, [r3, #2]
            }
        }

        // Set the speed for both motors
        SetSpeed(false, state->pwmLeft);  // Left motor
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7fe ff7e 	bl	80012b4 <SetSpeed>
        SetSpeed(true, state->pwmRight);  // Right motor
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	885b      	ldrh	r3, [r3, #2]
 80023bc:	4619      	mov	r1, r3
 80023be:	2001      	movs	r0, #1
 80023c0:	f7fe ff78 	bl	80012b4 <SetSpeed>

        // Check if both motors have reached their target speeds
        if (state->pwmLeft >= state->targetLeft && state->pwmRight >= state->targetRight) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d30a      	bcc.n	80023e6 <RampMotors+0xd4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	885a      	ldrh	r2, [r3, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	88db      	ldrh	r3, [r3, #6]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d304      	bcc.n	80023e6 <RampMotors+0xd4>
            state->rampingComplete = true;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	751a      	strb	r2, [r3, #20]
 80023e2:	e000      	b.n	80023e6 <RampMotors+0xd4>
        return;
 80023e4:	bf00      	nop
        }
    }
}
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <InitializeRampState>:

// Function to initialize the MotorRampState with proper delay calculation
void InitializeRampState(MotorRampState* state, uint16_t targetLeftPWM, uint16_t targetRightPWM, uint16_t rampStep, uint32_t maxDelay) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	817b      	strh	r3, [r7, #10]
 80023fe:	460b      	mov	r3, r1
 8002400:	813b      	strh	r3, [r7, #8]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
    // Initialize state
    state->pwmLeft = 0;  // Assuming motors start from 0 PWM
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	801a      	strh	r2, [r3, #0]
    state->pwmRight = 0; // Same assumption for right motor
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	805a      	strh	r2, [r3, #2]
    state->targetLeft = targetLeftPWM;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	897a      	ldrh	r2, [r7, #10]
 8002416:	809a      	strh	r2, [r3, #4]
    state->targetRight = targetRightPWM;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	893a      	ldrh	r2, [r7, #8]
 800241c:	80da      	strh	r2, [r3, #6]
    state->rampStep = rampStep;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	811a      	strh	r2, [r3, #8]
    state->rampingComplete = false;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	751a      	strb	r2, [r3, #20]
    state->lastTick = HAL_GetTick();  // Initialize with current time
 800242a:	f002 fcd5 	bl	8004dd8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	611a      	str	r2, [r3, #16]

    // Calculate the number of steps required to reach the target speed
    uint16_t maxSteps = (targetLeftPWM + rampStep - 1) / rampStep;  // Ceil of targetLeftPWM / rampStep
 8002434:	897a      	ldrh	r2, [r7, #10]
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	4413      	add	r3, r2
 800243a:	1e5a      	subs	r2, r3, #1
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002442:	82fb      	strh	r3, [r7, #22]

    // Calculate step delay based on maxDelay and number of steps
    state->stepDelay = maxDelay / maxSteps;  // Delay per step in milliseconds
 8002444:	8afb      	ldrh	r3, [r7, #22]
 8002446:	6a3a      	ldr	r2, [r7, #32]
 8002448:	fbb2 f2f3 	udiv	r2, r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	60da      	str	r2, [r3, #12]
}
 8002450:	bf00      	nop
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <GoToB1>:

MotorRampState rampState;
uint32_t vertDist = 0;
uint32_t horiDist = 0;

CMD_STATE_T GoToB1(){
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  uint16_t frontDist;
  RampMotors(&rampState);
 800245e:	4822      	ldr	r0, [pc, #136]	@ (80024e8 <GoToB1+0x90>)
 8002460:	f7ff ff57 	bl	8002312 <RampMotors>
//  SetSpeed(0, 1000);
//  SetSpeed(1, 1200);
  osMutexWait(UltrasonicMutexHandle, HAL_MAX_DELAY);
 8002464:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <GoToB1+0x94>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	4618      	mov	r0, r3
 800246e:	f008 fac3 	bl	800a9f8 <osMutexWait>
  frontDist = UltraRead.frontDist;
 8002472:	4b1f      	ldr	r3, [pc, #124]	@ (80024f0 <GoToB1+0x98>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	80fb      	strh	r3, [r7, #6]
  osMutexRelease(UltrasonicMutexHandle);
 8002478:	4b1c      	ldr	r3, [pc, #112]	@ (80024ec <GoToB1+0x94>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f008 fb09 	bl	800aa94 <osMutexRelease>
  // EncoderReset(0, POSITION);
  // Check if the ramping process is complete
  if (rampState.rampingComplete || frontDist < 40) {
 8002482:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <GoToB1+0x90>)
 8002484:	7d1b      	ldrb	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <GoToB1+0x38>
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b27      	cmp	r3, #39	@ 0x27
 800248e:	d826      	bhi.n	80024de <GoToB1+0x86>
    if (frontDist < 27){
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	2b1a      	cmp	r3, #26
 8002494:	d809      	bhi.n	80024aa <GoToB1+0x52>
      SetSpeed(1,0);
 8002496:	2100      	movs	r1, #0
 8002498:	2001      	movs	r0, #1
 800249a:	f7fe ff0b 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 800249e:	2100      	movs	r1, #0
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe ff07 	bl	80012b4 <SetSpeed>
      // osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
      // vertDist += encoderLeft.position;
      // osMutexRelease(EncoderLeftMutexHandle);
      return FIN;
 80024a6:	2302      	movs	r3, #2
 80024a8:	e01a      	b.n	80024e0 <GoToB1+0x88>
    }
    if(frontDist < 32){
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	2b1f      	cmp	r3, #31
 80024ae:	d809      	bhi.n	80024c4 <GoToB1+0x6c>
      SetSpeed(1, 1200);
 80024b0:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7fe fefd 	bl	80012b4 <SetSpeed>
      SetSpeed(0, 1000);
 80024ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe fef8 	bl	80012b4 <SetSpeed>
    }
    if(frontDist < 29){
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	2b1c      	cmp	r3, #28
 80024c8:	d809      	bhi.n	80024de <GoToB1+0x86>
      SetSpeed(1, 600);
 80024ca:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7fe fef0 	bl	80012b4 <SetSpeed>
      SetSpeed(0, 500);
 80024d4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe feeb 	bl	80012b4 <SetSpeed>
    }
  }
	return PROG;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000a60 	.word	0x20000a60
 80024ec:	20000934 	.word	0x20000934
 80024f0:	200009a8 	.word	0x200009a8

080024f4 <B1Left>:
} B1LEFT_STATE_t;

B1LEFT_STATE_t B1LEFT_STATE = B1LEFT_LEFT;
bool measure = false;
uint32_t toAdjust;
CMD_STATE_T B1Left(){
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  uint32_t frontDist;
  switch (B1LEFT_STATE)
 80024fa:	4b70      	ldr	r3, [pc, #448]	@ (80026bc <B1Left+0x1c8>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	f200 80ce 	bhi.w	80026a0 <B1Left+0x1ac>
 8002504:	a201      	add	r2, pc, #4	@ (adr r2, 800250c <B1Left+0x18>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	0800251d 	.word	0x0800251d
 8002510:	08002539 	.word	0x08002539
 8002514:	08002555 	.word	0x08002555
 8002518:	08002585 	.word	0x08002585
  {
  case B1LEFT_LEFT:
    if(Move_Turn(true, HALF_LEFT, 0.44f) == FIN) B1LEFT_STATE = B1LEFT_RIGHT;
 800251c:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 80026c0 <B1Left+0x1cc>
 8002520:	2104      	movs	r1, #4
 8002522:	2001      	movs	r0, #1
 8002524:	f001 f952 	bl	80037cc <Move_Turn>
 8002528:	4603      	mov	r3, r0
 800252a:	2b02      	cmp	r3, #2
 800252c:	f040 80ba 	bne.w	80026a4 <B1Left+0x1b0>
 8002530:	4b62      	ldr	r3, [pc, #392]	@ (80026bc <B1Left+0x1c8>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
    break;
 8002536:	e0b5      	b.n	80026a4 <B1Left+0x1b0>
  case B1LEFT_RIGHT:
    if(Move_Turn(true, RIGHT, 0.92f) == FIN) B1LEFT_STATE = B1LEFT_STRAIGHTEN;
 8002538:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80026c4 <B1Left+0x1d0>
 800253c:	2101      	movs	r1, #1
 800253e:	2001      	movs	r0, #1
 8002540:	f001 f944 	bl	80037cc <Move_Turn>
 8002544:	4603      	mov	r3, r0
 8002546:	2b02      	cmp	r3, #2
 8002548:	f040 80ae 	bne.w	80026a8 <B1Left+0x1b4>
 800254c:	4b5b      	ldr	r3, [pc, #364]	@ (80026bc <B1Left+0x1c8>)
 800254e:	2202      	movs	r2, #2
 8002550:	701a      	strb	r2, [r3, #0]
    break;
 8002552:	e0a9      	b.n	80026a8 <B1Left+0x1b4>
  case B1LEFT_STRAIGHTEN:
    // if(Move_Turn(true, HALF_LEFT, 0.93f) == FIN) {
    if(Move_Turn(true, LEFT, 0.45f) == FIN) {
 8002554:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 80026c8 <B1Left+0x1d4>
 8002558:	2102      	movs	r1, #2
 800255a:	2001      	movs	r0, #1
 800255c:	f001 f936 	bl	80037cc <Move_Turn>
 8002560:	4603      	mov	r3, r0
 8002562:	2b02      	cmp	r3, #2
 8002564:	f040 80a2 	bne.w	80026ac <B1Left+0x1b8>
      B1LEFT_STATE = B1LEFT_ADJUST;
 8002568:	4b54      	ldr	r3, [pc, #336]	@ (80026bc <B1Left+0x1c8>)
 800256a:	2203      	movs	r2, #3
 800256c:	701a      	strb	r2, [r3, #0]
      SetFacing(STRAIGHT);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe ff66 	bl	8001440 <SetFacing>
      EncoderReset(0, POSITION);
 8002574:	2100      	movs	r1, #0
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe feb6 	bl	80012e8 <EncoderReset>
      osDelay(150);
 800257c:	2096      	movs	r0, #150	@ 0x96
 800257e:	f008 fa0e 	bl	800a99e <osDelay>
    }
    break;
 8002582:	e093      	b.n	80026ac <B1Left+0x1b8>
  case B1LEFT_ADJUST:
    osMutexWait(UltrasonicMutexHandle, HAL_MAX_DELAY);
 8002584:	4b51      	ldr	r3, [pc, #324]	@ (80026cc <B1Left+0x1d8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	4618      	mov	r0, r3
 800258e:	f008 fa33 	bl	800a9f8 <osMutexWait>
    frontDist = UltraRead.frontDist;
 8002592:	4b4f      	ldr	r3, [pc, #316]	@ (80026d0 <B1Left+0x1dc>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	607b      	str	r3, [r7, #4]
    osMutexRelease(UltrasonicMutexHandle);
 800259a:	4b4c      	ldr	r3, [pc, #304]	@ (80026cc <B1Left+0x1d8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f008 fa78 	bl	800aa94 <osMutexRelease>
    if(frontDist <= 25) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b19      	cmp	r3, #25
 80025a8:	d814      	bhi.n	80025d4 <B1Left+0xe0>
      SetDir(1,0);
 80025aa:	2100      	movs	r1, #0
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7fe fe39 	bl	8001224 <SetDir>
      SetDir(0,0);
 80025b2:	2100      	movs	r1, #0
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7fe fe35 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe ff40 	bl	8001440 <SetFacing>
      SetSpeed(1,1200);
 80025c0:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7fe fe75 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1000);
 80025ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fe70 	bl	80012b4 <SetSpeed>
    }
    if(frontDist >= 28) {
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b1b      	cmp	r3, #27
 80025d8:	d917      	bls.n	800260a <B1Left+0x116>
      measure = true;
 80025da:	4b3e      	ldr	r3, [pc, #248]	@ (80026d4 <B1Left+0x1e0>)
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
      SetDir(1,1);
 80025e0:	2101      	movs	r1, #1
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7fe fe1e 	bl	8001224 <SetDir>
      SetDir(0,1);
 80025e8:	2101      	movs	r1, #1
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe fe1a 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7fe ff25 	bl	8001440 <SetFacing>
      SetSpeed(1,2400);
 80025f6:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 80025fa:	2001      	movs	r0, #1
 80025fc:	f7fe fe5a 	bl	80012b4 <SetSpeed>
      SetSpeed(0,2000);
 8002600:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe fe55 	bl	80012b4 <SetSpeed>
    }
    if(frontDist < 28 && frontDist > 25){
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b1b      	cmp	r3, #27
 800260e:	d84f      	bhi.n	80026b0 <B1Left+0x1bc>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b19      	cmp	r3, #25
 8002614:	d94c      	bls.n	80026b0 <B1Left+0x1bc>
      SetSpeed(1,0);
 8002616:	2100      	movs	r1, #0
 8002618:	2001      	movs	r0, #1
 800261a:	f7fe fe4b 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 800261e:	2100      	movs	r1, #0
 8002620:	2000      	movs	r0, #0
 8002622:	f7fe fe47 	bl	80012b4 <SetSpeed>
      osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 8002626:	4b2c      	ldr	r3, [pc, #176]	@ (80026d8 <B1Left+0x1e4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f04f 31ff 	mov.w	r1, #4294967295
 800262e:	4618      	mov	r0, r3
 8002630:	f008 f9e2 	bl	800a9f8 <osMutexWait>
      toAdjust = (uint32_t) ((float) (encoderLeft.position) / 40);
 8002634:	4b29      	ldr	r3, [pc, #164]	@ (80026dc <B1Left+0x1e8>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002642:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80026e0 <B1Left+0x1ec>
 8002646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800264a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800264e:	ee17 2a90 	vmov	r2, s15
 8002652:	4b24      	ldr	r3, [pc, #144]	@ (80026e4 <B1Left+0x1f0>)
 8002654:	601a      	str	r2, [r3, #0]
      osMutexRelease(EncoderLeftMutexHandle);
 8002656:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <B1Left+0x1e4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f008 fa1a 	bl	800aa94 <osMutexRelease>
      vertDist += 65;
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <B1Left+0x1f4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3341      	adds	r3, #65	@ 0x41
 8002666:	4a20      	ldr	r2, [pc, #128]	@ (80026e8 <B1Left+0x1f4>)
 8002668:	6013      	str	r3, [r2, #0]
      if(measure) vertDist += toAdjust;
 800266a:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <B1Left+0x1e0>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <B1Left+0x18e>
 8002672:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <B1Left+0x1f4>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <B1Left+0x1f0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a1a      	ldr	r2, [pc, #104]	@ (80026e8 <B1Left+0x1f4>)
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e006      	b.n	8002690 <B1Left+0x19c>
      else vertDist -= toAdjust;
 8002682:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <B1Left+0x1f4>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <B1Left+0x1f0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <B1Left+0x1f4>)
 800268e:	6013      	str	r3, [r2, #0]
      B1LEFT_STATE = B1LEFT_LEFT;
 8002690:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <B1Left+0x1c8>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
      measure = false;
 8002696:	4b0f      	ldr	r3, [pc, #60]	@ (80026d4 <B1Left+0x1e0>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
      return FIN;
 800269c:	2302      	movs	r3, #2
 800269e:	e009      	b.n	80026b4 <B1Left+0x1c0>
    }
    break;
  default:
    return ERR;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e007      	b.n	80026b4 <B1Left+0x1c0>
    break;
 80026a4:	bf00      	nop
 80026a6:	e004      	b.n	80026b2 <B1Left+0x1be>
    break;
 80026a8:	bf00      	nop
 80026aa:	e002      	b.n	80026b2 <B1Left+0x1be>
    break;
 80026ac:	bf00      	nop
 80026ae:	e000      	b.n	80026b2 <B1Left+0x1be>
    break;
 80026b0:	bf00      	nop
    break;
  }
  return PROG;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000a80 	.word	0x20000a80
 80026c0:	3ee147ae 	.word	0x3ee147ae
 80026c4:	3f6b851f 	.word	0x3f6b851f
 80026c8:	3ee66666 	.word	0x3ee66666
 80026cc:	20000934 	.word	0x20000934
 80026d0:	200009a8 	.word	0x200009a8
 80026d4:	20000a81 	.word	0x20000a81
 80026d8:	20000804 	.word	0x20000804
 80026dc:	20000980 	.word	0x20000980
 80026e0:	42200000 	.word	0x42200000
 80026e4:	20000a84 	.word	0x20000a84
 80026e8:	20000a78 	.word	0x20000a78

080026ec <B1Right>:
  B1RIGHT_ADJUST
} B1RIGHT_STATE_t;

B1RIGHT_STATE_t B1RIGHT_STATE = B1RIGHT_LEFT;

CMD_STATE_T B1Right(){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  uint32_t frontDist;
  switch (B1RIGHT_STATE)
 80026f2:	4b70      	ldr	r3, [pc, #448]	@ (80028b4 <B1Right+0x1c8>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	f200 80ce 	bhi.w	8002898 <B1Right+0x1ac>
 80026fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002704 <B1Right+0x18>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	08002715 	.word	0x08002715
 8002708:	08002731 	.word	0x08002731
 800270c:	0800274d 	.word	0x0800274d
 8002710:	0800277d 	.word	0x0800277d
  {
  case B1RIGHT_LEFT:
    if(Move_Turn(true, HALF_RIGHT, 0.45f) == FIN) B1RIGHT_STATE = B1RIGHT_RIGHT;
 8002714:	ed9f 0a68 	vldr	s0, [pc, #416]	@ 80028b8 <B1Right+0x1cc>
 8002718:	2103      	movs	r1, #3
 800271a:	2001      	movs	r0, #1
 800271c:	f001 f856 	bl	80037cc <Move_Turn>
 8002720:	4603      	mov	r3, r0
 8002722:	2b02      	cmp	r3, #2
 8002724:	f040 80ba 	bne.w	800289c <B1Right+0x1b0>
 8002728:	4b62      	ldr	r3, [pc, #392]	@ (80028b4 <B1Right+0x1c8>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
    break;
 800272e:	e0b5      	b.n	800289c <B1Right+0x1b0>
  case B1RIGHT_RIGHT:
    if(Move_Turn(true, LEFT, 0.92f) == FIN) B1RIGHT_STATE = B1RIGHT_STRAIGHTEN;
 8002730:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80028bc <B1Right+0x1d0>
 8002734:	2102      	movs	r1, #2
 8002736:	2001      	movs	r0, #1
 8002738:	f001 f848 	bl	80037cc <Move_Turn>
 800273c:	4603      	mov	r3, r0
 800273e:	2b02      	cmp	r3, #2
 8002740:	f040 80ae 	bne.w	80028a0 <B1Right+0x1b4>
 8002744:	4b5b      	ldr	r3, [pc, #364]	@ (80028b4 <B1Right+0x1c8>)
 8002746:	2202      	movs	r2, #2
 8002748:	701a      	strb	r2, [r3, #0]
    break;
 800274a:	e0a9      	b.n	80028a0 <B1Right+0x1b4>
  case B1RIGHT_STRAIGHTEN:
    // if(Move_Turn(true, HALF_LEFT, 0.93f) == FIN) {
    if(Move_Turn(true, RIGHT, 0.42f) == FIN) {
 800274c:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 80028c0 <B1Right+0x1d4>
 8002750:	2101      	movs	r1, #1
 8002752:	2001      	movs	r0, #1
 8002754:	f001 f83a 	bl	80037cc <Move_Turn>
 8002758:	4603      	mov	r3, r0
 800275a:	2b02      	cmp	r3, #2
 800275c:	f040 80a2 	bne.w	80028a4 <B1Right+0x1b8>
    	B1RIGHT_STATE = B1RIGHT_ADJUST;
 8002760:	4b54      	ldr	r3, [pc, #336]	@ (80028b4 <B1Right+0x1c8>)
 8002762:	2203      	movs	r2, #3
 8002764:	701a      	strb	r2, [r3, #0]
      EncoderReset(0, POSITION);
 8002766:	2100      	movs	r1, #0
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe fdbd 	bl	80012e8 <EncoderReset>
      SetFacing(STRAIGHT);
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe fe66 	bl	8001440 <SetFacing>
      osDelay(150);
 8002774:	2096      	movs	r0, #150	@ 0x96
 8002776:	f008 f912 	bl	800a99e <osDelay>
    }
    break;
 800277a:	e093      	b.n	80028a4 <B1Right+0x1b8>
  case B1RIGHT_ADJUST:
    osMutexWait(UltrasonicMutexHandle, HAL_MAX_DELAY);
 800277c:	4b51      	ldr	r3, [pc, #324]	@ (80028c4 <B1Right+0x1d8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	4618      	mov	r0, r3
 8002786:	f008 f937 	bl	800a9f8 <osMutexWait>
    frontDist = UltraRead.frontDist;
 800278a:	4b4f      	ldr	r3, [pc, #316]	@ (80028c8 <B1Right+0x1dc>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	607b      	str	r3, [r7, #4]
    osMutexRelease(UltrasonicMutexHandle);
 8002792:	4b4c      	ldr	r3, [pc, #304]	@ (80028c4 <B1Right+0x1d8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f008 f97c 	bl	800aa94 <osMutexRelease>
    
    if(frontDist <= 26) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b1a      	cmp	r3, #26
 80027a0:	d814      	bhi.n	80027cc <B1Right+0xe0>
          SetDir(1,0);
 80027a2:	2100      	movs	r1, #0
 80027a4:	2001      	movs	r0, #1
 80027a6:	f7fe fd3d 	bl	8001224 <SetDir>
          SetDir(0,0);
 80027aa:	2100      	movs	r1, #0
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7fe fd39 	bl	8001224 <SetDir>
          SetFacing(STRAIGHT);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe fe44 	bl	8001440 <SetFacing>
          SetSpeed(1,1200);
 80027b8:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80027bc:	2001      	movs	r0, #1
 80027be:	f7fe fd79 	bl	80012b4 <SetSpeed>
          SetSpeed(0,1000);
 80027c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe fd74 	bl	80012b4 <SetSpeed>
        }
        if(frontDist >= 30) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b1d      	cmp	r3, #29
 80027d0:	d917      	bls.n	8002802 <B1Right+0x116>
          measure = true;
 80027d2:	4b3e      	ldr	r3, [pc, #248]	@ (80028cc <B1Right+0x1e0>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
          SetDir(1,1);
 80027d8:	2101      	movs	r1, #1
 80027da:	2001      	movs	r0, #1
 80027dc:	f7fe fd22 	bl	8001224 <SetDir>
          SetDir(0,1);
 80027e0:	2101      	movs	r1, #1
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe fd1e 	bl	8001224 <SetDir>
          SetFacing(STRAIGHT);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe fe29 	bl	8001440 <SetFacing>
          SetSpeed(1,2400);
 80027ee:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7fe fd5e 	bl	80012b4 <SetSpeed>
          SetSpeed(0,2000);
 80027f8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fe fd59 	bl	80012b4 <SetSpeed>
        }
        if(frontDist < 30 && frontDist > 26){
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b1d      	cmp	r3, #29
 8002806:	d84f      	bhi.n	80028a8 <B1Right+0x1bc>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b1a      	cmp	r3, #26
 800280c:	d94c      	bls.n	80028a8 <B1Right+0x1bc>
          SetSpeed(1,0);
 800280e:	2100      	movs	r1, #0
 8002810:	2001      	movs	r0, #1
 8002812:	f7fe fd4f 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 8002816:	2100      	movs	r1, #0
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe fd4b 	bl	80012b4 <SetSpeed>
      osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 800281e:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <B1Right+0x1e4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f04f 31ff 	mov.w	r1, #4294967295
 8002826:	4618      	mov	r0, r3
 8002828:	f008 f8e6 	bl	800a9f8 <osMutexWait>
      toAdjust = (uint32_t) ((float) (encoderLeft.position) / 40);
 800282c:	4b29      	ldr	r3, [pc, #164]	@ (80028d4 <B1Right+0x1e8>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800283a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80028d8 <B1Right+0x1ec>
 800283e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002846:	ee17 2a90 	vmov	r2, s15
 800284a:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <B1Right+0x1f0>)
 800284c:	601a      	str	r2, [r3, #0]
      osMutexRelease(EncoderLeftMutexHandle);
 800284e:	4b20      	ldr	r3, [pc, #128]	@ (80028d0 <B1Right+0x1e4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f008 f91e 	bl	800aa94 <osMutexRelease>
      vertDist += 65;
 8002858:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <B1Right+0x1f4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3341      	adds	r3, #65	@ 0x41
 800285e:	4a20      	ldr	r2, [pc, #128]	@ (80028e0 <B1Right+0x1f4>)
 8002860:	6013      	str	r3, [r2, #0]
      if(measure) vertDist += toAdjust;
 8002862:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <B1Right+0x1e0>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <B1Right+0x18e>
 800286a:	4b1d      	ldr	r3, [pc, #116]	@ (80028e0 <B1Right+0x1f4>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <B1Right+0x1f0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4413      	add	r3, r2
 8002874:	4a1a      	ldr	r2, [pc, #104]	@ (80028e0 <B1Right+0x1f4>)
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	e006      	b.n	8002888 <B1Right+0x19c>
      else vertDist -= toAdjust;
 800287a:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <B1Right+0x1f4>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <B1Right+0x1f0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	4a16      	ldr	r2, [pc, #88]	@ (80028e0 <B1Right+0x1f4>)
 8002886:	6013      	str	r3, [r2, #0]
      B1LEFT_STATE = B1LEFT_LEFT;
 8002888:	4b16      	ldr	r3, [pc, #88]	@ (80028e4 <B1Right+0x1f8>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
      measure = false;
 800288e:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <B1Right+0x1e0>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
      return FIN;
 8002894:	2302      	movs	r3, #2
 8002896:	e009      	b.n	80028ac <B1Right+0x1c0>
        }
    break;
  default:
    return ERR;
 8002898:	2300      	movs	r3, #0
 800289a:	e007      	b.n	80028ac <B1Right+0x1c0>
    break;
 800289c:	bf00      	nop
 800289e:	e004      	b.n	80028aa <B1Right+0x1be>
    break;
 80028a0:	bf00      	nop
 80028a2:	e002      	b.n	80028aa <B1Right+0x1be>
    break;
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <B1Right+0x1be>
    break;
 80028a8:	bf00      	nop
    break;
  }
  return PROG;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000a88 	.word	0x20000a88
 80028b8:	3ee66666 	.word	0x3ee66666
 80028bc:	3f6b851f 	.word	0x3f6b851f
 80028c0:	3ed70a3d 	.word	0x3ed70a3d
 80028c4:	20000934 	.word	0x20000934
 80028c8:	200009a8 	.word	0x200009a8
 80028cc:	20000a81 	.word	0x20000a81
 80028d0:	20000804 	.word	0x20000804
 80028d4:	20000980 	.word	0x20000980
 80028d8:	42200000 	.word	0x42200000
 80028dc:	20000a84 	.word	0x20000a84
 80028e0:	20000a78 	.word	0x20000a78
 80028e4:	20000a80 	.word	0x20000a80

080028e8 <B2Right>:
 B2RIGHT_HUIJIALO
} B2RIGHT_STATE_t;

B2RIGHT_STATE_t B2RIGHT_STATE = B2RIGHT_RIGHT;

CMD_STATE_T B2Right(){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
  uint32_t leftDist;
  uint32_t fwDist;
  uint32_t dist;
  uint32_t frontDist;
  switch (B2RIGHT_STATE)
 80028ee:	4bc4      	ldr	r3, [pc, #784]	@ (8002c00 <B2Right+0x318>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	f200 8315 	bhi.w	8002f22 <B2Right+0x63a>
 80028f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002900 <B2Right+0x18>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002941 	.word	0x08002941
 8002904:	0800298d 	.word	0x0800298d
 8002908:	080029f1 	.word	0x080029f1
 800290c:	08002a41 	.word	0x08002a41
 8002910:	08002a95 	.word	0x08002a95
 8002914:	08002add 	.word	0x08002add
 8002918:	08002b31 	.word	0x08002b31
 800291c:	08002b9d 	.word	0x08002b9d
 8002920:	08002c15 	.word	0x08002c15
 8002924:	08002c89 	.word	0x08002c89
 8002928:	08002cdd 	.word	0x08002cdd
 800292c:	08002d3d 	.word	0x08002d3d
 8002930:	08002d9b 	.word	0x08002d9b
 8002934:	08002e3b 	.word	0x08002e3b
 8002938:	08002e83 	.word	0x08002e83
 800293c:	08002ed7 	.word	0x08002ed7
  {
  case B2RIGHT_RIGHT:
    if(Move_Turn(true, RIGHT, 1) == FIN) {
 8002940:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002944:	2101      	movs	r1, #1
 8002946:	2001      	movs	r0, #1
 8002948:	f000 ff40 	bl	80037cc <Move_Turn>
 800294c:	4603      	mov	r3, r0
 800294e:	2b02      	cmp	r3, #2
 8002950:	f040 82e9 	bne.w	8002f26 <B2Right+0x63e>
      B2RIGHT_STATE = B2RIGHT_FIND_BLOCK_RIGHT;
 8002954:	4baa      	ldr	r3, [pc, #680]	@ (8002c00 <B2Right+0x318>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
      SetDir(0,0);
 800295a:	2100      	movs	r1, #0
 800295c:	2000      	movs	r0, #0
 800295e:	f7fe fc61 	bl	8001224 <SetDir>
      SetDir(1,0);
 8002962:	2100      	movs	r1, #0
 8002964:	2001      	movs	r0, #1
 8002966:	f7fe fc5d 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe fd68 	bl	8001440 <SetFacing>
      osDelay(150);
 8002970:	2096      	movs	r0, #150	@ 0x96
 8002972:	f008 f814 	bl	800a99e <osDelay>
      SetSpeed(1,1800);
 8002976:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 800297a:	2001      	movs	r0, #1
 800297c:	f7fe fc9a 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 8002980:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002984:	2000      	movs	r0, #0
 8002986:	f7fe fc95 	bl	80012b4 <SetSpeed>
    }
    break;
 800298a:	e2cc      	b.n	8002f26 <B2Right+0x63e>
  case B2RIGHT_FIND_BLOCK_RIGHT:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 800298c:	4b9d      	ldr	r3, [pc, #628]	@ (8002c04 <B2Right+0x31c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	4618      	mov	r0, r3
 8002996:	f008 f82f 	bl	800a9f8 <osMutexWait>
    leftDist = (uint32_t)IRRead.left;
 800299a:	4b9b      	ldr	r3, [pc, #620]	@ (8002c08 <B2Right+0x320>)
 800299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f7fe f900 	bl	8000ba8 <__aeabi_d2uiz>
 80029a8:	4603      	mov	r3, r0
 80029aa:	603b      	str	r3, [r7, #0]
    osMutexRelease(IRMutexHandle);
 80029ac:	4b95      	ldr	r3, [pc, #596]	@ (8002c04 <B2Right+0x31c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f008 f86f 	bl	800aa94 <osMutexRelease>
    if(leftDist < 170) {
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2ba9      	cmp	r3, #169	@ 0xa9
 80029ba:	f200 82b6 	bhi.w	8002f2a <B2Right+0x642>
      B2RIGHT_STATE = B2RIGHT_FIND_GAP_RIGHT;
 80029be:	4b90      	ldr	r3, [pc, #576]	@ (8002c00 <B2Right+0x318>)
 80029c0:	2202      	movs	r2, #2
 80029c2:	701a      	strb	r2, [r3, #0]
      SetDir(0,1);
 80029c4:	2101      	movs	r1, #1
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7fe fc2c 	bl	8001224 <SetDir>
      SetDir(1,1);
 80029cc:	2101      	movs	r1, #1
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7fe fc28 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe fd33 	bl	8001440 <SetFacing>
      SetSpeed(1,1800);
 80029da:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fe fc68 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 80029e4:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7fe fc63 	bl	80012b4 <SetSpeed>
    }
    break;
 80029ee:	e29c      	b.n	8002f2a <B2Right+0x642>
  case B2RIGHT_FIND_GAP_RIGHT:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 80029f0:	4b84      	ldr	r3, [pc, #528]	@ (8002c04 <B2Right+0x31c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	4618      	mov	r0, r3
 80029fa:	f007 fffd 	bl	800a9f8 <osMutexWait>
    leftDist = (uint32_t)IRRead.left;
 80029fe:	4b82      	ldr	r3, [pc, #520]	@ (8002c08 <B2Right+0x320>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fe f8ce 	bl	8000ba8 <__aeabi_d2uiz>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	603b      	str	r3, [r7, #0]
    osMutexRelease(IRMutexHandle);
 8002a10:	4b7c      	ldr	r3, [pc, #496]	@ (8002c04 <B2Right+0x31c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f008 f83d 	bl	800aa94 <osMutexRelease>
    if(leftDist > 250) {
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2bfa      	cmp	r3, #250	@ 0xfa
 8002a1e:	f240 8286 	bls.w	8002f2e <B2Right+0x646>
      B2RIGHT_STATE = B2RIGHT_TURN_FACE_BACK;
 8002a22:	4b77      	ldr	r3, [pc, #476]	@ (8002c00 <B2Right+0x318>)
 8002a24:	2203      	movs	r2, #3
 8002a26:	701a      	strb	r2, [r3, #0]
      osDelay(250);
 8002a28:	20fa      	movs	r0, #250	@ 0xfa
 8002a2a:	f007 ffb8 	bl	800a99e <osDelay>
      SetSpeed(1,0);
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2001      	movs	r0, #1
 8002a32:	f7fe fc3f 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 8002a36:	2100      	movs	r1, #0
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe fc3b 	bl	80012b4 <SetSpeed>
    }
    break;
 8002a3e:	e276      	b.n	8002f2e <B2Right+0x646>
  case B2RIGHT_TURN_FACE_BACK:
   // if(Move_Turn(true, HALF_LEFT, 0.93f) == FIN) {
   if(Move_Turn(true, LEFT, 1) == FIN) {
 8002a40:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002a44:	2102      	movs	r1, #2
 8002a46:	2001      	movs	r0, #1
 8002a48:	f000 fec0 	bl	80037cc <Move_Turn>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	f040 826f 	bne.w	8002f32 <B2Right+0x64a>
   	B2RIGHT_STATE = B2RIGHT_BACK_FACE_BACK;
 8002a54:	4b6a      	ldr	r3, [pc, #424]	@ (8002c00 <B2Right+0x318>)
 8002a56:	2204      	movs	r2, #4
 8002a58:	701a      	strb	r2, [r3, #0]
    EncoderReset(0, POSITION);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe fc43 	bl	80012e8 <EncoderReset>
    SetDir(0,0);
 8002a62:	2100      	movs	r1, #0
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fbdd 	bl	8001224 <SetDir>
    SetDir(1,0);
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f7fe fbd9 	bl	8001224 <SetDir>
    SetFacing(STRAIGHT);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe fce4 	bl	8001440 <SetFacing>
    osDelay(150);
 8002a78:	2096      	movs	r0, #150	@ 0x96
 8002a7a:	f007 ff90 	bl	800a99e <osDelay>
    SetSpeed(1,2400);
 8002a7e:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8002a82:	2001      	movs	r0, #1
 8002a84:	f7fe fc16 	bl	80012b4 <SetSpeed>
    SetSpeed(0,2000);
 8002a88:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fe fc11 	bl	80012b4 <SetSpeed>
   }
   break;
 8002a92:	e24e      	b.n	8002f32 <B2Right+0x64a>
  case B2RIGHT_BACK_FACE_BACK:
    dist = (uint32_t)( 7 * 40);
 8002a94:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002a98:	60bb      	str	r3, [r7, #8]
    osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c0c <B2Right+0x324>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f007 ffa8 	bl	800a9f8 <osMutexWait>
    fwDist = encoderLeft.position;
 8002aa8:	4b59      	ldr	r3, [pc, #356]	@ (8002c10 <B2Right+0x328>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	607b      	str	r3, [r7, #4]
    osMutexRelease(EncoderLeftMutexHandle);
 8002ab0:	4b56      	ldr	r3, [pc, #344]	@ (8002c0c <B2Right+0x324>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f007 ffed 	bl	800aa94 <osMutexRelease>
    if(fwDist > dist){
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	f240 824e 	bls.w	8002f60 <B2Right+0x678>
      B2RIGHT_STATE = B2RIGHT_TURN_FACE_LEFT;
 8002ac4:	4b4e      	ldr	r3, [pc, #312]	@ (8002c00 <B2Right+0x318>)
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	701a      	strb	r2, [r3, #0]
      SetSpeed(1,0);
 8002aca:	2100      	movs	r1, #0
 8002acc:	2001      	movs	r0, #1
 8002ace:	f7fe fbf1 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fe fbed 	bl	80012b4 <SetSpeed>
    }
    break;
 8002ada:	e241      	b.n	8002f60 <B2Right+0x678>
  case B2RIGHT_TURN_FACE_LEFT:
   // if(Move_Turn(true, HALF_LEFT, 0.93f) == FIN) {
   if(Move_Turn(true, LEFT, 1) == FIN) {
 8002adc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 fe72 	bl	80037cc <Move_Turn>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	f040 823a 	bne.w	8002f64 <B2Right+0x67c>
   	B2RIGHT_STATE = B2RIGHT_RESET_TO_BACK;
 8002af0:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <B2Right+0x318>)
 8002af2:	2206      	movs	r2, #6
 8002af4:	701a      	strb	r2, [r3, #0]
    EncoderReset(0, POSITION);
 8002af6:	2100      	movs	r1, #0
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fe fbf5 	bl	80012e8 <EncoderReset>
    SetDir(0,0);
 8002afe:	2100      	movs	r1, #0
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fe fb8f 	bl	8001224 <SetDir>
    SetDir(1,0);
 8002b06:	2100      	movs	r1, #0
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7fe fb8b 	bl	8001224 <SetDir>
    SetFacing(STRAIGHT);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe fc96 	bl	8001440 <SetFacing>
    osDelay(150);
 8002b14:	2096      	movs	r0, #150	@ 0x96
 8002b16:	f007 ff42 	bl	800a99e <osDelay>
    SetSpeed(1,1200);
 8002b1a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f7fe fbc8 	bl	80012b4 <SetSpeed>
    SetSpeed(0,1000);
 8002b24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f7fe fbc3 	bl	80012b4 <SetSpeed>
   }
   break;
 8002b2e:	e219      	b.n	8002f64 <B2Right+0x67c>
  case B2RIGHT_RESET_TO_BACK:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 8002b30:	4b34      	ldr	r3, [pc, #208]	@ (8002c04 <B2Right+0x31c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f007 ff5d 	bl	800a9f8 <osMutexWait>
    leftDist = (uint32_t)IRRead.left;
 8002b3e:	4b32      	ldr	r3, [pc, #200]	@ (8002c08 <B2Right+0x320>)
 8002b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7fe f82e 	bl	8000ba8 <__aeabi_d2uiz>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	603b      	str	r3, [r7, #0]
    osMutexRelease(IRMutexHandle);
 8002b50:	4b2c      	ldr	r3, [pc, #176]	@ (8002c04 <B2Right+0x31c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f007 ff9d 	bl	800aa94 <osMutexRelease>
    if(leftDist > 200) {
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b5e:	f240 8203 	bls.w	8002f68 <B2Right+0x680>
   	  B2RIGHT_STATE = B2RIGHT_FIND_BLOCK;
 8002b62:	4b27      	ldr	r3, [pc, #156]	@ (8002c00 <B2Right+0x318>)
 8002b64:	2207      	movs	r2, #7
 8002b66:	701a      	strb	r2, [r3, #0]
      SetDir(0,1);
 8002b68:	2101      	movs	r1, #1
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f7fe fb5a 	bl	8001224 <SetDir>
      SetDir(1,1);
 8002b70:	2101      	movs	r1, #1
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7fe fb56 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe fc61 	bl	8001440 <SetFacing>
      SetSpeed(1,1800);
 8002b7e:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8002b82:	2001      	movs	r0, #1
 8002b84:	f7fe fb96 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 8002b88:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fe fb91 	bl	80012b4 <SetSpeed>
      EncoderReset(false, POSITION);
 8002b92:	2100      	movs	r1, #0
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe fba7 	bl	80012e8 <EncoderReset>
    }
   break;
 8002b9a:	e1e5      	b.n	8002f68 <B2Right+0x680>
  case B2RIGHT_FIND_BLOCK:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 8002b9c:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <B2Right+0x31c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f007 ff27 	bl	800a9f8 <osMutexWait>
    leftDist = (uint32_t)IRRead.left;
 8002baa:	4b17      	ldr	r3, [pc, #92]	@ (8002c08 <B2Right+0x320>)
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7fd fff8 	bl	8000ba8 <__aeabi_d2uiz>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	603b      	str	r3, [r7, #0]
    osMutexRelease(IRMutexHandle);
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <B2Right+0x31c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f007 ff67 	bl	800aa94 <osMutexRelease>
    if(leftDist < 200) {
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bca:	f200 81cf 	bhi.w	8002f6c <B2Right+0x684>
      B2RIGHT_STATE = B2RIGHT_FIND_GAP_LEFT;
 8002bce:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <B2Right+0x318>)
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	701a      	strb	r2, [r3, #0]
      SetDir(0,1);
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7fe fb24 	bl	8001224 <SetDir>
      SetDir(1,1);
 8002bdc:	2101      	movs	r1, #1
 8002bde:	2001      	movs	r0, #1
 8002be0:	f7fe fb20 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fe fc2b 	bl	8001440 <SetFacing>
      SetSpeed(1,1800);
 8002bea:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f7fe fb60 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 8002bf4:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7fe fb5b 	bl	80012b4 <SetSpeed>
    }
   break;
 8002bfe:	e1b5      	b.n	8002f6c <B2Right+0x684>
 8002c00:	20000a89 	.word	0x20000a89
 8002c04:	200008e8 	.word	0x200008e8
 8002c08:	20000998 	.word	0x20000998
 8002c0c:	20000804 	.word	0x20000804
 8002c10:	20000980 	.word	0x20000980
 case B2RIGHT_FIND_GAP_LEFT:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 8002c14:	4bc8      	ldr	r3, [pc, #800]	@ (8002f38 <B2Right+0x650>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f04f 31ff 	mov.w	r1, #4294967295
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f007 feeb 	bl	800a9f8 <osMutexWait>
    leftDist =(uint32_t) IRRead.left;
 8002c22:	4bc6      	ldr	r3, [pc, #792]	@ (8002f3c <B2Right+0x654>)
 8002c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ffbc 	bl	8000ba8 <__aeabi_d2uiz>
 8002c30:	4603      	mov	r3, r0
 8002c32:	603b      	str	r3, [r7, #0]
    osMutexRelease(IRMutexHandle);
 8002c34:	4bc0      	ldr	r3, [pc, #768]	@ (8002f38 <B2Right+0x650>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f007 ff2b 	bl	800aa94 <osMutexRelease>
    if(leftDist > 260) {
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c44:	f240 8194 	bls.w	8002f70 <B2Right+0x688>
      B2RIGHT_STATE = B2RIGHT_TURN_TO_FRONT;
 8002c48:	4bbd      	ldr	r3, [pc, #756]	@ (8002f40 <B2Right+0x658>)
 8002c4a:	2209      	movs	r2, #9
 8002c4c:	701a      	strb	r2, [r3, #0]
      SetSpeed(1,0);
 8002c4e:	2100      	movs	r1, #0
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7fe fb2f 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe fb2b 	bl	80012b4 <SetSpeed>
      osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 8002c5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002f44 <B2Right+0x65c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f04f 31ff 	mov.w	r1, #4294967295
 8002c66:	4618      	mov	r0, r3
 8002c68:	f007 fec6 	bl	800a9f8 <osMutexWait>
      horiDist = (encoderLeft.position / 2);
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	@ (8002f48 <B2Right+0x660>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	4bb4      	ldr	r3, [pc, #720]	@ (8002f4c <B2Right+0x664>)
 8002c7a:	601a      	str	r2, [r3, #0]
      osMutexRelease(EncoderLeftMutexHandle);
 8002c7c:	4bb1      	ldr	r3, [pc, #708]	@ (8002f44 <B2Right+0x65c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f007 ff07 	bl	800aa94 <osMutexRelease>
    }
   break;
 8002c86:	e173      	b.n	8002f70 <B2Right+0x688>
  case B2RIGHT_TURN_TO_FRONT:
    if(Move_Turn(true, LEFT, 1) == FIN) {
 8002c88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f000 fd9c 	bl	80037cc <Move_Turn>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	f040 816c 	bne.w	8002f74 <B2Right+0x68c>
   	B2RIGHT_STATE = B2RIGHT_GO_BACK_STRAIGHT;
 8002c9c:	4ba8      	ldr	r3, [pc, #672]	@ (8002f40 <B2Right+0x658>)
 8002c9e:	220a      	movs	r2, #10
 8002ca0:	701a      	strb	r2, [r3, #0]
    EncoderReset(0, POSITION);
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fe fb1f 	bl	80012e8 <EncoderReset>
    SetDir(0,1);
 8002caa:	2101      	movs	r1, #1
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fe fab9 	bl	8001224 <SetDir>
    SetDir(1,1);
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f7fe fab5 	bl	8001224 <SetDir>
    SetFacing(STRAIGHT);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fe fbc0 	bl	8001440 <SetFacing>
    osDelay(150);
 8002cc0:	2096      	movs	r0, #150	@ 0x96
 8002cc2:	f007 fe6c 	bl	800a99e <osDelay>
    SetSpeed(1,1800);
 8002cc6:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7fe faf2 	bl	80012b4 <SetSpeed>
    SetSpeed(0,1500);
 8002cd0:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7fe faed 	bl	80012b4 <SetSpeed>
   }
   break;
 8002cda:	e14b      	b.n	8002f74 <B2Right+0x68c>
  case B2RIGHT_GO_BACK_STRAIGHT:
    dist = (uint32_t)((float)(vertDist)* 40);
 8002cdc:	4b9c      	ldr	r3, [pc, #624]	@ (8002f50 <B2Right+0x668>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	ee07 3a90 	vmov	s15, r3
 8002ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8002f54 <B2Right+0x66c>
 8002cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf4:	ee17 3a90 	vmov	r3, s15
 8002cf8:	60bb      	str	r3, [r7, #8]
    osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 8002cfa:	4b92      	ldr	r3, [pc, #584]	@ (8002f44 <B2Right+0x65c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8002d02:	4618      	mov	r0, r3
 8002d04:	f007 fe78 	bl	800a9f8 <osMutexWait>
    fwDist = encoderLeft.position;
 8002d08:	4b8f      	ldr	r3, [pc, #572]	@ (8002f48 <B2Right+0x660>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	607b      	str	r3, [r7, #4]
    osMutexRelease(EncoderLeftMutexHandle);
 8002d10:	4b8c      	ldr	r3, [pc, #560]	@ (8002f44 <B2Right+0x65c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f007 febd 	bl	800aa94 <osMutexRelease>
    if(fwDist > dist){
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	f240 812a 	bls.w	8002f78 <B2Right+0x690>
      SetSpeed(0,0);
 8002d24:	2100      	movs	r1, #0
 8002d26:	2000      	movs	r0, #0
 8002d28:	f7fe fac4 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f7fe fac0 	bl	80012b4 <SetSpeed>
      B2RIGHT_STATE = B2RIGHT_FIRST_TURN_BACK_CENTER;
 8002d34:	4b82      	ldr	r3, [pc, #520]	@ (8002f40 <B2Right+0x658>)
 8002d36:	220b      	movs	r2, #11
 8002d38:	701a      	strb	r2, [r3, #0]
    }
   break;
 8002d3a:	e11d      	b.n	8002f78 <B2Right+0x690>
  case B2RIGHT_FIRST_TURN_BACK_CENTER:
    if(Move_Turn(1, LEFT, 1.0f) == FIN){
 8002d3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002d40:	2102      	movs	r1, #2
 8002d42:	2001      	movs	r0, #1
 8002d44:	f000 fd42 	bl	80037cc <Move_Turn>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	f040 8116 	bne.w	8002f7c <B2Right+0x694>
      SetSpeed(0,0);
 8002d50:	2100      	movs	r1, #0
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe faae 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f7fe faaa 	bl	80012b4 <SetSpeed>
      B2RIGHT_STATE = B2RIGHT_GOTO_BLOCK_BACK_CENTER;
 8002d60:	4b77      	ldr	r3, [pc, #476]	@ (8002f40 <B2Right+0x658>)
 8002d62:	220c      	movs	r2, #12
 8002d64:	701a      	strb	r2, [r3, #0]
      SetDir(0,1);
 8002d66:	2101      	movs	r1, #1
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe fa5b 	bl	8001224 <SetDir>
      SetDir(1,1);
 8002d6e:	2101      	movs	r1, #1
 8002d70:	2001      	movs	r0, #1
 8002d72:	f7fe fa57 	bl	8001224 <SetDir>
      EncoderReset(false, POSITION);
 8002d76:	2100      	movs	r1, #0
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fe fab5 	bl	80012e8 <EncoderReset>
      SetFacing(STRAIGHT);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fe fb5e 	bl	8001440 <SetFacing>
      SetSpeed(1,1800);
 8002d84:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f7fe fa93 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 8002d8e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fe fa8e 	bl	80012b4 <SetSpeed>
    }
  break;
 8002d98:	e0f0      	b.n	8002f7c <B2Right+0x694>
  case B2RIGHT_GOTO_BLOCK_BACK_CENTER:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 8002d9a:	4b67      	ldr	r3, [pc, #412]	@ (8002f38 <B2Right+0x650>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8002da2:	4618      	mov	r0, r3
 8002da4:	f007 fe28 	bl	800a9f8 <osMutexWait>
    leftDist = (uint32_t) IRRead.left;
 8002da8:	4b64      	ldr	r3, [pc, #400]	@ (8002f3c <B2Right+0x654>)
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd fef9 	bl	8000ba8 <__aeabi_d2uiz>
 8002db6:	4603      	mov	r3, r0
 8002db8:	603b      	str	r3, [r7, #0]
    osMutexRelease(IRMutexHandle);
 8002dba:	4b5f      	ldr	r3, [pc, #380]	@ (8002f38 <B2Right+0x650>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f007 fe68 	bl	800aa94 <osMutexRelease>

    osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 8002dc4:	4b5f      	ldr	r3, [pc, #380]	@ (8002f44 <B2Right+0x65c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f007 fe13 	bl	800a9f8 <osMutexWait>
    fwDist = encoderLeft.position;
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f48 <B2Right+0x660>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	607b      	str	r3, [r7, #4]
    osMutexRelease(EncoderLeftMutexHandle);
 8002dda:	4b5a      	ldr	r3, [pc, #360]	@ (8002f44 <B2Right+0x65c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f007 fe58 	bl	800aa94 <osMutexRelease>
    if(fwDist > horiDist){
 8002de4:	4b59      	ldr	r3, [pc, #356]	@ (8002f4c <B2Right+0x664>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	f240 80c8 	bls.w	8002f80 <B2Right+0x698>
      B2RIGHT_STATE = B2RIGHT_BACKWARDS_AFTER_GOTO;
 8002df0:	4b53      	ldr	r3, [pc, #332]	@ (8002f40 <B2Right+0x658>)
 8002df2:	220d      	movs	r2, #13
 8002df4:	701a      	strb	r2, [r3, #0]
      SetSpeed(0,0);
 8002df6:	2100      	movs	r1, #0
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7fe fa5b 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 8002dfe:	2100      	movs	r1, #0
 8002e00:	2001      	movs	r0, #1
 8002e02:	f7fe fa57 	bl	80012b4 <SetSpeed>
      SetDir(0,0);
 8002e06:	2100      	movs	r1, #0
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fe fa0b 	bl	8001224 <SetDir>
      SetDir(1,0);
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2001      	movs	r0, #1
 8002e12:	f7fe fa07 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fe fb12 	bl	8001440 <SetFacing>
      SetSpeed(1,1800);
 8002e1c:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8002e20:	2001      	movs	r0, #1
 8002e22:	f7fe fa47 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 8002e26:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fe fa42 	bl	80012b4 <SetSpeed>
      EncoderReset(0, POSITION);
 8002e30:	2100      	movs	r1, #0
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7fe fa58 	bl	80012e8 <EncoderReset>
    }
  break;
 8002e38:	e0a2      	b.n	8002f80 <B2Right+0x698>
  case B2RIGHT_BACKWARDS_AFTER_GOTO:
    dist = (uint32_t)((float)(17)* 40);
 8002e3a:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8002e3e:	60bb      	str	r3, [r7, #8]
    osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 8002e40:	4b40      	ldr	r3, [pc, #256]	@ (8002f44 <B2Right+0x65c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f007 fdd5 	bl	800a9f8 <osMutexWait>
    fwDist = encoderLeft.position;
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f48 <B2Right+0x660>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	607b      	str	r3, [r7, #4]
    osMutexRelease(EncoderLeftMutexHandle);
 8002e56:	4b3b      	ldr	r3, [pc, #236]	@ (8002f44 <B2Right+0x65c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f007 fe1a 	bl	800aa94 <osMutexRelease>
    if(fwDist > dist){
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f240 808d 	bls.w	8002f84 <B2Right+0x69c>
      SetSpeed(0,0);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7fe fa21 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 8002e72:	2100      	movs	r1, #0
 8002e74:	2001      	movs	r0, #1
 8002e76:	f7fe fa1d 	bl	80012b4 <SetSpeed>
      B2RIGHT_STATE = B2RIGHT_SECOND_TURN_BACK_CENTER;
 8002e7a:	4b31      	ldr	r3, [pc, #196]	@ (8002f40 <B2Right+0x658>)
 8002e7c:	220e      	movs	r2, #14
 8002e7e:	701a      	strb	r2, [r3, #0]
    }
  break;
 8002e80:	e080      	b.n	8002f84 <B2Right+0x69c>
  case B2RIGHT_SECOND_TURN_BACK_CENTER:
    if(Move_Turn(1, RIGHT, 1.0f) == FIN){
 8002e82:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e86:	2101      	movs	r1, #1
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f000 fc9f 	bl	80037cc <Move_Turn>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d179      	bne.n	8002f88 <B2Right+0x6a0>
      SetSpeed(0,0);
 8002e94:	2100      	movs	r1, #0
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fe fa0c 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f7fe fa08 	bl	80012b4 <SetSpeed>
      SetDir(0,1);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7fe f9bc 	bl	8001224 <SetDir>
      SetDir(1,1);
 8002eac:	2101      	movs	r1, #1
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7fe f9b8 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fe fac3 	bl	8001440 <SetFacing>
      SetSpeed(1,1800);
 8002eba:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f7fe f9f8 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 8002ec4:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fe f9f3 	bl	80012b4 <SetSpeed>
      B2RIGHT_STATE = B2RIGHT_HUIJIALO;
 8002ece:	4b1c      	ldr	r3, [pc, #112]	@ (8002f40 <B2Right+0x658>)
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	701a      	strb	r2, [r3, #0]
    }
  break;
 8002ed4:	e058      	b.n	8002f88 <B2Right+0x6a0>
  case B2RIGHT_HUIJIALO:
    osMutexWait(UltrasonicMutexHandle, HAL_MAX_DELAY);
 8002ed6:	4b20      	ldr	r3, [pc, #128]	@ (8002f58 <B2Right+0x670>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f04f 31ff 	mov.w	r1, #4294967295
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f007 fd8a 	bl	800a9f8 <osMutexWait>
    frontDist = UltraRead.frontDist;
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <B2Right+0x674>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	60fb      	str	r3, [r7, #12]
    osMutexRelease(UltrasonicMutexHandle);
 8002eec:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <B2Right+0x670>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f007 fdcf 	bl	800aa94 <osMutexRelease>
    if (frontDist < 10) {
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	d847      	bhi.n	8002f8c <B2Right+0x6a4>
      SetSpeed(1,0);
 8002efc:	2100      	movs	r1, #0
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fe f9d8 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 8002f04:	2100      	movs	r1, #0
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7fe f9d4 	bl	80012b4 <SetSpeed>
      B2RIGHT_STATE = B2RIGHT_RIGHT;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <B2Right+0x658>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
      vertDist = 0;
 8002f12:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <B2Right+0x668>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
      horiDist = 0;
 8002f18:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <B2Right+0x664>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
      return FIN;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e036      	b.n	8002f90 <B2Right+0x6a8>
    }
    break;
  default:
    return ERR;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e034      	b.n	8002f90 <B2Right+0x6a8>
    break;
 8002f26:	bf00      	nop
 8002f28:	e031      	b.n	8002f8e <B2Right+0x6a6>
    break;
 8002f2a:	bf00      	nop
 8002f2c:	e02f      	b.n	8002f8e <B2Right+0x6a6>
    break;
 8002f2e:	bf00      	nop
 8002f30:	e02d      	b.n	8002f8e <B2Right+0x6a6>
   break;
 8002f32:	bf00      	nop
 8002f34:	e02b      	b.n	8002f8e <B2Right+0x6a6>
 8002f36:	bf00      	nop
 8002f38:	200008e8 	.word	0x200008e8
 8002f3c:	20000998 	.word	0x20000998
 8002f40:	20000a89 	.word	0x20000a89
 8002f44:	20000804 	.word	0x20000804
 8002f48:	20000980 	.word	0x20000980
 8002f4c:	20000a7c 	.word	0x20000a7c
 8002f50:	20000a78 	.word	0x20000a78
 8002f54:	42200000 	.word	0x42200000
 8002f58:	20000934 	.word	0x20000934
 8002f5c:	200009a8 	.word	0x200009a8
    break;
 8002f60:	bf00      	nop
 8002f62:	e014      	b.n	8002f8e <B2Right+0x6a6>
   break;
 8002f64:	bf00      	nop
 8002f66:	e012      	b.n	8002f8e <B2Right+0x6a6>
   break;
 8002f68:	bf00      	nop
 8002f6a:	e010      	b.n	8002f8e <B2Right+0x6a6>
   break;
 8002f6c:	bf00      	nop
 8002f6e:	e00e      	b.n	8002f8e <B2Right+0x6a6>
   break;
 8002f70:	bf00      	nop
 8002f72:	e00c      	b.n	8002f8e <B2Right+0x6a6>
   break;
 8002f74:	bf00      	nop
 8002f76:	e00a      	b.n	8002f8e <B2Right+0x6a6>
   break;
 8002f78:	bf00      	nop
 8002f7a:	e008      	b.n	8002f8e <B2Right+0x6a6>
  break;
 8002f7c:	bf00      	nop
 8002f7e:	e006      	b.n	8002f8e <B2Right+0x6a6>
  break;
 8002f80:	bf00      	nop
 8002f82:	e004      	b.n	8002f8e <B2Right+0x6a6>
  break;
 8002f84:	bf00      	nop
 8002f86:	e002      	b.n	8002f8e <B2Right+0x6a6>
  break;
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <B2Right+0x6a6>
    break;
 8002f8c:	bf00      	nop
    break;
  }
 return PROG;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <B2Left>:
 B2LEFT_HUIJIALO
} B2LEFT_STATE_t;

B2LEFT_STATE_t B2LEFT_STATE = B2LEFT_LEFT;

CMD_STATE_T B2Left(){
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
  double leftDist;
  uint32_t fwDist;
  uint32_t dist;
  uint32_t frontDist;
  switch (B2LEFT_STATE)
 8002f9e:	4bc0      	ldr	r3, [pc, #768]	@ (80032a0 <B2Left+0x308>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	f200 832e 	bhi.w	8003604 <B2Left+0x66c>
 8002fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb0 <B2Left+0x18>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002ff1 	.word	0x08002ff1
 8002fb4:	0800303d 	.word	0x0800303d
 8002fb8:	0800307d 	.word	0x0800307d
 8002fbc:	080030cd 	.word	0x080030cd
 8002fc0:	08003121 	.word	0x08003121
 8002fc4:	08003171 	.word	0x08003171
 8002fc8:	080031c5 	.word	0x080031c5
 8002fcc:	08003237 	.word	0x08003237
 8002fd0:	080032b5 	.word	0x080032b5
 8002fd4:	0800332d 	.word	0x0800332d
 8002fd8:	08003381 	.word	0x08003381
 8002fdc:	080033e1 	.word	0x080033e1
 8002fe0:	0800343f 	.word	0x0800343f
 8002fe4:	080034eb 	.word	0x080034eb
 8002fe8:	08003533 	.word	0x08003533
 8002fec:	08003587 	.word	0x08003587
  {
  case B2LEFT_LEFT:
    if(Move_Turn(true, LEFT, 1) == FIN) {
 8002ff0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f000 fbe8 	bl	80037cc <Move_Turn>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	f040 8302 	bne.w	8003608 <B2Left+0x670>
      B2LEFT_STATE = B2LEFT_FIND_BLOCK_LEFT;
 8003004:	4ba6      	ldr	r3, [pc, #664]	@ (80032a0 <B2Left+0x308>)
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
      SetDir(0,0);
 800300a:	2100      	movs	r1, #0
 800300c:	2000      	movs	r0, #0
 800300e:	f7fe f909 	bl	8001224 <SetDir>
      SetDir(1,0);
 8003012:	2100      	movs	r1, #0
 8003014:	2001      	movs	r0, #1
 8003016:	f7fe f905 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 800301a:	2000      	movs	r0, #0
 800301c:	f7fe fa10 	bl	8001440 <SetFacing>
      osDelay(150);
 8003020:	2096      	movs	r0, #150	@ 0x96
 8003022:	f007 fcbc 	bl	800a99e <osDelay>
      SetSpeed(1,1800);
 8003026:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 800302a:	2001      	movs	r0, #1
 800302c:	f7fe f942 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 8003030:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8003034:	2000      	movs	r0, #0
 8003036:	f7fe f93d 	bl	80012b4 <SetSpeed>
    }
    break;
 800303a:	e2e5      	b.n	8003608 <B2Left+0x670>
  case B2LEFT_FIND_BLOCK_LEFT:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 800303c:	4b99      	ldr	r3, [pc, #612]	@ (80032a4 <B2Left+0x30c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f04f 31ff 	mov.w	r1, #4294967295
 8003044:	4618      	mov	r0, r3
 8003046:	f007 fcd7 	bl	800a9f8 <osMutexWait>
    leftDist = IRRead.right;
 800304a:	4b97      	ldr	r3, [pc, #604]	@ (80032a8 <B2Left+0x310>)
 800304c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003050:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(IRMutexHandle);
 8003054:	4b93      	ldr	r3, [pc, #588]	@ (80032a4 <B2Left+0x30c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f007 fd1b 	bl	800aa94 <osMutexRelease>
    if(leftDist < 170) {
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	4b92      	ldr	r3, [pc, #584]	@ (80032ac <B2Left+0x314>)
 8003064:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003068:	f7fd fd38 	bl	8000adc <__aeabi_dcmplt>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d100      	bne.n	8003074 <B2Left+0xdc>
//      SetDir(1,1);
//      SetFacing(STRAIGHT);
//      SetSpeed(1,1200);
//      SetSpeed(0,1000);
    }
    break;
 8003072:	e2dc      	b.n	800362e <B2Left+0x696>
      B2LEFT_STATE = B2LEFT_TURN_FACE_BACK;
 8003074:	4b8a      	ldr	r3, [pc, #552]	@ (80032a0 <B2Left+0x308>)
 8003076:	2203      	movs	r2, #3
 8003078:	701a      	strb	r2, [r3, #0]
    break;
 800307a:	e2d8      	b.n	800362e <B2Left+0x696>
  case B2LEFT_FIND_GAP_LEFT:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 800307c:	4b89      	ldr	r3, [pc, #548]	@ (80032a4 <B2Left+0x30c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f04f 31ff 	mov.w	r1, #4294967295
 8003084:	4618      	mov	r0, r3
 8003086:	f007 fcb7 	bl	800a9f8 <osMutexWait>
    leftDist = IRRead.right;
 800308a:	4b87      	ldr	r3, [pc, #540]	@ (80032a8 <B2Left+0x310>)
 800308c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003090:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(IRMutexHandle);
 8003094:	4b83      	ldr	r3, [pc, #524]	@ (80032a4 <B2Left+0x30c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f007 fcfb 	bl	800aa94 <osMutexRelease>
    if(leftDist > 200) {
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	4b83      	ldr	r3, [pc, #524]	@ (80032b0 <B2Left+0x318>)
 80030a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030a8:	f7fd fd36 	bl	8000b18 <__aeabi_dcmpgt>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <B2Left+0x11c>
      B2LEFT_STATE = B2LEFT_TURN_FACE_BACK;
      SetSpeed(1,0);
      SetSpeed(0,0);
    }
    break;
 80030b2:	e2bc      	b.n	800362e <B2Left+0x696>
      B2LEFT_STATE = B2LEFT_TURN_FACE_BACK;
 80030b4:	4b7a      	ldr	r3, [pc, #488]	@ (80032a0 <B2Left+0x308>)
 80030b6:	2203      	movs	r2, #3
 80030b8:	701a      	strb	r2, [r3, #0]
      SetSpeed(1,0);
 80030ba:	2100      	movs	r1, #0
 80030bc:	2001      	movs	r0, #1
 80030be:	f7fe f8f9 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 80030c2:	2100      	movs	r1, #0
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fe f8f5 	bl	80012b4 <SetSpeed>
    break;
 80030ca:	e2b0      	b.n	800362e <B2Left+0x696>
  case B2LEFT_TURN_FACE_BACK:
   // if(Move_Turn(true, HALF_LEFT, 0.93f) == FIN) {
   if(Move_Turn(true, RIGHT, 1) == FIN) {
 80030cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80030d0:	2101      	movs	r1, #1
 80030d2:	2001      	movs	r0, #1
 80030d4:	f000 fb7a 	bl	80037cc <Move_Turn>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b02      	cmp	r3, #2
 80030dc:	f040 8296 	bne.w	800360c <B2Left+0x674>
   	B2LEFT_STATE = B2LEFT_BACK_FACE_BACK;
 80030e0:	4b6f      	ldr	r3, [pc, #444]	@ (80032a0 <B2Left+0x308>)
 80030e2:	2204      	movs	r2, #4
 80030e4:	701a      	strb	r2, [r3, #0]
    EncoderReset(0, POSITION);
 80030e6:	2100      	movs	r1, #0
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fe f8fd 	bl	80012e8 <EncoderReset>
    SetDir(0,0);
 80030ee:	2100      	movs	r1, #0
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fe f897 	bl	8001224 <SetDir>
    SetDir(1,0);
 80030f6:	2100      	movs	r1, #0
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7fe f893 	bl	8001224 <SetDir>
    SetFacing(STRAIGHT);
 80030fe:	2000      	movs	r0, #0
 8003100:	f7fe f99e 	bl	8001440 <SetFacing>
    osDelay(150);
 8003104:	2096      	movs	r0, #150	@ 0x96
 8003106:	f007 fc4a 	bl	800a99e <osDelay>
    SetSpeed(1,2400);
 800310a:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800310e:	2001      	movs	r0, #1
 8003110:	f7fe f8d0 	bl	80012b4 <SetSpeed>
    SetSpeed(0,2000);
 8003114:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003118:	2000      	movs	r0, #0
 800311a:	f7fe f8cb 	bl	80012b4 <SetSpeed>
   }
   break;
 800311e:	e275      	b.n	800360c <B2Left+0x674>
  case B2LEFT_BACK_FACE_BACK:
	  osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 8003120:	4b60      	ldr	r3, [pc, #384]	@ (80032a4 <B2Left+0x30c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	4618      	mov	r0, r3
 800312a:	f007 fc65 	bl	800a9f8 <osMutexWait>
	  leftDist = IRRead.right;
 800312e:	4b5e      	ldr	r3, [pc, #376]	@ (80032a8 <B2Left+0x310>)
 8003130:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003134:	e9c7 2300 	strd	r2, r3, [r7]
	  osMutexRelease(IRMutexHandle);
 8003138:	4b5a      	ldr	r3, [pc, #360]	@ (80032a4 <B2Left+0x30c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f007 fca9 	bl	800aa94 <osMutexRelease>
	  if(leftDist < 170) {
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <B2Left+0x314>)
 8003148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800314c:	f7fd fcc6 	bl	8000adc <__aeabi_dcmplt>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d100      	bne.n	8003158 <B2Left+0x1c0>
      B2LEFT_STATE = B2LEFT_TURN_FACE_RIGHT;
      SetSpeed(1,0);
      SetSpeed(0,0);
    }
    break;
 8003156:	e26a      	b.n	800362e <B2Left+0x696>
      B2LEFT_STATE = B2LEFT_TURN_FACE_RIGHT;
 8003158:	4b51      	ldr	r3, [pc, #324]	@ (80032a0 <B2Left+0x308>)
 800315a:	2205      	movs	r2, #5
 800315c:	701a      	strb	r2, [r3, #0]
      SetSpeed(1,0);
 800315e:	2100      	movs	r1, #0
 8003160:	2001      	movs	r0, #1
 8003162:	f7fe f8a7 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 8003166:	2100      	movs	r1, #0
 8003168:	2000      	movs	r0, #0
 800316a:	f7fe f8a3 	bl	80012b4 <SetSpeed>
    break;
 800316e:	e25e      	b.n	800362e <B2Left+0x696>
  case B2LEFT_TURN_FACE_RIGHT:
   // if(Move_Turn(true, HALF_LEFT, 0.93f) == FIN) {
   if(Move_Turn(true, RIGHT, 1) == FIN) {
 8003170:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003174:	2101      	movs	r1, #1
 8003176:	2001      	movs	r0, #1
 8003178:	f000 fb28 	bl	80037cc <Move_Turn>
 800317c:	4603      	mov	r3, r0
 800317e:	2b02      	cmp	r3, #2
 8003180:	f040 8246 	bne.w	8003610 <B2Left+0x678>
   	B2LEFT_STATE = B2LEFT_RESET_TO_BACK;
 8003184:	4b46      	ldr	r3, [pc, #280]	@ (80032a0 <B2Left+0x308>)
 8003186:	2206      	movs	r2, #6
 8003188:	701a      	strb	r2, [r3, #0]
    EncoderReset(0, POSITION);
 800318a:	2100      	movs	r1, #0
 800318c:	2000      	movs	r0, #0
 800318e:	f7fe f8ab 	bl	80012e8 <EncoderReset>
    SetDir(0,0);
 8003192:	2100      	movs	r1, #0
 8003194:	2000      	movs	r0, #0
 8003196:	f7fe f845 	bl	8001224 <SetDir>
    SetDir(1,0);
 800319a:	2100      	movs	r1, #0
 800319c:	2001      	movs	r0, #1
 800319e:	f7fe f841 	bl	8001224 <SetDir>
    SetFacing(STRAIGHT);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fe f94c 	bl	8001440 <SetFacing>
    osDelay(150);
 80031a8:	2096      	movs	r0, #150	@ 0x96
 80031aa:	f007 fbf8 	bl	800a99e <osDelay>
    SetSpeed(1,1200);
 80031ae:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80031b2:	2001      	movs	r0, #1
 80031b4:	f7fe f87e 	bl	80012b4 <SetSpeed>
    SetSpeed(0,1000);
 80031b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fe f879 	bl	80012b4 <SetSpeed>
   }
   break;
 80031c2:	e225      	b.n	8003610 <B2Left+0x678>
  case B2LEFT_RESET_TO_BACK:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 80031c4:	4b37      	ldr	r3, [pc, #220]	@ (80032a4 <B2Left+0x30c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	4618      	mov	r0, r3
 80031ce:	f007 fc13 	bl	800a9f8 <osMutexWait>
    leftDist = IRRead.right;
 80031d2:	4b35      	ldr	r3, [pc, #212]	@ (80032a8 <B2Left+0x310>)
 80031d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031d8:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(IRMutexHandle);
 80031dc:	4b31      	ldr	r3, [pc, #196]	@ (80032a4 <B2Left+0x30c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f007 fc57 	bl	800aa94 <osMutexRelease>
    if(leftDist > 200) {
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	4b31      	ldr	r3, [pc, #196]	@ (80032b0 <B2Left+0x318>)
 80031ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031f0:	f7fd fc92 	bl	8000b18 <__aeabi_dcmpgt>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d100      	bne.n	80031fc <B2Left+0x264>
      SetFacing(STRAIGHT);
      SetSpeed(1,2400);
      SetSpeed(0,2000);
      EncoderReset(false, POSITION);
    }
   break;
 80031fa:	e218      	b.n	800362e <B2Left+0x696>
   	  B2LEFT_STATE = B2LEFT_FIND_BLOCK;
 80031fc:	4b28      	ldr	r3, [pc, #160]	@ (80032a0 <B2Left+0x308>)
 80031fe:	2207      	movs	r2, #7
 8003200:	701a      	strb	r2, [r3, #0]
      SetDir(0,1);
 8003202:	2101      	movs	r1, #1
 8003204:	2000      	movs	r0, #0
 8003206:	f7fe f80d 	bl	8001224 <SetDir>
      SetDir(1,1);
 800320a:	2101      	movs	r1, #1
 800320c:	2001      	movs	r0, #1
 800320e:	f7fe f809 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 8003212:	2000      	movs	r0, #0
 8003214:	f7fe f914 	bl	8001440 <SetFacing>
      SetSpeed(1,2400);
 8003218:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800321c:	2001      	movs	r0, #1
 800321e:	f7fe f849 	bl	80012b4 <SetSpeed>
      SetSpeed(0,2000);
 8003222:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003226:	2000      	movs	r0, #0
 8003228:	f7fe f844 	bl	80012b4 <SetSpeed>
      EncoderReset(false, POSITION);
 800322c:	2100      	movs	r1, #0
 800322e:	2000      	movs	r0, #0
 8003230:	f7fe f85a 	bl	80012e8 <EncoderReset>
   break;
 8003234:	e1fb      	b.n	800362e <B2Left+0x696>
  case B2LEFT_FIND_BLOCK:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 8003236:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <B2Left+0x30c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f04f 31ff 	mov.w	r1, #4294967295
 800323e:	4618      	mov	r0, r3
 8003240:	f007 fbda 	bl	800a9f8 <osMutexWait>
    leftDist = IRRead.right;
 8003244:	4b18      	ldr	r3, [pc, #96]	@ (80032a8 <B2Left+0x310>)
 8003246:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800324a:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(IRMutexHandle);
 800324e:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <B2Left+0x30c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f007 fc1e 	bl	800aa94 <osMutexRelease>
    if(leftDist < 200) {
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	4b14      	ldr	r3, [pc, #80]	@ (80032b0 <B2Left+0x318>)
 800325e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003262:	f7fd fc3b 	bl	8000adc <__aeabi_dcmplt>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d100      	bne.n	800326e <B2Left+0x2d6>
      SetDir(1,1);
      SetFacing(STRAIGHT);
      SetSpeed(1,1200);
      SetSpeed(0,1000);
    }
   break;
 800326c:	e1df      	b.n	800362e <B2Left+0x696>
      B2LEFT_STATE = B2LEFT_FIND_GAP_RIGHT;
 800326e:	4b0c      	ldr	r3, [pc, #48]	@ (80032a0 <B2Left+0x308>)
 8003270:	2208      	movs	r2, #8
 8003272:	701a      	strb	r2, [r3, #0]
      SetDir(0,1);
 8003274:	2101      	movs	r1, #1
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd ffd4 	bl	8001224 <SetDir>
      SetDir(1,1);
 800327c:	2101      	movs	r1, #1
 800327e:	2001      	movs	r0, #1
 8003280:	f7fd ffd0 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 8003284:	2000      	movs	r0, #0
 8003286:	f7fe f8db 	bl	8001440 <SetFacing>
      SetSpeed(1,1200);
 800328a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800328e:	2001      	movs	r0, #1
 8003290:	f7fe f810 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1000);
 8003294:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003298:	2000      	movs	r0, #0
 800329a:	f7fe f80b 	bl	80012b4 <SetSpeed>
   break;
 800329e:	e1c6      	b.n	800362e <B2Left+0x696>
 80032a0:	20000a8a 	.word	0x20000a8a
 80032a4:	200008e8 	.word	0x200008e8
 80032a8:	20000998 	.word	0x20000998
 80032ac:	40654000 	.word	0x40654000
 80032b0:	40690000 	.word	0x40690000
 case B2LEFT_FIND_GAP_RIGHT:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 80032b4:	4bc7      	ldr	r3, [pc, #796]	@ (80035d4 <B2Left+0x63c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f04f 31ff 	mov.w	r1, #4294967295
 80032bc:	4618      	mov	r0, r3
 80032be:	f007 fb9b 	bl	800a9f8 <osMutexWait>
    leftDist = IRRead.right;
 80032c2:	4bc5      	ldr	r3, [pc, #788]	@ (80035d8 <B2Left+0x640>)
 80032c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032c8:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(IRMutexHandle);
 80032cc:	4bc1      	ldr	r3, [pc, #772]	@ (80035d4 <B2Left+0x63c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f007 fbdf 	bl	800aa94 <osMutexRelease>
    if(leftDist > 200) {
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	4bc0      	ldr	r3, [pc, #768]	@ (80035dc <B2Left+0x644>)
 80032dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e0:	f7fd fc1a 	bl	8000b18 <__aeabi_dcmpgt>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d100      	bne.n	80032ec <B2Left+0x354>
      SetSpeed(0,0);
      osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
      horiDist = (encoderLeft.position / 2);
      osMutexRelease(EncoderLeftMutexHandle);
    }
   break;
 80032ea:	e1a0      	b.n	800362e <B2Left+0x696>
      B2LEFT_STATE = B2LEFT_TURN_TO_FRONT;
 80032ec:	4bbc      	ldr	r3, [pc, #752]	@ (80035e0 <B2Left+0x648>)
 80032ee:	2209      	movs	r2, #9
 80032f0:	701a      	strb	r2, [r3, #0]
      SetSpeed(1,0);
 80032f2:	2100      	movs	r1, #0
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7fd ffdd 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 80032fa:	2100      	movs	r1, #0
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fd ffd9 	bl	80012b4 <SetSpeed>
      osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 8003302:	4bb8      	ldr	r3, [pc, #736]	@ (80035e4 <B2Left+0x64c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f04f 31ff 	mov.w	r1, #4294967295
 800330a:	4618      	mov	r0, r3
 800330c:	f007 fb74 	bl	800a9f8 <osMutexWait>
      horiDist = (encoderLeft.position / 2);
 8003310:	4bb5      	ldr	r3, [pc, #724]	@ (80035e8 <B2Left+0x650>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	4bb3      	ldr	r3, [pc, #716]	@ (80035ec <B2Left+0x654>)
 800331e:	601a      	str	r2, [r3, #0]
      osMutexRelease(EncoderLeftMutexHandle);
 8003320:	4bb0      	ldr	r3, [pc, #704]	@ (80035e4 <B2Left+0x64c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f007 fbb5 	bl	800aa94 <osMutexRelease>
   break;
 800332a:	e180      	b.n	800362e <B2Left+0x696>
  case B2LEFT_TURN_TO_FRONT:
    if(Move_Turn(true, RIGHT, 0.99f) == FIN) {
 800332c:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 80035f0 <B2Left+0x658>
 8003330:	2101      	movs	r1, #1
 8003332:	2001      	movs	r0, #1
 8003334:	f000 fa4a 	bl	80037cc <Move_Turn>
 8003338:	4603      	mov	r3, r0
 800333a:	2b02      	cmp	r3, #2
 800333c:	f040 816a 	bne.w	8003614 <B2Left+0x67c>
   	B2LEFT_STATE = B2LEFT_GO_BACK_STRAIGHT;
 8003340:	4ba7      	ldr	r3, [pc, #668]	@ (80035e0 <B2Left+0x648>)
 8003342:	220a      	movs	r2, #10
 8003344:	701a      	strb	r2, [r3, #0]
    EncoderReset(0, POSITION);
 8003346:	2100      	movs	r1, #0
 8003348:	2000      	movs	r0, #0
 800334a:	f7fd ffcd 	bl	80012e8 <EncoderReset>
    SetDir(0,1);
 800334e:	2101      	movs	r1, #1
 8003350:	2000      	movs	r0, #0
 8003352:	f7fd ff67 	bl	8001224 <SetDir>
    SetDir(1,1);
 8003356:	2101      	movs	r1, #1
 8003358:	2001      	movs	r0, #1
 800335a:	f7fd ff63 	bl	8001224 <SetDir>
    SetFacing(STRAIGHT);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fe f86e 	bl	8001440 <SetFacing>
    osDelay(150);
 8003364:	2096      	movs	r0, #150	@ 0x96
 8003366:	f007 fb1a 	bl	800a99e <osDelay>
    SetSpeed(1,1800);
 800336a:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 800336e:	2001      	movs	r0, #1
 8003370:	f7fd ffa0 	bl	80012b4 <SetSpeed>
    SetSpeed(0,1500);
 8003374:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd ff9b 	bl	80012b4 <SetSpeed>
   }
   break;
 800337e:	e149      	b.n	8003614 <B2Left+0x67c>
  case B2LEFT_GO_BACK_STRAIGHT:
    dist = (uint32_t)((float)(vertDist)* 40);
 8003380:	4b9c      	ldr	r3, [pc, #624]	@ (80035f4 <B2Left+0x65c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80035f8 <B2Left+0x660>
 8003390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003398:	ee17 3a90 	vmov	r3, s15
 800339c:	613b      	str	r3, [r7, #16]
    osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 800339e:	4b91      	ldr	r3, [pc, #580]	@ (80035e4 <B2Left+0x64c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f04f 31ff 	mov.w	r1, #4294967295
 80033a6:	4618      	mov	r0, r3
 80033a8:	f007 fb26 	bl	800a9f8 <osMutexWait>
    fwDist = encoderLeft.position;
 80033ac:	4b8e      	ldr	r3, [pc, #568]	@ (80035e8 <B2Left+0x650>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	60fb      	str	r3, [r7, #12]
    osMutexRelease(EncoderLeftMutexHandle);
 80033b4:	4b8b      	ldr	r3, [pc, #556]	@ (80035e4 <B2Left+0x64c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f007 fb6b 	bl	800aa94 <osMutexRelease>
    if(fwDist > dist){
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	f240 8128 	bls.w	8003618 <B2Left+0x680>
      SetSpeed(0,0);
 80033c8:	2100      	movs	r1, #0
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd ff72 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 80033d0:	2100      	movs	r1, #0
 80033d2:	2001      	movs	r0, #1
 80033d4:	f7fd ff6e 	bl	80012b4 <SetSpeed>
      B2LEFT_STATE = B2LEFT_FIRST_TURN_BACK_CENTER;
 80033d8:	4b81      	ldr	r3, [pc, #516]	@ (80035e0 <B2Left+0x648>)
 80033da:	220b      	movs	r2, #11
 80033dc:	701a      	strb	r2, [r3, #0]
    }
   break;
 80033de:	e11b      	b.n	8003618 <B2Left+0x680>
  case B2LEFT_FIRST_TURN_BACK_CENTER:
    if(Move_Turn(1, RIGHT, 1.0f) == FIN){
 80033e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80033e4:	2101      	movs	r1, #1
 80033e6:	2001      	movs	r0, #1
 80033e8:	f000 f9f0 	bl	80037cc <Move_Turn>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	f040 8114 	bne.w	800361c <B2Left+0x684>
      SetSpeed(0,0);
 80033f4:	2100      	movs	r1, #0
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fd ff5c 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 80033fc:	2100      	movs	r1, #0
 80033fe:	2001      	movs	r0, #1
 8003400:	f7fd ff58 	bl	80012b4 <SetSpeed>
      EncoderReset(false, POSITION);
 8003404:	2100      	movs	r1, #0
 8003406:	2000      	movs	r0, #0
 8003408:	f7fd ff6e 	bl	80012e8 <EncoderReset>
      B2LEFT_STATE = B2LEFT_GOTO_BLOCK_BACK_CENTER;
 800340c:	4b74      	ldr	r3, [pc, #464]	@ (80035e0 <B2Left+0x648>)
 800340e:	220c      	movs	r2, #12
 8003410:	701a      	strb	r2, [r3, #0]
      SetDir(0,1);
 8003412:	2101      	movs	r1, #1
 8003414:	2000      	movs	r0, #0
 8003416:	f7fd ff05 	bl	8001224 <SetDir>
      SetDir(1,1);
 800341a:	2101      	movs	r1, #1
 800341c:	2001      	movs	r0, #1
 800341e:	f7fd ff01 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 8003422:	2000      	movs	r0, #0
 8003424:	f7fe f80c 	bl	8001440 <SetFacing>
      SetSpeed(1,1800);
 8003428:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 800342c:	2001      	movs	r0, #1
 800342e:	f7fd ff41 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 8003432:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8003436:	2000      	movs	r0, #0
 8003438:	f7fd ff3c 	bl	80012b4 <SetSpeed>
    }
  break;
 800343c:	e0ee      	b.n	800361c <B2Left+0x684>
  case B2LEFT_GOTO_BLOCK_BACK_CENTER:
    osMutexWait(IRMutexHandle, HAL_MAX_DELAY);
 800343e:	4b65      	ldr	r3, [pc, #404]	@ (80035d4 <B2Left+0x63c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f04f 31ff 	mov.w	r1, #4294967295
 8003446:	4618      	mov	r0, r3
 8003448:	f007 fad6 	bl	800a9f8 <osMutexWait>
    leftDist = (uint32_t) IRRead.right;
 800344c:	4b62      	ldr	r3, [pc, #392]	@ (80035d8 <B2Left+0x640>)
 800344e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7fd fba7 	bl	8000ba8 <__aeabi_d2uiz>
 800345a:	4603      	mov	r3, r0
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f851 	bl	8000504 <__aeabi_ui2d>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(IRMutexHandle);
 800346a:	4b5a      	ldr	r3, [pc, #360]	@ (80035d4 <B2Left+0x63c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f007 fb10 	bl	800aa94 <osMutexRelease>

    osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 8003474:	4b5b      	ldr	r3, [pc, #364]	@ (80035e4 <B2Left+0x64c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	4618      	mov	r0, r3
 800347e:	f007 fabb 	bl	800a9f8 <osMutexWait>
    fwDist = encoderLeft.position;
 8003482:	4b59      	ldr	r3, [pc, #356]	@ (80035e8 <B2Left+0x650>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	60fb      	str	r3, [r7, #12]
    osMutexRelease(EncoderLeftMutexHandle);
 800348a:	4b56      	ldr	r3, [pc, #344]	@ (80035e4 <B2Left+0x64c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f007 fb00 	bl	800aa94 <osMutexRelease>
    if(fwDist > horiDist){
 8003494:	4b55      	ldr	r3, [pc, #340]	@ (80035ec <B2Left+0x654>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	429a      	cmp	r2, r3
 800349c:	f240 80c0 	bls.w	8003620 <B2Left+0x688>
      B2LEFT_STATE = B2LEFT_BACKWARDS_AFTER_GOTO;
 80034a0:	4b4f      	ldr	r3, [pc, #316]	@ (80035e0 <B2Left+0x648>)
 80034a2:	220d      	movs	r2, #13
 80034a4:	701a      	strb	r2, [r3, #0]
      SetSpeed(0,0);
 80034a6:	2100      	movs	r1, #0
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fd ff03 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 80034ae:	2100      	movs	r1, #0
 80034b0:	2001      	movs	r0, #1
 80034b2:	f7fd feff 	bl	80012b4 <SetSpeed>
      SetDir(0,0);
 80034b6:	2100      	movs	r1, #0
 80034b8:	2000      	movs	r0, #0
 80034ba:	f7fd feb3 	bl	8001224 <SetDir>
      SetDir(1,0);
 80034be:	2100      	movs	r1, #0
 80034c0:	2001      	movs	r0, #1
 80034c2:	f7fd feaf 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7fd ffba 	bl	8001440 <SetFacing>
      SetSpeed(1,1800);
 80034cc:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 80034d0:	2001      	movs	r0, #1
 80034d2:	f7fd feef 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 80034d6:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80034da:	2000      	movs	r0, #0
 80034dc:	f7fd feea 	bl	80012b4 <SetSpeed>
      EncoderReset(0, POSITION);
 80034e0:	2100      	movs	r1, #0
 80034e2:	2000      	movs	r0, #0
 80034e4:	f7fd ff00 	bl	80012e8 <EncoderReset>
    }
  break;
 80034e8:	e09a      	b.n	8003620 <B2Left+0x688>
  case B2LEFT_BACKWARDS_AFTER_GOTO:
    dist = (uint32_t)((float)(23)* 40);
 80034ea:	f44f 7366 	mov.w	r3, #920	@ 0x398
 80034ee:	613b      	str	r3, [r7, #16]
    osMutexWait(EncoderLeftMutexHandle, HAL_MAX_DELAY);
 80034f0:	4b3c      	ldr	r3, [pc, #240]	@ (80035e4 <B2Left+0x64c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f04f 31ff 	mov.w	r1, #4294967295
 80034f8:	4618      	mov	r0, r3
 80034fa:	f007 fa7d 	bl	800a9f8 <osMutexWait>
    fwDist = encoderLeft.position;
 80034fe:	4b3a      	ldr	r3, [pc, #232]	@ (80035e8 <B2Left+0x650>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	60fb      	str	r3, [r7, #12]
    osMutexRelease(EncoderLeftMutexHandle);
 8003506:	4b37      	ldr	r3, [pc, #220]	@ (80035e4 <B2Left+0x64c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f007 fac2 	bl	800aa94 <osMutexRelease>
    if(fwDist > dist){
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	429a      	cmp	r2, r3
 8003516:	f240 8085 	bls.w	8003624 <B2Left+0x68c>
      SetSpeed(0,0);
 800351a:	2100      	movs	r1, #0
 800351c:	2000      	movs	r0, #0
 800351e:	f7fd fec9 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 8003522:	2100      	movs	r1, #0
 8003524:	2001      	movs	r0, #1
 8003526:	f7fd fec5 	bl	80012b4 <SetSpeed>
      B2LEFT_STATE = B2LEFT_SECOND_TURN_BACK_CENTER;
 800352a:	4b2d      	ldr	r3, [pc, #180]	@ (80035e0 <B2Left+0x648>)
 800352c:	220e      	movs	r2, #14
 800352e:	701a      	strb	r2, [r3, #0]
    }
  break;
 8003530:	e078      	b.n	8003624 <B2Left+0x68c>
  case B2LEFT_SECOND_TURN_BACK_CENTER:
    if(Move_Turn(1, LEFT, 1.0f) == FIN){
 8003532:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003536:	2102      	movs	r1, #2
 8003538:	2001      	movs	r0, #1
 800353a:	f000 f947 	bl	80037cc <Move_Turn>
 800353e:	4603      	mov	r3, r0
 8003540:	2b02      	cmp	r3, #2
 8003542:	d171      	bne.n	8003628 <B2Left+0x690>
      SetSpeed(0,0);
 8003544:	2100      	movs	r1, #0
 8003546:	2000      	movs	r0, #0
 8003548:	f7fd feb4 	bl	80012b4 <SetSpeed>
      SetSpeed(1,0);
 800354c:	2100      	movs	r1, #0
 800354e:	2001      	movs	r0, #1
 8003550:	f7fd feb0 	bl	80012b4 <SetSpeed>
      SetDir(0,1);
 8003554:	2101      	movs	r1, #1
 8003556:	2000      	movs	r0, #0
 8003558:	f7fd fe64 	bl	8001224 <SetDir>
      SetDir(1,1);
 800355c:	2101      	movs	r1, #1
 800355e:	2001      	movs	r0, #1
 8003560:	f7fd fe60 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 8003564:	2000      	movs	r0, #0
 8003566:	f7fd ff6b 	bl	8001440 <SetFacing>
      SetSpeed(1,1800);
 800356a:	f44f 61e1 	mov.w	r1, #1800	@ 0x708
 800356e:	2001      	movs	r0, #1
 8003570:	f7fd fea0 	bl	80012b4 <SetSpeed>
      SetSpeed(0,1500);
 8003574:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8003578:	2000      	movs	r0, #0
 800357a:	f7fd fe9b 	bl	80012b4 <SetSpeed>
      B2LEFT_STATE = B2LEFT_HUIJIALO;
 800357e:	4b18      	ldr	r3, [pc, #96]	@ (80035e0 <B2Left+0x648>)
 8003580:	220f      	movs	r2, #15
 8003582:	701a      	strb	r2, [r3, #0]
    }
  break;
 8003584:	e050      	b.n	8003628 <B2Left+0x690>
  case B2LEFT_HUIJIALO:
    osMutexWait(UltrasonicMutexHandle, HAL_MAX_DELAY);
 8003586:	4b1d      	ldr	r3, [pc, #116]	@ (80035fc <B2Left+0x664>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f04f 31ff 	mov.w	r1, #4294967295
 800358e:	4618      	mov	r0, r3
 8003590:	f007 fa32 	bl	800a9f8 <osMutexWait>
    frontDist = UltraRead.frontDist;
 8003594:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <B2Left+0x668>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	b29b      	uxth	r3, r3
 800359a:	617b      	str	r3, [r7, #20]
    osMutexRelease(UltrasonicMutexHandle);
 800359c:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <B2Left+0x664>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f007 fa77 	bl	800aa94 <osMutexRelease>
    if (frontDist < 10) {
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b09      	cmp	r3, #9
 80035aa:	d83f      	bhi.n	800362c <B2Left+0x694>
      SetSpeed(1,0);
 80035ac:	2100      	movs	r1, #0
 80035ae:	2001      	movs	r0, #1
 80035b0:	f7fd fe80 	bl	80012b4 <SetSpeed>
      SetSpeed(0,0);
 80035b4:	2100      	movs	r1, #0
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fd fe7c 	bl	80012b4 <SetSpeed>
      B2LEFT_STATE = B2LEFT_LEFT;
 80035bc:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <B2Left+0x648>)
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
      vertDist = 0;
 80035c2:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <B2Left+0x65c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
      horiDist = 0;
 80035c8:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <B2Left+0x654>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]
      return FIN;
 80035ce:	2302      	movs	r3, #2
 80035d0:	e02e      	b.n	8003630 <B2Left+0x698>
 80035d2:	bf00      	nop
 80035d4:	200008e8 	.word	0x200008e8
 80035d8:	20000998 	.word	0x20000998
 80035dc:	40690000 	.word	0x40690000
 80035e0:	20000a8a 	.word	0x20000a8a
 80035e4:	20000804 	.word	0x20000804
 80035e8:	20000980 	.word	0x20000980
 80035ec:	20000a7c 	.word	0x20000a7c
 80035f0:	3f7d70a4 	.word	0x3f7d70a4
 80035f4:	20000a78 	.word	0x20000a78
 80035f8:	42200000 	.word	0x42200000
 80035fc:	20000934 	.word	0x20000934
 8003600:	200009a8 	.word	0x200009a8
    }
    break;
  default:
    return ERR;
 8003604:	2300      	movs	r3, #0
 8003606:	e013      	b.n	8003630 <B2Left+0x698>
    break;
 8003608:	bf00      	nop
 800360a:	e010      	b.n	800362e <B2Left+0x696>
   break;
 800360c:	bf00      	nop
 800360e:	e00e      	b.n	800362e <B2Left+0x696>
   break;
 8003610:	bf00      	nop
 8003612:	e00c      	b.n	800362e <B2Left+0x696>
   break;
 8003614:	bf00      	nop
 8003616:	e00a      	b.n	800362e <B2Left+0x696>
   break;
 8003618:	bf00      	nop
 800361a:	e008      	b.n	800362e <B2Left+0x696>
  break;
 800361c:	bf00      	nop
 800361e:	e006      	b.n	800362e <B2Left+0x696>
  break;
 8003620:	bf00      	nop
 8003622:	e004      	b.n	800362e <B2Left+0x696>
  break;
 8003624:	bf00      	nop
 8003626:	e002      	b.n	800362e <B2Left+0x696>
  break;
 8003628:	bf00      	nop
 800362a:	e000      	b.n	800362e <B2Left+0x696>
    break;
 800362c:	bf00      	nop
    break;
  }
 return PROG;
 800362e:	2301      	movs	r3, #1
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <Task_Two>:

CMD_STATE_T Task_Two(STATE task){
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  uint16_t leftDist;
  uint16_t rightDist;
	switch (task)
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	3b02      	subs	r3, #2
 8003646:	2b04      	cmp	r3, #4
 8003648:	d842      	bhi.n	80036d0 <Task_Two+0x98>
 800364a:	a201      	add	r2, pc, #4	@ (adr r2, 8003650 <Task_Two+0x18>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003665 	.word	0x08003665
 8003654:	08003689 	.word	0x08003689
 8003658:	0800369b 	.word	0x0800369b
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080036bf 	.word	0x080036bf
	{
	  case GOTOB1:
	    SetDir(1,1);
 8003664:	2101      	movs	r1, #1
 8003666:	2001      	movs	r0, #1
 8003668:	f7fd fddc 	bl	8001224 <SetDir>
      SetDir(0,1);
 800366c:	2101      	movs	r1, #1
 800366e:	2000      	movs	r0, #0
 8003670:	f7fd fdd8 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 8003674:	2000      	movs	r0, #0
 8003676:	f7fd fee3 	bl	8001440 <SetFacing>
      if(GoToB1() == FIN) return FIN;
 800367a:	f7fe feed 	bl	8002458 <GoToB1>
 800367e:	4603      	mov	r3, r0
 8003680:	2b02      	cmp	r3, #2
 8003682:	d127      	bne.n	80036d4 <Task_Two+0x9c>
 8003684:	2302      	movs	r3, #2
 8003686:	e027      	b.n	80036d8 <Task_Two+0xa0>
      break;
	  case B1LEFT:
      if(B1Left() == FIN) return FIN;
 8003688:	f7fe ff34 	bl	80024f4 <B1Left>
 800368c:	4603      	mov	r3, r0
 800368e:	2b02      	cmp	r3, #2
 8003690:	d101      	bne.n	8003696 <Task_Two+0x5e>
 8003692:	2302      	movs	r3, #2
 8003694:	e020      	b.n	80036d8 <Task_Two+0xa0>
	    return PROG;
 8003696:	2301      	movs	r3, #1
 8003698:	e01e      	b.n	80036d8 <Task_Two+0xa0>
	    break;
	  case B1RIGHT:
      if(B1Right() == FIN ) return FIN;
 800369a:	f7ff f827 	bl	80026ec <B1Right>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d101      	bne.n	80036a8 <Task_Two+0x70>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e017      	b.n	80036d8 <Task_Two+0xa0>
	    return PROG;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e015      	b.n	80036d8 <Task_Two+0xa0>
	    break;
	  case B2LEFT:
      if(B2Left() == FIN ) return FIN;
 80036ac:	f7ff fc74 	bl	8002f98 <B2Left>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d101      	bne.n	80036ba <Task_Two+0x82>
 80036b6:	2302      	movs	r3, #2
 80036b8:	e00e      	b.n	80036d8 <Task_Two+0xa0>
	    return PROG;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00c      	b.n	80036d8 <Task_Two+0xa0>
	    break;
	  case B2RIGHT:
	    if(B2Right() == FIN ) return FIN;
 80036be:	f7ff f913 	bl	80028e8 <B2Right>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d101      	bne.n	80036cc <Task_Two+0x94>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e005      	b.n	80036d8 <Task_Two+0xa0>
	    return PROG;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e003      	b.n	80036d8 <Task_Two+0xa0>
	    break;
	  default:
	    return ERR;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e001      	b.n	80036d8 <Task_Two+0xa0>
      break;
 80036d4:	bf00      	nop
	    break;
	}
  return PROG;
 80036d6:	2301      	movs	r3, #1
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <Move_Straight>:

MOVE_STATE move_straight_state = INIT;
MOVE_STATE Move_Straight(bool forward, uint8_t degree){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	460a      	mov	r2, r1
 80036ea:	71fb      	strb	r3, [r7, #7]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71bb      	strb	r3, [r7, #6]
  uint32_t currdist;
  uint32_t dist;

  switch(move_straight_state) {
 80036f0:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <Move_Straight+0xe0>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d058      	beq.n	80037aa <Move_Straight+0xca>
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	dc58      	bgt.n	80037ae <Move_Straight+0xce>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <Move_Straight+0x26>
 8003700:	2b01      	cmp	r3, #1
 8003702:	d023      	beq.n	800374c <Move_Straight+0x6c>
 8003704:	e053      	b.n	80037ae <Move_Straight+0xce>
    case INIT:
      SetDir(1, forward);
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	4619      	mov	r1, r3
 800370a:	2001      	movs	r0, #1
 800370c:	f7fd fd8a 	bl	8001224 <SetDir>
      SetDir(0, forward);
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	4619      	mov	r1, r3
 8003714:	2000      	movs	r0, #0
 8003716:	f7fd fd85 	bl	8001224 <SetDir>
      SetFacing(STRAIGHT);
 800371a:	2000      	movs	r0, #0
 800371c:	f7fd fe90 	bl	8001440 <SetFacing>
      osDelay(200);
 8003720:	20c8      	movs	r0, #200	@ 0xc8
 8003722:	f007 f93c 	bl	800a99e <osDelay>
      SetSpeed(0,1000);
 8003726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800372a:	2000      	movs	r0, #0
 800372c:	f7fd fdc2 	bl	80012b4 <SetSpeed>
	    SetSpeed(1,1400);
 8003730:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 8003734:	2001      	movs	r0, #1
 8003736:	f7fd fdbd 	bl	80012b4 <SetSpeed>
      EncoderReset(false, POSITION);
 800373a:	2100      	movs	r1, #0
 800373c:	2000      	movs	r0, #0
 800373e:	f7fd fdd3 	bl	80012e8 <EncoderReset>
      move_straight_state = PROGRESS;
 8003742:	4b1f      	ldr	r3, [pc, #124]	@ (80037c0 <Move_Straight+0xe0>)
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
      return INIT;
 8003748:	2300      	movs	r3, #0
 800374a:	e034      	b.n	80037b6 <Move_Straight+0xd6>
      break;
    case PROGRESS:
      dist = (uint32_t)((float)(degree)* 30.0f);
 800374c:	79bb      	ldrb	r3, [r7, #6]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003756:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800375a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800375e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003762:	ee17 3a90 	vmov	r3, s15
 8003766:	60fb      	str	r3, [r7, #12]
    	osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8003768:	4b16      	ldr	r3, [pc, #88]	@ (80037c4 <Move_Straight+0xe4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f04f 31ff 	mov.w	r1, #4294967295
 8003770:	4618      	mov	r0, r3
 8003772:	f007 f941 	bl	800a9f8 <osMutexWait>
    	currdist = encoderLeft.position;
 8003776:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <Move_Straight+0xe8>)
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	b29b      	uxth	r3, r3
 800377c:	60bb      	str	r3, [r7, #8]
    	osMutexRelease(EncoderLeftMutexHandle);
 800377e:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <Move_Straight+0xe4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f007 f986 	bl	800aa94 <osMutexRelease>
    	if (currdist >  dist ){
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d90a      	bls.n	80037a6 <Move_Straight+0xc6>
    		SetSpeed(0,0);
 8003790:	2100      	movs	r1, #0
 8003792:	2000      	movs	r0, #0
 8003794:	f7fd fd8e 	bl	80012b4 <SetSpeed>
    		    	SetSpeed(1,0);
 8003798:	2100      	movs	r1, #0
 800379a:	2001      	movs	r0, #1
 800379c:	f7fd fd8a 	bl	80012b4 <SetSpeed>
    		move_straight_state = DONE;
 80037a0:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <Move_Straight+0xe0>)
 80037a2:	2202      	movs	r2, #2
 80037a4:	701a      	strb	r2, [r3, #0]
    	}
      return PROGRESS;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e005      	b.n	80037b6 <Move_Straight+0xd6>
      break;
    case DONE:
//      move_straight_state = INIT;

      return DONE;
 80037aa:	2302      	movs	r3, #2
 80037ac:	e003      	b.n	80037b6 <Move_Straight+0xd6>
      break;
    default:
      move_straight_state = INIT;
 80037ae:	4b04      	ldr	r3, [pc, #16]	@ (80037c0 <Move_Straight+0xe0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
      return INIT;
 80037b4:	2300      	movs	r3, #0
      break;
  }
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000a8b 	.word	0x20000a8b
 80037c4:	20000804 	.word	0x20000804
 80037c8:	20000980 	.word	0x20000980

080037cc <Move_Turn>:
MOVE_STATE move_turn_state = INIT;
CMD_STATE_T Move_Turn(bool forward, DIRECTION direction, float degree){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	460a      	mov	r2, r1
 80037d6:	ed87 0a00 	vstr	s0, [r7]
 80037da:	71fb      	strb	r3, [r7, #7]
 80037dc:	4613      	mov	r3, r2
 80037de:	71bb      	strb	r3, [r7, #6]
  uint32_t currdist;
  float dist;

  switch(move_turn_state) {
 80037e0:	4b36      	ldr	r3, [pc, #216]	@ (80038bc <Move_Turn+0xf0>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d05a      	beq.n	800389e <Move_Turn+0xd2>
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	dc5d      	bgt.n	80038a8 <Move_Turn+0xdc>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <Move_Turn+0x2a>
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d025      	beq.n	8003840 <Move_Turn+0x74>
 80037f4:	e058      	b.n	80038a8 <Move_Turn+0xdc>
    case INIT:
      SetDir(1, forward);
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	4619      	mov	r1, r3
 80037fa:	2001      	movs	r0, #1
 80037fc:	f7fd fd12 	bl	8001224 <SetDir>
      SetDir(0, forward);
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	4619      	mov	r1, r3
 8003804:	2000      	movs	r0, #0
 8003806:	f7fd fd0d 	bl	8001224 <SetDir>
      SetFacing(direction);
 800380a:	79bb      	ldrb	r3, [r7, #6]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fd fe17 	bl	8001440 <SetFacing>
      osDelay(200);
 8003812:	20c8      	movs	r0, #200	@ 0xc8
 8003814:	f007 f8c3 	bl	800a99e <osDelay>
      SetSpeed(0,1300);
 8003818:	f240 5114 	movw	r1, #1300	@ 0x514
 800381c:	2000      	movs	r0, #0
 800381e:	f7fd fd49 	bl	80012b4 <SetSpeed>
	    SetSpeed(1,1300);
 8003822:	f240 5114 	movw	r1, #1300	@ 0x514
 8003826:	2001      	movs	r0, #1
 8003828:	f7fd fd44 	bl	80012b4 <SetSpeed>
      EncoderReset(false, POSITION);
 800382c:	2100      	movs	r1, #0
 800382e:	2000      	movs	r0, #0
 8003830:	f7fd fd5a 	bl	80012e8 <EncoderReset>
      HeadingReset();
 8003834:	f7fd fde8 	bl	8001408 <HeadingReset>
      move_turn_state = PROGRESS;
 8003838:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <Move_Turn+0xf0>)
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
      break;
 800383e:	e038      	b.n	80038b2 <Move_Turn+0xe6>
    case PROGRESS:
      osMutexWait(IMUReadMutexHandle, osWaitForever);
 8003840:	4b1f      	ldr	r3, [pc, #124]	@ (80038c0 <Move_Turn+0xf4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f04f 31ff 	mov.w	r1, #4294967295
 8003848:	4618      	mov	r0, r3
 800384a:	f007 f8d5 	bl	800a9f8 <osMutexWait>
      dist = CurrentHeading;
 800384e:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <Move_Turn+0xf8>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	f7fd f9c6 	bl	8000be8 <__aeabi_d2f>
 800385c:	4603      	mov	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
      osMutexRelease(IMUReadMutexHandle);
 8003860:	4b17      	ldr	r3, [pc, #92]	@ (80038c0 <Move_Turn+0xf4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f007 f915 	bl	800aa94 <osMutexRelease>
      if(dist > degree * 90){
 800386a:	edd7 7a00 	vldr	s15, [r7]
 800386e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80038c8 <Move_Turn+0xfc>
 8003872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003876:	ed97 7a03 	vldr	s14, [r7, #12]
 800387a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	dc00      	bgt.n	8003886 <Move_Turn+0xba>
		  //     move_turn_state = DONE;
		  //     SetSpeed(0,0);
		  //         	SetSpeed(1,0);
	    //   }
      // }
      break;
 8003884:	e015      	b.n	80038b2 <Move_Turn+0xe6>
        move_turn_state = DONE;
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <Move_Turn+0xf0>)
 8003888:	2202      	movs	r2, #2
 800388a:	701a      	strb	r2, [r3, #0]
        SetSpeed(0,0);
 800388c:	2100      	movs	r1, #0
 800388e:	2000      	movs	r0, #0
 8003890:	f7fd fd10 	bl	80012b4 <SetSpeed>
		SetSpeed(1,0);
 8003894:	2100      	movs	r1, #0
 8003896:	2001      	movs	r0, #1
 8003898:	f7fd fd0c 	bl	80012b4 <SetSpeed>
      break;
 800389c:	e009      	b.n	80038b2 <Move_Turn+0xe6>
    case DONE:
      move_turn_state = INIT;
 800389e:	4b07      	ldr	r3, [pc, #28]	@ (80038bc <Move_Turn+0xf0>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
      return FIN;
 80038a4:	2302      	movs	r3, #2
 80038a6:	e005      	b.n	80038b4 <Move_Turn+0xe8>
      break;
    default:
      move_turn_state = INIT;
 80038a8:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <Move_Turn+0xf0>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
      return ERR;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e000      	b.n	80038b4 <Move_Turn+0xe8>
      break;
  }
  return PROG;
 80038b2:	2301      	movs	r3, #1
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000a8c 	.word	0x20000a8c
 80038c0:	2000089c 	.word	0x2000089c
 80038c4:	20000990 	.word	0x20000990
 80038c8:	42b40000 	.word	0x42b40000

080038cc <UpdateState>:

STATE UpdateState(uint8_t command, uint8_t degree) {
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	460a      	mov	r2, r1
 80038d6:	71fb      	strb	r3, [r7, #7]
 80038d8:	4613      	mov	r3, r2
 80038da:	71bb      	strb	r3, [r7, #6]
  switch (command) {
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d84e      	bhi.n	8003980 <UpdateState+0xb4>
 80038e2:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <UpdateState+0x1c>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	0800394b 	.word	0x0800394b
 80038f0:	0800394f 	.word	0x0800394f
 80038f4:	08003953 	.word	0x08003953
    case 0x00:
      uint8_t task2State = (degree & 0x07) ;
 80038f8:	79bb      	ldrb	r3, [r7, #6]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	73fb      	strb	r3, [r7, #15]
      switch (task2State)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b06      	cmp	r3, #6
 8003904:	d81e      	bhi.n	8003944 <UpdateState+0x78>
 8003906:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <UpdateState+0x40>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003929 	.word	0x08003929
 8003910:	0800392d 	.word	0x0800392d
 8003914:	08003931 	.word	0x08003931
 8003918:	08003935 	.word	0x08003935
 800391c:	08003939 	.word	0x08003939
 8003920:	0800393d 	.word	0x0800393d
 8003924:	08003941 	.word	0x08003941
      {
        case 0x00:
          return STOP;
 8003928:	2301      	movs	r3, #1
 800392a:	e02a      	b.n	8003982 <UpdateState+0xb6>
          break;
        case 0x01:
          return GOTOB1;
 800392c:	2302      	movs	r3, #2
 800392e:	e028      	b.n	8003982 <UpdateState+0xb6>
          break;
        case 0x02:
          return B1LEFT;
 8003930:	2303      	movs	r3, #3
 8003932:	e026      	b.n	8003982 <UpdateState+0xb6>
          break;
        case 0x03:
          return B1RIGHT;
 8003934:	2304      	movs	r3, #4
 8003936:	e024      	b.n	8003982 <UpdateState+0xb6>
          break;
        case 0x04:
          return B2LEFT;
 8003938:	2305      	movs	r3, #5
 800393a:	e022      	b.n	8003982 <UpdateState+0xb6>
          break;
        case 0x05:
          return B2RIGHT;
 800393c:	2306      	movs	r3, #6
 800393e:	e020      	b.n	8003982 <UpdateState+0xb6>
          break;
        case 0x06:
          return CALI;
 8003940:	230d      	movs	r3, #13
 8003942:	e01e      	b.n	8003982 <UpdateState+0xb6>
          break;
        default:
          break;
 8003944:	bf00      	nop
      }
      break;
 8003946:	bf00      	nop
      break;
    default:
      return WAIT;  // Default to WAIT if an unexpected value is received
      break;
  }
}
 8003948:	e01b      	b.n	8003982 <UpdateState+0xb6>
      return FORWARD;
 800394a:	2307      	movs	r3, #7
 800394c:	e019      	b.n	8003982 <UpdateState+0xb6>
      return BACKWARD;
 800394e:	2308      	movs	r3, #8
 8003950:	e017      	b.n	8003982 <UpdateState+0xb6>
      if ((degree & 0x20) >> 5 == 0x01) {
 8003952:	79bb      	ldrb	r3, [r7, #6]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <UpdateState+0xa2>
        if ((degree & 0x10) >> 4 == 0x01) return FWRIGHT;
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <UpdateState+0x9e>
 8003966:	230b      	movs	r3, #11
 8003968:	e00b      	b.n	8003982 <UpdateState+0xb6>
        else return BWRIGHT;
 800396a:	230c      	movs	r3, #12
 800396c:	e009      	b.n	8003982 <UpdateState+0xb6>
        if ((degree & 0x10) >> 4 == 0x01) return FWLEFT;
 800396e:	79bb      	ldrb	r3, [r7, #6]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <UpdateState+0xb0>
 8003978:	2309      	movs	r3, #9
 800397a:	e002      	b.n	8003982 <UpdateState+0xb6>
        else return BWLEFT;
 800397c:	230a      	movs	r3, #10
 800397e:	e000      	b.n	8003982 <UpdateState+0xb6>
      return WAIT;  // Default to WAIT if an unexpected value is received
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop

08003990 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t ch = 'A';
 8003998:	2341      	movs	r3, #65	@ 0x41
 800399a:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
//	  UART_Transmit((uint8_t *)&ch);
//	  if(ch < 'Z') ch++;

	  HAL_GPIO_TogglePin(GPIOE,LED_Pin);
 800399c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80039a0:	4804      	ldr	r0, [pc, #16]	@ (80039b4 <StartDefaultTask+0x24>)
 80039a2:	f002 fd24 	bl	80063ee <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80039a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039aa:	f006 fff8 	bl	800a99e <osDelay>
	  HAL_GPIO_TogglePin(GPIOE,LED_Pin);
 80039ae:	bf00      	nop
 80039b0:	e7f4      	b.n	800399c <StartDefaultTask+0xc>
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000

080039b8 <EncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderTask */
void EncoderTask(void const * argument)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08e      	sub	sp, #56	@ 0x38
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderTask */
  /* Infinite loop */
  char speedStr[20];
  uint32_t last_encoder_read_time = HAL_GetTick();
 80039c0:	f001 fa0a 	bl	8004dd8 <HAL_GetTick>
 80039c4:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t position;
  uint16_t counter_current;
  for(;;)
  {
	  uint32_t current_time = HAL_GetTick();
 80039c6:	f001 fa07 	bl	8004dd8 <HAL_GetTick>
 80039ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      if(__HAL_TIM_IS_TIM_COUNTING_DOWN (&htim2)) counter_current = __HAL_TIM_GET_COUNTER(&htim2) * -1;
 80039cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a88 <EncoderTask+0xd0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d106      	bne.n	80039e8 <EncoderTask+0x30>
 80039da:	4b2b      	ldr	r3, [pc, #172]	@ (8003a88 <EncoderTask+0xd0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	425b      	negs	r3, r3
 80039e4:	867b      	strh	r3, [r7, #50]	@ 0x32
 80039e6:	e003      	b.n	80039f0 <EncoderTask+0x38>
	      else counter_current = __HAL_TIM_GET_COUNTER(&htim2);
 80039e8:	4b27      	ldr	r3, [pc, #156]	@ (8003a88 <EncoderTask+0xd0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	867b      	strh	r3, [r7, #50]	@ 0x32

	      // Calculate the elapsed time in milliseconds
	      uint32_t elapsed_time = current_time - last_encoder_read_time;
 80039f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	      if (elapsed_time >= T) {  // Every 20ms (T = 0.02s)
 80039f8:	2314      	movs	r3, #20
 80039fa:	461a      	mov	r2, r3
 80039fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d33e      	bcc.n	8003a80 <EncoderTask+0xc8>
	          // Calculate the speed in ticks per second
	          uint16_t delta_ticks = (uint16_t)(counter_current);
 8003a02:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a04:	84fb      	strh	r3, [r7, #38]	@ 0x26
	          speed = (uint32_t)(delta_ticks * 1000 / elapsed_time); // Speed in ticks per second
 8003a06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003a08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	4a1c      	ldr	r2, [pc, #112]	@ (8003a8c <EncoderTask+0xd4>)
 8003a1a:	6013      	str	r3, [r2, #0]
            osMutexWait(EncoderLeftMutexHandle, osWaitForever);
 8003a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a90 <EncoderTask+0xd8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f04f 31ff 	mov.w	r1, #4294967295
 8003a24:	4618      	mov	r0, r3
 8003a26:	f006 ffe7 	bl	800a9f8 <osMutexWait>
            encoderLeft.speed = speed;
 8003a2a:	4b18      	ldr	r3, [pc, #96]	@ (8003a8c <EncoderTask+0xd4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	4b18      	ldr	r3, [pc, #96]	@ (8003a94 <EncoderTask+0xdc>)
 8003a32:	805a      	strh	r2, [r3, #2]
            encoderLeft.position += counter_current;
 8003a34:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <EncoderTask+0xdc>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a3c:	4413      	add	r3, r2
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	4b14      	ldr	r3, [pc, #80]	@ (8003a94 <EncoderTask+0xdc>)
 8003a42:	801a      	strh	r2, [r3, #0]
            position = encoderLeft.position;
 8003a44:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <EncoderTask+0xdc>)
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	623b      	str	r3, [r7, #32]
            osMutexRelease(EncoderLeftMutexHandle);
 8003a4c:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <EncoderTask+0xd8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f007 f81f 	bl	800aa94 <osMutexRelease>
        
            sprintf(speedStr, "%.7d", speed);
 8003a56:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <EncoderTask+0xd4>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f107 030c 	add.w	r3, r7, #12
 8003a5e:	490e      	ldr	r1, [pc, #56]	@ (8003a98 <EncoderTask+0xe0>)
 8003a60:	4618      	mov	r0, r3
 8003a62:	f00b f8fd 	bl	800ec60 <siprintf>
            OLED_ShowString(10,30,speedStr);
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	211e      	movs	r1, #30
 8003a6e:	200a      	movs	r0, #10
 8003a70:	f00a fb1e 	bl	800e0b0 <OLED_ShowString>
//	           OLED_Refresh_Gram();
	          // Save the current time and encoder count for the next calculation
	          last_encoder_read_time = current_time;
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	637b      	str	r3, [r7, #52]	@ 0x34
	          // counter_prev = counter_current;

	          // Optionally reset encoder counter
	          __HAL_TIM_SET_COUNTER(&htim2, 0);
 8003a78:	4b03      	ldr	r3, [pc, #12]	@ (8003a88 <EncoderTask+0xd0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24
	      }
    osDelay(10);
 8003a80:	200a      	movs	r0, #10
 8003a82:	f006 ff8c 	bl	800a99e <osDelay>
  {
 8003a86:	e79e      	b.n	80039c6 <EncoderTask+0xe>
 8003a88:	2000063c 	.word	0x2000063c
 8003a8c:	200009f4 	.word	0x200009f4
 8003a90:	20000804 	.word	0x20000804
 8003a94:	20000980 	.word	0x20000980
 8003a98:	08010fe0 	.word	0x08010fe0

08003a9c <MotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MotorTask */
void MotorTask(void const * argument)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MotorTask */
  /* Infinite loop */
	SetDir(0,1);
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f7fd fbbc 	bl	8001224 <SetDir>
	SetDir(1,1);
 8003aac:	2101      	movs	r1, #1
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f7fd fbb8 	bl	8001224 <SetDir>
	SetSpeed(0,0);
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f7fd fbfc 	bl	80012b4 <SetSpeed>
	SetSpeed(1,0);
 8003abc:	2100      	movs	r1, #0
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f7fd fbf8 	bl	80012b4 <SetSpeed>
	uint8_t degree;
	uint8_t command;
	uint32_t dist;
	uint8_t showBuf;
	uint8_t buf;
	STATE CurrentState = WAIT;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	75bb      	strb	r3, [r7, #22]
	bool done;

	EncoderReset(false, POSITION);
 8003ac8:	2100      	movs	r1, #0
 8003aca:	2000      	movs	r0, #0
 8003acc:	f7fd fc0c 	bl	80012e8 <EncoderReset>
	SetFacing(LEFT);
 8003ad0:	2002      	movs	r0, #2
 8003ad2:	f7fd fcb5 	bl	8001440 <SetFacing>
	osDelay(500);
 8003ad6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ada:	f006 ff60 	bl	800a99e <osDelay>
	SetFacing(RIGHT);
 8003ade:	2001      	movs	r0, #1
 8003ae0:	f7fd fcae 	bl	8001440 <SetFacing>
	osDelay(500);
 8003ae4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ae8:	f006 ff59 	bl	800a99e <osDelay>
	SetFacing(STRAIGHT);
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7fd fca7 	bl	8001440 <SetFacing>
	osDelay(500);
 8003af2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003af6:	f006 ff52 	bl	800a99e <osDelay>
//  SetSpeed(1, 2000);
//  SetSpeed(0, 2000);
	uint16_t targetLeftPWM = 2000;
 8003afa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003afe:	82bb      	strh	r3, [r7, #20]
    uint16_t targetRightPWM = 2400;
 8003b00:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8003b04:	827b      	strh	r3, [r7, #18]
    uint16_t rampStep = 200;
 8003b06:	23c8      	movs	r3, #200	@ 0xc8
 8003b08:	823b      	strh	r3, [r7, #16]
    uint32_t maxDelay = 100;
 8003b0a:	2364      	movs	r3, #100	@ 0x64
 8003b0c:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  
    switch (CurrentState)
 8003b0e:	7dbb      	ldrb	r3, [r7, #22]
 8003b10:	2b0d      	cmp	r3, #13
 8003b12:	f200 8177 	bhi.w	8003e04 <MotorTask+0x368>
 8003b16:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <MotorTask+0x80>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b55 	.word	0x08003b55
 8003b20:	08003be3 	.word	0x08003be3
 8003b24:	08003d35 	.word	0x08003d35
 8003b28:	08003d55 	.word	0x08003d55
 8003b2c:	08003d75 	.word	0x08003d75
 8003b30:	08003db5 	.word	0x08003db5
 8003b34:	08003d95 	.word	0x08003d95
 8003b38:	08003c03 	.word	0x08003c03
 8003b3c:	08003c29 	.word	0x08003c29
 8003b40:	08003c4f 	.word	0x08003c4f
 8003b44:	08003cc3 	.word	0x08003cc3
 8003b48:	08003c89 	.word	0x08003c89
 8003b4c:	08003cfd 	.word	0x08003cfd
 8003b50:	08003dd5 	.word	0x08003dd5
    {
    case WAIT:
    	SetFacing(STRAIGHT);
 8003b54:	2000      	movs	r0, #0
 8003b56:	f7fd fc73 	bl	8001440 <SetFacing>
    	osDelay(200);
 8003b5a:	20c8      	movs	r0, #200	@ 0xc8
 8003b5c:	f006 ff1f 	bl	800a99e <osDelay>
    	if (readIndex != writeIndex) {
 8003b60:	4bb7      	ldr	r3, [pc, #732]	@ (8003e40 <MotorTask+0x3a4>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	4bb7      	ldr	r3, [pc, #732]	@ (8003e44 <MotorTask+0x3a8>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	f000 814b 	beq.w	8003e08 <MotorTask+0x36c>
    		buf = circularBuffer[readIndex];
 8003b72:	4bb3      	ldr	r3, [pc, #716]	@ (8003e40 <MotorTask+0x3a4>)
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4bb3      	ldr	r3, [pc, #716]	@ (8003e48 <MotorTask+0x3ac>)
 8003b7c:	5c9b      	ldrb	r3, [r3, r2]
 8003b7e:	72bb      	strb	r3, [r7, #10]
    		readIndex = (readIndex + 1) % BUFFER_SIZE;
 8003b80:	4baf      	ldr	r3, [pc, #700]	@ (8003e40 <MotorTask+0x3a4>)
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	425a      	negs	r2, r3
 8003b8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b8e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003b92:	bf58      	it	pl
 8003b94:	4253      	negpl	r3, r2
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	4ba9      	ldr	r3, [pc, #676]	@ (8003e40 <MotorTask+0x3a4>)
 8003b9a:	801a      	strh	r2, [r3, #0]
    		command = (buf & 0xC0) >> 6;
 8003b9c:	7abb      	ldrb	r3, [r7, #10]
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	72fb      	strb	r3, [r7, #11]
    		degree = buf & 0x3F;
 8003ba2:	7abb      	ldrb	r3, [r7, #10]
 8003ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ba8:	75fb      	strb	r3, [r7, #23]
    		EncoderReset(false, POSITION);
 8003baa:	2100      	movs	r1, #0
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7fd fb9b 	bl	80012e8 <EncoderReset>
        move_straight_state = INIT;
 8003bb2:	4ba6      	ldr	r3, [pc, #664]	@ (8003e4c <MotorTask+0x3b0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
        move_turn_state = INIT;
 8003bb8:	4ba5      	ldr	r3, [pc, #660]	@ (8003e50 <MotorTask+0x3b4>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
        InitializeRampState(&rampState, targetLeftPWM, targetRightPWM, rampStep, maxDelay);
 8003bbe:	8a38      	ldrh	r0, [r7, #16]
 8003bc0:	8a7a      	ldrh	r2, [r7, #18]
 8003bc2:	8ab9      	ldrh	r1, [r7, #20]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	4603      	mov	r3, r0
 8003bca:	48a2      	ldr	r0, [pc, #648]	@ (8003e54 <MotorTask+0x3b8>)
 8003bcc:	f7fe fc0e 	bl	80023ec <InitializeRampState>
    		CurrentState = UpdateState(command,degree);
 8003bd0:	7dfa      	ldrb	r2, [r7, #23]
 8003bd2:	7afb      	ldrb	r3, [r7, #11]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fe78 	bl	80038cc <UpdateState>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75bb      	strb	r3, [r7, #22]
	    }
      break;
 8003be0:	e112      	b.n	8003e08 <MotorTask+0x36c>
    case STOP:
    	SetSpeed(0,0);
 8003be2:	2100      	movs	r1, #0
 8003be4:	2000      	movs	r0, #0
 8003be6:	f7fd fb65 	bl	80012b4 <SetSpeed>
	    SetSpeed(1,0);
 8003bea:	2100      	movs	r1, #0
 8003bec:	2001      	movs	r0, #1
 8003bee:	f7fd fb61 	bl	80012b4 <SetSpeed>
	    CurrentState = WAIT;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75bb      	strb	r3, [r7, #22]
	    UART_Transmit(&buf);
 8003bf6:	f107 030a 	add.w	r3, r7, #10
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fd fafe 	bl	80011fc <UART_Transmit>
      break;
 8003c00:	e119      	b.n	8003e36 <MotorTask+0x39a>
    case FORWARD:
      if (Move_Straight(true, degree) == DONE) {
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
 8003c04:	4619      	mov	r1, r3
 8003c06:	2001      	movs	r0, #1
 8003c08:	f7ff fd6a 	bl	80036e0 <Move_Straight>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	f040 80fc 	bne.w	8003e0c <MotorTask+0x370>
    	  HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
 8003c18:	2201      	movs	r2, #1
 8003c1a:	498f      	ldr	r1, [pc, #572]	@ (8003e58 <MotorTask+0x3bc>)
 8003c1c:	488f      	ldr	r0, [pc, #572]	@ (8003e5c <MotorTask+0x3c0>)
 8003c1e:	f005 fe05 	bl	800982c <HAL_UART_Transmit>
        CurrentState = WAIT;
 8003c22:	2300      	movs	r3, #0
 8003c24:	75bb      	strb	r3, [r7, #22]
      }
      break;
 8003c26:	e0f1      	b.n	8003e0c <MotorTask+0x370>
    case BACKWARD:
      if (Move_Straight(false, degree) == DONE) {
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f7ff fd57 	bl	80036e0 <Move_Straight>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	f040 80eb 	bne.w	8003e10 <MotorTask+0x374>
        HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4985      	ldr	r1, [pc, #532]	@ (8003e58 <MotorTask+0x3bc>)
 8003c42:	4886      	ldr	r0, [pc, #536]	@ (8003e5c <MotorTask+0x3c0>)
 8003c44:	f005 fdf2 	bl	800982c <HAL_UART_Transmit>
        CurrentState = WAIT;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	75bb      	strb	r3, [r7, #22]
      }
      break;
 8003c4c:	e0e0      	b.n	8003e10 <MotorTask+0x374>
    case FWLEFT:
//    	if (Move_Straight(true, 0x09) == DONE)
    	degree &= 0x0F;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	75fb      	strb	r3, [r7, #23]
      if (Move_Turn(true, LEFT, degree) == FIN) {
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c60:	eeb0 0a67 	vmov.f32	s0, s15
 8003c64:	2102      	movs	r1, #2
 8003c66:	2001      	movs	r0, #1
 8003c68:	f7ff fdb0 	bl	80037cc <Move_Turn>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	f040 80d0 	bne.w	8003e14 <MotorTask+0x378>
//    	  degree = 0x08;
    	  CurrentState = WAIT;
 8003c74:	2300      	movs	r3, #0
 8003c76:	75bb      	strb	r3, [r7, #22]
    	  HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4976      	ldr	r1, [pc, #472]	@ (8003e58 <MotorTask+0x3bc>)
 8003c80:	4876      	ldr	r0, [pc, #472]	@ (8003e5c <MotorTask+0x3c0>)
 8003c82:	f005 fdd3 	bl	800982c <HAL_UART_Transmit>
      }
//        if (Move_Straight(true, 0x0A) == DONE) {
//          HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1,                                            );
//          CurrentState = WAIT;
//        }
      break;
 8003c86:	e0c5      	b.n	8003e14 <MotorTask+0x378>
    case FWRIGHT:
    	degree &= 0x0F;
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	75fb      	strb	r3, [r7, #23]
//      if (Move_Straight(true, 0x08) == DONE)
        if (Move_Turn(true, RIGHT, degree) == FIN) {
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	ee07 3a90 	vmov	s15, r3
 8003c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f7ff fd93 	bl	80037cc <Move_Turn>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f040 80b5 	bne.w	8003e18 <MotorTask+0x37c>
//        	degree = 0x05;
        	    	  CurrentState = WAIT;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	75bb      	strb	r3, [r7, #22]
        	    	  HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4967      	ldr	r1, [pc, #412]	@ (8003e58 <MotorTask+0x3bc>)
 8003cba:	4868      	ldr	r0, [pc, #416]	@ (8003e5c <MotorTask+0x3c0>)
 8003cbc:	f005 fdb6 	bl	800982c <HAL_UART_Transmit>
//        	    	  move_straight_state = INIT;
        }
      break;
 8003cc0:	e0aa      	b.n	8003e18 <MotorTask+0x37c>
    case BWLEFT:
    	degree &= 0x0F;
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	75fb      	strb	r3, [r7, #23]
//    	if (Move_Straight(false, 0x09) == DONE)
      if (Move_Turn(false, LEFT, degree) == FIN){
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd8:	2102      	movs	r1, #2
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f7ff fd76 	bl	80037cc <Move_Turn>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	f040 809a 	bne.w	8003e1c <MotorTask+0x380>
//    	  degree = 0x0C;
    	  CurrentState = WAIT;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	75bb      	strb	r3, [r7, #22]
    	  HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4959      	ldr	r1, [pc, #356]	@ (8003e58 <MotorTask+0x3bc>)
 8003cf4:	4859      	ldr	r0, [pc, #356]	@ (8003e5c <MotorTask+0x3c0>)
 8003cf6:	f005 fd99 	bl	800982c <HAL_UART_Transmit>
      }
//        if (Move_Straight(false, 0x0A) == DONE){
//          HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
//          CurrentState = WAIT;
//        }
      break;
 8003cfa:	e08f      	b.n	8003e1c <MotorTask+0x380>
    case BWRIGHT:
    	degree &= 0x0F;
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	75fb      	strb	r3, [r7, #23]
//      if (Move_Straight(false, 0x05) == DONE)
        if (Move_Turn(false, RIGHT, degree) == FIN){
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d12:	2101      	movs	r1, #1
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7ff fd59 	bl	80037cc <Move_Turn>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d17f      	bne.n	8003e20 <MotorTask+0x384>
//        	degree = 0x02;
        	CurrentState = WAIT;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75bb      	strb	r3, [r7, #22]
        	HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
 8003d28:	2201      	movs	r2, #1
 8003d2a:	494b      	ldr	r1, [pc, #300]	@ (8003e58 <MotorTask+0x3bc>)
 8003d2c:	484b      	ldr	r0, [pc, #300]	@ (8003e5c <MotorTask+0x3c0>)
 8003d2e:	f005 fd7d 	bl	800982c <HAL_UART_Transmit>
        }
//        	if (Move_Straight(false, 0x0F) == DONE) {
//          HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
//          CurrentState = WAIT;
//        }
      break;
 8003d32:	e075      	b.n	8003e20 <MotorTask+0x384>
    case GOTOB1:
      if(Task_Two(GOTOB1) == FIN) {
 8003d34:	2002      	movs	r0, #2
 8003d36:	f7ff fc7f 	bl	8003638 <Task_Two>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d171      	bne.n	8003e24 <MotorTask+0x388>
        HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	2201      	movs	r2, #1
 8003d46:	4944      	ldr	r1, [pc, #272]	@ (8003e58 <MotorTask+0x3bc>)
 8003d48:	4844      	ldr	r0, [pc, #272]	@ (8003e5c <MotorTask+0x3c0>)
 8003d4a:	f005 fd6f 	bl	800982c <HAL_UART_Transmit>
        CurrentState = WAIT;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75bb      	strb	r3, [r7, #22]
      }
      break;
 8003d52:	e067      	b.n	8003e24 <MotorTask+0x388>
    case B1LEFT:
      if(Task_Two(B1LEFT) == FIN){
 8003d54:	2003      	movs	r0, #3
 8003d56:	f7ff fc6f 	bl	8003638 <Task_Two>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d163      	bne.n	8003e28 <MotorTask+0x38c>
        HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295
 8003d64:	2201      	movs	r2, #1
 8003d66:	493c      	ldr	r1, [pc, #240]	@ (8003e58 <MotorTask+0x3bc>)
 8003d68:	483c      	ldr	r0, [pc, #240]	@ (8003e5c <MotorTask+0x3c0>)
 8003d6a:	f005 fd5f 	bl	800982c <HAL_UART_Transmit>
        CurrentState = WAIT;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75bb      	strb	r3, [r7, #22]
      }
      break;
 8003d72:	e059      	b.n	8003e28 <MotorTask+0x38c>
    case B1RIGHT:
      if(Task_Two(B1RIGHT) == FIN){
 8003d74:	2004      	movs	r0, #4
 8003d76:	f7ff fc5f 	bl	8003638 <Task_Two>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d155      	bne.n	8003e2c <MotorTask+0x390>
        HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
 8003d84:	2201      	movs	r2, #1
 8003d86:	4934      	ldr	r1, [pc, #208]	@ (8003e58 <MotorTask+0x3bc>)
 8003d88:	4834      	ldr	r0, [pc, #208]	@ (8003e5c <MotorTask+0x3c0>)
 8003d8a:	f005 fd4f 	bl	800982c <HAL_UART_Transmit>
        CurrentState = WAIT;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75bb      	strb	r3, [r7, #22]
      }
      break;
 8003d92:	e04b      	b.n	8003e2c <MotorTask+0x390>
    case B2RIGHT:
      if(Task_Two(B2RIGHT) == FIN){
 8003d94:	2006      	movs	r0, #6
 8003d96:	f7ff fc4f 	bl	8003638 <Task_Two>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d147      	bne.n	8003e30 <MotorTask+0x394>
        HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	2201      	movs	r2, #1
 8003da6:	492c      	ldr	r1, [pc, #176]	@ (8003e58 <MotorTask+0x3bc>)
 8003da8:	482c      	ldr	r0, [pc, #176]	@ (8003e5c <MotorTask+0x3c0>)
 8003daa:	f005 fd3f 	bl	800982c <HAL_UART_Transmit>
        CurrentState = WAIT;
 8003dae:	2300      	movs	r3, #0
 8003db0:	75bb      	strb	r3, [r7, #22]
      }
      break;
 8003db2:	e03d      	b.n	8003e30 <MotorTask+0x394>
    case B2LEFT:
      if(Task_Two(B2LEFT) == FIN){
 8003db4:	2005      	movs	r0, #5
 8003db6:	f7ff fc3f 	bl	8003638 <Task_Two>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d139      	bne.n	8003e34 <MotorTask+0x398>
        HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4924      	ldr	r1, [pc, #144]	@ (8003e58 <MotorTask+0x3bc>)
 8003dc8:	4824      	ldr	r0, [pc, #144]	@ (8003e5c <MotorTask+0x3c0>)
 8003dca:	f005 fd2f 	bl	800982c <HAL_UART_Transmit>
        CurrentState = WAIT;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75bb      	strb	r3, [r7, #22]
      }
      break;
 8003dd2:	e02f      	b.n	8003e34 <MotorTask+0x398>
    case CALI:
    	icm20948_gyro_calibration_runtime();
 8003dd4:	f009 fc90 	bl	800d6f8 <icm20948_gyro_calibration_runtime>
      SetFacing(LEFT);
 8003dd8:	2002      	movs	r0, #2
 8003dda:	f7fd fb31 	bl	8001440 <SetFacing>
      osDelay(100);
 8003dde:	2064      	movs	r0, #100	@ 0x64
 8003de0:	f006 fddd 	bl	800a99e <osDelay>
      SetFacing(RIGHT);
 8003de4:	2001      	movs	r0, #1
 8003de6:	f7fd fb2b 	bl	8001440 <SetFacing>
      osDelay(100);
 8003dea:	2064      	movs	r0, #100	@ 0x64
 8003dec:	f006 fdd7 	bl	800a99e <osDelay>
      HAL_UART_Transmit(&huart3, (uint8_t *)&ack, 1, HAL_MAX_DELAY);
 8003df0:	f04f 33ff 	mov.w	r3, #4294967295
 8003df4:	2201      	movs	r2, #1
 8003df6:	4918      	ldr	r1, [pc, #96]	@ (8003e58 <MotorTask+0x3bc>)
 8003df8:	4818      	ldr	r0, [pc, #96]	@ (8003e5c <MotorTask+0x3c0>)
 8003dfa:	f005 fd17 	bl	800982c <HAL_UART_Transmit>
      CurrentState = WAIT;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75bb      	strb	r3, [r7, #22]
      break;
 8003e02:	e018      	b.n	8003e36 <MotorTask+0x39a>
    default:
      break;
 8003e04:	bf00      	nop
 8003e06:	e016      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e08:	bf00      	nop
 8003e0a:	e014      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e0c:	bf00      	nop
 8003e0e:	e012      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e10:	bf00      	nop
 8003e12:	e010      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e14:	bf00      	nop
 8003e16:	e00e      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e18:	bf00      	nop
 8003e1a:	e00c      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e1c:	bf00      	nop
 8003e1e:	e00a      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e20:	bf00      	nop
 8003e22:	e008      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e24:	bf00      	nop
 8003e26:	e006      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e28:	bf00      	nop
 8003e2a:	e004      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e2c:	bf00      	nop
 8003e2e:	e002      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e30:	bf00      	nop
 8003e32:	e000      	b.n	8003e36 <MotorTask+0x39a>
      break;
 8003e34:	bf00      	nop
    }

    osDelay(50);
 8003e36:	2032      	movs	r0, #50	@ 0x32
 8003e38:	f006 fdb1 	bl	800a99e <osDelay>
    switch (CurrentState)
 8003e3c:	e667      	b.n	8003b0e <MotorTask+0x72>
 8003e3e:	bf00      	nop
 8003e40:	20000a4e 	.word	0x20000a4e
 8003e44:	20000a4c 	.word	0x20000a4c
 8003e48:	20000a0c 	.word	0x20000a0c
 8003e4c:	20000a8b 	.word	0x20000a8b
 8003e50:	20000a8c 	.word	0x20000a8c
 8003e54:	20000a60 	.word	0x20000a60
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	200007a4 	.word	0x200007a4

08003e60 <ICMUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ICMUpdate */
void ICMUpdate(void const * argument)
{
 8003e60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e64:	b098      	sub	sp, #96	@ 0x60
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ICMUpdate */
  /* Infinite loop */
  axises gyro_data;
  axises mag_data;
  uint32_t current_time;
  double delta_time = 0.0f;
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  double yaw_rate_filtered = 0.0f;
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  double buf = 0.0f;
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  const float alpha = 0.7f;
 8003e8e:	4b46      	ldr	r3, [pc, #280]	@ (8003fa8 <ICMUpdate+0x148>)
 8003e90:	647b      	str	r3, [r7, #68]	@ 0x44

  HAL_TIM_Base_Start(&htim6);  
 8003e92:	4846      	ldr	r0, [pc, #280]	@ (8003fac <ICMUpdate+0x14c>)
 8003e94:	f003 ff90 	bl	8007db8 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8003e98:	4b44      	ldr	r3, [pc, #272]	@ (8003fac <ICMUpdate+0x14c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	625a      	str	r2, [r3, #36]	@ 0x24

  for(;;)
  {
	  ak09916_mag_read(&mag_data);
 8003ea0:	f107 0308 	add.w	r3, r7, #8
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f009 f9f3 	bl	800d290 <ak09916_mag_read>
//    if (osSemaphoreWait(calibSemaphoreHandle, osWaitForever) == osOK){
      icm20948_gyro_read_dps(&gyro_data);
 8003eaa:	f107 0320 	add.w	r3, r7, #32
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f009 fa4c 	bl	800d34c <icm20948_gyro_read_dps>
      float yaw_rate_raw = gyro_data.z;
 8003eb4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f7fc fe94 	bl	8000be8 <__aeabi_d2f>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	643b      	str	r3, [r7, #64]	@ 0x40
      
      yaw_rate_filtered = alpha * yaw_rate_raw + (1.0f - alpha) * yaw_rate_filtered;
 8003ec4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003ec8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed0:	ee17 0a90 	vmov	r0, s15
 8003ed4:	f7fc fb38 	bl	8000548 <__aeabi_f2d>
 8003ed8:	4680      	mov	r8, r0
 8003eda:	4689      	mov	r9, r1
 8003edc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ee0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ee8:	ee17 0a90 	vmov	r0, s15
 8003eec:	f7fc fb2c 	bl	8000548 <__aeabi_f2d>
 8003ef0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ef4:	f7fc fb80 	bl	80005f8 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4640      	mov	r0, r8
 8003efe:	4649      	mov	r1, r9
 8003f00:	f7fc f9c4 	bl	800028c <__adddf3>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

      current_time = __HAL_TIM_GET_COUNTER(&htim6);
 8003f0c:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <ICMUpdate+0x14c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      delta_time = get_time_difference(current_time, 0);
 8003f14:	2100      	movs	r1, #0
 8003f16:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003f18:	f7fd f91c 	bl	8001154 <get_time_difference>
 8003f1c:	ee10 3a10 	vmov	r3, s0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fb11 	bl	8000548 <__aeabi_f2d>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
      __HAL_TIM_SET_COUNTER(&htim6, 0);
 8003f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8003fac <ICMUpdate+0x14c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24
      buf = fabs(yaw_rate_filtered) * delta_time;
 8003f36:	6dbc      	ldr	r4, [r7, #88]	@ 0x58
 8003f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f3a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003f3e:	4622      	mov	r2, r4
 8003f40:	462b      	mov	r3, r5
 8003f42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8003f46:	f7fc fb57 	bl	80005f8 <__aeabi_dmul>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

      osMutexWait(IMUReadMutexHandle, HAL_MAX_DELAY);
 8003f52:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <ICMUpdate+0x150>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f04f 31ff 	mov.w	r1, #4294967295
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f006 fd4c 	bl	800a9f8 <osMutexWait>
      CurrentHeading += buf * 1.05	;
 8003f60:	a30f      	add	r3, pc, #60	@ (adr r3, 8003fa0 <ICMUpdate+0x140>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003f6a:	f7fc fb45 	bl	80005f8 <__aeabi_dmul>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <ICMUpdate+0x154>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc f986 	bl	800028c <__adddf3>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	490b      	ldr	r1, [pc, #44]	@ (8003fb4 <ICMUpdate+0x154>)
 8003f86:	e9c1 2300 	strd	r2, r3, [r1]
      osMutexRelease(IMUReadMutexHandle);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <ICMUpdate+0x150>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f006 fd80 	bl	800aa94 <osMutexRelease>
//      osSemaphoreRelease(calibSemaphoreHandle);
//    }
    osDelay(1);
 8003f94:	2001      	movs	r0, #1
 8003f96:	f006 fd02 	bl	800a99e <osDelay>
  {
 8003f9a:	bf00      	nop
 8003f9c:	e780      	b.n	8003ea0 <ICMUpdate+0x40>
 8003f9e:	bf00      	nop
 8003fa0:	cccccccd 	.word	0xcccccccd
 8003fa4:	3ff0cccc 	.word	0x3ff0cccc
 8003fa8:	3f333333 	.word	0x3f333333
 8003fac:	20000714 	.word	0x20000714
 8003fb0:	2000089c 	.word	0x2000089c
 8003fb4:	20000990 	.word	0x20000990

08003fb8 <IRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IRTask */
void IRTask(void const * argument)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b0ea      	sub	sp, #424	@ 0x1a8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8003fc2:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8003fc6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN IRTask */
  /* Infinite loop */
  uint16_t left, right;
  double bufLeft, bufRight;
  double movingAverageLeft = 0.0, movingAverageRight = 0.0;
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
  double movingBufferLeft[20] = {0}, movingBufferRight[20] = {0};
 8003fe0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8003fe4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003fe8:	4618      	mov	r0, r3
 8003fea:	23a0      	movs	r3, #160	@ 0xa0
 8003fec:	461a      	mov	r2, r3
 8003fee:	2100      	movs	r1, #0
 8003ff0:	f00a fe99 	bl	800ed26 <memset>
 8003ff4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8003ff8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	23a0      	movs	r3, #160	@ 0xa0
 8004000:	461a      	mov	r2, r3
 8004002:	2100      	movs	r1, #0
 8004004:	f00a fe8f 	bl	800ed26 <memset>
  int indexLeft = 0, indexRight = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800400e:	2300      	movs	r3, #0
 8004010:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  double sumLeft = 0.0, sumRight = 0.0;
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
  int countLeft = 0, countRight = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004032:	2300      	movs	r3, #0
 8004034:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
  int transmitCounter = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

  for(;;)
  {
    // Check DMA flags and retrieve left and right sensor data
    if (__HAL_DMA_GET_FLAG(&hdma_adc1, DMA_FLAG_TCIF0_4))
 800403e:	4b60      	ldr	r3, [pc, #384]	@ (80041c0 <IRTask+0x208>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	4b5f      	ldr	r3, [pc, #380]	@ (80041c4 <IRTask+0x20c>)
 8004046:	429a      	cmp	r2, r3
 8004048:	d909      	bls.n	800405e <IRTask+0xa6>
 800404a:	4b5f      	ldr	r3, [pc, #380]	@ (80041c8 <IRTask+0x210>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf14      	ite	ne
 8004056:	2301      	movne	r3, #1
 8004058:	2300      	moveq	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e028      	b.n	80040b0 <IRTask+0xf8>
 800405e:	4b58      	ldr	r3, [pc, #352]	@ (80041c0 <IRTask+0x208>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	4b59      	ldr	r3, [pc, #356]	@ (80041cc <IRTask+0x214>)
 8004066:	429a      	cmp	r2, r3
 8004068:	d909      	bls.n	800407e <IRTask+0xc6>
 800406a:	4b57      	ldr	r3, [pc, #348]	@ (80041c8 <IRTask+0x210>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	e018      	b.n	80040b0 <IRTask+0xf8>
 800407e:	4b50      	ldr	r3, [pc, #320]	@ (80041c0 <IRTask+0x208>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	4b52      	ldr	r3, [pc, #328]	@ (80041d0 <IRTask+0x218>)
 8004086:	429a      	cmp	r2, r3
 8004088:	d909      	bls.n	800409e <IRTask+0xe6>
 800408a:	4b52      	ldr	r3, [pc, #328]	@ (80041d4 <IRTask+0x21c>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	bf14      	ite	ne
 8004096:	2301      	movne	r3, #1
 8004098:	2300      	moveq	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	e008      	b.n	80040b0 <IRTask+0xf8>
 800409e:	4b4d      	ldr	r3, [pc, #308]	@ (80041d4 <IRTask+0x21c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d024      	beq.n	80040fe <IRTask+0x146>
    {
        // Average the two buffer elements for the left sensor
        left = LEFT_IR_RES_BUFFER[0];
 80040b4:	4b48      	ldr	r3, [pc, #288]	@ (80041d8 <IRTask+0x220>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
        __HAL_DMA_CLEAR_FLAG(&hdma_adc1, DMA_FLAG_TCIF0_4);
 80040bc:	4b40      	ldr	r3, [pc, #256]	@ (80041c0 <IRTask+0x208>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	4b40      	ldr	r3, [pc, #256]	@ (80041c4 <IRTask+0x20c>)
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d903      	bls.n	80040d0 <IRTask+0x118>
 80040c8:	4b3f      	ldr	r3, [pc, #252]	@ (80041c8 <IRTask+0x210>)
 80040ca:	2220      	movs	r2, #32
 80040cc:	60da      	str	r2, [r3, #12]
 80040ce:	e016      	b.n	80040fe <IRTask+0x146>
 80040d0:	4b3b      	ldr	r3, [pc, #236]	@ (80041c0 <IRTask+0x208>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b3d      	ldr	r3, [pc, #244]	@ (80041cc <IRTask+0x214>)
 80040d8:	429a      	cmp	r2, r3
 80040da:	d903      	bls.n	80040e4 <IRTask+0x12c>
 80040dc:	4a3a      	ldr	r2, [pc, #232]	@ (80041c8 <IRTask+0x210>)
 80040de:	2320      	movs	r3, #32
 80040e0:	6093      	str	r3, [r2, #8]
 80040e2:	e00c      	b.n	80040fe <IRTask+0x146>
 80040e4:	4b36      	ldr	r3, [pc, #216]	@ (80041c0 <IRTask+0x208>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <IRTask+0x218>)
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d903      	bls.n	80040f8 <IRTask+0x140>
 80040f0:	4a38      	ldr	r2, [pc, #224]	@ (80041d4 <IRTask+0x21c>)
 80040f2:	2320      	movs	r3, #32
 80040f4:	60d3      	str	r3, [r2, #12]
 80040f6:	e002      	b.n	80040fe <IRTask+0x146>
 80040f8:	4a36      	ldr	r2, [pc, #216]	@ (80041d4 <IRTask+0x21c>)
 80040fa:	2320      	movs	r3, #32
 80040fc:	6093      	str	r3, [r2, #8]
    }
    if (__HAL_DMA_GET_FLAG(&hdma_adc2, DMA_FLAG_TCIF2_6))
 80040fe:	4b37      	ldr	r3, [pc, #220]	@ (80041dc <IRTask+0x224>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	4b2f      	ldr	r3, [pc, #188]	@ (80041c4 <IRTask+0x20c>)
 8004106:	429a      	cmp	r2, r3
 8004108:	d909      	bls.n	800411e <IRTask+0x166>
 800410a:	4b2f      	ldr	r3, [pc, #188]	@ (80041c8 <IRTask+0x210>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004112:	2b00      	cmp	r3, #0
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	e028      	b.n	8004170 <IRTask+0x1b8>
 800411e:	4b2f      	ldr	r3, [pc, #188]	@ (80041dc <IRTask+0x224>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	4b29      	ldr	r3, [pc, #164]	@ (80041cc <IRTask+0x214>)
 8004126:	429a      	cmp	r2, r3
 8004128:	d909      	bls.n	800413e <IRTask+0x186>
 800412a:	4b27      	ldr	r3, [pc, #156]	@ (80041c8 <IRTask+0x210>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004132:	2b00      	cmp	r3, #0
 8004134:	bf14      	ite	ne
 8004136:	2301      	movne	r3, #1
 8004138:	2300      	moveq	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	e018      	b.n	8004170 <IRTask+0x1b8>
 800413e:	4b27      	ldr	r3, [pc, #156]	@ (80041dc <IRTask+0x224>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	4b22      	ldr	r3, [pc, #136]	@ (80041d0 <IRTask+0x218>)
 8004146:	429a      	cmp	r2, r3
 8004148:	d909      	bls.n	800415e <IRTask+0x1a6>
 800414a:	4b22      	ldr	r3, [pc, #136]	@ (80041d4 <IRTask+0x21c>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004152:	2b00      	cmp	r3, #0
 8004154:	bf14      	ite	ne
 8004156:	2301      	movne	r3, #1
 8004158:	2300      	moveq	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	e008      	b.n	8004170 <IRTask+0x1b8>
 800415e:	4b1d      	ldr	r3, [pc, #116]	@ (80041d4 <IRTask+0x21c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d03b      	beq.n	80041ec <IRTask+0x234>
    {
        // Average the two buffer elements for the right sensor
        right = RIGHT_IR_RES_BUFFER[0];
 8004174:	4b1a      	ldr	r3, [pc, #104]	@ (80041e0 <IRTask+0x228>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4
        __HAL_DMA_CLEAR_FLAG(&hdma_adc2, DMA_FLAG_TCIF2_6);
 800417c:	4b17      	ldr	r3, [pc, #92]	@ (80041dc <IRTask+0x224>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b10      	ldr	r3, [pc, #64]	@ (80041c4 <IRTask+0x20c>)
 8004184:	429a      	cmp	r2, r3
 8004186:	d904      	bls.n	8004192 <IRTask+0x1da>
 8004188:	4b0f      	ldr	r3, [pc, #60]	@ (80041c8 <IRTask+0x210>)
 800418a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	e02c      	b.n	80041ec <IRTask+0x234>
 8004192:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <IRTask+0x224>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <IRTask+0x214>)
 800419a:	429a      	cmp	r2, r3
 800419c:	d904      	bls.n	80041a8 <IRTask+0x1f0>
 800419e:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <IRTask+0x210>)
 80041a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80041a4:	6093      	str	r3, [r2, #8]
 80041a6:	e021      	b.n	80041ec <IRTask+0x234>
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <IRTask+0x224>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	4b08      	ldr	r3, [pc, #32]	@ (80041d0 <IRTask+0x218>)
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d917      	bls.n	80041e4 <IRTask+0x22c>
 80041b4:	4a07      	ldr	r2, [pc, #28]	@ (80041d4 <IRTask+0x21c>)
 80041b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80041ba:	60d3      	str	r3, [r2, #12]
 80041bc:	e016      	b.n	80041ec <IRTask+0x234>
 80041be:	bf00      	nop
 80041c0:	200004e0 	.word	0x200004e0
 80041c4:	40026458 	.word	0x40026458
 80041c8:	40026400 	.word	0x40026400
 80041cc:	400260b8 	.word	0x400260b8
 80041d0:	40026058 	.word	0x40026058
 80041d4:	40026000 	.word	0x40026000
 80041d8:	200009ac 	.word	0x200009ac
 80041dc:	20000540 	.word	0x20000540
 80041e0:	200009b4 	.word	0x200009b4
 80041e4:	4a7e      	ldr	r2, [pc, #504]	@ (80043e0 <IRTask+0x428>)
 80041e6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80041ea:	6093      	str	r3, [r2, #8]
    }

    // Mask lower 12 bits (ADC resolution)
    left &= 0x0FFF;
 80041ec:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 80041f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f4:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
    right &= 0x0FFF;
 80041f8:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	@ 0x1a4
 80041fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004200:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4

    // Convert to voltage (assuming 3.3V reference)
    bufLeft = (left * 3.3f / 4095.0f);
 8004204:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004210:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80043e4 <IRTask+0x42c>
 8004214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004218:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80043e8 <IRTask+0x430>
 800421c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004220:	ee16 0a90 	vmov	r0, s13
 8004224:	f7fc f990 	bl	8000548 <__aeabi_f2d>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
    bufRight = (right * 3.3f / 4095.0f);
 8004230:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	@ 0x1a4
 8004234:	ee07 3a90 	vmov	s15, r3
 8004238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800423c:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80043e4 <IRTask+0x42c>
 8004240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004244:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80043e8 <IRTask+0x430>
 8004248:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800424c:	ee16 0a90 	vmov	r0, s13
 8004250:	f7fc f97a 	bl	8000548 <__aeabi_f2d>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158

    // Update moving average for left sensor
    sumLeft -= movingBufferLeft[indexLeft];  // Subtract the oldest value
 800425c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004260:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8004264:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4413      	add	r3, r2
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8004274:	f7fc f808 	bl	8000288 <__aeabi_dsub>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
    movingBufferLeft[indexLeft] = bufLeft;   // Store the new value
 8004280:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004284:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8004288:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	18d1      	adds	r1, r2, r3
 8004290:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8004294:	e9c1 2300 	strd	r2, r3, [r1]
    sumLeft += bufLeft;  // Add the new value to the sum
 8004298:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 800429c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80042a0:	f7fb fff4 	bl	800028c <__adddf3>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

    // Update the index and wrap around if necessary
    indexLeft = (indexLeft + 1) % 20;
 80042ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	4b4e      	ldr	r3, [pc, #312]	@ (80043ec <IRTask+0x434>)
 80042b4:	fb83 1302 	smull	r1, r3, r3, r2
 80042b8:	10d9      	asrs	r1, r3, #3
 80042ba:	17d3      	asrs	r3, r2, #31
 80042bc:	1ac9      	subs	r1, r1, r3
 80042be:	460b      	mov	r3, r1
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

    // Calculate the average for left
    countLeft = (countLeft < 20) ? countLeft + 1 : 20;
 80042cc:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80042d0:	2b13      	cmp	r3, #19
 80042d2:	bfa8      	it	ge
 80042d4:	2313      	movge	r3, #19
 80042d6:	3301      	adds	r3, #1
 80042d8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    movingAverageLeft = sumLeft / countLeft;
 80042dc:	f8d7 0184 	ldr.w	r0, [r7, #388]	@ 0x184
 80042e0:	f7fc f920 	bl	8000524 <__aeabi_i2d>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80042ec:	f7fc faae 	bl	800084c <__aeabi_ddiv>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178

    // Update moving average for right sensor
    sumRight -= movingBufferRight[indexRight];  // Subtract the oldest value
 80042f8:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80042fc:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8004300:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004310:	f7fb ffba 	bl	8000288 <__aeabi_dsub>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
    movingBufferRight[indexRight] = bufRight;   // Store the new value
 800431c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004320:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8004324:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	18d1      	adds	r1, r2, r3
 800432c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8004330:	e9c1 2300 	strd	r2, r3, [r1]
    sumRight += bufRight;  // Add the new value to the sum
 8004334:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8004338:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800433c:	f7fb ffa6 	bl	800028c <__adddf3>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188

    // Update the index and wrap around if necessary
    indexRight = (indexRight + 1) % 20;
 8004348:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <IRTask+0x434>)
 8004350:	fb83 1302 	smull	r1, r3, r3, r2
 8004354:	10d9      	asrs	r1, r3, #3
 8004356:	17d3      	asrs	r3, r2, #31
 8004358:	1ac9      	subs	r1, r1, r3
 800435a:	460b      	mov	r3, r1
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

    // Calculate the average for right
    countRight = (countRight < 20) ? countRight + 1 : 20;
 8004368:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800436c:	2b13      	cmp	r3, #19
 800436e:	bfa8      	it	ge
 8004370:	2313      	movge	r3, #19
 8004372:	3301      	adds	r3, #1
 8004374:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    movingAverageRight = sumRight / countRight;
 8004378:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800437c:	f7fc f8d2 	bl	8000524 <__aeabi_i2d>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004388:	f7fc fa60 	bl	800084c <__aeabi_ddiv>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170

    // Process values using your polynomial computation (if needed)
    double processedLeft = compute_polynomial(bufLeft);
 8004394:	ed97 0b58 	vldr	d0, [r7, #352]	@ 0x160
 8004398:	f7fd f88e 	bl	80014b8 <compute_polynomial>
 800439c:	ed87 0b54 	vstr	d0, [r7, #336]	@ 0x150
    double processedRight = compute_polynomial(bufRight);
 80043a0:	ed97 0b56 	vldr	d0, [r7, #344]	@ 0x158
 80043a4:	f7fd f888 	bl	80014b8 <compute_polynomial>
 80043a8:	ed87 0b52 	vstr	d0, [r7, #328]	@ 0x148

    // Store the processed values in a shared structure
    osMutexWait(IRMutexHandle, osWaitForever);
 80043ac:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <IRTask+0x438>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f04f 31ff 	mov.w	r1, #4294967295
 80043b4:	4618      	mov	r0, r3
 80043b6:	f006 fb1f 	bl	800a9f8 <osMutexWait>
    IRRead.left = processedLeft;
 80043ba:	490e      	ldr	r1, [pc, #56]	@ (80043f4 <IRTask+0x43c>)
 80043bc:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80043c0:	e9c1 2300 	strd	r2, r3, [r1]
    IRRead.right = processedRight;
 80043c4:	490b      	ldr	r1, [pc, #44]	@ (80043f4 <IRTask+0x43c>)
 80043c6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80043ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
    osMutexRelease(IRMutexHandle);
 80043ce:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <IRTask+0x438>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f006 fb5e 	bl	800aa94 <osMutexRelease>

    osDelay(1);
 80043d8:	2001      	movs	r0, #1
 80043da:	f006 fae0 	bl	800a99e <osDelay>
  {
 80043de:	e62e      	b.n	800403e <IRTask+0x86>
 80043e0:	40026000 	.word	0x40026000
 80043e4:	40533333 	.word	0x40533333
 80043e8:	457ff000 	.word	0x457ff000
 80043ec:	66666667 	.word	0x66666667
 80043f0:	200008e8 	.word	0x200008e8
 80043f4:	20000998 	.word	0x20000998

080043f8 <UltrasonicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltrasonicTask */
void UltrasonicTask(void const * argument)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasonicTask */
  /* Infinite loop */
  for(;;)
  {

	  HCSR04_Read();
 8004400:	f7fc fe6e 	bl	80010e0 <HCSR04_Read>
    osDelay(25);
 8004404:	2019      	movs	r0, #25
 8004406:	f006 faca 	bl	800a99e <osDelay>
	  HCSR04_Read();
 800440a:	bf00      	nop
 800440c:	e7f8      	b.n	8004400 <UltrasonicTask+0x8>

0800440e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800440e:	b480      	push	{r7}
 8004410:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004412:	b672      	cpsid	i
}
 8004414:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004416:	bf00      	nop
 8004418:	e7fd      	b.n	8004416 <Error_Handler+0x8>
	...

0800441c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	4b12      	ldr	r3, [pc, #72]	@ (8004470 <HAL_MspInit+0x54>)
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	4a11      	ldr	r2, [pc, #68]	@ (8004470 <HAL_MspInit+0x54>)
 800442c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004430:	6453      	str	r3, [r2, #68]	@ 0x44
 8004432:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <HAL_MspInit+0x54>)
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <HAL_MspInit+0x54>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	4a0a      	ldr	r2, [pc, #40]	@ (8004470 <HAL_MspInit+0x54>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444c:	6413      	str	r3, [r2, #64]	@ 0x40
 800444e:	4b08      	ldr	r3, [pc, #32]	@ (8004470 <HAL_MspInit+0x54>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800445a:	2200      	movs	r2, #0
 800445c:	210f      	movs	r1, #15
 800445e:	f06f 0001 	mvn.w	r0, #1
 8004462:	f001 f9d6 	bl	8005812 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08c      	sub	sp, #48	@ 0x30
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 031c 	add.w	r3, r7, #28
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a5e      	ldr	r2, [pc, #376]	@ (800460c <HAL_ADC_MspInit+0x198>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d158      	bne.n	8004548 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
 800449a:	4b5d      	ldr	r3, [pc, #372]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	4a5c      	ldr	r2, [pc, #368]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	4b56      	ldr	r3, [pc, #344]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	4a55      	ldr	r2, [pc, #340]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044c2:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044ce:	2308      	movs	r3, #8
 80044d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044d2:	2303      	movs	r3, #3
 80044d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044da:	f107 031c 	add.w	r3, r7, #28
 80044de:	4619      	mov	r1, r3
 80044e0:	484c      	ldr	r0, [pc, #304]	@ (8004614 <HAL_ADC_MspInit+0x1a0>)
 80044e2:	f001 fdcf 	bl	8006084 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80044e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 80044e8:	4a4c      	ldr	r2, [pc, #304]	@ (800461c <HAL_ADC_MspInit+0x1a8>)
 80044ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80044ec:	4b4a      	ldr	r3, [pc, #296]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044f2:	4b49      	ldr	r3, [pc, #292]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80044f8:	4b47      	ldr	r3, [pc, #284]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80044fe:	4b46      	ldr	r3, [pc, #280]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 8004500:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004504:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004506:	4b44      	ldr	r3, [pc, #272]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 8004508:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800450c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800450e:	4b42      	ldr	r3, [pc, #264]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 8004510:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004514:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004516:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 8004518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800451c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800451e:	4b3e      	ldr	r3, [pc, #248]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 8004520:	2200      	movs	r2, #0
 8004522:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004524:	4b3c      	ldr	r3, [pc, #240]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 8004526:	2200      	movs	r2, #0
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800452a:	483b      	ldr	r0, [pc, #236]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 800452c:	f001 f9a8 	bl	8005880 <HAL_DMA_Init>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004536:	f7ff ff6a 	bl	800440e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a36      	ldr	r2, [pc, #216]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 800453e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004540:	4a35      	ldr	r2, [pc, #212]	@ (8004618 <HAL_ADC_MspInit+0x1a4>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004546:	e05d      	b.n	8004604 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a34      	ldr	r2, [pc, #208]	@ (8004620 <HAL_ADC_MspInit+0x1ac>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d158      	bne.n	8004604 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	4b2e      	ldr	r3, [pc, #184]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455a:	4a2d      	ldr	r2, [pc, #180]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 800455c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004560:	6453      	str	r3, [r2, #68]	@ 0x44
 8004562:	4b2b      	ldr	r3, [pc, #172]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	4b27      	ldr	r3, [pc, #156]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	4a26      	ldr	r2, [pc, #152]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 8004578:	f043 0304 	orr.w	r3, r3, #4
 800457c:	6313      	str	r3, [r2, #48]	@ 0x30
 800457e:	4b24      	ldr	r3, [pc, #144]	@ (8004610 <HAL_ADC_MspInit+0x19c>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800458a:	2302      	movs	r3, #2
 800458c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800458e:	2303      	movs	r3, #3
 8004590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004596:	f107 031c 	add.w	r3, r7, #28
 800459a:	4619      	mov	r1, r3
 800459c:	481d      	ldr	r0, [pc, #116]	@ (8004614 <HAL_ADC_MspInit+0x1a0>)
 800459e:	f001 fd71 	bl	8006084 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80045a2:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045a4:	4a20      	ldr	r2, [pc, #128]	@ (8004628 <HAL_ADC_MspInit+0x1b4>)
 80045a6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80045a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045ae:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80045b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80045bc:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045c2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80045c4:	4b17      	ldr	r3, [pc, #92]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80045ca:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045cc:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80045d2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80045d4:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045da:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80045dc:	4b11      	ldr	r3, [pc, #68]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045de:	2200      	movs	r2, #0
 80045e0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045e2:	4b10      	ldr	r3, [pc, #64]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80045e8:	480e      	ldr	r0, [pc, #56]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045ea:	f001 f949 	bl	8005880 <HAL_DMA_Init>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 80045f4:	f7ff ff0b 	bl	800440e <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 80045fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80045fe:	4a09      	ldr	r2, [pc, #36]	@ (8004624 <HAL_ADC_MspInit+0x1b0>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004604:	bf00      	nop
 8004606:	3730      	adds	r7, #48	@ 0x30
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40012000 	.word	0x40012000
 8004610:	40023800 	.word	0x40023800
 8004614:	40020800 	.word	0x40020800
 8004618:	200004e0 	.word	0x200004e0
 800461c:	40026410 	.word	0x40026410
 8004620:	40012100 	.word	0x40012100
 8004624:	20000540 	.word	0x20000540
 8004628:	40026440 	.word	0x40026440

0800462c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	@ 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004634:	f107 0314 	add.w	r3, r7, #20
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a19      	ldr	r2, [pc, #100]	@ (80046b0 <HAL_I2C_MspInit+0x84>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d12c      	bne.n	80046a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	4b18      	ldr	r3, [pc, #96]	@ (80046b4 <HAL_I2C_MspInit+0x88>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	4a17      	ldr	r2, [pc, #92]	@ (80046b4 <HAL_I2C_MspInit+0x88>)
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	6313      	str	r3, [r2, #48]	@ 0x30
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <HAL_I2C_MspInit+0x88>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800466a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800466e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004670:	2312      	movs	r3, #18
 8004672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004678:	2303      	movs	r3, #3
 800467a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800467c:	2304      	movs	r3, #4
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	4619      	mov	r1, r3
 8004686:	480c      	ldr	r0, [pc, #48]	@ (80046b8 <HAL_I2C_MspInit+0x8c>)
 8004688:	f001 fcfc 	bl	8006084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	4b08      	ldr	r3, [pc, #32]	@ (80046b4 <HAL_I2C_MspInit+0x88>)
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	4a07      	ldr	r2, [pc, #28]	@ (80046b4 <HAL_I2C_MspInit+0x88>)
 8004696:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800469a:	6413      	str	r3, [r2, #64]	@ 0x40
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <HAL_I2C_MspInit+0x88>)
 800469e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80046a8:	bf00      	nop
 80046aa:	3728      	adds	r7, #40	@ 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40005400 	.word	0x40005400
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40020400 	.word	0x40020400

080046bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08e      	sub	sp, #56	@ 0x38
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004804 <HAL_TIM_Base_MspInit+0x148>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d10e      	bne.n	80046fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	4b49      	ldr	r3, [pc, #292]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	4a48      	ldr	r2, [pc, #288]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ee:	4b46      	ldr	r3, [pc, #280]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80046fa:	e07f      	b.n	80047fc <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM4)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a42      	ldr	r2, [pc, #264]	@ (800480c <HAL_TIM_Base_MspInit+0x150>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d135      	bne.n	8004772 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	4b3f      	ldr	r3, [pc, #252]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	4a3e      	ldr	r2, [pc, #248]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 8004710:	f043 0304 	orr.w	r3, r3, #4
 8004714:	6413      	str	r3, [r2, #64]	@ 0x40
 8004716:	4b3c      	ldr	r3, [pc, #240]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	4b38      	ldr	r3, [pc, #224]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	4a37      	ldr	r2, [pc, #220]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 800472c:	f043 0308 	orr.w	r3, r3, #8
 8004730:	6313      	str	r3, [r2, #48]	@ 0x30
 8004732:	4b35      	ldr	r3, [pc, #212]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ULTRA_ECHO_Pin;
 800473e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004744:	2302      	movs	r3, #2
 8004746:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004748:	2300      	movs	r3, #0
 800474a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474c:	2300      	movs	r3, #0
 800474e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004750:	2302      	movs	r3, #2
 8004752:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULTRA_ECHO_GPIO_Port, &GPIO_InitStruct);
 8004754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004758:	4619      	mov	r1, r3
 800475a:	482d      	ldr	r0, [pc, #180]	@ (8004810 <HAL_TIM_Base_MspInit+0x154>)
 800475c:	f001 fc92 	bl	8006084 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004760:	2200      	movs	r2, #0
 8004762:	2105      	movs	r1, #5
 8004764:	201e      	movs	r0, #30
 8004766:	f001 f854 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800476a:	201e      	movs	r0, #30
 800476c:	f001 f86d 	bl	800584a <HAL_NVIC_EnableIRQ>
}
 8004770:	e044      	b.n	80047fc <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM6)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a27      	ldr	r2, [pc, #156]	@ (8004814 <HAL_TIM_Base_MspInit+0x158>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10e      	bne.n	800479a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	4b21      	ldr	r3, [pc, #132]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	4a20      	ldr	r2, [pc, #128]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 8004786:	f043 0310 	orr.w	r3, r3, #16
 800478a:	6413      	str	r3, [r2, #64]	@ 0x40
 800478c:	4b1e      	ldr	r3, [pc, #120]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	697b      	ldr	r3, [r7, #20]
}
 8004798:	e030      	b.n	80047fc <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM8)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <HAL_TIM_Base_MspInit+0x15c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d12b      	bne.n	80047fc <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	4b17      	ldr	r3, [pc, #92]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 80047aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ac:	4a16      	ldr	r2, [pc, #88]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 80047ae:	f043 0302 	orr.w	r3, r3, #2
 80047b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80047b4:	4b14      	ldr	r3, [pc, #80]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 80047b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 80047c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c8:	4a0f      	ldr	r2, [pc, #60]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 80047ca:	f043 0304 	orr.w	r3, r3, #4
 80047ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <HAL_TIM_Base_MspInit+0x14c>)
 80047d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMLEFT_Pin|PWMRIGHT_Pin;
 80047dc:	23c0      	movs	r3, #192	@ 0xc0
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e0:	2302      	movs	r3, #2
 80047e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e8:	2300      	movs	r3, #0
 80047ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80047ec:	2303      	movs	r3, #3
 80047ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047f4:	4619      	mov	r1, r3
 80047f6:	4809      	ldr	r0, [pc, #36]	@ (800481c <HAL_TIM_Base_MspInit+0x160>)
 80047f8:	f001 fc44 	bl	8006084 <HAL_GPIO_Init>
}
 80047fc:	bf00      	nop
 80047fe:	3738      	adds	r7, #56	@ 0x38
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40010000 	.word	0x40010000
 8004808:	40023800 	.word	0x40023800
 800480c:	40000800 	.word	0x40000800
 8004810:	40020c00 	.word	0x40020c00
 8004814:	40001000 	.word	0x40001000
 8004818:	40010400 	.word	0x40010400
 800481c:	40020800 	.word	0x40020800

08004820 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08c      	sub	sp, #48	@ 0x30
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004828:	f107 031c 	add.w	r3, r7, #28
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004840:	d14b      	bne.n	80048da <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	4b3f      	ldr	r3, [pc, #252]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	4a3e      	ldr	r2, [pc, #248]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	6413      	str	r3, [r2, #64]	@ 0x40
 8004852:	4b3c      	ldr	r3, [pc, #240]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	4b38      	ldr	r3, [pc, #224]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004866:	4a37      	ldr	r2, [pc, #220]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6313      	str	r3, [r2, #48]	@ 0x30
 800486e:	4b35      	ldr	r3, [pc, #212]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	4b31      	ldr	r3, [pc, #196]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	4a30      	ldr	r2, [pc, #192]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	6313      	str	r3, [r2, #48]	@ 0x30
 800488a:	4b2e      	ldr	r3, [pc, #184]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800489a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489c:	2302      	movs	r3, #2
 800489e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048a8:	2301      	movs	r3, #1
 80048aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ac:	f107 031c 	add.w	r3, r7, #28
 80048b0:	4619      	mov	r1, r3
 80048b2:	4825      	ldr	r0, [pc, #148]	@ (8004948 <HAL_TIM_Encoder_MspInit+0x128>)
 80048b4:	f001 fbe6 	bl	8006084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048b8:	2308      	movs	r3, #8
 80048ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048bc:	2302      	movs	r3, #2
 80048be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c4:	2300      	movs	r3, #0
 80048c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048c8:	2301      	movs	r3, #1
 80048ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048cc:	f107 031c 	add.w	r3, r7, #28
 80048d0:	4619      	mov	r1, r3
 80048d2:	481e      	ldr	r0, [pc, #120]	@ (800494c <HAL_TIM_Encoder_MspInit+0x12c>)
 80048d4:	f001 fbd6 	bl	8006084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80048d8:	e030      	b.n	800493c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1c      	ldr	r2, [pc, #112]	@ (8004950 <HAL_TIM_Encoder_MspInit+0x130>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d12b      	bne.n	800493c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	4b16      	ldr	r3, [pc, #88]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	4a15      	ldr	r2, [pc, #84]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 80048ee:	f043 0302 	orr.w	r3, r3, #2
 80048f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80048f4:	4b13      	ldr	r3, [pc, #76]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	4a0e      	ldr	r2, [pc, #56]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004910:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <HAL_TIM_Encoder_MspInit+0x124>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800491c:	23c0      	movs	r3, #192	@ 0xc0
 800491e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004920:	2302      	movs	r3, #2
 8004922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004928:	2300      	movs	r3, #0
 800492a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800492c:	2302      	movs	r3, #2
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004930:	f107 031c 	add.w	r3, r7, #28
 8004934:	4619      	mov	r1, r3
 8004936:	4804      	ldr	r0, [pc, #16]	@ (8004948 <HAL_TIM_Encoder_MspInit+0x128>)
 8004938:	f001 fba4 	bl	8006084 <HAL_GPIO_Init>
}
 800493c:	bf00      	nop
 800493e:	3730      	adds	r7, #48	@ 0x30
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40023800 	.word	0x40023800
 8004948:	40020000 	.word	0x40020000
 800494c:	40020400 	.word	0x40020400
 8004950:	40000400 	.word	0x40000400

08004954 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 030c 	add.w	r3, r7, #12
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a12      	ldr	r2, [pc, #72]	@ (80049bc <HAL_TIM_MspPostInit+0x68>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d11e      	bne.n	80049b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	4b11      	ldr	r3, [pc, #68]	@ (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	4a10      	ldr	r2, [pc, #64]	@ (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 8004980:	f043 0310 	orr.w	r3, r3, #16
 8004984:	6313      	str	r3, [r2, #48]	@ 0x30
 8004986:	4b0e      	ldr	r3, [pc, #56]	@ (80049c0 <HAL_TIM_MspPostInit+0x6c>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8004992:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004996:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80049a4:	2301      	movs	r3, #1
 80049a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	4619      	mov	r1, r3
 80049ae:	4805      	ldr	r0, [pc, #20]	@ (80049c4 <HAL_TIM_MspPostInit+0x70>)
 80049b0:	f001 fb68 	bl	8006084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80049b4:	bf00      	nop
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40021000 	.word	0x40021000

080049c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	@ 0x28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d0:	f107 0314 	add.w	r3, r7, #20
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a5c <HAL_UART_MspInit+0x94>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d134      	bne.n	8004a54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004a60 <HAL_UART_MspInit+0x98>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a60 <HAL_UART_MspInit+0x98>)
 80049f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049fa:	4b19      	ldr	r3, [pc, #100]	@ (8004a60 <HAL_UART_MspInit+0x98>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <HAL_UART_MspInit+0x98>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	4a14      	ldr	r2, [pc, #80]	@ (8004a60 <HAL_UART_MspInit+0x98>)
 8004a10:	f043 0304 	orr.w	r3, r3, #4
 8004a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a16:	4b12      	ldr	r3, [pc, #72]	@ (8004a60 <HAL_UART_MspInit+0x98>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004a22:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a30:	2303      	movs	r3, #3
 8004a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a34:	2307      	movs	r3, #7
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a38:	f107 0314 	add.w	r3, r7, #20
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4809      	ldr	r0, [pc, #36]	@ (8004a64 <HAL_UART_MspInit+0x9c>)
 8004a40:	f001 fb20 	bl	8006084 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004a44:	2200      	movs	r2, #0
 8004a46:	2105      	movs	r1, #5
 8004a48:	2027      	movs	r0, #39	@ 0x27
 8004a4a:	f000 fee2 	bl	8005812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a4e:	2027      	movs	r0, #39	@ 0x27
 8004a50:	f000 fefb 	bl	800584a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004a54:	bf00      	nop
 8004a56:	3728      	adds	r7, #40	@ 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40004800 	.word	0x40004800
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40020800 	.word	0x40020800

08004a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <NMI_Handler+0x4>

08004a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <HardFault_Handler+0x4>

08004a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a7c:	bf00      	nop
 8004a7e:	e7fd      	b.n	8004a7c <MemManage_Handler+0x4>

08004a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <BusFault_Handler+0x4>

08004a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <UsageFault_Handler+0x4>

08004a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004aa2:	f000 f985 	bl	8004db0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004aa6:	f007 fcbf 	bl	800c428 <xTaskGetSchedulerState>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d001      	beq.n	8004ab4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004ab0:	f008 f8a2 	bl	800cbf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ab4:	bf00      	nop
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004abc:	4802      	ldr	r0, [pc, #8]	@ (8004ac8 <TIM4_IRQHandler+0x10>)
 8004abe:	f003 fdbb 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200006cc 	.word	0x200006cc

08004acc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ad0:	4802      	ldr	r0, [pc, #8]	@ (8004adc <USART3_IRQHandler+0x10>)
 8004ad2:	f004 ff91 	bl	80099f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	200007a4 	.word	0x200007a4

08004ae0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ae4:	4802      	ldr	r0, [pc, #8]	@ (8004af0 <DMA2_Stream0_IRQHandler+0x10>)
 8004ae6:	f001 f863 	bl	8005bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200004e0 	.word	0x200004e0

08004af4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004af8:	4802      	ldr	r0, [pc, #8]	@ (8004b04 <DMA2_Stream2_IRQHandler+0x10>)
 8004afa:	f001 f859 	bl	8005bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000540 	.word	0x20000540

08004b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return 1;
 8004b0c:	2301      	movs	r3, #1
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <_kill>:

int _kill(int pid, int sig)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b22:	f00a f953 	bl	800edcc <__errno>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2216      	movs	r2, #22
 8004b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <_exit>:

void _exit (int status)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b40:	f04f 31ff 	mov.w	r1, #4294967295
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ffe7 	bl	8004b18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b4a:	bf00      	nop
 8004b4c:	e7fd      	b.n	8004b4a <_exit+0x12>

08004b4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b086      	sub	sp, #24
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e00a      	b.n	8004b76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b60:	f3af 8000 	nop.w
 8004b64:	4601      	mov	r1, r0
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	60ba      	str	r2, [r7, #8]
 8004b6c:	b2ca      	uxtb	r2, r1
 8004b6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3301      	adds	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	dbf0      	blt.n	8004b60 <_read+0x12>
  }

  return len;
 8004b7e:	687b      	ldr	r3, [r7, #4]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e009      	b.n	8004bae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	60ba      	str	r2, [r7, #8]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3301      	adds	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	dbf1      	blt.n	8004b9a <_write+0x12>
  }
  return len;
 8004bb6:	687b      	ldr	r3, [r7, #4]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <_close>:

int _close(int file)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004be8:	605a      	str	r2, [r3, #4]
  return 0;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <_isatty>:

int _isatty(int file)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c00:	2301      	movs	r3, #1
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c30:	4a14      	ldr	r2, [pc, #80]	@ (8004c84 <_sbrk+0x5c>)
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <_sbrk+0x60>)
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c3c:	4b13      	ldr	r3, [pc, #76]	@ (8004c8c <_sbrk+0x64>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c44:	4b11      	ldr	r3, [pc, #68]	@ (8004c8c <_sbrk+0x64>)
 8004c46:	4a12      	ldr	r2, [pc, #72]	@ (8004c90 <_sbrk+0x68>)
 8004c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c4a:	4b10      	ldr	r3, [pc, #64]	@ (8004c8c <_sbrk+0x64>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4413      	add	r3, r2
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d207      	bcs.n	8004c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c58:	f00a f8b8 	bl	800edcc <__errno>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	220c      	movs	r2, #12
 8004c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c62:	f04f 33ff 	mov.w	r3, #4294967295
 8004c66:	e009      	b.n	8004c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c68:	4b08      	ldr	r3, [pc, #32]	@ (8004c8c <_sbrk+0x64>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c6e:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <_sbrk+0x64>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	4a05      	ldr	r2, [pc, #20]	@ (8004c8c <_sbrk+0x64>)
 8004c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20020000 	.word	0x20020000
 8004c88:	00004000 	.word	0x00004000
 8004c8c:	20000a90 	.word	0x20000a90
 8004c90:	20005048 	.word	0x20005048

08004c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c98:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <SystemInit+0x20>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9e:	4a05      	ldr	r2, [pc, #20]	@ (8004cb4 <SystemInit+0x20>)
 8004ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ca8:	bf00      	nop
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	e000ed00 	.word	0xe000ed00

08004cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004cf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004cbc:	f7ff ffea 	bl	8004c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cc0:	480c      	ldr	r0, [pc, #48]	@ (8004cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cc2:	490d      	ldr	r1, [pc, #52]	@ (8004cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cc8:	e002      	b.n	8004cd0 <LoopCopyDataInit>

08004cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cce:	3304      	adds	r3, #4

08004cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cd4:	d3f9      	bcc.n	8004cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8004d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cdc:	e001      	b.n	8004ce2 <LoopFillZerobss>

08004cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ce0:	3204      	adds	r2, #4

08004ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ce4:	d3fb      	bcc.n	8004cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ce6:	f00a f877 	bl	800edd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cea:	f7fc fc79 	bl	80015e0 <main>
  bx  lr    
 8004cee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cf8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004cfc:	08011e08 	.word	0x08011e08
  ldr r2, =_sbss
 8004d00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004d04:	20005048 	.word	0x20005048

08004d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d08:	e7fe      	b.n	8004d08 <ADC_IRQHandler>
	...

08004d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d10:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <HAL_Init+0x40>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0d      	ldr	r2, [pc, #52]	@ (8004d4c <HAL_Init+0x40>)
 8004d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_Init+0x40>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	@ (8004d4c <HAL_Init+0x40>)
 8004d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d28:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <HAL_Init+0x40>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a07      	ldr	r2, [pc, #28]	@ (8004d4c <HAL_Init+0x40>)
 8004d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d34:	2003      	movs	r0, #3
 8004d36:	f000 fd61 	bl	80057fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d3a:	200f      	movs	r0, #15
 8004d3c:	f000 f808 	bl	8004d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d40:	f7ff fb6c 	bl	800441c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00

08004d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d58:	4b12      	ldr	r3, [pc, #72]	@ (8004da4 <HAL_InitTick+0x54>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b12      	ldr	r3, [pc, #72]	@ (8004da8 <HAL_InitTick+0x58>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	4619      	mov	r1, r3
 8004d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fd79 	bl	8005866 <HAL_SYSTICK_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e00e      	b.n	8004d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b0f      	cmp	r3, #15
 8004d82:	d80a      	bhi.n	8004d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d84:	2200      	movs	r2, #0
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	f000 fd41 	bl	8005812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d90:	4a06      	ldr	r2, [pc, #24]	@ (8004dac <HAL_InitTick+0x5c>)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e000      	b.n	8004d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000004 	.word	0x20000004
 8004da8:	2000000c 	.word	0x2000000c
 8004dac:	20000008 	.word	0x20000008

08004db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <HAL_IncTick+0x20>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <HAL_IncTick+0x24>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	4a04      	ldr	r2, [pc, #16]	@ (8004dd4 <HAL_IncTick+0x24>)
 8004dc2:	6013      	str	r3, [r2, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	2000000c 	.word	0x2000000c
 8004dd4:	20000a94 	.word	0x20000a94

08004dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return uwTick;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <HAL_GetTick+0x14>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000a94 	.word	0x20000a94

08004df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004df8:	f7ff ffee 	bl	8004dd8 <HAL_GetTick>
 8004dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d005      	beq.n	8004e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <HAL_Delay+0x44>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e16:	bf00      	nop
 8004e18:	f7ff ffde 	bl	8004dd8 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d8f7      	bhi.n	8004e18 <HAL_Delay+0x28>
  {
  }
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	2000000c 	.word	0x2000000c

08004e38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e033      	b.n	8004eb6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fb0c 	bl	8004474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d118      	bne.n	8004ea8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e7e:	f023 0302 	bic.w	r3, r3, #2
 8004e82:	f043 0202 	orr.w	r2, r3, #2
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fa68 	bl	8005360 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	f043 0201 	orr.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ea6:	e001      	b.n	8004eac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_ADC_Start_DMA+0x1e>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e0e9      	b.n	80050b2 <HAL_ADC_Start_DMA+0x1f2>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d018      	beq.n	8004f26 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f04:	4b6d      	ldr	r3, [pc, #436]	@ (80050bc <HAL_ADC_Start_DMA+0x1fc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a6d      	ldr	r2, [pc, #436]	@ (80050c0 <HAL_ADC_Start_DMA+0x200>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	0c9a      	lsrs	r2, r3, #18
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004f18:	e002      	b.n	8004f20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f9      	bne.n	8004f1a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f34:	d107      	bne.n	8004f46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f44:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	f040 80a1 	bne.w	8005098 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004f80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f94:	d106      	bne.n	8004fa4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9a:	f023 0206 	bic.w	r2, r3, #6
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44
 8004fa2:	e002      	b.n	8004faa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fb2:	4b44      	ldr	r3, [pc, #272]	@ (80050c4 <HAL_ADC_Start_DMA+0x204>)
 8004fb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fba:	4a43      	ldr	r2, [pc, #268]	@ (80050c8 <HAL_ADC_Start_DMA+0x208>)
 8004fbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc2:	4a42      	ldr	r2, [pc, #264]	@ (80050cc <HAL_ADC_Start_DMA+0x20c>)
 8004fc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	4a41      	ldr	r2, [pc, #260]	@ (80050d0 <HAL_ADC_Start_DMA+0x210>)
 8004fcc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004fe6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ff6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	334c      	adds	r3, #76	@ 0x4c
 8005002:	4619      	mov	r1, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f000 fce8 	bl	80059dc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2b00      	cmp	r3, #0
 8005016:	d12a      	bne.n	800506e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2d      	ldr	r2, [pc, #180]	@ (80050d4 <HAL_ADC_Start_DMA+0x214>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d015      	beq.n	800504e <HAL_ADC_Start_DMA+0x18e>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a2c      	ldr	r2, [pc, #176]	@ (80050d8 <HAL_ADC_Start_DMA+0x218>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d105      	bne.n	8005038 <HAL_ADC_Start_DMA+0x178>
 800502c:	4b25      	ldr	r3, [pc, #148]	@ (80050c4 <HAL_ADC_Start_DMA+0x204>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <HAL_ADC_Start_DMA+0x21c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d136      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
 8005042:	4b20      	ldr	r3, [pc, #128]	@ (80050c4 <HAL_ADC_Start_DMA+0x204>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d130      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d129      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	e020      	b.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a18      	ldr	r2, [pc, #96]	@ (80050d4 <HAL_ADC_Start_DMA+0x214>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d11b      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d114      	bne.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005094:	609a      	str	r2, [r3, #8]
 8005096:	e00b      	b.n	80050b0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509c:	f043 0210 	orr.w	r2, r3, #16
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a8:	f043 0201 	orr.w	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000004 	.word	0x20000004
 80050c0:	431bde83 	.word	0x431bde83
 80050c4:	40012300 	.word	0x40012300
 80050c8:	08005559 	.word	0x08005559
 80050cc:	08005613 	.word	0x08005613
 80050d0:	0800562f 	.word	0x0800562f
 80050d4:	40012000 	.word	0x40012000
 80050d8:	40012100 	.word	0x40012100
 80050dc:	40012200 	.word	0x40012200

080050e0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_ADC_ConfigChannel+0x1c>
 8005134:	2302      	movs	r3, #2
 8005136:	e105      	b.n	8005344 <HAL_ADC_ConfigChannel+0x228>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b09      	cmp	r3, #9
 8005146:	d925      	bls.n	8005194 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68d9      	ldr	r1, [r3, #12]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	3b1e      	subs	r3, #30
 800515e:	2207      	movs	r2, #7
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43da      	mvns	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	400a      	ands	r2, r1
 800516c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68d9      	ldr	r1, [r3, #12]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	4618      	mov	r0, r3
 8005180:	4603      	mov	r3, r0
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	4403      	add	r3, r0
 8005186:	3b1e      	subs	r3, #30
 8005188:	409a      	lsls	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e022      	b.n	80051da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6919      	ldr	r1, [r3, #16]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	2207      	movs	r2, #7
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43da      	mvns	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	400a      	ands	r2, r1
 80051b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6919      	ldr	r1, [r3, #16]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4618      	mov	r0, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	4403      	add	r3, r0
 80051d0:	409a      	lsls	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b06      	cmp	r3, #6
 80051e0:	d824      	bhi.n	800522c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	3b05      	subs	r3, #5
 80051f4:	221f      	movs	r2, #31
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	43da      	mvns	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	400a      	ands	r2, r1
 8005202:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	4618      	mov	r0, r3
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	3b05      	subs	r3, #5
 800521e:	fa00 f203 	lsl.w	r2, r0, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	635a      	str	r2, [r3, #52]	@ 0x34
 800522a:	e04c      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b0c      	cmp	r3, #12
 8005232:	d824      	bhi.n	800527e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	3b23      	subs	r3, #35	@ 0x23
 8005246:	221f      	movs	r2, #31
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43da      	mvns	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	400a      	ands	r2, r1
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	4618      	mov	r0, r3
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	3b23      	subs	r3, #35	@ 0x23
 8005270:	fa00 f203 	lsl.w	r2, r0, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	631a      	str	r2, [r3, #48]	@ 0x30
 800527c:	e023      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	3b41      	subs	r3, #65	@ 0x41
 8005290:	221f      	movs	r2, #31
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	43da      	mvns	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	400a      	ands	r2, r1
 800529e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	4618      	mov	r0, r3
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	3b41      	subs	r3, #65	@ 0x41
 80052ba:	fa00 f203 	lsl.w	r2, r0, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052c6:	4b22      	ldr	r3, [pc, #136]	@ (8005350 <HAL_ADC_ConfigChannel+0x234>)
 80052c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a21      	ldr	r2, [pc, #132]	@ (8005354 <HAL_ADC_ConfigChannel+0x238>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d109      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x1cc>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b12      	cmp	r3, #18
 80052da:	d105      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a19      	ldr	r2, [pc, #100]	@ (8005354 <HAL_ADC_ConfigChannel+0x238>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d123      	bne.n	800533a <HAL_ADC_ConfigChannel+0x21e>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d003      	beq.n	8005302 <HAL_ADC_ConfigChannel+0x1e6>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b11      	cmp	r3, #17
 8005300:	d11b      	bne.n	800533a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b10      	cmp	r3, #16
 8005314:	d111      	bne.n	800533a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005316:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <HAL_ADC_ConfigChannel+0x23c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a10      	ldr	r2, [pc, #64]	@ (800535c <HAL_ADC_ConfigChannel+0x240>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	0c9a      	lsrs	r2, r3, #18
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800532c:	e002      	b.n	8005334 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	3b01      	subs	r3, #1
 8005332:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f9      	bne.n	800532e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	40012300 	.word	0x40012300
 8005354:	40012000 	.word	0x40012000
 8005358:	20000004 	.word	0x20000004
 800535c:	431bde83 	.word	0x431bde83

08005360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005368:	4b79      	ldr	r3, [pc, #484]	@ (8005550 <ADC_Init+0x1f0>)
 800536a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	021a      	lsls	r2, r3, #8
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80053b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	4a58      	ldr	r2, [pc, #352]	@ (8005554 <ADC_Init+0x1f4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d022      	beq.n	800543e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6899      	ldr	r1, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6899      	ldr	r1, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	e00f      	b.n	800545e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800544c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800545c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0202 	bic.w	r2, r2, #2
 800546c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6899      	ldr	r1, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	7e1b      	ldrb	r3, [r3, #24]
 8005478:	005a      	lsls	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01b      	beq.n	80054c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800549a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80054aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6859      	ldr	r1, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	3b01      	subs	r3, #1
 80054b8:	035a      	lsls	r2, r3, #13
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
 80054c2:	e007      	b.n	80054d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80054e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	051a      	lsls	r2, r3, #20
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6899      	ldr	r1, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005516:	025a      	lsls	r2, r3, #9
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800552e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6899      	ldr	r1, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	029a      	lsls	r2, r3, #10
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	609a      	str	r2, [r3, #8]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	40012300 	.word	0x40012300
 8005554:	0f000001 	.word	0x0f000001

08005558 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005564:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800556e:	2b00      	cmp	r3, #0
 8005570:	d13c      	bne.n	80055ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d12b      	bne.n	80055e4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005590:	2b00      	cmp	r3, #0
 8005592:	d127      	bne.n	80055e4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d119      	bne.n	80055e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0220 	bic.w	r2, r2, #32
 80055be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d105      	bne.n	80055e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	f043 0201 	orr.w	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fd7b 	bl	80050e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055ea:	e00e      	b.n	800560a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff fd85 	bl	8005108 <HAL_ADC_ErrorCallback>
}
 80055fe:	e004      	b.n	800560a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
}
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fd67 	bl	80050f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2240      	movs	r2, #64	@ 0x40
 8005640:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f043 0204 	orr.w	r2, r3, #4
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7ff fd5a 	bl	8005108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800566c:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <__NVIC_SetPriorityGrouping+0x44>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005678:	4013      	ands	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800568c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800568e:	4a04      	ldr	r2, [pc, #16]	@ (80056a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	60d3      	str	r3, [r2, #12]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	e000ed00 	.word	0xe000ed00

080056a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056a8:	4b04      	ldr	r3, [pc, #16]	@ (80056bc <__NVIC_GetPriorityGrouping+0x18>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	f003 0307 	and.w	r3, r3, #7
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	e000ed00 	.word	0xe000ed00

080056c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	db0b      	blt.n	80056ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	f003 021f 	and.w	r2, r3, #31
 80056d8:	4907      	ldr	r1, [pc, #28]	@ (80056f8 <__NVIC_EnableIRQ+0x38>)
 80056da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	2001      	movs	r0, #1
 80056e2:	fa00 f202 	lsl.w	r2, r0, r2
 80056e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	e000e100 	.word	0xe000e100

080056fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	4603      	mov	r3, r0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570c:	2b00      	cmp	r3, #0
 800570e:	db0a      	blt.n	8005726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	490c      	ldr	r1, [pc, #48]	@ (8005748 <__NVIC_SetPriority+0x4c>)
 8005716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571a:	0112      	lsls	r2, r2, #4
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	440b      	add	r3, r1
 8005720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005724:	e00a      	b.n	800573c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	4908      	ldr	r1, [pc, #32]	@ (800574c <__NVIC_SetPriority+0x50>)
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	3b04      	subs	r3, #4
 8005734:	0112      	lsls	r2, r2, #4
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	440b      	add	r3, r1
 800573a:	761a      	strb	r2, [r3, #24]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	e000e100 	.word	0xe000e100
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	@ 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f1c3 0307 	rsb	r3, r3, #7
 800576a:	2b04      	cmp	r3, #4
 800576c:	bf28      	it	cs
 800576e:	2304      	movcs	r3, #4
 8005770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3304      	adds	r3, #4
 8005776:	2b06      	cmp	r3, #6
 8005778:	d902      	bls.n	8005780 <NVIC_EncodePriority+0x30>
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3b03      	subs	r3, #3
 800577e:	e000      	b.n	8005782 <NVIC_EncodePriority+0x32>
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005784:	f04f 32ff 	mov.w	r2, #4294967295
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43da      	mvns	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	401a      	ands	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005798:	f04f 31ff 	mov.w	r1, #4294967295
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	43d9      	mvns	r1, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a8:	4313      	orrs	r3, r2
         );
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3724      	adds	r7, #36	@ 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057c8:	d301      	bcc.n	80057ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ca:	2301      	movs	r3, #1
 80057cc:	e00f      	b.n	80057ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ce:	4a0a      	ldr	r2, [pc, #40]	@ (80057f8 <SysTick_Config+0x40>)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057d6:	210f      	movs	r1, #15
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	f7ff ff8e 	bl	80056fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057e0:	4b05      	ldr	r3, [pc, #20]	@ (80057f8 <SysTick_Config+0x40>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057e6:	4b04      	ldr	r3, [pc, #16]	@ (80057f8 <SysTick_Config+0x40>)
 80057e8:	2207      	movs	r2, #7
 80057ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	e000e010 	.word	0xe000e010

080057fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff29 	bl	800565c <__NVIC_SetPriorityGrouping>
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	4603      	mov	r3, r0
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005824:	f7ff ff3e 	bl	80056a4 <__NVIC_GetPriorityGrouping>
 8005828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	6978      	ldr	r0, [r7, #20]
 8005830:	f7ff ff8e 	bl	8005750 <NVIC_EncodePriority>
 8005834:	4602      	mov	r2, r0
 8005836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583a:	4611      	mov	r1, r2
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff ff5d 	bl	80056fc <__NVIC_SetPriority>
}
 8005842:	bf00      	nop
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	4603      	mov	r3, r0
 8005852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff ff31 	bl	80056c0 <__NVIC_EnableIRQ>
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b082      	sub	sp, #8
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff ffa2 	bl	80057b8 <SysTick_Config>
 8005874:	4603      	mov	r3, r0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800588c:	f7ff faa4 	bl	8004dd8 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e099      	b.n	80059d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058bc:	e00f      	b.n	80058de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058be:	f7ff fa8b 	bl	8004dd8 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d908      	bls.n	80058de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2203      	movs	r2, #3
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e078      	b.n	80059d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e8      	bne.n	80058be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4b38      	ldr	r3, [pc, #224]	@ (80059d8 <HAL_DMA_Init+0x158>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800590a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	2b04      	cmp	r3, #4
 8005936:	d107      	bne.n	8005948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005940:	4313      	orrs	r3, r2
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0307 	bic.w	r3, r3, #7
 800595e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	2b04      	cmp	r3, #4
 8005970:	d117      	bne.n	80059a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00e      	beq.n	80059a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fb01 	bl	8005f8c <DMA_CheckFifoParam>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2240      	movs	r2, #64	@ 0x40
 8005994:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800599e:	2301      	movs	r3, #1
 80059a0:	e016      	b.n	80059d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fab8 	bl	8005f20 <DMA_CalcBaseAndBitshift>
 80059b0:	4603      	mov	r3, r0
 80059b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b8:	223f      	movs	r2, #63	@ 0x3f
 80059ba:	409a      	lsls	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	f010803f 	.word	0xf010803f

080059dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_DMA_Start_IT+0x26>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e040      	b.n	8005a84 <HAL_DMA_Start_IT+0xa8>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d12f      	bne.n	8005a76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 fa4a 	bl	8005ec4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a34:	223f      	movs	r2, #63	@ 0x3f
 8005a36:	409a      	lsls	r2, r3
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0216 	orr.w	r2, r2, #22
 8005a4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e005      	b.n	8005a82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a9a:	f7ff f99d 	bl	8004dd8 <HAL_GetTick>
 8005a9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d008      	beq.n	8005abe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2280      	movs	r2, #128	@ 0x80
 8005ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e052      	b.n	8005b64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0216 	bic.w	r2, r2, #22
 8005acc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005adc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <HAL_DMA_Abort+0x62>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0208 	bic.w	r2, r2, #8
 8005afc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b0e:	e013      	b.n	8005b38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b10:	f7ff f962 	bl	8004dd8 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	d90c      	bls.n	8005b38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2203      	movs	r2, #3
 8005b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e015      	b.n	8005b64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e4      	bne.n	8005b10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b4a:	223f      	movs	r2, #63	@ 0x3f
 8005b4c:	409a      	lsls	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d004      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2280      	movs	r2, #128	@ 0x80
 8005b84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e00c      	b.n	8005ba4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2205      	movs	r2, #5
 8005b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005bbc:	4b8e      	ldr	r3, [pc, #568]	@ (8005df8 <HAL_DMA_IRQHandler+0x248>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a8e      	ldr	r2, [pc, #568]	@ (8005dfc <HAL_DMA_IRQHandler+0x24c>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	0a9b      	lsrs	r3, r3, #10
 8005bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bda:	2208      	movs	r2, #8
 8005bdc:	409a      	lsls	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4013      	ands	r3, r2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01a      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d013      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0204 	bic.w	r2, r2, #4
 8005c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c08:	2208      	movs	r2, #8
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c14:	f043 0201 	orr.w	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c20:	2201      	movs	r2, #1
 8005c22:	409a      	lsls	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d012      	beq.n	8005c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3e:	2201      	movs	r2, #1
 8005c40:	409a      	lsls	r2, r3
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4a:	f043 0202 	orr.w	r2, r3, #2
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c56:	2204      	movs	r2, #4
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d012      	beq.n	8005c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00b      	beq.n	8005c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c74:	2204      	movs	r2, #4
 8005c76:	409a      	lsls	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c80:	f043 0204 	orr.w	r2, r3, #4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d043      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d03c      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005caa:	2210      	movs	r2, #16
 8005cac:	409a      	lsls	r2, r3
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d018      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d108      	bne.n	8005ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d024      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
 8005cde:	e01f      	b.n	8005d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01b      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4798      	blx	r3
 8005cf0:	e016      	b.n	8005d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d107      	bne.n	8005d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0208 	bic.w	r2, r2, #8
 8005d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d24:	2220      	movs	r2, #32
 8005d26:	409a      	lsls	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 808f 	beq.w	8005e50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8087 	beq.w	8005e50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d46:	2220      	movs	r2, #32
 8005d48:	409a      	lsls	r2, r3
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d136      	bne.n	8005dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0216 	bic.w	r2, r2, #22
 8005d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d103      	bne.n	8005d8a <HAL_DMA_IRQHandler+0x1da>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0208 	bic.w	r2, r2, #8
 8005d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9e:	223f      	movs	r2, #63	@ 0x3f
 8005da0:	409a      	lsls	r2, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d07e      	beq.n	8005ebc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
        }
        return;
 8005dc6:	e079      	b.n	8005ebc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01d      	beq.n	8005e12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10d      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d031      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
 8005df4:	e02c      	b.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
 8005df6:	bf00      	nop
 8005df8:	20000004 	.word	0x20000004
 8005dfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d023      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
 8005e10:	e01e      	b.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10f      	bne.n	8005e40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0210 	bic.w	r2, r2, #16
 8005e2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d032      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d022      	beq.n	8005eaa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2205      	movs	r2, #5
 8005e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d307      	bcc.n	8005e98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f2      	bne.n	8005e7c <HAL_DMA_IRQHandler+0x2cc>
 8005e96:	e000      	b.n	8005e9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
 8005eba:	e000      	b.n	8005ebe <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ebc:	bf00      	nop
    }
  }
}
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ee0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b40      	cmp	r3, #64	@ 0x40
 8005ef0:	d108      	bne.n	8005f04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f02:	e007      	b.n	8005f14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	60da      	str	r2, [r3, #12]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	3b10      	subs	r3, #16
 8005f30:	4a14      	ldr	r2, [pc, #80]	@ (8005f84 <DMA_CalcBaseAndBitshift+0x64>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	091b      	lsrs	r3, r3, #4
 8005f38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f3a:	4a13      	ldr	r2, [pc, #76]	@ (8005f88 <DMA_CalcBaseAndBitshift+0x68>)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d909      	bls.n	8005f62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	1d1a      	adds	r2, r3, #4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f60:	e007      	b.n	8005f72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	aaaaaaab 	.word	0xaaaaaaab
 8005f88:	08011018 	.word	0x08011018

08005f8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d11f      	bne.n	8005fe6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d856      	bhi.n	800605a <DMA_CheckFifoParam+0xce>
 8005fac:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb4 <DMA_CheckFifoParam+0x28>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fd7 	.word	0x08005fd7
 8005fbc:	08005fc5 	.word	0x08005fc5
 8005fc0:	0800605b 	.word	0x0800605b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d046      	beq.n	800605e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fd4:	e043      	b.n	800605e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005fde:	d140      	bne.n	8006062 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fe4:	e03d      	b.n	8006062 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fee:	d121      	bne.n	8006034 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d837      	bhi.n	8006066 <DMA_CheckFifoParam+0xda>
 8005ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ffc <DMA_CheckFifoParam+0x70>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	0800600d 	.word	0x0800600d
 8006000:	08006013 	.word	0x08006013
 8006004:	0800600d 	.word	0x0800600d
 8006008:	08006025 	.word	0x08006025
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
      break;
 8006010:	e030      	b.n	8006074 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d025      	beq.n	800606a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006022:	e022      	b.n	800606a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800602c:	d11f      	bne.n	800606e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006032:	e01c      	b.n	800606e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d903      	bls.n	8006042 <DMA_CheckFifoParam+0xb6>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b03      	cmp	r3, #3
 800603e:	d003      	beq.n	8006048 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006040:	e018      	b.n	8006074 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
      break;
 8006046:	e015      	b.n	8006074 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00e      	beq.n	8006072 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
      break;
 8006058:	e00b      	b.n	8006072 <DMA_CheckFifoParam+0xe6>
      break;
 800605a:	bf00      	nop
 800605c:	e00a      	b.n	8006074 <DMA_CheckFifoParam+0xe8>
      break;
 800605e:	bf00      	nop
 8006060:	e008      	b.n	8006074 <DMA_CheckFifoParam+0xe8>
      break;
 8006062:	bf00      	nop
 8006064:	e006      	b.n	8006074 <DMA_CheckFifoParam+0xe8>
      break;
 8006066:	bf00      	nop
 8006068:	e004      	b.n	8006074 <DMA_CheckFifoParam+0xe8>
      break;
 800606a:	bf00      	nop
 800606c:	e002      	b.n	8006074 <DMA_CheckFifoParam+0xe8>
      break;   
 800606e:	bf00      	nop
 8006070:	e000      	b.n	8006074 <DMA_CheckFifoParam+0xe8>
      break;
 8006072:	bf00      	nop
    }
  } 
  
  return status; 
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop

08006084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006084:	b480      	push	{r7}
 8006086:	b089      	sub	sp, #36	@ 0x24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006096:	2300      	movs	r3, #0
 8006098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	e16b      	b.n	8006378 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060a0:	2201      	movs	r2, #1
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4013      	ands	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	f040 815a 	bne.w	8006372 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d005      	beq.n	80060d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d130      	bne.n	8006138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	2203      	movs	r2, #3
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800610c:	2201      	movs	r2, #1
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	43db      	mvns	r3, r3
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	4013      	ands	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	f003 0201 	and.w	r2, r3, #1
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4313      	orrs	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	2b03      	cmp	r3, #3
 8006142:	d017      	beq.n	8006174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	2203      	movs	r2, #3
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	43db      	mvns	r3, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4313      	orrs	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f003 0303 	and.w	r3, r3, #3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d123      	bne.n	80061c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	08da      	lsrs	r2, r3, #3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3208      	adds	r2, #8
 8006188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	220f      	movs	r2, #15
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	43db      	mvns	r3, r3
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	4013      	ands	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	08da      	lsrs	r2, r3, #3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3208      	adds	r2, #8
 80061c2:	69b9      	ldr	r1, [r7, #24]
 80061c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	2203      	movs	r2, #3
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	43db      	mvns	r3, r3
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	4013      	ands	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 0203 	and.w	r2, r3, #3
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 80b4 	beq.w	8006372 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	4b60      	ldr	r3, [pc, #384]	@ (8006390 <HAL_GPIO_Init+0x30c>)
 8006210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006212:	4a5f      	ldr	r2, [pc, #380]	@ (8006390 <HAL_GPIO_Init+0x30c>)
 8006214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006218:	6453      	str	r3, [r2, #68]	@ 0x44
 800621a:	4b5d      	ldr	r3, [pc, #372]	@ (8006390 <HAL_GPIO_Init+0x30c>)
 800621c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006226:	4a5b      	ldr	r2, [pc, #364]	@ (8006394 <HAL_GPIO_Init+0x310>)
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	089b      	lsrs	r3, r3, #2
 800622c:	3302      	adds	r3, #2
 800622e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	220f      	movs	r2, #15
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4013      	ands	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a52      	ldr	r2, [pc, #328]	@ (8006398 <HAL_GPIO_Init+0x314>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d02b      	beq.n	80062aa <HAL_GPIO_Init+0x226>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a51      	ldr	r2, [pc, #324]	@ (800639c <HAL_GPIO_Init+0x318>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d025      	beq.n	80062a6 <HAL_GPIO_Init+0x222>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a50      	ldr	r2, [pc, #320]	@ (80063a0 <HAL_GPIO_Init+0x31c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01f      	beq.n	80062a2 <HAL_GPIO_Init+0x21e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a4f      	ldr	r2, [pc, #316]	@ (80063a4 <HAL_GPIO_Init+0x320>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d019      	beq.n	800629e <HAL_GPIO_Init+0x21a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a4e      	ldr	r2, [pc, #312]	@ (80063a8 <HAL_GPIO_Init+0x324>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <HAL_GPIO_Init+0x216>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a4d      	ldr	r2, [pc, #308]	@ (80063ac <HAL_GPIO_Init+0x328>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00d      	beq.n	8006296 <HAL_GPIO_Init+0x212>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a4c      	ldr	r2, [pc, #304]	@ (80063b0 <HAL_GPIO_Init+0x32c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d007      	beq.n	8006292 <HAL_GPIO_Init+0x20e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a4b      	ldr	r2, [pc, #300]	@ (80063b4 <HAL_GPIO_Init+0x330>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d101      	bne.n	800628e <HAL_GPIO_Init+0x20a>
 800628a:	2307      	movs	r3, #7
 800628c:	e00e      	b.n	80062ac <HAL_GPIO_Init+0x228>
 800628e:	2308      	movs	r3, #8
 8006290:	e00c      	b.n	80062ac <HAL_GPIO_Init+0x228>
 8006292:	2306      	movs	r3, #6
 8006294:	e00a      	b.n	80062ac <HAL_GPIO_Init+0x228>
 8006296:	2305      	movs	r3, #5
 8006298:	e008      	b.n	80062ac <HAL_GPIO_Init+0x228>
 800629a:	2304      	movs	r3, #4
 800629c:	e006      	b.n	80062ac <HAL_GPIO_Init+0x228>
 800629e:	2303      	movs	r3, #3
 80062a0:	e004      	b.n	80062ac <HAL_GPIO_Init+0x228>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e002      	b.n	80062ac <HAL_GPIO_Init+0x228>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <HAL_GPIO_Init+0x228>
 80062aa:	2300      	movs	r3, #0
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	f002 0203 	and.w	r2, r2, #3
 80062b2:	0092      	lsls	r2, r2, #2
 80062b4:	4093      	lsls	r3, r2
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062bc:	4935      	ldr	r1, [pc, #212]	@ (8006394 <HAL_GPIO_Init+0x310>)
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	3302      	adds	r3, #2
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062ca:	4b3b      	ldr	r3, [pc, #236]	@ (80063b8 <HAL_GPIO_Init+0x334>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	43db      	mvns	r3, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4013      	ands	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062ee:	4a32      	ldr	r2, [pc, #200]	@ (80063b8 <HAL_GPIO_Init+0x334>)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062f4:	4b30      	ldr	r3, [pc, #192]	@ (80063b8 <HAL_GPIO_Init+0x334>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	43db      	mvns	r3, r3
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	4013      	ands	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006318:	4a27      	ldr	r2, [pc, #156]	@ (80063b8 <HAL_GPIO_Init+0x334>)
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800631e:	4b26      	ldr	r3, [pc, #152]	@ (80063b8 <HAL_GPIO_Init+0x334>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	43db      	mvns	r3, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4013      	ands	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006342:	4a1d      	ldr	r2, [pc, #116]	@ (80063b8 <HAL_GPIO_Init+0x334>)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006348:	4b1b      	ldr	r3, [pc, #108]	@ (80063b8 <HAL_GPIO_Init+0x334>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	43db      	mvns	r3, r3
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4013      	ands	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800636c:	4a12      	ldr	r2, [pc, #72]	@ (80063b8 <HAL_GPIO_Init+0x334>)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3301      	adds	r3, #1
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	2b0f      	cmp	r3, #15
 800637c:	f67f ae90 	bls.w	80060a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	3724      	adds	r7, #36	@ 0x24
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40023800 	.word	0x40023800
 8006394:	40013800 	.word	0x40013800
 8006398:	40020000 	.word	0x40020000
 800639c:	40020400 	.word	0x40020400
 80063a0:	40020800 	.word	0x40020800
 80063a4:	40020c00 	.word	0x40020c00
 80063a8:	40021000 	.word	0x40021000
 80063ac:	40021400 	.word	0x40021400
 80063b0:	40021800 	.word	0x40021800
 80063b4:	40021c00 	.word	0x40021c00
 80063b8:	40013c00 	.word	0x40013c00

080063bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	807b      	strh	r3, [r7, #2]
 80063c8:	4613      	mov	r3, r2
 80063ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063cc:	787b      	ldrb	r3, [r7, #1]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063d2:	887a      	ldrh	r2, [r7, #2]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063d8:	e003      	b.n	80063e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063da:	887b      	ldrh	r3, [r7, #2]
 80063dc:	041a      	lsls	r2, r3, #16
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	619a      	str	r2, [r3, #24]
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006400:	887a      	ldrh	r2, [r7, #2]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4013      	ands	r3, r2
 8006406:	041a      	lsls	r2, r3, #16
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	43d9      	mvns	r1, r3
 800640c:	887b      	ldrh	r3, [r7, #2]
 800640e:	400b      	ands	r3, r1
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	619a      	str	r2, [r3, #24]
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e12b      	b.n	800668e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fe f8ee 	bl	800462c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2224      	movs	r2, #36	@ 0x24
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006486:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006488:	f001 fc1e 	bl	8007cc8 <HAL_RCC_GetPCLK1Freq>
 800648c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4a81      	ldr	r2, [pc, #516]	@ (8006698 <HAL_I2C_Init+0x274>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d807      	bhi.n	80064a8 <HAL_I2C_Init+0x84>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4a80      	ldr	r2, [pc, #512]	@ (800669c <HAL_I2C_Init+0x278>)
 800649c:	4293      	cmp	r3, r2
 800649e:	bf94      	ite	ls
 80064a0:	2301      	movls	r3, #1
 80064a2:	2300      	movhi	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	e006      	b.n	80064b6 <HAL_I2C_Init+0x92>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4a7d      	ldr	r2, [pc, #500]	@ (80066a0 <HAL_I2C_Init+0x27c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	bf94      	ite	ls
 80064b0:	2301      	movls	r3, #1
 80064b2:	2300      	movhi	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e0e7      	b.n	800668e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a78      	ldr	r2, [pc, #480]	@ (80066a4 <HAL_I2C_Init+0x280>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	0c9b      	lsrs	r3, r3, #18
 80064c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4a6a      	ldr	r2, [pc, #424]	@ (8006698 <HAL_I2C_Init+0x274>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d802      	bhi.n	80064f8 <HAL_I2C_Init+0xd4>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3301      	adds	r3, #1
 80064f6:	e009      	b.n	800650c <HAL_I2C_Init+0xe8>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80064fe:	fb02 f303 	mul.w	r3, r2, r3
 8006502:	4a69      	ldr	r2, [pc, #420]	@ (80066a8 <HAL_I2C_Init+0x284>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	099b      	lsrs	r3, r3, #6
 800650a:	3301      	adds	r3, #1
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6812      	ldr	r2, [r2, #0]
 8006510:	430b      	orrs	r3, r1
 8006512:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800651e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	495c      	ldr	r1, [pc, #368]	@ (8006698 <HAL_I2C_Init+0x274>)
 8006528:	428b      	cmp	r3, r1
 800652a:	d819      	bhi.n	8006560 <HAL_I2C_Init+0x13c>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	1e59      	subs	r1, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	fbb1 f3f3 	udiv	r3, r1, r3
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006540:	400b      	ands	r3, r1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_I2C_Init+0x138>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	1e59      	subs	r1, r3, #1
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	fbb1 f3f3 	udiv	r3, r1, r3
 8006554:	3301      	adds	r3, #1
 8006556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800655a:	e051      	b.n	8006600 <HAL_I2C_Init+0x1dc>
 800655c:	2304      	movs	r3, #4
 800655e:	e04f      	b.n	8006600 <HAL_I2C_Init+0x1dc>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d111      	bne.n	800658c <HAL_I2C_Init+0x168>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	1e58      	subs	r0, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6859      	ldr	r1, [r3, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	440b      	add	r3, r1
 8006576:	fbb0 f3f3 	udiv	r3, r0, r3
 800657a:	3301      	adds	r3, #1
 800657c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006580:	2b00      	cmp	r3, #0
 8006582:	bf0c      	ite	eq
 8006584:	2301      	moveq	r3, #1
 8006586:	2300      	movne	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	e012      	b.n	80065b2 <HAL_I2C_Init+0x18e>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	1e58      	subs	r0, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6859      	ldr	r1, [r3, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	0099      	lsls	r1, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	fbb0 f3f3 	udiv	r3, r0, r3
 80065a2:	3301      	adds	r3, #1
 80065a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bf0c      	ite	eq
 80065ac:	2301      	moveq	r3, #1
 80065ae:	2300      	movne	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_Init+0x196>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e022      	b.n	8006600 <HAL_I2C_Init+0x1dc>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10e      	bne.n	80065e0 <HAL_I2C_Init+0x1bc>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1e58      	subs	r0, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6859      	ldr	r1, [r3, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	440b      	add	r3, r1
 80065d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80065d4:	3301      	adds	r3, #1
 80065d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065de:	e00f      	b.n	8006600 <HAL_I2C_Init+0x1dc>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1e58      	subs	r0, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6859      	ldr	r1, [r3, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	0099      	lsls	r1, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065f6:	3301      	adds	r3, #1
 80065f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	6809      	ldr	r1, [r1, #0]
 8006604:	4313      	orrs	r3, r2
 8006606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69da      	ldr	r2, [r3, #28]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800662e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6911      	ldr	r1, [r2, #16]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68d2      	ldr	r2, [r2, #12]
 800663a:	4311      	orrs	r1, r2
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	430b      	orrs	r3, r1
 8006642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695a      	ldr	r2, [r3, #20]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	000186a0 	.word	0x000186a0
 800669c:	001e847f 	.word	0x001e847f
 80066a0:	003d08ff 	.word	0x003d08ff
 80066a4:	431bde83 	.word	0x431bde83
 80066a8:	10624dd3 	.word	0x10624dd3

080066ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	607a      	str	r2, [r7, #4]
 80066b6:	461a      	mov	r2, r3
 80066b8:	460b      	mov	r3, r1
 80066ba:	817b      	strh	r3, [r7, #10]
 80066bc:	4613      	mov	r3, r2
 80066be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066c0:	f7fe fb8a 	bl	8004dd8 <HAL_GetTick>
 80066c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	f040 80e0 	bne.w	8006894 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	2319      	movs	r3, #25
 80066da:	2201      	movs	r2, #1
 80066dc:	4970      	ldr	r1, [pc, #448]	@ (80068a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 fc64 	bl	8006fac <I2C_WaitOnFlagUntilTimeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80066ea:	2302      	movs	r3, #2
 80066ec:	e0d3      	b.n	8006896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_I2C_Master_Transmit+0x50>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e0cc      	b.n	8006896 <HAL_I2C_Master_Transmit+0x1ea>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b01      	cmp	r3, #1
 8006710:	d007      	beq.n	8006722 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0201 	orr.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006730:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2221      	movs	r2, #33	@ 0x21
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2210      	movs	r2, #16
 800673e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	893a      	ldrh	r2, [r7, #8]
 8006752:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a50      	ldr	r2, [pc, #320]	@ (80068a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006762:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006764:	8979      	ldrh	r1, [r7, #10]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6a3a      	ldr	r2, [r7, #32]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 face 	bl	8006d0c <I2C_MasterRequestWrite>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e08d      	b.n	8006896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800677a:	2300      	movs	r3, #0
 800677c:	613b      	str	r3, [r7, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	613b      	str	r3, [r7, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006790:	e066      	b.n	8006860 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	6a39      	ldr	r1, [r7, #32]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fd22 	bl	80071e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00d      	beq.n	80067be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d107      	bne.n	80067ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e06b      	b.n	8006896 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c2:	781a      	ldrb	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d11b      	bne.n	8006834 <HAL_I2C_Master_Transmit+0x188>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	d017      	beq.n	8006834 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	6a39      	ldr	r1, [r7, #32]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fd19 	bl	8007270 <I2C_WaitOnBTFFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00d      	beq.n	8006860 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006848:	2b04      	cmp	r3, #4
 800684a:	d107      	bne.n	800685c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800685a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e01a      	b.n	8006896 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006864:	2b00      	cmp	r3, #0
 8006866:	d194      	bne.n	8006792 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	e000      	b.n	8006896 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	00100002 	.word	0x00100002
 80068a4:	ffff0000 	.word	0xffff0000

080068a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	@ 0x30
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	461a      	mov	r2, r3
 80068b4:	460b      	mov	r3, r1
 80068b6:	817b      	strh	r3, [r7, #10]
 80068b8:	4613      	mov	r3, r2
 80068ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068bc:	f7fe fa8c 	bl	8004dd8 <HAL_GetTick>
 80068c0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	f040 8217 	bne.w	8006cfe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	2319      	movs	r3, #25
 80068d6:	2201      	movs	r2, #1
 80068d8:	497c      	ldr	r1, [pc, #496]	@ (8006acc <HAL_I2C_Master_Receive+0x224>)
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 fb66 	bl	8006fac <I2C_WaitOnFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
 80068e8:	e20a      	b.n	8006d00 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_I2C_Master_Receive+0x50>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e203      	b.n	8006d00 <HAL_I2C_Master_Receive+0x458>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b01      	cmp	r3, #1
 800690c:	d007      	beq.n	800691e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0201 	orr.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800692c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2222      	movs	r2, #34	@ 0x22
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2210      	movs	r2, #16
 800693a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	893a      	ldrh	r2, [r7, #8]
 800694e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4a5c      	ldr	r2, [pc, #368]	@ (8006ad0 <HAL_I2C_Master_Receive+0x228>)
 800695e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006960:	8979      	ldrh	r1, [r7, #10]
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fa52 	bl	8006e10 <I2C_MasterRequestRead>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e1c4      	b.n	8006d00 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d113      	bne.n	80069a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800697e:	2300      	movs	r3, #0
 8006980:	623b      	str	r3, [r7, #32]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	623b      	str	r3, [r7, #32]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	623b      	str	r3, [r7, #32]
 8006992:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e198      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d11b      	bne.n	80069e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	61fb      	str	r3, [r7, #28]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	e178      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d11b      	bne.n	8006a26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	e158      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a36:	2300      	movs	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a4c:	e144      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	f200 80f1 	bhi.w	8006c3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d123      	bne.n	8006aa8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fc4b 	bl	8007300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e145      	b.n	8006d00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006aa6:	e117      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d14e      	bne.n	8006b4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4906      	ldr	r1, [pc, #24]	@ (8006ad4 <HAL_I2C_Master_Receive+0x22c>)
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fa76 	bl	8006fac <I2C_WaitOnFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e11a      	b.n	8006d00 <HAL_I2C_Master_Receive+0x458>
 8006aca:	bf00      	nop
 8006acc:	00100002 	.word	0x00100002
 8006ad0:	ffff0000 	.word	0xffff0000
 8006ad4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b4c:	e0c4      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	2200      	movs	r2, #0
 8006b56:	496c      	ldr	r1, [pc, #432]	@ (8006d08 <HAL_I2C_Master_Receive+0x460>)
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fa27 	bl	8006fac <I2C_WaitOnFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e0cb      	b.n	8006d00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4955      	ldr	r1, [pc, #340]	@ (8006d08 <HAL_I2C_Master_Receive+0x460>)
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f9f9 	bl	8006fac <I2C_WaitOnFlagUntilTimeout>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e09d      	b.n	8006d00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c38:	e04e      	b.n	8006cd8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fb5e 	bl	8007300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e058      	b.n	8006d00 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d124      	bne.n	8006cd8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d107      	bne.n	8006ca6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ca4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f47f aeb6 	bne.w	8006a4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e000      	b.n	8006d00 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006cfe:	2302      	movs	r3, #2
  }
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3728      	adds	r7, #40	@ 0x28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	00010004 	.word	0x00010004

08006d0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	607a      	str	r2, [r7, #4]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d006      	beq.n	8006d36 <I2C_MasterRequestWrite+0x2a>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d003      	beq.n	8006d36 <I2C_MasterRequestWrite+0x2a>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d34:	d108      	bne.n	8006d48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e00b      	b.n	8006d60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	2b12      	cmp	r3, #18
 8006d4e:	d107      	bne.n	8006d60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 f91d 	bl	8006fac <I2C_WaitOnFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00d      	beq.n	8006d94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d86:	d103      	bne.n	8006d90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e035      	b.n	8006e00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d9c:	d108      	bne.n	8006db0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006dac:	611a      	str	r2, [r3, #16]
 8006dae:	e01b      	b.n	8006de8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006db0:	897b      	ldrh	r3, [r7, #10]
 8006db2:	11db      	asrs	r3, r3, #7
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f003 0306 	and.w	r3, r3, #6
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f063 030f 	orn	r3, r3, #15
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	490e      	ldr	r1, [pc, #56]	@ (8006e08 <I2C_MasterRequestWrite+0xfc>)
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 f966 	bl	80070a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e010      	b.n	8006e00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dde:	897b      	ldrh	r3, [r7, #10]
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	4907      	ldr	r1, [pc, #28]	@ (8006e0c <I2C_MasterRequestWrite+0x100>)
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f956 	bl	80070a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	00010008 	.word	0x00010008
 8006e0c:	00010002 	.word	0x00010002

08006e10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d006      	beq.n	8006e4a <I2C_MasterRequestRead+0x3a>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d003      	beq.n	8006e4a <I2C_MasterRequestRead+0x3a>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e48:	d108      	bne.n	8006e5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e00b      	b.n	8006e74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e60:	2b11      	cmp	r3, #17
 8006e62:	d107      	bne.n	8006e74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f893 	bl	8006fac <I2C_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00d      	beq.n	8006ea8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e9a:	d103      	bne.n	8006ea4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ea2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e079      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006eb0:	d108      	bne.n	8006ec4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006eb2:	897b      	ldrh	r3, [r7, #10]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	611a      	str	r2, [r3, #16]
 8006ec2:	e05f      	b.n	8006f84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ec4:	897b      	ldrh	r3, [r7, #10]
 8006ec6:	11db      	asrs	r3, r3, #7
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	f003 0306 	and.w	r3, r3, #6
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f063 030f 	orn	r3, r3, #15
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	4930      	ldr	r1, [pc, #192]	@ (8006fa4 <I2C_MasterRequestRead+0x194>)
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f8dc 	bl	80070a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e054      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ef2:	897b      	ldrh	r3, [r7, #10]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	4929      	ldr	r1, [pc, #164]	@ (8006fa8 <I2C_MasterRequestRead+0x198>)
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 f8cc 	bl	80070a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e044      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f12:	2300      	movs	r3, #0
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f831 	bl	8006fac <I2C_WaitOnFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00d      	beq.n	8006f6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f5e:	d103      	bne.n	8006f68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f66:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e017      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f6c:	897b      	ldrh	r3, [r7, #10]
 8006f6e:	11db      	asrs	r3, r3, #7
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f003 0306 	and.w	r3, r3, #6
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	f063 030e 	orn	r3, r3, #14
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4907      	ldr	r1, [pc, #28]	@ (8006fa8 <I2C_MasterRequestRead+0x198>)
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f888 	bl	80070a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e000      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	00010008 	.word	0x00010008
 8006fa8:	00010002 	.word	0x00010002

08006fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fbc:	e048      	b.n	8007050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d044      	beq.n	8007050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc6:	f7fd ff07 	bl	8004dd8 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d302      	bcc.n	8006fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d139      	bne.n	8007050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	0c1b      	lsrs	r3, r3, #16
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d10d      	bne.n	8007002 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	43da      	mvns	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	bf0c      	ite	eq
 8006ff8:	2301      	moveq	r3, #1
 8006ffa:	2300      	movne	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	e00c      	b.n	800701c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	43da      	mvns	r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4013      	ands	r3, r2
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	461a      	mov	r2, r3
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	429a      	cmp	r2, r3
 8007020:	d116      	bne.n	8007050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703c:	f043 0220 	orr.w	r2, r3, #32
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e023      	b.n	8007098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10d      	bne.n	8007076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	43da      	mvns	r2, r3
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	4013      	ands	r3, r2
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	bf0c      	ite	eq
 800706c:	2301      	moveq	r3, #1
 800706e:	2300      	movne	r3, #0
 8007070:	b2db      	uxtb	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	e00c      	b.n	8007090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	43da      	mvns	r2, r3
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4013      	ands	r3, r2
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	bf0c      	ite	eq
 8007088:	2301      	moveq	r3, #1
 800708a:	2300      	movne	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	461a      	mov	r2, r3
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	429a      	cmp	r2, r3
 8007094:	d093      	beq.n	8006fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070ae:	e071      	b.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070be:	d123      	bne.n	8007108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80070d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f4:	f043 0204 	orr.w	r2, r3, #4
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e067      	b.n	80071d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d041      	beq.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007110:	f7fd fe62 	bl	8004dd8 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	429a      	cmp	r2, r3
 800711e:	d302      	bcc.n	8007126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d136      	bne.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	0c1b      	lsrs	r3, r3, #16
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	d10c      	bne.n	800714a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	43da      	mvns	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	4013      	ands	r3, r2
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	bf14      	ite	ne
 8007142:	2301      	movne	r3, #1
 8007144:	2300      	moveq	r3, #0
 8007146:	b2db      	uxtb	r3, r3
 8007148:	e00b      	b.n	8007162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	43da      	mvns	r2, r3
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	4013      	ands	r3, r2
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d016      	beq.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007180:	f043 0220 	orr.w	r2, r3, #32
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e021      	b.n	80071d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	0c1b      	lsrs	r3, r3, #16
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b01      	cmp	r3, #1
 800719c:	d10c      	bne.n	80071b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	43da      	mvns	r2, r3
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	4013      	ands	r3, r2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf14      	ite	ne
 80071b0:	2301      	movne	r3, #1
 80071b2:	2300      	moveq	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	e00b      	b.n	80071d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	43da      	mvns	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	4013      	ands	r3, r2
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	bf14      	ite	ne
 80071ca:	2301      	movne	r3, #1
 80071cc:	2300      	moveq	r3, #0
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f47f af6d 	bne.w	80070b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071ec:	e034      	b.n	8007258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f8e3 	bl	80073ba <I2C_IsAcknowledgeFailed>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e034      	b.n	8007268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d028      	beq.n	8007258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007206:	f7fd fde7 	bl	8004dd8 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	429a      	cmp	r2, r3
 8007214:	d302      	bcc.n	800721c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d11d      	bne.n	8007258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007226:	2b80      	cmp	r3, #128	@ 0x80
 8007228:	d016      	beq.n	8007258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007244:	f043 0220 	orr.w	r2, r3, #32
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e007      	b.n	8007268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007262:	2b80      	cmp	r3, #128	@ 0x80
 8007264:	d1c3      	bne.n	80071ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800727c:	e034      	b.n	80072e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 f89b 	bl	80073ba <I2C_IsAcknowledgeFailed>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e034      	b.n	80072f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007294:	d028      	beq.n	80072e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007296:	f7fd fd9f 	bl	8004dd8 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d302      	bcc.n	80072ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11d      	bne.n	80072e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	f003 0304 	and.w	r3, r3, #4
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d016      	beq.n	80072e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d4:	f043 0220 	orr.w	r2, r3, #32
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e007      	b.n	80072f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d1c3      	bne.n	800727e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800730c:	e049      	b.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b10      	cmp	r3, #16
 800731a:	d119      	bne.n	8007350 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f06f 0210 	mvn.w	r2, #16
 8007324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e030      	b.n	80073b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007350:	f7fd fd42 	bl	8004dd8 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	429a      	cmp	r2, r3
 800735e:	d302      	bcc.n	8007366 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d11d      	bne.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007370:	2b40      	cmp	r3, #64	@ 0x40
 8007372:	d016      	beq.n	80073a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	f043 0220 	orr.w	r2, r3, #32
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e007      	b.n	80073b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ac:	2b40      	cmp	r3, #64	@ 0x40
 80073ae:	d1ae      	bne.n	800730e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d0:	d11b      	bne.n	800740a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	f043 0204 	orr.w	r2, r3, #4
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800741e:	4b06      	ldr	r3, [pc, #24]	@ (8007438 <HAL_PWR_EnableBkUpAccess+0x20>)
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007424:	4b05      	ldr	r3, [pc, #20]	@ (800743c <HAL_PWR_EnableBkUpAccess+0x24>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800742a:	687b      	ldr	r3, [r7, #4]
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	420e0020 	.word	0x420e0020
 800743c:	40007000 	.word	0x40007000

08007440 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8007446:	4b06      	ldr	r3, [pc, #24]	@ (8007460 <HAL_PWR_DisableBkUpAccess+0x20>)
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800744c:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <HAL_PWR_DisableBkUpAccess+0x24>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007452:	687b      	ldr	r3, [r7, #4]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	420e0020 	.word	0x420e0020
 8007464:	40007000 	.word	0x40007000

08007468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e267      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d075      	beq.n	8007572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007486:	4b88      	ldr	r3, [pc, #544]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 030c 	and.w	r3, r3, #12
 800748e:	2b04      	cmp	r3, #4
 8007490:	d00c      	beq.n	80074ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007492:	4b85      	ldr	r3, [pc, #532]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800749a:	2b08      	cmp	r3, #8
 800749c:	d112      	bne.n	80074c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800749e:	4b82      	ldr	r3, [pc, #520]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074aa:	d10b      	bne.n	80074c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074ac:	4b7e      	ldr	r3, [pc, #504]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d05b      	beq.n	8007570 <HAL_RCC_OscConfig+0x108>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d157      	bne.n	8007570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e242      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074cc:	d106      	bne.n	80074dc <HAL_RCC_OscConfig+0x74>
 80074ce:	4b76      	ldr	r3, [pc, #472]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a75      	ldr	r2, [pc, #468]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e01d      	b.n	8007518 <HAL_RCC_OscConfig+0xb0>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074e4:	d10c      	bne.n	8007500 <HAL_RCC_OscConfig+0x98>
 80074e6:	4b70      	ldr	r3, [pc, #448]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a6f      	ldr	r2, [pc, #444]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	4b6d      	ldr	r3, [pc, #436]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a6c      	ldr	r2, [pc, #432]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e00b      	b.n	8007518 <HAL_RCC_OscConfig+0xb0>
 8007500:	4b69      	ldr	r3, [pc, #420]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a68      	ldr	r2, [pc, #416]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	4b66      	ldr	r3, [pc, #408]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a65      	ldr	r2, [pc, #404]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d013      	beq.n	8007548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007520:	f7fd fc5a 	bl	8004dd8 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007528:	f7fd fc56 	bl	8004dd8 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b64      	cmp	r3, #100	@ 0x64
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e207      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753a:	4b5b      	ldr	r3, [pc, #364]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0xc0>
 8007546:	e014      	b.n	8007572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007548:	f7fd fc46 	bl	8004dd8 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007550:	f7fd fc42 	bl	8004dd8 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b64      	cmp	r3, #100	@ 0x64
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e1f3      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007562:	4b51      	ldr	r3, [pc, #324]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f0      	bne.n	8007550 <HAL_RCC_OscConfig+0xe8>
 800756e:	e000      	b.n	8007572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d063      	beq.n	8007646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800757e:	4b4a      	ldr	r3, [pc, #296]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800758a:	4b47      	ldr	r3, [pc, #284]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007592:	2b08      	cmp	r3, #8
 8007594:	d11c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007596:	4b44      	ldr	r3, [pc, #272]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d116      	bne.n	80075d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075a2:	4b41      	ldr	r3, [pc, #260]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_RCC_OscConfig+0x152>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d001      	beq.n	80075ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e1c7      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ba:	4b3b      	ldr	r3, [pc, #236]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4937      	ldr	r1, [pc, #220]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ce:	e03a      	b.n	8007646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d020      	beq.n	800761a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075d8:	4b34      	ldr	r3, [pc, #208]	@ (80076ac <HAL_RCC_OscConfig+0x244>)
 80075da:	2201      	movs	r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075de:	f7fd fbfb 	bl	8004dd8 <HAL_GetTick>
 80075e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e4:	e008      	b.n	80075f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075e6:	f7fd fbf7 	bl	8004dd8 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e1a8      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f8:	4b2b      	ldr	r3, [pc, #172]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f0      	beq.n	80075e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007604:	4b28      	ldr	r3, [pc, #160]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	4925      	ldr	r1, [pc, #148]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007614:	4313      	orrs	r3, r2
 8007616:	600b      	str	r3, [r1, #0]
 8007618:	e015      	b.n	8007646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800761a:	4b24      	ldr	r3, [pc, #144]	@ (80076ac <HAL_RCC_OscConfig+0x244>)
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fd fbda 	bl	8004dd8 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007628:	f7fd fbd6 	bl	8004dd8 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e187      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800763a:	4b1b      	ldr	r3, [pc, #108]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d036      	beq.n	80076c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d016      	beq.n	8007688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800765a:	4b15      	ldr	r3, [pc, #84]	@ (80076b0 <HAL_RCC_OscConfig+0x248>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007660:	f7fd fbba 	bl	8004dd8 <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007668:	f7fd fbb6 	bl	8004dd8 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e167      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767a:	4b0b      	ldr	r3, [pc, #44]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800767c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f0      	beq.n	8007668 <HAL_RCC_OscConfig+0x200>
 8007686:	e01b      	b.n	80076c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007688:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <HAL_RCC_OscConfig+0x248>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800768e:	f7fd fba3 	bl	8004dd8 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007694:	e00e      	b.n	80076b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007696:	f7fd fb9f 	bl	8004dd8 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d907      	bls.n	80076b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e150      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
 80076a8:	40023800 	.word	0x40023800
 80076ac:	42470000 	.word	0x42470000
 80076b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076b4:	4b88      	ldr	r3, [pc, #544]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ea      	bne.n	8007696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8097 	beq.w	80077fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076d2:	4b81      	ldr	r3, [pc, #516]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10f      	bne.n	80076fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	4b7d      	ldr	r3, [pc, #500]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	4a7c      	ldr	r2, [pc, #496]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80076ee:	4b7a      	ldr	r3, [pc, #488]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f6:	60bb      	str	r3, [r7, #8]
 80076f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076fe:	4b77      	ldr	r3, [pc, #476]	@ (80078dc <HAL_RCC_OscConfig+0x474>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007706:	2b00      	cmp	r3, #0
 8007708:	d118      	bne.n	800773c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800770a:	4b74      	ldr	r3, [pc, #464]	@ (80078dc <HAL_RCC_OscConfig+0x474>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a73      	ldr	r2, [pc, #460]	@ (80078dc <HAL_RCC_OscConfig+0x474>)
 8007710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007716:	f7fd fb5f 	bl	8004dd8 <HAL_GetTick>
 800771a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800771c:	e008      	b.n	8007730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800771e:	f7fd fb5b 	bl	8004dd8 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e10c      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007730:	4b6a      	ldr	r3, [pc, #424]	@ (80078dc <HAL_RCC_OscConfig+0x474>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d106      	bne.n	8007752 <HAL_RCC_OscConfig+0x2ea>
 8007744:	4b64      	ldr	r3, [pc, #400]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007748:	4a63      	ldr	r2, [pc, #396]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007750:	e01c      	b.n	800778c <HAL_RCC_OscConfig+0x324>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b05      	cmp	r3, #5
 8007758:	d10c      	bne.n	8007774 <HAL_RCC_OscConfig+0x30c>
 800775a:	4b5f      	ldr	r3, [pc, #380]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800775c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775e:	4a5e      	ldr	r2, [pc, #376]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007760:	f043 0304 	orr.w	r3, r3, #4
 8007764:	6713      	str	r3, [r2, #112]	@ 0x70
 8007766:	4b5c      	ldr	r3, [pc, #368]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800776a:	4a5b      	ldr	r2, [pc, #364]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	6713      	str	r3, [r2, #112]	@ 0x70
 8007772:	e00b      	b.n	800778c <HAL_RCC_OscConfig+0x324>
 8007774:	4b58      	ldr	r3, [pc, #352]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007778:	4a57      	ldr	r2, [pc, #348]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007780:	4b55      	ldr	r3, [pc, #340]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007784:	4a54      	ldr	r2, [pc, #336]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007786:	f023 0304 	bic.w	r3, r3, #4
 800778a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007794:	f7fd fb20 	bl	8004dd8 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800779a:	e00a      	b.n	80077b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800779c:	f7fd fb1c 	bl	8004dd8 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e0cb      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b2:	4b49      	ldr	r3, [pc, #292]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0ee      	beq.n	800779c <HAL_RCC_OscConfig+0x334>
 80077be:	e014      	b.n	80077ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077c0:	f7fd fb0a 	bl	8004dd8 <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077c6:	e00a      	b.n	80077de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c8:	f7fd fb06 	bl	8004dd8 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e0b5      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077de:	4b3e      	ldr	r3, [pc, #248]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1ee      	bne.n	80077c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d105      	bne.n	80077fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077f0:	4b39      	ldr	r3, [pc, #228]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f4:	4a38      	ldr	r2, [pc, #224]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80a1 	beq.w	8007948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007806:	4b34      	ldr	r3, [pc, #208]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b08      	cmp	r3, #8
 8007810:	d05c      	beq.n	80078cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d141      	bne.n	800789e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800781a:	4b31      	ldr	r3, [pc, #196]	@ (80078e0 <HAL_RCC_OscConfig+0x478>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007820:	f7fd fada 	bl	8004dd8 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007828:	f7fd fad6 	bl	8004dd8 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e087      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783a:	4b27      	ldr	r3, [pc, #156]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f0      	bne.n	8007828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69da      	ldr	r2, [r3, #28]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	019b      	lsls	r3, r3, #6
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	3b01      	subs	r3, #1
 8007860:	041b      	lsls	r3, r3, #16
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007868:	061b      	lsls	r3, r3, #24
 800786a:	491b      	ldr	r1, [pc, #108]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800786c:	4313      	orrs	r3, r2
 800786e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007870:	4b1b      	ldr	r3, [pc, #108]	@ (80078e0 <HAL_RCC_OscConfig+0x478>)
 8007872:	2201      	movs	r2, #1
 8007874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007876:	f7fd faaf 	bl	8004dd8 <HAL_GetTick>
 800787a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800787c:	e008      	b.n	8007890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800787e:	f7fd faab 	bl	8004dd8 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d901      	bls.n	8007890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e05c      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007890:	4b11      	ldr	r3, [pc, #68]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0f0      	beq.n	800787e <HAL_RCC_OscConfig+0x416>
 800789c:	e054      	b.n	8007948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800789e:	4b10      	ldr	r3, [pc, #64]	@ (80078e0 <HAL_RCC_OscConfig+0x478>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a4:	f7fd fa98 	bl	8004dd8 <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ac:	f7fd fa94 	bl	8004dd8 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e045      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078be:	4b06      	ldr	r3, [pc, #24]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1f0      	bne.n	80078ac <HAL_RCC_OscConfig+0x444>
 80078ca:	e03d      	b.n	8007948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d107      	bne.n	80078e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e038      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
 80078d8:	40023800 	.word	0x40023800
 80078dc:	40007000 	.word	0x40007000
 80078e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007954 <HAL_RCC_OscConfig+0x4ec>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d028      	beq.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d121      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790a:	429a      	cmp	r2, r3
 800790c:	d11a      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007914:	4013      	ands	r3, r2
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800791a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800791c:	4293      	cmp	r3, r2
 800791e:	d111      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792a:	085b      	lsrs	r3, r3, #1
 800792c:	3b01      	subs	r3, #1
 800792e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007930:	429a      	cmp	r2, r3
 8007932:	d107      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007940:	429a      	cmp	r2, r3
 8007942:	d001      	beq.n	8007948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40023800 	.word	0x40023800

08007958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e0cc      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800796c:	4b68      	ldr	r3, [pc, #416]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d90c      	bls.n	8007994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800797a:	4b65      	ldr	r3, [pc, #404]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007982:	4b63      	ldr	r3, [pc, #396]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d001      	beq.n	8007994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0b8      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d020      	beq.n	80079e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079ac:	4b59      	ldr	r3, [pc, #356]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	4a58      	ldr	r2, [pc, #352]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80079b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079c4:	4b53      	ldr	r3, [pc, #332]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	4a52      	ldr	r2, [pc, #328]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80079ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079d0:	4b50      	ldr	r3, [pc, #320]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	494d      	ldr	r1, [pc, #308]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d044      	beq.n	8007a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d107      	bne.n	8007a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079f6:	4b47      	ldr	r3, [pc, #284]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d119      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e07f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d003      	beq.n	8007a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d107      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a16:	4b3f      	ldr	r3, [pc, #252]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e06f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a26:	4b3b      	ldr	r3, [pc, #236]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e067      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a36:	4b37      	ldr	r3, [pc, #220]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f023 0203 	bic.w	r2, r3, #3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	4934      	ldr	r1, [pc, #208]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a48:	f7fd f9c6 	bl	8004dd8 <HAL_GetTick>
 8007a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a4e:	e00a      	b.n	8007a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a50:	f7fd f9c2 	bl	8004dd8 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e04f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a66:	4b2b      	ldr	r3, [pc, #172]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 020c 	and.w	r2, r3, #12
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d1eb      	bne.n	8007a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a78:	4b25      	ldr	r3, [pc, #148]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d20c      	bcs.n	8007aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a86:	4b22      	ldr	r3, [pc, #136]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8e:	4b20      	ldr	r3, [pc, #128]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e032      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007aac:	4b19      	ldr	r3, [pc, #100]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4916      	ldr	r1, [pc, #88]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aca:	4b12      	ldr	r3, [pc, #72]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	490e      	ldr	r1, [pc, #56]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ade:	f000 f821 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	490a      	ldr	r1, [pc, #40]	@ (8007b18 <HAL_RCC_ClockConfig+0x1c0>)
 8007af0:	5ccb      	ldrb	r3, [r1, r3]
 8007af2:	fa22 f303 	lsr.w	r3, r2, r3
 8007af6:	4a09      	ldr	r2, [pc, #36]	@ (8007b1c <HAL_RCC_ClockConfig+0x1c4>)
 8007af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007afa:	4b09      	ldr	r3, [pc, #36]	@ (8007b20 <HAL_RCC_ClockConfig+0x1c8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fd f926 	bl	8004d50 <HAL_InitTick>

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	40023c00 	.word	0x40023c00
 8007b14:	40023800 	.word	0x40023800
 8007b18:	08011000 	.word	0x08011000
 8007b1c:	20000004 	.word	0x20000004
 8007b20:	20000008 	.word	0x20000008

08007b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b28:	b090      	sub	sp, #64	@ 0x40
 8007b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b30:	2300      	movs	r3, #0
 8007b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b34:	2300      	movs	r3, #0
 8007b36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b3c:	4b59      	ldr	r3, [pc, #356]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 030c 	and.w	r3, r3, #12
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d00d      	beq.n	8007b64 <HAL_RCC_GetSysClockFreq+0x40>
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	f200 80a1 	bhi.w	8007c90 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_RCC_GetSysClockFreq+0x34>
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d003      	beq.n	8007b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8007b56:	e09b      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b58:	4b53      	ldr	r3, [pc, #332]	@ (8007ca8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007b5c:	e09b      	b.n	8007c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b5e:	4b53      	ldr	r3, [pc, #332]	@ (8007cac <HAL_RCC_GetSysClockFreq+0x188>)
 8007b60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b62:	e098      	b.n	8007c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b64:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d028      	beq.n	8007bcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	099b      	lsrs	r3, r3, #6
 8007b80:	2200      	movs	r2, #0
 8007b82:	623b      	str	r3, [r7, #32]
 8007b84:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4b47      	ldr	r3, [pc, #284]	@ (8007cac <HAL_RCC_GetSysClockFreq+0x188>)
 8007b90:	fb03 f201 	mul.w	r2, r3, r1
 8007b94:	2300      	movs	r3, #0
 8007b96:	fb00 f303 	mul.w	r3, r0, r3
 8007b9a:	4413      	add	r3, r2
 8007b9c:	4a43      	ldr	r2, [pc, #268]	@ (8007cac <HAL_RCC_GetSysClockFreq+0x188>)
 8007b9e:	fba0 1202 	umull	r1, r2, r0, r2
 8007ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ba4:	460a      	mov	r2, r1
 8007ba6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007baa:	4413      	add	r3, r2
 8007bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	61bb      	str	r3, [r7, #24]
 8007bb4:	61fa      	str	r2, [r7, #28]
 8007bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007bbe:	f7f9 f863 	bl	8000c88 <__aeabi_uldivmod>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bca:	e053      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bcc:	4b35      	ldr	r3, [pc, #212]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	099b      	lsrs	r3, r3, #6
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	617a      	str	r2, [r7, #20]
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007bde:	f04f 0b00 	mov.w	fp, #0
 8007be2:	4652      	mov	r2, sl
 8007be4:	465b      	mov	r3, fp
 8007be6:	f04f 0000 	mov.w	r0, #0
 8007bea:	f04f 0100 	mov.w	r1, #0
 8007bee:	0159      	lsls	r1, r3, #5
 8007bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bf4:	0150      	lsls	r0, r2, #5
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	ebb2 080a 	subs.w	r8, r2, sl
 8007bfe:	eb63 090b 	sbc.w	r9, r3, fp
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c16:	ebb2 0408 	subs.w	r4, r2, r8
 8007c1a:	eb63 0509 	sbc.w	r5, r3, r9
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	f04f 0300 	mov.w	r3, #0
 8007c26:	00eb      	lsls	r3, r5, #3
 8007c28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c2c:	00e2      	lsls	r2, r4, #3
 8007c2e:	4614      	mov	r4, r2
 8007c30:	461d      	mov	r5, r3
 8007c32:	eb14 030a 	adds.w	r3, r4, sl
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	eb45 030b 	adc.w	r3, r5, fp
 8007c3c:	607b      	str	r3, [r7, #4]
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	028b      	lsls	r3, r1, #10
 8007c4e:	4621      	mov	r1, r4
 8007c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c54:	4621      	mov	r1, r4
 8007c56:	028a      	lsls	r2, r1, #10
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5e:	2200      	movs	r2, #0
 8007c60:	60bb      	str	r3, [r7, #8]
 8007c62:	60fa      	str	r2, [r7, #12]
 8007c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c68:	f7f9 f80e 	bl	8000c88 <__aeabi_uldivmod>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4613      	mov	r3, r2
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c74:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	3301      	adds	r3, #1
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8007c84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c8e:	e002      	b.n	8007c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c90:	4b05      	ldr	r3, [pc, #20]	@ (8007ca8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3740      	adds	r7, #64	@ 0x40
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	00f42400 	.word	0x00f42400
 8007cac:	017d7840 	.word	0x017d7840

08007cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cb4:	4b03      	ldr	r3, [pc, #12]	@ (8007cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000004 	.word	0x20000004

08007cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ccc:	f7ff fff0 	bl	8007cb0 <HAL_RCC_GetHCLKFreq>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	4b05      	ldr	r3, [pc, #20]	@ (8007ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	0a9b      	lsrs	r3, r3, #10
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	4903      	ldr	r1, [pc, #12]	@ (8007cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cde:	5ccb      	ldrb	r3, [r1, r3]
 8007ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	08011010 	.word	0x08011010

08007cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007cf4:	f7ff ffdc 	bl	8007cb0 <HAL_RCC_GetHCLKFreq>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4b05      	ldr	r3, [pc, #20]	@ (8007d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	0b5b      	lsrs	r3, r3, #13
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	4903      	ldr	r1, [pc, #12]	@ (8007d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d06:	5ccb      	ldrb	r3, [r1, r3]
 8007d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	40023800 	.word	0x40023800
 8007d14:	08011010 	.word	0x08011010

08007d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e041      	b.n	8007dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fc fcbc 	bl	80046bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f000 fff0 	bl	8008d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d001      	beq.n	8007dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e046      	b.n	8007e5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a23      	ldr	r2, [pc, #140]	@ (8007e6c <HAL_TIM_Base_Start+0xb4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d022      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dea:	d01d      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e70 <HAL_TIM_Base_Start+0xb8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d018      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8007e74 <HAL_TIM_Base_Start+0xbc>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d013      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a1c      	ldr	r2, [pc, #112]	@ (8007e78 <HAL_TIM_Base_Start+0xc0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00e      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8007e7c <HAL_TIM_Base_Start+0xc4>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d009      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a19      	ldr	r2, [pc, #100]	@ (8007e80 <HAL_TIM_Base_Start+0xc8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d004      	beq.n	8007e28 <HAL_TIM_Base_Start+0x70>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a18      	ldr	r2, [pc, #96]	@ (8007e84 <HAL_TIM_Base_Start+0xcc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d111      	bne.n	8007e4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b06      	cmp	r3, #6
 8007e38:	d010      	beq.n	8007e5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0201 	orr.w	r2, r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e4a:	e007      	b.n	8007e5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	40010000 	.word	0x40010000
 8007e70:	40000400 	.word	0x40000400
 8007e74:	40000800 	.word	0x40000800
 8007e78:	40000c00 	.word	0x40000c00
 8007e7c:	40010400 	.word	0x40010400
 8007e80:	40014000 	.word	0x40014000
 8007e84:	40001800 	.word	0x40001800

08007e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e041      	b.n	8007f1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f839 	bl	8007f26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	f000 ff38 	bl	8008d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <HAL_TIM_PWM_Start+0x24>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	bf14      	ite	ne
 8007f58:	2301      	movne	r3, #1
 8007f5a:	2300      	moveq	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	e022      	b.n	8007fa6 <HAL_TIM_PWM_Start+0x6a>
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d109      	bne.n	8007f7a <HAL_TIM_PWM_Start+0x3e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	bf14      	ite	ne
 8007f72:	2301      	movne	r3, #1
 8007f74:	2300      	moveq	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	e015      	b.n	8007fa6 <HAL_TIM_PWM_Start+0x6a>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d109      	bne.n	8007f94 <HAL_TIM_PWM_Start+0x58>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	bf14      	ite	ne
 8007f8c:	2301      	movne	r3, #1
 8007f8e:	2300      	moveq	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	e008      	b.n	8007fa6 <HAL_TIM_PWM_Start+0x6a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	bf14      	ite	ne
 8007fa0:	2301      	movne	r3, #1
 8007fa2:	2300      	moveq	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e07c      	b.n	80080a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <HAL_TIM_PWM_Start+0x82>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fbc:	e013      	b.n	8007fe6 <HAL_TIM_PWM_Start+0xaa>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d104      	bne.n	8007fce <HAL_TIM_PWM_Start+0x92>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fcc:	e00b      	b.n	8007fe6 <HAL_TIM_PWM_Start+0xaa>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d104      	bne.n	8007fde <HAL_TIM_PWM_Start+0xa2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fdc:	e003      	b.n	8007fe6 <HAL_TIM_PWM_Start+0xaa>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2201      	movs	r2, #1
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 fac4 	bl	800957c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80080b0 <HAL_TIM_PWM_Start+0x174>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d004      	beq.n	8008008 <HAL_TIM_PWM_Start+0xcc>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a2c      	ldr	r2, [pc, #176]	@ (80080b4 <HAL_TIM_PWM_Start+0x178>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d101      	bne.n	800800c <HAL_TIM_PWM_Start+0xd0>
 8008008:	2301      	movs	r3, #1
 800800a:	e000      	b.n	800800e <HAL_TIM_PWM_Start+0xd2>
 800800c:	2300      	movs	r3, #0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008020:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a22      	ldr	r2, [pc, #136]	@ (80080b0 <HAL_TIM_PWM_Start+0x174>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d022      	beq.n	8008072 <HAL_TIM_PWM_Start+0x136>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008034:	d01d      	beq.n	8008072 <HAL_TIM_PWM_Start+0x136>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a1f      	ldr	r2, [pc, #124]	@ (80080b8 <HAL_TIM_PWM_Start+0x17c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <HAL_TIM_PWM_Start+0x136>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1d      	ldr	r2, [pc, #116]	@ (80080bc <HAL_TIM_PWM_Start+0x180>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_TIM_PWM_Start+0x136>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1c      	ldr	r2, [pc, #112]	@ (80080c0 <HAL_TIM_PWM_Start+0x184>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_TIM_PWM_Start+0x136>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a16      	ldr	r2, [pc, #88]	@ (80080b4 <HAL_TIM_PWM_Start+0x178>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_TIM_PWM_Start+0x136>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a18      	ldr	r2, [pc, #96]	@ (80080c4 <HAL_TIM_PWM_Start+0x188>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_TIM_PWM_Start+0x136>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a16      	ldr	r2, [pc, #88]	@ (80080c8 <HAL_TIM_PWM_Start+0x18c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d111      	bne.n	8008096 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b06      	cmp	r3, #6
 8008082:	d010      	beq.n	80080a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0201 	orr.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008094:	e007      	b.n	80080a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0201 	orr.w	r2, r2, #1
 80080a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	40010000 	.word	0x40010000
 80080b4:	40010400 	.word	0x40010400
 80080b8:	40000400 	.word	0x40000400
 80080bc:	40000800 	.word	0x40000800
 80080c0:	40000c00 	.word	0x40000c00
 80080c4:	40014000 	.word	0x40014000
 80080c8:	40001800 	.word	0x40001800

080080cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e041      	b.n	8008162 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f839 	bl	800816a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3304      	adds	r3, #4
 8008108:	4619      	mov	r1, r3
 800810a:	4610      	mov	r0, r2
 800810c:	f000 fe16 	bl	8008d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
	...

08008180 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <HAL_TIM_IC_Start_IT+0x1e>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800819a:	b2db      	uxtb	r3, r3
 800819c:	e013      	b.n	80081c6 <HAL_TIM_IC_Start_IT+0x46>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d104      	bne.n	80081ae <HAL_TIM_IC_Start_IT+0x2e>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	e00b      	b.n	80081c6 <HAL_TIM_IC_Start_IT+0x46>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d104      	bne.n	80081be <HAL_TIM_IC_Start_IT+0x3e>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	e003      	b.n	80081c6 <HAL_TIM_IC_Start_IT+0x46>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d104      	bne.n	80081d8 <HAL_TIM_IC_Start_IT+0x58>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	e013      	b.n	8008200 <HAL_TIM_IC_Start_IT+0x80>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b04      	cmp	r3, #4
 80081dc:	d104      	bne.n	80081e8 <HAL_TIM_IC_Start_IT+0x68>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	e00b      	b.n	8008200 <HAL_TIM_IC_Start_IT+0x80>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b08      	cmp	r3, #8
 80081ec:	d104      	bne.n	80081f8 <HAL_TIM_IC_Start_IT+0x78>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	e003      	b.n	8008200 <HAL_TIM_IC_Start_IT+0x80>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d102      	bne.n	800820e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008208:	7b7b      	ldrb	r3, [r7, #13]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d001      	beq.n	8008212 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e0cc      	b.n	80083ac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <HAL_TIM_IC_Start_IT+0xa2>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008220:	e013      	b.n	800824a <HAL_TIM_IC_Start_IT+0xca>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b04      	cmp	r3, #4
 8008226:	d104      	bne.n	8008232 <HAL_TIM_IC_Start_IT+0xb2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008230:	e00b      	b.n	800824a <HAL_TIM_IC_Start_IT+0xca>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b08      	cmp	r3, #8
 8008236:	d104      	bne.n	8008242 <HAL_TIM_IC_Start_IT+0xc2>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008240:	e003      	b.n	800824a <HAL_TIM_IC_Start_IT+0xca>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2202      	movs	r2, #2
 8008246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <HAL_TIM_IC_Start_IT+0xda>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008258:	e013      	b.n	8008282 <HAL_TIM_IC_Start_IT+0x102>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b04      	cmp	r3, #4
 800825e:	d104      	bne.n	800826a <HAL_TIM_IC_Start_IT+0xea>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008268:	e00b      	b.n	8008282 <HAL_TIM_IC_Start_IT+0x102>
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2b08      	cmp	r3, #8
 800826e:	d104      	bne.n	800827a <HAL_TIM_IC_Start_IT+0xfa>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2202      	movs	r2, #2
 8008274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008278:	e003      	b.n	8008282 <HAL_TIM_IC_Start_IT+0x102>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2202      	movs	r2, #2
 800827e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b0c      	cmp	r3, #12
 8008286:	d841      	bhi.n	800830c <HAL_TIM_IC_Start_IT+0x18c>
 8008288:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <HAL_TIM_IC_Start_IT+0x110>)
 800828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828e:	bf00      	nop
 8008290:	080082c5 	.word	0x080082c5
 8008294:	0800830d 	.word	0x0800830d
 8008298:	0800830d 	.word	0x0800830d
 800829c:	0800830d 	.word	0x0800830d
 80082a0:	080082d7 	.word	0x080082d7
 80082a4:	0800830d 	.word	0x0800830d
 80082a8:	0800830d 	.word	0x0800830d
 80082ac:	0800830d 	.word	0x0800830d
 80082b0:	080082e9 	.word	0x080082e9
 80082b4:	0800830d 	.word	0x0800830d
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	0800830d 	.word	0x0800830d
 80082c0:	080082fb 	.word	0x080082fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0202 	orr.w	r2, r2, #2
 80082d2:	60da      	str	r2, [r3, #12]
      break;
 80082d4:	e01d      	b.n	8008312 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68da      	ldr	r2, [r3, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0204 	orr.w	r2, r2, #4
 80082e4:	60da      	str	r2, [r3, #12]
      break;
 80082e6:	e014      	b.n	8008312 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0208 	orr.w	r2, r2, #8
 80082f6:	60da      	str	r2, [r3, #12]
      break;
 80082f8:	e00b      	b.n	8008312 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f042 0210 	orr.w	r2, r2, #16
 8008308:	60da      	str	r2, [r3, #12]
      break;
 800830a:	e002      	b.n	8008312 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
      break;
 8008310:	bf00      	nop
  }

  if (status == HAL_OK)
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d148      	bne.n	80083aa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2201      	movs	r2, #1
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f001 f92b 	bl	800957c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a22      	ldr	r2, [pc, #136]	@ (80083b4 <HAL_TIM_IC_Start_IT+0x234>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d022      	beq.n	8008376 <HAL_TIM_IC_Start_IT+0x1f6>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008338:	d01d      	beq.n	8008376 <HAL_TIM_IC_Start_IT+0x1f6>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a1e      	ldr	r2, [pc, #120]	@ (80083b8 <HAL_TIM_IC_Start_IT+0x238>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d018      	beq.n	8008376 <HAL_TIM_IC_Start_IT+0x1f6>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1c      	ldr	r2, [pc, #112]	@ (80083bc <HAL_TIM_IC_Start_IT+0x23c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d013      	beq.n	8008376 <HAL_TIM_IC_Start_IT+0x1f6>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1b      	ldr	r2, [pc, #108]	@ (80083c0 <HAL_TIM_IC_Start_IT+0x240>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00e      	beq.n	8008376 <HAL_TIM_IC_Start_IT+0x1f6>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a19      	ldr	r2, [pc, #100]	@ (80083c4 <HAL_TIM_IC_Start_IT+0x244>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d009      	beq.n	8008376 <HAL_TIM_IC_Start_IT+0x1f6>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a18      	ldr	r2, [pc, #96]	@ (80083c8 <HAL_TIM_IC_Start_IT+0x248>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d004      	beq.n	8008376 <HAL_TIM_IC_Start_IT+0x1f6>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a16      	ldr	r2, [pc, #88]	@ (80083cc <HAL_TIM_IC_Start_IT+0x24c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d111      	bne.n	800839a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f003 0307 	and.w	r3, r3, #7
 8008380:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b06      	cmp	r3, #6
 8008386:	d010      	beq.n	80083aa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 0201 	orr.w	r2, r2, #1
 8008396:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008398:	e007      	b.n	80083aa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0201 	orr.w	r2, r2, #1
 80083a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	40010000 	.word	0x40010000
 80083b8:	40000400 	.word	0x40000400
 80083bc:	40000800 	.word	0x40000800
 80083c0:	40000c00 	.word	0x40000c00
 80083c4:	40010400 	.word	0x40010400
 80083c8:	40014000 	.word	0x40014000
 80083cc:	40001800 	.word	0x40001800

080083d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e097      	b.n	8008514 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d106      	bne.n	80083fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7fc fa11 	bl	8004820 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2202      	movs	r2, #2
 8008402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008414:	f023 0307 	bic.w	r3, r3, #7
 8008418:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3304      	adds	r3, #4
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f000 fc89 	bl	8008d3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	4313      	orrs	r3, r2
 800844a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	4313      	orrs	r3, r2
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4313      	orrs	r3, r2
 8008468:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008470:	f023 030c 	bic.w	r3, r3, #12
 8008474:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800847c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008480:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	4313      	orrs	r3, r2
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	011a      	lsls	r2, r3, #4
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	031b      	lsls	r3, r3, #12
 80084a0:	4313      	orrs	r3, r2
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80084ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80084b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	4313      	orrs	r3, r2
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800852c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008534:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800853c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008544:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d110      	bne.n	800856e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d102      	bne.n	8008558 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008552:	7b7b      	ldrb	r3, [r7, #13]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d001      	beq.n	800855c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e069      	b.n	8008630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800856c:	e031      	b.n	80085d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b04      	cmp	r3, #4
 8008572:	d110      	bne.n	8008596 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d102      	bne.n	8008580 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800857a:	7b3b      	ldrb	r3, [r7, #12]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d001      	beq.n	8008584 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e055      	b.n	8008630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008594:	e01d      	b.n	80085d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d108      	bne.n	80085ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d105      	bne.n	80085ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085a2:	7b7b      	ldrb	r3, [r7, #13]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d102      	bne.n	80085ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085a8:	7b3b      	ldrb	r3, [r7, #12]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d001      	beq.n	80085b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e03e      	b.n	8008630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2202      	movs	r2, #2
 80085b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2202      	movs	r2, #2
 80085ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_TIM_Encoder_Start+0xc4>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d008      	beq.n	80085f0 <HAL_TIM_Encoder_Start+0xd4>
 80085de:	e00f      	b.n	8008600 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2201      	movs	r2, #1
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 ffc7 	bl	800957c <TIM_CCxChannelCmd>
      break;
 80085ee:	e016      	b.n	800861e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2201      	movs	r2, #1
 80085f6:	2104      	movs	r1, #4
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 ffbf 	bl	800957c <TIM_CCxChannelCmd>
      break;
 80085fe:	e00e      	b.n	800861e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2201      	movs	r2, #1
 8008606:	2100      	movs	r1, #0
 8008608:	4618      	mov	r0, r3
 800860a:	f000 ffb7 	bl	800957c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2201      	movs	r2, #1
 8008614:	2104      	movs	r1, #4
 8008616:	4618      	mov	r0, r3
 8008618:	f000 ffb0 	bl	800957c <TIM_CCxChannelCmd>
      break;
 800861c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f042 0201 	orr.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d020      	beq.n	800869c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01b      	beq.n	800869c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f06f 0202 	mvn.w	r2, #2
 800866c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7f8 fc94 	bl	8000fb0 <HAL_TIM_IC_CaptureCallback>
 8008688:	e005      	b.n	8008696 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb38 	bl	8008d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fb3f 	bl	8008d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d020      	beq.n	80086e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01b      	beq.n	80086e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f06f 0204 	mvn.w	r2, #4
 80086b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2202      	movs	r2, #2
 80086be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7f8 fc6e 	bl	8000fb0 <HAL_TIM_IC_CaptureCallback>
 80086d4:	e005      	b.n	80086e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fb12 	bl	8008d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fb19 	bl	8008d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f003 0308 	and.w	r3, r3, #8
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d020      	beq.n	8008734 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01b      	beq.n	8008734 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f06f 0208 	mvn.w	r2, #8
 8008704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2204      	movs	r2, #4
 800870a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	f003 0303 	and.w	r3, r3, #3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7f8 fc48 	bl	8000fb0 <HAL_TIM_IC_CaptureCallback>
 8008720:	e005      	b.n	800872e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 faec 	bl	8008d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 faf3 	bl	8008d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f003 0310 	and.w	r3, r3, #16
 800873a:	2b00      	cmp	r3, #0
 800873c:	d020      	beq.n	8008780 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f003 0310 	and.w	r3, r3, #16
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01b      	beq.n	8008780 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0210 	mvn.w	r2, #16
 8008750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2208      	movs	r2, #8
 8008756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7f8 fc22 	bl	8000fb0 <HAL_TIM_IC_CaptureCallback>
 800876c:	e005      	b.n	800877a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fac6 	bl	8008d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 facd 	bl	8008d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00c      	beq.n	80087a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d007      	beq.n	80087a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f06f 0201 	mvn.w	r2, #1
 800879c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 faa4 	bl	8008cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00c      	beq.n	80087c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80087c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 ffd8 	bl	8009778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00c      	beq.n	80087ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d007      	beq.n	80087ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80087e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa9e 	bl	8008d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00c      	beq.n	8008810 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f003 0320 	and.w	r3, r3, #32
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f06f 0220 	mvn.w	r2, #32
 8008808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 ffaa 	bl	8009764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008810:	bf00      	nop
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008832:	2302      	movs	r3, #2
 8008834:	e088      	b.n	8008948 <HAL_TIM_IC_ConfigChannel+0x130>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d11b      	bne.n	800887c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008854:	f000 fcce 	bl	80091f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699a      	ldr	r2, [r3, #24]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 020c 	bic.w	r2, r2, #12
 8008866:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6999      	ldr	r1, [r3, #24]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	689a      	ldr	r2, [r3, #8]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	619a      	str	r2, [r3, #24]
 800887a:	e060      	b.n	800893e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b04      	cmp	r3, #4
 8008880:	d11c      	bne.n	80088bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008892:	f000 fd52 	bl	800933a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	699a      	ldr	r2, [r3, #24]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80088a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6999      	ldr	r1, [r3, #24]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	021a      	lsls	r2, r3, #8
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	619a      	str	r2, [r3, #24]
 80088ba:	e040      	b.n	800893e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d11b      	bne.n	80088fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80088d2:	f000 fd9f 	bl	8009414 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69da      	ldr	r2, [r3, #28]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 020c 	bic.w	r2, r2, #12
 80088e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69d9      	ldr	r1, [r3, #28]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	61da      	str	r2, [r3, #28]
 80088f8:	e021      	b.n	800893e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b0c      	cmp	r3, #12
 80088fe:	d11c      	bne.n	800893a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008910:	f000 fdbc 	bl	800948c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69da      	ldr	r2, [r3, #28]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008922:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	69d9      	ldr	r1, [r3, #28]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	021a      	lsls	r2, r3, #8
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	61da      	str	r2, [r3, #28]
 8008938:	e001      	b.n	800893e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008946:	7dfb      	ldrb	r3, [r7, #23]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800896a:	2302      	movs	r3, #2
 800896c:	e0ae      	b.n	8008acc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b0c      	cmp	r3, #12
 800897a:	f200 809f 	bhi.w	8008abc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800897e:	a201      	add	r2, pc, #4	@ (adr r2, 8008984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089b9 	.word	0x080089b9
 8008988:	08008abd 	.word	0x08008abd
 800898c:	08008abd 	.word	0x08008abd
 8008990:	08008abd 	.word	0x08008abd
 8008994:	080089f9 	.word	0x080089f9
 8008998:	08008abd 	.word	0x08008abd
 800899c:	08008abd 	.word	0x08008abd
 80089a0:	08008abd 	.word	0x08008abd
 80089a4:	08008a3b 	.word	0x08008a3b
 80089a8:	08008abd 	.word	0x08008abd
 80089ac:	08008abd 	.word	0x08008abd
 80089b0:	08008abd 	.word	0x08008abd
 80089b4:	08008a7b 	.word	0x08008a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fa68 	bl	8008e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0208 	orr.w	r2, r2, #8
 80089d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0204 	bic.w	r2, r2, #4
 80089e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6999      	ldr	r1, [r3, #24]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	691a      	ldr	r2, [r3, #16]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	619a      	str	r2, [r3, #24]
      break;
 80089f6:	e064      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fab8 	bl	8008f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	699a      	ldr	r2, [r3, #24]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6999      	ldr	r1, [r3, #24]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	021a      	lsls	r2, r3, #8
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	619a      	str	r2, [r3, #24]
      break;
 8008a38:	e043      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 fb0d 	bl	8009060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0208 	orr.w	r2, r2, #8
 8008a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69da      	ldr	r2, [r3, #28]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0204 	bic.w	r2, r2, #4
 8008a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69d9      	ldr	r1, [r3, #28]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	691a      	ldr	r2, [r3, #16]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	61da      	str	r2, [r3, #28]
      break;
 8008a78:	e023      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fb61 	bl	8009148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69da      	ldr	r2, [r3, #28]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	69da      	ldr	r2, [r3, #28]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69d9      	ldr	r1, [r3, #28]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	021a      	lsls	r2, r3, #8
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	61da      	str	r2, [r3, #28]
      break;
 8008aba:	e002      	b.n	8008ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d101      	bne.n	8008af0 <HAL_TIM_ConfigClockSource+0x1c>
 8008aec:	2302      	movs	r3, #2
 8008aee:	e0b4      	b.n	8008c5a <HAL_TIM_ConfigClockSource+0x186>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b28:	d03e      	beq.n	8008ba8 <HAL_TIM_ConfigClockSource+0xd4>
 8008b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b2e:	f200 8087 	bhi.w	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b36:	f000 8086 	beq.w	8008c46 <HAL_TIM_ConfigClockSource+0x172>
 8008b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b3e:	d87f      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b40:	2b70      	cmp	r3, #112	@ 0x70
 8008b42:	d01a      	beq.n	8008b7a <HAL_TIM_ConfigClockSource+0xa6>
 8008b44:	2b70      	cmp	r3, #112	@ 0x70
 8008b46:	d87b      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b48:	2b60      	cmp	r3, #96	@ 0x60
 8008b4a:	d050      	beq.n	8008bee <HAL_TIM_ConfigClockSource+0x11a>
 8008b4c:	2b60      	cmp	r3, #96	@ 0x60
 8008b4e:	d877      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b50:	2b50      	cmp	r3, #80	@ 0x50
 8008b52:	d03c      	beq.n	8008bce <HAL_TIM_ConfigClockSource+0xfa>
 8008b54:	2b50      	cmp	r3, #80	@ 0x50
 8008b56:	d873      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b58:	2b40      	cmp	r3, #64	@ 0x40
 8008b5a:	d058      	beq.n	8008c0e <HAL_TIM_ConfigClockSource+0x13a>
 8008b5c:	2b40      	cmp	r3, #64	@ 0x40
 8008b5e:	d86f      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b60:	2b30      	cmp	r3, #48	@ 0x30
 8008b62:	d064      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b64:	2b30      	cmp	r3, #48	@ 0x30
 8008b66:	d86b      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d060      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d867      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d05c      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b74:	2b10      	cmp	r3, #16
 8008b76:	d05a      	beq.n	8008c2e <HAL_TIM_ConfigClockSource+0x15a>
 8008b78:	e062      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b8a:	f000 fcd7 	bl	800953c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	609a      	str	r2, [r3, #8]
      break;
 8008ba6:	e04f      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bb8:	f000 fcc0 	bl	800953c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bca:	609a      	str	r2, [r3, #8]
      break;
 8008bcc:	e03c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f000 fb7e 	bl	80092dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2150      	movs	r1, #80	@ 0x50
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fc8d 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008bec:	e02c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f000 fbda 	bl	80093b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2160      	movs	r1, #96	@ 0x60
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fc7d 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008c0c:	e01c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f000 fb5e 	bl	80092dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2140      	movs	r1, #64	@ 0x40
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fc6d 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008c2c:	e00c      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4619      	mov	r1, r3
 8008c38:	4610      	mov	r0, r2
 8008c3a:	f000 fc64 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008c3e:	e003      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
      break;
 8008c44:	e000      	b.n	8008c48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
	...

08008c64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b0c      	cmp	r3, #12
 8008c76:	d831      	bhi.n	8008cdc <HAL_TIM_ReadCapturedValue+0x78>
 8008c78:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7e:	bf00      	nop
 8008c80:	08008cb5 	.word	0x08008cb5
 8008c84:	08008cdd 	.word	0x08008cdd
 8008c88:	08008cdd 	.word	0x08008cdd
 8008c8c:	08008cdd 	.word	0x08008cdd
 8008c90:	08008cbf 	.word	0x08008cbf
 8008c94:	08008cdd 	.word	0x08008cdd
 8008c98:	08008cdd 	.word	0x08008cdd
 8008c9c:	08008cdd 	.word	0x08008cdd
 8008ca0:	08008cc9 	.word	0x08008cc9
 8008ca4:	08008cdd 	.word	0x08008cdd
 8008ca8:	08008cdd 	.word	0x08008cdd
 8008cac:	08008cdd 	.word	0x08008cdd
 8008cb0:	08008cd3 	.word	0x08008cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cba:	60fb      	str	r3, [r7, #12]

      break;
 8008cbc:	e00f      	b.n	8008cde <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc4:	60fb      	str	r3, [r7, #12]

      break;
 8008cc6:	e00a      	b.n	8008cde <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cce:	60fb      	str	r3, [r7, #12]

      break;
 8008cd0:	e005      	b.n	8008cde <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd8:	60fb      	str	r3, [r7, #12]

      break;
 8008cda:	e000      	b.n	8008cde <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008cdc:	bf00      	nop
  }

  return tmpreg;
 8008cde:	68fb      	ldr	r3, [r7, #12]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a46      	ldr	r2, [pc, #280]	@ (8008e68 <TIM_Base_SetConfig+0x12c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d013      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d5a:	d00f      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a43      	ldr	r2, [pc, #268]	@ (8008e6c <TIM_Base_SetConfig+0x130>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00b      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a42      	ldr	r2, [pc, #264]	@ (8008e70 <TIM_Base_SetConfig+0x134>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d007      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a41      	ldr	r2, [pc, #260]	@ (8008e74 <TIM_Base_SetConfig+0x138>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d003      	beq.n	8008d7c <TIM_Base_SetConfig+0x40>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a40      	ldr	r2, [pc, #256]	@ (8008e78 <TIM_Base_SetConfig+0x13c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d108      	bne.n	8008d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a35      	ldr	r2, [pc, #212]	@ (8008e68 <TIM_Base_SetConfig+0x12c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d02b      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d9c:	d027      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a32      	ldr	r2, [pc, #200]	@ (8008e6c <TIM_Base_SetConfig+0x130>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d023      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a31      	ldr	r2, [pc, #196]	@ (8008e70 <TIM_Base_SetConfig+0x134>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d01f      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a30      	ldr	r2, [pc, #192]	@ (8008e74 <TIM_Base_SetConfig+0x138>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d01b      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a2f      	ldr	r2, [pc, #188]	@ (8008e78 <TIM_Base_SetConfig+0x13c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d017      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8008e7c <TIM_Base_SetConfig+0x140>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d013      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8008e80 <TIM_Base_SetConfig+0x144>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00f      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8008e84 <TIM_Base_SetConfig+0x148>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d00b      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8008e88 <TIM_Base_SetConfig+0x14c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d007      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2a      	ldr	r2, [pc, #168]	@ (8008e8c <TIM_Base_SetConfig+0x150>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d003      	beq.n	8008dee <TIM_Base_SetConfig+0xb2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a29      	ldr	r2, [pc, #164]	@ (8008e90 <TIM_Base_SetConfig+0x154>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d108      	bne.n	8008e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a10      	ldr	r2, [pc, #64]	@ (8008e68 <TIM_Base_SetConfig+0x12c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d003      	beq.n	8008e34 <TIM_Base_SetConfig+0xf8>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a12      	ldr	r2, [pc, #72]	@ (8008e78 <TIM_Base_SetConfig+0x13c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d103      	bne.n	8008e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d105      	bne.n	8008e5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	f023 0201 	bic.w	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	611a      	str	r2, [r3, #16]
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	40010000 	.word	0x40010000
 8008e6c:	40000400 	.word	0x40000400
 8008e70:	40000800 	.word	0x40000800
 8008e74:	40000c00 	.word	0x40000c00
 8008e78:	40010400 	.word	0x40010400
 8008e7c:	40014000 	.word	0x40014000
 8008e80:	40014400 	.word	0x40014400
 8008e84:	40014800 	.word	0x40014800
 8008e88:	40001800 	.word	0x40001800
 8008e8c:	40001c00 	.word	0x40001c00
 8008e90:	40002000 	.word	0x40002000

08008e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	f023 0201 	bic.w	r2, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f023 0302 	bic.w	r3, r3, #2
 8008edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a20      	ldr	r2, [pc, #128]	@ (8008f6c <TIM_OC1_SetConfig+0xd8>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d003      	beq.n	8008ef8 <TIM_OC1_SetConfig+0x64>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8008f70 <TIM_OC1_SetConfig+0xdc>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d10c      	bne.n	8008f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f023 0308 	bic.w	r3, r3, #8
 8008efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f023 0304 	bic.w	r3, r3, #4
 8008f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a15      	ldr	r2, [pc, #84]	@ (8008f6c <TIM_OC1_SetConfig+0xd8>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d003      	beq.n	8008f22 <TIM_OC1_SetConfig+0x8e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a14      	ldr	r2, [pc, #80]	@ (8008f70 <TIM_OC1_SetConfig+0xdc>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d111      	bne.n	8008f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	621a      	str	r2, [r3, #32]
}
 8008f60:	bf00      	nop
 8008f62:	371c      	adds	r7, #28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	40010000 	.word	0x40010000
 8008f70:	40010400 	.word	0x40010400

08008f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b087      	sub	sp, #28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	f023 0210 	bic.w	r2, r3, #16
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f023 0320 	bic.w	r3, r3, #32
 8008fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a22      	ldr	r2, [pc, #136]	@ (8009058 <TIM_OC2_SetConfig+0xe4>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d003      	beq.n	8008fdc <TIM_OC2_SetConfig+0x68>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a21      	ldr	r2, [pc, #132]	@ (800905c <TIM_OC2_SetConfig+0xe8>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d10d      	bne.n	8008ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	011b      	lsls	r3, r3, #4
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a17      	ldr	r2, [pc, #92]	@ (8009058 <TIM_OC2_SetConfig+0xe4>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d003      	beq.n	8009008 <TIM_OC2_SetConfig+0x94>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a16      	ldr	r2, [pc, #88]	@ (800905c <TIM_OC2_SetConfig+0xe8>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d113      	bne.n	8009030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800900e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	4313      	orrs	r3, r2
 8009022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	4313      	orrs	r3, r2
 800902e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	621a      	str	r2, [r3, #32]
}
 800904a:	bf00      	nop
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	40010000 	.word	0x40010000
 800905c:	40010400 	.word	0x40010400

08009060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800908e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f023 0303 	bic.w	r3, r3, #3
 8009096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a21      	ldr	r2, [pc, #132]	@ (8009140 <TIM_OC3_SetConfig+0xe0>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d003      	beq.n	80090c6 <TIM_OC3_SetConfig+0x66>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a20      	ldr	r2, [pc, #128]	@ (8009144 <TIM_OC3_SetConfig+0xe4>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d10d      	bne.n	80090e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80090cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80090e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a16      	ldr	r2, [pc, #88]	@ (8009140 <TIM_OC3_SetConfig+0xe0>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d003      	beq.n	80090f2 <TIM_OC3_SetConfig+0x92>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a15      	ldr	r2, [pc, #84]	@ (8009144 <TIM_OC3_SetConfig+0xe4>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d113      	bne.n	800911a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	621a      	str	r2, [r3, #32]
}
 8009134:	bf00      	nop
 8009136:	371c      	adds	r7, #28
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	40010000 	.word	0x40010000
 8009144:	40010400 	.word	0x40010400

08009148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a1b      	ldr	r3, [r3, #32]
 800915c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800917e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	021b      	lsls	r3, r3, #8
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	031b      	lsls	r3, r3, #12
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	4313      	orrs	r3, r2
 800919e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a12      	ldr	r2, [pc, #72]	@ (80091ec <TIM_OC4_SetConfig+0xa4>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d003      	beq.n	80091b0 <TIM_OC4_SetConfig+0x68>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a11      	ldr	r2, [pc, #68]	@ (80091f0 <TIM_OC4_SetConfig+0xa8>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d109      	bne.n	80091c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	019b      	lsls	r3, r3, #6
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	621a      	str	r2, [r3, #32]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	40010000 	.word	0x40010000
 80091f0:	40010400 	.word	0x40010400

080091f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	f023 0201 	bic.w	r2, r3, #1
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4a28      	ldr	r2, [pc, #160]	@ (80092c0 <TIM_TI1_SetConfig+0xcc>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d01b      	beq.n	800925a <TIM_TI1_SetConfig+0x66>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009228:	d017      	beq.n	800925a <TIM_TI1_SetConfig+0x66>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4a25      	ldr	r2, [pc, #148]	@ (80092c4 <TIM_TI1_SetConfig+0xd0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d013      	beq.n	800925a <TIM_TI1_SetConfig+0x66>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	4a24      	ldr	r2, [pc, #144]	@ (80092c8 <TIM_TI1_SetConfig+0xd4>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d00f      	beq.n	800925a <TIM_TI1_SetConfig+0x66>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4a23      	ldr	r2, [pc, #140]	@ (80092cc <TIM_TI1_SetConfig+0xd8>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00b      	beq.n	800925a <TIM_TI1_SetConfig+0x66>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	4a22      	ldr	r2, [pc, #136]	@ (80092d0 <TIM_TI1_SetConfig+0xdc>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d007      	beq.n	800925a <TIM_TI1_SetConfig+0x66>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	4a21      	ldr	r2, [pc, #132]	@ (80092d4 <TIM_TI1_SetConfig+0xe0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d003      	beq.n	800925a <TIM_TI1_SetConfig+0x66>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4a20      	ldr	r2, [pc, #128]	@ (80092d8 <TIM_TI1_SetConfig+0xe4>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d101      	bne.n	800925e <TIM_TI1_SetConfig+0x6a>
 800925a:	2301      	movs	r3, #1
 800925c:	e000      	b.n	8009260 <TIM_TI1_SetConfig+0x6c>
 800925e:	2300      	movs	r3, #0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d008      	beq.n	8009276 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f023 0303 	bic.w	r3, r3, #3
 800926a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4313      	orrs	r3, r2
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	e003      	b.n	800927e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f043 0301 	orr.w	r3, r3, #1
 800927c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	b2db      	uxtb	r3, r3
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	4313      	orrs	r3, r2
 8009290:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f023 030a 	bic.w	r3, r3, #10
 8009298:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f003 030a 	and.w	r3, r3, #10
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	621a      	str	r2, [r3, #32]
}
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	40010000 	.word	0x40010000
 80092c4:	40000400 	.word	0x40000400
 80092c8:	40000800 	.word	0x40000800
 80092cc:	40000c00 	.word	0x40000c00
 80092d0:	40010400 	.word	0x40010400
 80092d4:	40014000 	.word	0x40014000
 80092d8:	40001800 	.word	0x40001800

080092dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	f023 0201 	bic.w	r2, r3, #1
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f023 030a 	bic.w	r3, r3, #10
 8009318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4313      	orrs	r3, r2
 8009320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	621a      	str	r2, [r3, #32]
}
 800932e:	bf00      	nop
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800933a:	b480      	push	{r7}
 800933c:	b087      	sub	sp, #28
 800933e:	af00      	add	r7, sp, #0
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	607a      	str	r2, [r7, #4]
 8009346:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	f023 0210 	bic.w	r2, r3, #16
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	021b      	lsls	r3, r3, #8
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	4313      	orrs	r3, r2
 8009370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	031b      	lsls	r3, r3, #12
 800937e:	b29b      	uxth	r3, r3
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	4313      	orrs	r3, r2
 8009384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800938c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	4313      	orrs	r3, r2
 800939a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	621a      	str	r2, [r3, #32]
}
 80093a8:	bf00      	nop
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	f023 0210 	bic.w	r2, r3, #16
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	031b      	lsls	r3, r3, #12
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	011b      	lsls	r3, r3, #4
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	621a      	str	r2, [r3, #32]
}
 8009408:	bf00      	nop
 800940a:	371c      	adds	r7, #28
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f023 0303 	bic.w	r3, r3, #3
 8009440:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4313      	orrs	r3, r2
 8009448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009450:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	b2db      	uxtb	r3, r3
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	4313      	orrs	r3, r2
 800945c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009464:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	4313      	orrs	r3, r2
 8009472:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	621a      	str	r2, [r3, #32]
}
 8009480:	bf00      	nop
 8009482:	371c      	adds	r7, #28
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800948c:	b480      	push	{r7}
 800948e:	b087      	sub	sp, #28
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6a1b      	ldr	r3, [r3, #32]
 80094a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80094ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	031b      	lsls	r3, r3, #12
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80094de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	031b      	lsls	r3, r3, #12
 80094e4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	621a      	str	r2, [r3, #32]
}
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009506:	b480      	push	{r7}
 8009508:	b085      	sub	sp, #20
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800951c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4313      	orrs	r3, r2
 8009524:	f043 0307 	orr.w	r3, r3, #7
 8009528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	609a      	str	r2, [r3, #8]
}
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	021a      	lsls	r2, r3, #8
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	431a      	orrs	r2, r3
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	4313      	orrs	r3, r2
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	4313      	orrs	r3, r2
 8009568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	609a      	str	r2, [r3, #8]
}
 8009570:	bf00      	nop
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f003 031f 	and.w	r3, r3, #31
 800958e:	2201      	movs	r2, #1
 8009590:	fa02 f303 	lsl.w	r3, r2, r3
 8009594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a1a      	ldr	r2, [r3, #32]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	43db      	mvns	r3, r3
 800959e:	401a      	ands	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a1a      	ldr	r2, [r3, #32]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f003 031f 	and.w	r3, r3, #31
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	fa01 f303 	lsl.w	r3, r1, r3
 80095b4:	431a      	orrs	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	621a      	str	r2, [r3, #32]
}
 80095ba:	bf00      	nop
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d101      	bne.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095dc:	2302      	movs	r3, #2
 80095de:	e05a      	b.n	8009696 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a21      	ldr	r2, [pc, #132]	@ (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d022      	beq.n	800966a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800962c:	d01d      	beq.n	800966a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a1d      	ldr	r2, [pc, #116]	@ (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d018      	beq.n	800966a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1b      	ldr	r2, [pc, #108]	@ (80096ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d013      	beq.n	800966a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a1a      	ldr	r2, [pc, #104]	@ (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d00e      	beq.n	800966a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a18      	ldr	r2, [pc, #96]	@ (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d009      	beq.n	800966a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a17      	ldr	r2, [pc, #92]	@ (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d004      	beq.n	800966a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a15      	ldr	r2, [pc, #84]	@ (80096bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d10c      	bne.n	8009684 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	4313      	orrs	r3, r2
 800967a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	40010000 	.word	0x40010000
 80096a8:	40000400 	.word	0x40000400
 80096ac:	40000800 	.word	0x40000800
 80096b0:	40000c00 	.word	0x40000c00
 80096b4:	40010400 	.word	0x40010400
 80096b8:	40014000 	.word	0x40014000
 80096bc:	40001800 	.word	0x40001800

080096c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d101      	bne.n	80096dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096d8:	2302      	movs	r3, #2
 80096da:	e03d      	b.n	8009758 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e042      	b.n	8009824 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7fb f908 	bl	80049c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2224      	movs	r2, #36	@ 0x24
 80097bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fdf3 	bl	800a3bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	691a      	ldr	r2, [r3, #16]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695a      	ldr	r2, [r3, #20]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2220      	movs	r2, #32
 8009810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2220      	movs	r2, #32
 8009818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	@ 0x28
 8009830:	af02      	add	r7, sp, #8
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	603b      	str	r3, [r7, #0]
 8009838:	4613      	mov	r3, r2
 800983a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800983c:	2300      	movs	r3, #0
 800983e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b20      	cmp	r3, #32
 800984a:	d175      	bne.n	8009938 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <HAL_UART_Transmit+0x2c>
 8009852:	88fb      	ldrh	r3, [r7, #6]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e06e      	b.n	800993a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2221      	movs	r2, #33	@ 0x21
 8009866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800986a:	f7fb fab5 	bl	8004dd8 <HAL_GetTick>
 800986e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	88fa      	ldrh	r2, [r7, #6]
 8009874:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	88fa      	ldrh	r2, [r7, #6]
 800987a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009884:	d108      	bne.n	8009898 <HAL_UART_Transmit+0x6c>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d104      	bne.n	8009898 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800988e:	2300      	movs	r3, #0
 8009890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	e003      	b.n	80098a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800989c:	2300      	movs	r3, #0
 800989e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80098a0:	e02e      	b.n	8009900 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2200      	movs	r2, #0
 80098aa:	2180      	movs	r1, #128	@ 0x80
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 fb55 	bl	8009f5c <UART_WaitOnFlagUntilTimeout>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d005      	beq.n	80098c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2220      	movs	r2, #32
 80098bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e03a      	b.n	800993a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10b      	bne.n	80098e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	3302      	adds	r3, #2
 80098de:	61bb      	str	r3, [r7, #24]
 80098e0:	e007      	b.n	80098f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	781a      	ldrb	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	3301      	adds	r3, #1
 80098f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	3b01      	subs	r3, #1
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009904:	b29b      	uxth	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1cb      	bne.n	80098a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2200      	movs	r2, #0
 8009912:	2140      	movs	r1, #64	@ 0x40
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 fb21 	bl	8009f5c <UART_WaitOnFlagUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e006      	b.n	800993a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2220      	movs	r2, #32
 8009930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	e000      	b.n	800993a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009938:	2302      	movs	r3, #2
  }
}
 800993a:	4618      	mov	r0, r3
 800993c:	3720      	adds	r7, #32
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	60b9      	str	r1, [r7, #8]
 800994c:	4613      	mov	r3, r2
 800994e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b20      	cmp	r3, #32
 800995a:	d121      	bne.n	80099a0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <HAL_UART_Transmit_IT+0x26>
 8009962:	88fb      	ldrh	r3, [r7, #6]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e01a      	b.n	80099a2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	88fa      	ldrh	r2, [r7, #6]
 8009976:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	88fa      	ldrh	r2, [r7, #6]
 800997c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2221      	movs	r2, #33	@ 0x21
 8009988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800999a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	e000      	b.n	80099a2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80099a0:	2302      	movs	r3, #2
  }
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	4613      	mov	r3, r2
 80099ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b20      	cmp	r3, #32
 80099c6:	d112      	bne.n	80099ee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d002      	beq.n	80099d4 <HAL_UART_Receive_IT+0x26>
 80099ce:	88fb      	ldrh	r3, [r7, #6]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d101      	bne.n	80099d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e00b      	b.n	80099f0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80099de:	88fb      	ldrh	r3, [r7, #6]
 80099e0:	461a      	mov	r2, r3
 80099e2:	68b9      	ldr	r1, [r7, #8]
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 fb12 	bl	800a00e <UART_Start_Receive_IT>
 80099ea:	4603      	mov	r3, r0
 80099ec:	e000      	b.n	80099f0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80099ee:	2302      	movs	r3, #2
  }
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b0ba      	sub	sp, #232	@ 0xe8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a2e:	f003 030f 	and.w	r3, r3, #15
 8009a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10f      	bne.n	8009a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d009      	beq.n	8009a5e <HAL_UART_IRQHandler+0x66>
 8009a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a4e:	f003 0320 	and.w	r3, r3, #32
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fbf2 	bl	800a240 <UART_Receive_IT>
      return;
 8009a5c:	e25b      	b.n	8009f16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 80de 	beq.w	8009c24 <HAL_UART_IRQHandler+0x22c>
 8009a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d106      	bne.n	8009a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 80d1 	beq.w	8009c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00b      	beq.n	8009aa6 <HAL_UART_IRQHandler+0xae>
 8009a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d005      	beq.n	8009aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a9e:	f043 0201 	orr.w	r2, r3, #1
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aaa:	f003 0304 	and.w	r3, r3, #4
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00b      	beq.n	8009aca <HAL_UART_IRQHandler+0xd2>
 8009ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac2:	f043 0202 	orr.w	r2, r3, #2
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00b      	beq.n	8009aee <HAL_UART_IRQHandler+0xf6>
 8009ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d005      	beq.n	8009aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ae6:	f043 0204 	orr.w	r2, r3, #4
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af2:	f003 0308 	and.w	r3, r3, #8
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d011      	beq.n	8009b1e <HAL_UART_IRQHandler+0x126>
 8009afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009afe:	f003 0320 	and.w	r3, r3, #32
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d105      	bne.n	8009b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b16:	f043 0208 	orr.w	r2, r3, #8
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 81f2 	beq.w	8009f0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b2c:	f003 0320 	and.w	r3, r3, #32
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d008      	beq.n	8009b46 <HAL_UART_IRQHandler+0x14e>
 8009b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b38:	f003 0320 	and.w	r3, r3, #32
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb7d 	bl	800a240 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b50:	2b40      	cmp	r3, #64	@ 0x40
 8009b52:	bf0c      	ite	eq
 8009b54:	2301      	moveq	r3, #1
 8009b56:	2300      	movne	r3, #0
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b62:	f003 0308 	and.w	r3, r3, #8
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d103      	bne.n	8009b72 <HAL_UART_IRQHandler+0x17a>
 8009b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d04f      	beq.n	8009c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa85 	bl	800a082 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b82:	2b40      	cmp	r3, #64	@ 0x40
 8009b84:	d141      	bne.n	8009c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	3314      	adds	r3, #20
 8009b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3314      	adds	r3, #20
 8009bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1d9      	bne.n	8009b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d013      	beq.n	8009c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bde:	4a7e      	ldr	r2, [pc, #504]	@ (8009dd8 <HAL_UART_IRQHandler+0x3e0>)
 8009be0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fb ffc0 	bl	8005b6c <HAL_DMA_Abort_IT>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d016      	beq.n	8009c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c00:	e00e      	b.n	8009c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f994 	bl	8009f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c08:	e00a      	b.n	8009c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f990 	bl	8009f30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c10:	e006      	b.n	8009c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f98c 	bl	8009f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009c1e:	e175      	b.n	8009f0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c20:	bf00      	nop
    return;
 8009c22:	e173      	b.n	8009f0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	f040 814f 	bne.w	8009ecc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c32:	f003 0310 	and.w	r3, r3, #16
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 8148 	beq.w	8009ecc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c40:	f003 0310 	and.w	r3, r3, #16
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 8141 	beq.w	8009ecc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60bb      	str	r3, [r7, #8]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	60bb      	str	r3, [r7, #8]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	60bb      	str	r3, [r7, #8]
 8009c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c6a:	2b40      	cmp	r3, #64	@ 0x40
 8009c6c:	f040 80b6 	bne.w	8009ddc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 8145 	beq.w	8009f10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	f080 813e 	bcs.w	8009f10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ca6:	f000 8088 	beq.w	8009dba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	330c      	adds	r3, #12
 8009cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cb8:	e853 3f00 	ldrex	r3, [r3]
 8009cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1d9      	bne.n	8009caa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3314      	adds	r3, #20
 8009cfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d00:	e853 3f00 	ldrex	r3, [r3]
 8009d04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d08:	f023 0301 	bic.w	r3, r3, #1
 8009d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3314      	adds	r3, #20
 8009d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1e1      	bne.n	8009cf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3314      	adds	r3, #20
 8009d38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3314      	adds	r3, #20
 8009d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e3      	bne.n	8009d32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	330c      	adds	r3, #12
 8009d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d82:	e853 3f00 	ldrex	r3, [r3]
 8009d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d8a:	f023 0310 	bic.w	r3, r3, #16
 8009d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	330c      	adds	r3, #12
 8009d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009d9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009d9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009da4:	e841 2300 	strex	r3, r2, [r1]
 8009da8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1e3      	bne.n	8009d78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fb fe69 	bl	8005a8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f8b7 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009dd6:	e09b      	b.n	8009f10 <HAL_UART_IRQHandler+0x518>
 8009dd8:	0800a149 	.word	0x0800a149
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 808e 	beq.w	8009f14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 8089 	beq.w	8009f14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	330c      	adds	r3, #12
 8009e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0c:	e853 3f00 	ldrex	r3, [r3]
 8009e10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	330c      	adds	r3, #12
 8009e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009e26:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e3      	bne.n	8009e02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3314      	adds	r3, #20
 8009e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	623b      	str	r3, [r7, #32]
   return(result);
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	f023 0301 	bic.w	r3, r3, #1
 8009e50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3314      	adds	r3, #20
 8009e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009e5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e66:	e841 2300 	strex	r3, r2, [r1]
 8009e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e3      	bne.n	8009e3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2220      	movs	r2, #32
 8009e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	330c      	adds	r3, #12
 8009e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 0310 	bic.w	r3, r3, #16
 8009e96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	330c      	adds	r3, #12
 8009ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009ea4:	61fa      	str	r2, [r7, #28]
 8009ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	69b9      	ldr	r1, [r7, #24]
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	e841 2300 	strex	r3, r2, [r1]
 8009eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e3      	bne.n	8009e80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f83d 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009eca:	e023      	b.n	8009f14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d009      	beq.n	8009eec <HAL_UART_IRQHandler+0x4f4>
 8009ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f943 	bl	800a170 <UART_Transmit_IT>
    return;
 8009eea:	e014      	b.n	8009f16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00e      	beq.n	8009f16 <HAL_UART_IRQHandler+0x51e>
 8009ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d008      	beq.n	8009f16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f983 	bl	800a210 <UART_EndTransmit_IT>
    return;
 8009f0a:	e004      	b.n	8009f16 <HAL_UART_IRQHandler+0x51e>
    return;
 8009f0c:	bf00      	nop
 8009f0e:	e002      	b.n	8009f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8009f10:	bf00      	nop
 8009f12:	e000      	b.n	8009f16 <HAL_UART_IRQHandler+0x51e>
      return;
 8009f14:	bf00      	nop
  }
}
 8009f16:	37e8      	adds	r7, #232	@ 0xe8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f6c:	e03b      	b.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f74:	d037      	beq.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f76:	f7fa ff2f 	bl	8004dd8 <HAL_GetTick>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	6a3a      	ldr	r2, [r7, #32]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d302      	bcc.n	8009f8c <UART_WaitOnFlagUntilTimeout+0x30>
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d101      	bne.n	8009f90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e03a      	b.n	800a006 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f003 0304 	and.w	r3, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d023      	beq.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b80      	cmp	r3, #128	@ 0x80
 8009fa2:	d020      	beq.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b40      	cmp	r3, #64	@ 0x40
 8009fa8:	d01d      	beq.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0308 	and.w	r3, r3, #8
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	d116      	bne.n	8009fe6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009fb8:	2300      	movs	r3, #0
 8009fba:	617b      	str	r3, [r7, #20]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	617b      	str	r3, [r7, #20]
 8009fcc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f857 	bl	800a082 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2208      	movs	r2, #8
 8009fd8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e00f      	b.n	800a006 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	bf0c      	ite	eq
 8009ff6:	2301      	moveq	r3, #1
 8009ff8:	2300      	movne	r3, #0
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	429a      	cmp	r2, r3
 800a002:	d0b4      	beq.n	8009f6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a00e:	b480      	push	{r7}
 800a010:	b085      	sub	sp, #20
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	4613      	mov	r3, r2
 800a01a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	88fa      	ldrh	r2, [r7, #6]
 800a026:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	88fa      	ldrh	r2, [r7, #6]
 800a02c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2222      	movs	r2, #34	@ 0x22
 800a038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68da      	ldr	r2, [r3, #12]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a052:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	695a      	ldr	r2, [r3, #20]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0201 	orr.w	r2, r2, #1
 800a062:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f042 0220 	orr.w	r2, r2, #32
 800a072:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a082:	b480      	push	{r7}
 800a084:	b095      	sub	sp, #84	@ 0x54
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	330c      	adds	r3, #12
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	330c      	adds	r3, #12
 800a0a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0aa:	643a      	str	r2, [r7, #64]	@ 0x40
 800a0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e5      	bne.n	800a08a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3314      	adds	r3, #20
 800a0c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	f023 0301 	bic.w	r3, r3, #1
 800a0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3314      	adds	r3, #20
 800a0dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0e6:	e841 2300 	strex	r3, r2, [r1]
 800a0ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1e5      	bne.n	800a0be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d119      	bne.n	800a12e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	330c      	adds	r3, #12
 800a100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	e853 3f00 	ldrex	r3, [r3]
 800a108:	60bb      	str	r3, [r7, #8]
   return(result);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	f023 0310 	bic.w	r3, r3, #16
 800a110:	647b      	str	r3, [r7, #68]	@ 0x44
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	330c      	adds	r3, #12
 800a118:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a11a:	61ba      	str	r2, [r7, #24]
 800a11c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	6979      	ldr	r1, [r7, #20]
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	613b      	str	r3, [r7, #16]
   return(result);
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e5      	bne.n	800a0fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2220      	movs	r2, #32
 800a132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a13c:	bf00      	nop
 800a13e:	3754      	adds	r7, #84	@ 0x54
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a154:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7ff fee4 	bl	8009f30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a168:	bf00      	nop
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b21      	cmp	r3, #33	@ 0x21
 800a182:	d13e      	bne.n	800a202 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a18c:	d114      	bne.n	800a1b8 <UART_Transmit_IT+0x48>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d110      	bne.n	800a1b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	1c9a      	adds	r2, r3, #2
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	621a      	str	r2, [r3, #32]
 800a1b6:	e008      	b.n	800a1ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a1b      	ldr	r3, [r3, #32]
 800a1bc:	1c59      	adds	r1, r3, #1
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	6211      	str	r1, [r2, #32]
 800a1c2:	781a      	ldrb	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10f      	bne.n	800a1fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a1ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	e000      	b.n	800a204 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a202:	2302      	movs	r3, #2
  }
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a226:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2220      	movs	r2, #32
 800a22c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff fe73 	bl	8009f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08c      	sub	sp, #48	@ 0x30
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	2b22      	cmp	r3, #34	@ 0x22
 800a252:	f040 80ae 	bne.w	800a3b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a25e:	d117      	bne.n	800a290 <UART_Receive_IT+0x50>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d113      	bne.n	800a290 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a268:	2300      	movs	r3, #0
 800a26a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a270:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a27e:	b29a      	uxth	r2, r3
 800a280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a282:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a288:	1c9a      	adds	r2, r3, #2
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a28e:	e026      	b.n	800a2de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a294:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a296:	2300      	movs	r3, #0
 800a298:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2a2:	d007      	beq.n	800a2b4 <UART_Receive_IT+0x74>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <UART_Receive_IT+0x82>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d106      	bne.n	800a2c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	b2da      	uxtb	r2, r3
 800a2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2be:	701a      	strb	r2, [r3, #0]
 800a2c0:	e008      	b.n	800a2d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d15d      	bne.n	800a3ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68da      	ldr	r2, [r3, #12]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 0220 	bic.w	r2, r2, #32
 800a300:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68da      	ldr	r2, [r3, #12]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a310:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	695a      	ldr	r2, [r3, #20]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f022 0201 	bic.w	r2, r2, #1
 800a320:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2220      	movs	r2, #32
 800a326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a334:	2b01      	cmp	r3, #1
 800a336:	d135      	bne.n	800a3a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	330c      	adds	r3, #12
 800a344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	613b      	str	r3, [r7, #16]
   return(result);
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	f023 0310 	bic.w	r3, r3, #16
 800a354:	627b      	str	r3, [r7, #36]	@ 0x24
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	330c      	adds	r3, #12
 800a35c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a35e:	623a      	str	r2, [r7, #32]
 800a360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	69f9      	ldr	r1, [r7, #28]
 800a364:	6a3a      	ldr	r2, [r7, #32]
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1e5      	bne.n	800a33e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0310 	and.w	r3, r3, #16
 800a37c:	2b10      	cmp	r3, #16
 800a37e:	d10a      	bne.n	800a396 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a380:	2300      	movs	r3, #0
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff fdd1 	bl	8009f44 <HAL_UARTEx_RxEventCallback>
 800a3a2:	e002      	b.n	800a3aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7f7 ff55 	bl	8002254 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e002      	b.n	800a3b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e000      	b.n	800a3b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a3b2:	2302      	movs	r3, #2
  }
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3730      	adds	r7, #48	@ 0x30
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3c0:	b0c0      	sub	sp, #256	@ 0x100
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a3d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3d8:	68d9      	ldr	r1, [r3, #12]
 800a3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	ea40 0301 	orr.w	r3, r0, r1
 800a3e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	4313      	orrs	r3, r2
 800a404:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a414:	f021 010c 	bic.w	r1, r1, #12
 800a418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a422:	430b      	orrs	r3, r1
 800a424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a436:	6999      	ldr	r1, [r3, #24]
 800a438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	ea40 0301 	orr.w	r3, r0, r1
 800a442:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	4b8f      	ldr	r3, [pc, #572]	@ (800a688 <UART_SetConfig+0x2cc>)
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d005      	beq.n	800a45c <UART_SetConfig+0xa0>
 800a450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	4b8d      	ldr	r3, [pc, #564]	@ (800a68c <UART_SetConfig+0x2d0>)
 800a458:	429a      	cmp	r2, r3
 800a45a:	d104      	bne.n	800a466 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a45c:	f7fd fc48 	bl	8007cf0 <HAL_RCC_GetPCLK2Freq>
 800a460:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a464:	e003      	b.n	800a46e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a466:	f7fd fc2f 	bl	8007cc8 <HAL_RCC_GetPCLK1Freq>
 800a46a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a46e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a472:	69db      	ldr	r3, [r3, #28]
 800a474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a478:	f040 810c 	bne.w	800a694 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a47c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a480:	2200      	movs	r2, #0
 800a482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a486:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a48a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a48e:	4622      	mov	r2, r4
 800a490:	462b      	mov	r3, r5
 800a492:	1891      	adds	r1, r2, r2
 800a494:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a496:	415b      	adcs	r3, r3
 800a498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a49a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a49e:	4621      	mov	r1, r4
 800a4a0:	eb12 0801 	adds.w	r8, r2, r1
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	eb43 0901 	adc.w	r9, r3, r1
 800a4aa:	f04f 0200 	mov.w	r2, #0
 800a4ae:	f04f 0300 	mov.w	r3, #0
 800a4b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a4b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a4ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a4be:	4690      	mov	r8, r2
 800a4c0:	4699      	mov	r9, r3
 800a4c2:	4623      	mov	r3, r4
 800a4c4:	eb18 0303 	adds.w	r3, r8, r3
 800a4c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	eb49 0303 	adc.w	r3, r9, r3
 800a4d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a4d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a4e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a4e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	18db      	adds	r3, r3, r3
 800a4ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	eb42 0303 	adc.w	r3, r2, r3
 800a4f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a4fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a500:	f7f6 fbc2 	bl	8000c88 <__aeabi_uldivmod>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4b61      	ldr	r3, [pc, #388]	@ (800a690 <UART_SetConfig+0x2d4>)
 800a50a:	fba3 2302 	umull	r2, r3, r3, r2
 800a50e:	095b      	lsrs	r3, r3, #5
 800a510:	011c      	lsls	r4, r3, #4
 800a512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a516:	2200      	movs	r2, #0
 800a518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a51c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a520:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a524:	4642      	mov	r2, r8
 800a526:	464b      	mov	r3, r9
 800a528:	1891      	adds	r1, r2, r2
 800a52a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a52c:	415b      	adcs	r3, r3
 800a52e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a530:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a534:	4641      	mov	r1, r8
 800a536:	eb12 0a01 	adds.w	sl, r2, r1
 800a53a:	4649      	mov	r1, r9
 800a53c:	eb43 0b01 	adc.w	fp, r3, r1
 800a540:	f04f 0200 	mov.w	r2, #0
 800a544:	f04f 0300 	mov.w	r3, #0
 800a548:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a54c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a554:	4692      	mov	sl, r2
 800a556:	469b      	mov	fp, r3
 800a558:	4643      	mov	r3, r8
 800a55a:	eb1a 0303 	adds.w	r3, sl, r3
 800a55e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a562:	464b      	mov	r3, r9
 800a564:	eb4b 0303 	adc.w	r3, fp, r3
 800a568:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a56c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a578:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a57c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a580:	460b      	mov	r3, r1
 800a582:	18db      	adds	r3, r3, r3
 800a584:	643b      	str	r3, [r7, #64]	@ 0x40
 800a586:	4613      	mov	r3, r2
 800a588:	eb42 0303 	adc.w	r3, r2, r3
 800a58c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a58e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a592:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a596:	f7f6 fb77 	bl	8000c88 <__aeabi_uldivmod>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4b3b      	ldr	r3, [pc, #236]	@ (800a690 <UART_SetConfig+0x2d4>)
 800a5a2:	fba3 2301 	umull	r2, r3, r3, r1
 800a5a6:	095b      	lsrs	r3, r3, #5
 800a5a8:	2264      	movs	r2, #100	@ 0x64
 800a5aa:	fb02 f303 	mul.w	r3, r2, r3
 800a5ae:	1acb      	subs	r3, r1, r3
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a5b6:	4b36      	ldr	r3, [pc, #216]	@ (800a690 <UART_SetConfig+0x2d4>)
 800a5b8:	fba3 2302 	umull	r2, r3, r3, r2
 800a5bc:	095b      	lsrs	r3, r3, #5
 800a5be:	005b      	lsls	r3, r3, #1
 800a5c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a5c4:	441c      	add	r4, r3
 800a5c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a5d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a5d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a5d8:	4642      	mov	r2, r8
 800a5da:	464b      	mov	r3, r9
 800a5dc:	1891      	adds	r1, r2, r2
 800a5de:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a5e0:	415b      	adcs	r3, r3
 800a5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	1851      	adds	r1, r2, r1
 800a5ec:	6339      	str	r1, [r7, #48]	@ 0x30
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	414b      	adcs	r3, r1
 800a5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5f4:	f04f 0200 	mov.w	r2, #0
 800a5f8:	f04f 0300 	mov.w	r3, #0
 800a5fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a600:	4659      	mov	r1, fp
 800a602:	00cb      	lsls	r3, r1, #3
 800a604:	4651      	mov	r1, sl
 800a606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a60a:	4651      	mov	r1, sl
 800a60c:	00ca      	lsls	r2, r1, #3
 800a60e:	4610      	mov	r0, r2
 800a610:	4619      	mov	r1, r3
 800a612:	4603      	mov	r3, r0
 800a614:	4642      	mov	r2, r8
 800a616:	189b      	adds	r3, r3, r2
 800a618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a61c:	464b      	mov	r3, r9
 800a61e:	460a      	mov	r2, r1
 800a620:	eb42 0303 	adc.w	r3, r2, r3
 800a624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a634:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a638:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a63c:	460b      	mov	r3, r1
 800a63e:	18db      	adds	r3, r3, r3
 800a640:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a642:	4613      	mov	r3, r2
 800a644:	eb42 0303 	adc.w	r3, r2, r3
 800a648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a64a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a64e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a652:	f7f6 fb19 	bl	8000c88 <__aeabi_uldivmod>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4b0d      	ldr	r3, [pc, #52]	@ (800a690 <UART_SetConfig+0x2d4>)
 800a65c:	fba3 1302 	umull	r1, r3, r3, r2
 800a660:	095b      	lsrs	r3, r3, #5
 800a662:	2164      	movs	r1, #100	@ 0x64
 800a664:	fb01 f303 	mul.w	r3, r1, r3
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	3332      	adds	r3, #50	@ 0x32
 800a66e:	4a08      	ldr	r2, [pc, #32]	@ (800a690 <UART_SetConfig+0x2d4>)
 800a670:	fba2 2303 	umull	r2, r3, r2, r3
 800a674:	095b      	lsrs	r3, r3, #5
 800a676:	f003 0207 	and.w	r2, r3, #7
 800a67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4422      	add	r2, r4
 800a682:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a684:	e106      	b.n	800a894 <UART_SetConfig+0x4d8>
 800a686:	bf00      	nop
 800a688:	40011000 	.word	0x40011000
 800a68c:	40011400 	.word	0x40011400
 800a690:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a698:	2200      	movs	r2, #0
 800a69a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a69e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a6a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a6a6:	4642      	mov	r2, r8
 800a6a8:	464b      	mov	r3, r9
 800a6aa:	1891      	adds	r1, r2, r2
 800a6ac:	6239      	str	r1, [r7, #32]
 800a6ae:	415b      	adcs	r3, r3
 800a6b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6b6:	4641      	mov	r1, r8
 800a6b8:	1854      	adds	r4, r2, r1
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	eb43 0501 	adc.w	r5, r3, r1
 800a6c0:	f04f 0200 	mov.w	r2, #0
 800a6c4:	f04f 0300 	mov.w	r3, #0
 800a6c8:	00eb      	lsls	r3, r5, #3
 800a6ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a6ce:	00e2      	lsls	r2, r4, #3
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	461d      	mov	r5, r3
 800a6d4:	4643      	mov	r3, r8
 800a6d6:	18e3      	adds	r3, r4, r3
 800a6d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a6dc:	464b      	mov	r3, r9
 800a6de:	eb45 0303 	adc.w	r3, r5, r3
 800a6e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a6e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a6f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a6f6:	f04f 0200 	mov.w	r2, #0
 800a6fa:	f04f 0300 	mov.w	r3, #0
 800a6fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a702:	4629      	mov	r1, r5
 800a704:	008b      	lsls	r3, r1, #2
 800a706:	4621      	mov	r1, r4
 800a708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a70c:	4621      	mov	r1, r4
 800a70e:	008a      	lsls	r2, r1, #2
 800a710:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a714:	f7f6 fab8 	bl	8000c88 <__aeabi_uldivmod>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4b60      	ldr	r3, [pc, #384]	@ (800a8a0 <UART_SetConfig+0x4e4>)
 800a71e:	fba3 2302 	umull	r2, r3, r3, r2
 800a722:	095b      	lsrs	r3, r3, #5
 800a724:	011c      	lsls	r4, r3, #4
 800a726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a730:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a738:	4642      	mov	r2, r8
 800a73a:	464b      	mov	r3, r9
 800a73c:	1891      	adds	r1, r2, r2
 800a73e:	61b9      	str	r1, [r7, #24]
 800a740:	415b      	adcs	r3, r3
 800a742:	61fb      	str	r3, [r7, #28]
 800a744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a748:	4641      	mov	r1, r8
 800a74a:	1851      	adds	r1, r2, r1
 800a74c:	6139      	str	r1, [r7, #16]
 800a74e:	4649      	mov	r1, r9
 800a750:	414b      	adcs	r3, r1
 800a752:	617b      	str	r3, [r7, #20]
 800a754:	f04f 0200 	mov.w	r2, #0
 800a758:	f04f 0300 	mov.w	r3, #0
 800a75c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a760:	4659      	mov	r1, fp
 800a762:	00cb      	lsls	r3, r1, #3
 800a764:	4651      	mov	r1, sl
 800a766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a76a:	4651      	mov	r1, sl
 800a76c:	00ca      	lsls	r2, r1, #3
 800a76e:	4610      	mov	r0, r2
 800a770:	4619      	mov	r1, r3
 800a772:	4603      	mov	r3, r0
 800a774:	4642      	mov	r2, r8
 800a776:	189b      	adds	r3, r3, r2
 800a778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a77c:	464b      	mov	r3, r9
 800a77e:	460a      	mov	r2, r1
 800a780:	eb42 0303 	adc.w	r3, r2, r3
 800a784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a792:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	008b      	lsls	r3, r1, #2
 800a7a4:	4641      	mov	r1, r8
 800a7a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7aa:	4641      	mov	r1, r8
 800a7ac:	008a      	lsls	r2, r1, #2
 800a7ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a7b2:	f7f6 fa69 	bl	8000c88 <__aeabi_uldivmod>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4b38      	ldr	r3, [pc, #224]	@ (800a8a0 <UART_SetConfig+0x4e4>)
 800a7be:	fba3 2301 	umull	r2, r3, r3, r1
 800a7c2:	095b      	lsrs	r3, r3, #5
 800a7c4:	2264      	movs	r2, #100	@ 0x64
 800a7c6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ca:	1acb      	subs	r3, r1, r3
 800a7cc:	011b      	lsls	r3, r3, #4
 800a7ce:	3332      	adds	r3, #50	@ 0x32
 800a7d0:	4a33      	ldr	r2, [pc, #204]	@ (800a8a0 <UART_SetConfig+0x4e4>)
 800a7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d6:	095b      	lsrs	r3, r3, #5
 800a7d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a7dc:	441c      	add	r4, r3
 800a7de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a7e6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a7e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a7ec:	4642      	mov	r2, r8
 800a7ee:	464b      	mov	r3, r9
 800a7f0:	1891      	adds	r1, r2, r2
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	415b      	adcs	r3, r3
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7fc:	4641      	mov	r1, r8
 800a7fe:	1851      	adds	r1, r2, r1
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	4649      	mov	r1, r9
 800a804:	414b      	adcs	r3, r1
 800a806:	607b      	str	r3, [r7, #4]
 800a808:	f04f 0200 	mov.w	r2, #0
 800a80c:	f04f 0300 	mov.w	r3, #0
 800a810:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a814:	4659      	mov	r1, fp
 800a816:	00cb      	lsls	r3, r1, #3
 800a818:	4651      	mov	r1, sl
 800a81a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a81e:	4651      	mov	r1, sl
 800a820:	00ca      	lsls	r2, r1, #3
 800a822:	4610      	mov	r0, r2
 800a824:	4619      	mov	r1, r3
 800a826:	4603      	mov	r3, r0
 800a828:	4642      	mov	r2, r8
 800a82a:	189b      	adds	r3, r3, r2
 800a82c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a82e:	464b      	mov	r3, r9
 800a830:	460a      	mov	r2, r1
 800a832:	eb42 0303 	adc.w	r3, r2, r3
 800a836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	663b      	str	r3, [r7, #96]	@ 0x60
 800a842:	667a      	str	r2, [r7, #100]	@ 0x64
 800a844:	f04f 0200 	mov.w	r2, #0
 800a848:	f04f 0300 	mov.w	r3, #0
 800a84c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a850:	4649      	mov	r1, r9
 800a852:	008b      	lsls	r3, r1, #2
 800a854:	4641      	mov	r1, r8
 800a856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a85a:	4641      	mov	r1, r8
 800a85c:	008a      	lsls	r2, r1, #2
 800a85e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a862:	f7f6 fa11 	bl	8000c88 <__aeabi_uldivmod>
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a0 <UART_SetConfig+0x4e4>)
 800a86c:	fba3 1302 	umull	r1, r3, r3, r2
 800a870:	095b      	lsrs	r3, r3, #5
 800a872:	2164      	movs	r1, #100	@ 0x64
 800a874:	fb01 f303 	mul.w	r3, r1, r3
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	011b      	lsls	r3, r3, #4
 800a87c:	3332      	adds	r3, #50	@ 0x32
 800a87e:	4a08      	ldr	r2, [pc, #32]	@ (800a8a0 <UART_SetConfig+0x4e4>)
 800a880:	fba2 2303 	umull	r2, r3, r2, r3
 800a884:	095b      	lsrs	r3, r3, #5
 800a886:	f003 020f 	and.w	r2, r3, #15
 800a88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4422      	add	r2, r4
 800a892:	609a      	str	r2, [r3, #8]
}
 800a894:	bf00      	nop
 800a896:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a89a:	46bd      	mov	sp, r7
 800a89c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8a0:	51eb851f 	.word	0x51eb851f

0800a8a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a8b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8b6:	2b84      	cmp	r3, #132	@ 0x84
 800a8b8:	d005      	beq.n	800a8c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a8ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	3303      	adds	r3, #3
 800a8c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8da:	f3ef 8305 	mrs	r3, IPSR
 800a8de:	607b      	str	r3, [r7, #4]
  return(result);
 800a8e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	bf14      	ite	ne
 800a8e6:	2301      	movne	r3, #1
 800a8e8:	2300      	moveq	r3, #0
 800a8ea:	b2db      	uxtb	r3, r3
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a8fc:	f001 f964 	bl	800bbc8 <vTaskStartScheduler>
  
  return osOK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	bd80      	pop	{r7, pc}

0800a906 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a906:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a908:	b089      	sub	sp, #36	@ 0x24
 800a90a:	af04      	add	r7, sp, #16
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d020      	beq.n	800a95a <osThreadCreate+0x54>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d01c      	beq.n	800a95a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685c      	ldr	r4, [r3, #4]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	691e      	ldr	r6, [r3, #16]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff ffb6 	bl	800a8a4 <makeFreeRtosPriority>
 800a938:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a942:	9202      	str	r2, [sp, #8]
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	9100      	str	r1, [sp, #0]
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	4632      	mov	r2, r6
 800a94c:	4629      	mov	r1, r5
 800a94e:	4620      	mov	r0, r4
 800a950:	f000 ff64 	bl	800b81c <xTaskCreateStatic>
 800a954:	4603      	mov	r3, r0
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	e01c      	b.n	800a994 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	685c      	ldr	r4, [r3, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a966:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a96e:	4618      	mov	r0, r3
 800a970:	f7ff ff98 	bl	800a8a4 <makeFreeRtosPriority>
 800a974:	4602      	mov	r2, r0
 800a976:	f107 030c 	add.w	r3, r7, #12
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	9200      	str	r2, [sp, #0]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	4632      	mov	r2, r6
 800a982:	4629      	mov	r1, r5
 800a984:	4620      	mov	r0, r4
 800a986:	f000 ffa9 	bl	800b8dc <xTaskCreate>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d001      	beq.n	800a994 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a990:	2300      	movs	r3, #0
 800a992:	e000      	b.n	800a996 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a994:	68fb      	ldr	r3, [r7, #12]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a99e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <osDelay+0x16>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	e000      	b.n	800a9b6 <osDelay+0x18>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f001 f8d0 	bl	800bb5c <vTaskDelay>
  
  return osOK;
 800a9bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b082      	sub	sp, #8
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d007      	beq.n	800a9e6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	2001      	movs	r0, #1
 800a9de:	f000 fab6 	bl	800af4e <xQueueCreateMutexStatic>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	e003      	b.n	800a9ee <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	f000 fa99 	bl	800af1e <xQueueCreateMutex>
 800a9ec:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3708      	adds	r7, #8
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aa02:	2300      	movs	r3, #0
 800aa04:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <osMutexWait+0x18>
    return osErrorParameter;
 800aa0c:	2380      	movs	r3, #128	@ 0x80
 800aa0e:	e03a      	b.n	800aa86 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d103      	bne.n	800aa24 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800aa1c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	e009      	b.n	800aa38 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d006      	beq.n	800aa38 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <osMutexWait+0x40>
      ticks = 1;
 800aa34:	2301      	movs	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aa38:	f7ff ff4c 	bl	800a8d4 <inHandlerMode>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d017      	beq.n	800aa72 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aa42:	f107 0308 	add.w	r3, r7, #8
 800aa46:	461a      	mov	r2, r3
 800aa48:	2100      	movs	r1, #0
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fd3c 	bl	800b4c8 <xQueueReceiveFromISR>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d001      	beq.n	800aa5a <osMutexWait+0x62>
      return osErrorOS;
 800aa56:	23ff      	movs	r3, #255	@ 0xff
 800aa58:	e015      	b.n	800aa86 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d011      	beq.n	800aa84 <osMutexWait+0x8c>
 800aa60:	4b0b      	ldr	r3, [pc, #44]	@ (800aa90 <osMutexWait+0x98>)
 800aa62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	e008      	b.n	800aa84 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800aa72:	68f9      	ldr	r1, [r7, #12]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fc17 	bl	800b2a8 <xQueueSemaphoreTake>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d001      	beq.n	800aa84 <osMutexWait+0x8c>
    return osErrorOS;
 800aa80:	23ff      	movs	r3, #255	@ 0xff
 800aa82:	e000      	b.n	800aa86 <osMutexWait+0x8e>
  }
  
  return osOK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	e000ed04 	.word	0xe000ed04

0800aa94 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800aaa4:	f7ff ff16 	bl	800a8d4 <inHandlerMode>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d016      	beq.n	800aadc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aaae:	f107 0308 	add.w	r3, r7, #8
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fb67 	bl	800b188 <xQueueGiveFromISR>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d001      	beq.n	800aac4 <osMutexRelease+0x30>
      return osErrorOS;
 800aac0:	23ff      	movs	r3, #255	@ 0xff
 800aac2:	e017      	b.n	800aaf4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d013      	beq.n	800aaf2 <osMutexRelease+0x5e>
 800aaca:	4b0c      	ldr	r3, [pc, #48]	@ (800aafc <osMutexRelease+0x68>)
 800aacc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aad0:	601a      	str	r2, [r3, #0]
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	e00a      	b.n	800aaf2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800aadc:	2300      	movs	r3, #0
 800aade:	2200      	movs	r2, #0
 800aae0:	2100      	movs	r1, #0
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fa4e 	bl	800af84 <xQueueGenericSend>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d001      	beq.n	800aaf2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800aaee:	23ff      	movs	r3, #255	@ 0xff
 800aaf0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f103 0208 	add.w	r2, r3, #8
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f04f 32ff 	mov.w	r2, #4294967295
 800ab18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f103 0208 	add.w	r2, r3, #8
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f103 0208 	add.w	r2, r3, #8
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ab4e:	bf00      	nop
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b085      	sub	sp, #20
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	689a      	ldr	r2, [r3, #8]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
}
 800ab96:	bf00      	nop
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aba2:	b480      	push	{r7}
 800aba4:	b085      	sub	sp, #20
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb8:	d103      	bne.n	800abc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e00c      	b.n	800abdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3308      	adds	r3, #8
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	e002      	b.n	800abd0 <vListInsert+0x2e>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d2f6      	bcs.n	800abca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	683a      	ldr	r2, [r7, #0]
 800abea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	601a      	str	r2, [r3, #0]
}
 800ac08:	bf00      	nop
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	6892      	ldr	r2, [r2, #8]
 800ac2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	6852      	ldr	r2, [r2, #4]
 800ac34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d103      	bne.n	800ac48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689a      	ldr	r2, [r3, #8]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	1e5a      	subs	r2, r3, #1
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ac94:	f001 ff20 	bl	800cad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aca0:	68f9      	ldr	r1, [r7, #12]
 800aca2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aca4:	fb01 f303 	mul.w	r3, r1, r3
 800aca8:	441a      	add	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acc4:	3b01      	subs	r3, #1
 800acc6:	68f9      	ldr	r1, [r7, #12]
 800acc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800acca:	fb01 f303 	mul.w	r3, r1, r3
 800acce:	441a      	add	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	22ff      	movs	r2, #255	@ 0xff
 800acd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	22ff      	movs	r2, #255	@ 0xff
 800ace0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d114      	bne.n	800ad14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d01a      	beq.n	800ad28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3310      	adds	r3, #16
 800acf6:	4618      	mov	r0, r3
 800acf8:	f001 f9d6 	bl	800c0a8 <xTaskRemoveFromEventList>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d012      	beq.n	800ad28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ad02:	4b0d      	ldr	r3, [pc, #52]	@ (800ad38 <xQueueGenericReset+0xd0>)
 800ad04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	e009      	b.n	800ad28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	3310      	adds	r3, #16
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fef1 	bl	800ab00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	3324      	adds	r3, #36	@ 0x24
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff feec 	bl	800ab00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ad28:	f001 ff08 	bl	800cb3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ad2c:	2301      	movs	r3, #1
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	e000ed04 	.word	0xe000ed04

0800ad3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08e      	sub	sp, #56	@ 0x38
 800ad40:	af02      	add	r7, sp, #8
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10b      	bne.n	800ad68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ad50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad62:	bf00      	nop
 800ad64:	bf00      	nop
 800ad66:	e7fd      	b.n	800ad64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10b      	bne.n	800ad86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	e7fd      	b.n	800ad82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <xQueueGenericCreateStatic+0x56>
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <xQueueGenericCreateStatic+0x5a>
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <xQueueGenericCreateStatic+0x5c>
 800ad96:	2300      	movs	r3, #0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10b      	bne.n	800adb4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	623b      	str	r3, [r7, #32]
}
 800adae:	bf00      	nop
 800adb0:	bf00      	nop
 800adb2:	e7fd      	b.n	800adb0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d102      	bne.n	800adc0 <xQueueGenericCreateStatic+0x84>
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <xQueueGenericCreateStatic+0x88>
 800adc0:	2301      	movs	r3, #1
 800adc2:	e000      	b.n	800adc6 <xQueueGenericCreateStatic+0x8a>
 800adc4:	2300      	movs	r3, #0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10b      	bne.n	800ade2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	61fb      	str	r3, [r7, #28]
}
 800addc:	bf00      	nop
 800adde:	bf00      	nop
 800ade0:	e7fd      	b.n	800adde <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ade2:	2348      	movs	r3, #72	@ 0x48
 800ade4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2b48      	cmp	r3, #72	@ 0x48
 800adea:	d00b      	beq.n	800ae04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	61bb      	str	r3, [r7, #24]
}
 800adfe:	bf00      	nop
 800ae00:	bf00      	nop
 800ae02:	e7fd      	b.n	800ae00 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ae0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00d      	beq.n	800ae2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ae10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	4613      	mov	r3, r2
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	68b9      	ldr	r1, [r7, #8]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 f840 	bl	800aeac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ae2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3730      	adds	r7, #48	@ 0x30
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b08a      	sub	sp, #40	@ 0x28
 800ae3a:	af02      	add	r7, sp, #8
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	4613      	mov	r3, r2
 800ae42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10b      	bne.n	800ae62 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	613b      	str	r3, [r7, #16]
}
 800ae5c:	bf00      	nop
 800ae5e:	bf00      	nop
 800ae60:	e7fd      	b.n	800ae5e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	fb02 f303 	mul.w	r3, r2, r3
 800ae6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	3348      	adds	r3, #72	@ 0x48
 800ae70:	4618      	mov	r0, r3
 800ae72:	f001 ff53 	bl	800cd1c <pvPortMalloc>
 800ae76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d011      	beq.n	800aea2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	3348      	adds	r3, #72	@ 0x48
 800ae86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ae90:	79fa      	ldrb	r2, [r7, #7]
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	4613      	mov	r3, r2
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f000 f805 	bl	800aeac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aea2:	69bb      	ldr	r3, [r7, #24]
	}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3720      	adds	r7, #32
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d103      	bne.n	800aec8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	e002      	b.n	800aece <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aeda:	2101      	movs	r1, #1
 800aedc:	69b8      	ldr	r0, [r7, #24]
 800aede:	f7ff fec3 	bl	800ac68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aee2:	bf00      	nop
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00e      	beq.n	800af16 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2200      	movs	r2, #0
 800aefc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800af0a:	2300      	movs	r3, #0
 800af0c:	2200      	movs	r2, #0
 800af0e:	2100      	movs	r1, #0
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f837 	bl	800af84 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800af16:	bf00      	nop
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b086      	sub	sp, #24
 800af22:	af00      	add	r7, sp, #0
 800af24:	4603      	mov	r3, r0
 800af26:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af28:	2301      	movs	r3, #1
 800af2a:	617b      	str	r3, [r7, #20]
 800af2c:	2300      	movs	r3, #0
 800af2e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800af30:	79fb      	ldrb	r3, [r7, #7]
 800af32:	461a      	mov	r2, r3
 800af34:	6939      	ldr	r1, [r7, #16]
 800af36:	6978      	ldr	r0, [r7, #20]
 800af38:	f7ff ff7d 	bl	800ae36 <xQueueGenericCreate>
 800af3c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f7ff ffd3 	bl	800aeea <prvInitialiseMutex>

		return xNewQueue;
 800af44:	68fb      	ldr	r3, [r7, #12]
	}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b088      	sub	sp, #32
 800af52:	af02      	add	r7, sp, #8
 800af54:	4603      	mov	r3, r0
 800af56:	6039      	str	r1, [r7, #0]
 800af58:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800af5a:	2301      	movs	r3, #1
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	2300      	movs	r3, #0
 800af60:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2200      	movs	r2, #0
 800af6a:	6939      	ldr	r1, [r7, #16]
 800af6c:	6978      	ldr	r0, [r7, #20]
 800af6e:	f7ff fee5 	bl	800ad3c <xQueueGenericCreateStatic>
 800af72:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7ff ffb8 	bl	800aeea <prvInitialiseMutex>

		return xNewQueue;
 800af7a:	68fb      	ldr	r3, [r7, #12]
	}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08e      	sub	sp, #56	@ 0x38
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800af92:	2300      	movs	r3, #0
 800af94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10b      	bne.n	800afb8 <xQueueGenericSend+0x34>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	e7fd      	b.n	800afb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d103      	bne.n	800afc6 <xQueueGenericSend+0x42>
 800afbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <xQueueGenericSend+0x46>
 800afc6:	2301      	movs	r3, #1
 800afc8:	e000      	b.n	800afcc <xQueueGenericSend+0x48>
 800afca:	2300      	movs	r3, #0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10b      	bne.n	800afe8 <xQueueGenericSend+0x64>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
 800afe6:	e7fd      	b.n	800afe4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d103      	bne.n	800aff6 <xQueueGenericSend+0x72>
 800afee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d101      	bne.n	800affa <xQueueGenericSend+0x76>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <xQueueGenericSend+0x78>
 800affa:	2300      	movs	r3, #0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10b      	bne.n	800b018 <xQueueGenericSend+0x94>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	623b      	str	r3, [r7, #32]
}
 800b012:	bf00      	nop
 800b014:	bf00      	nop
 800b016:	e7fd      	b.n	800b014 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b018:	f001 fa06 	bl	800c428 <xTaskGetSchedulerState>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d102      	bne.n	800b028 <xQueueGenericSend+0xa4>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <xQueueGenericSend+0xa8>
 800b028:	2301      	movs	r3, #1
 800b02a:	e000      	b.n	800b02e <xQueueGenericSend+0xaa>
 800b02c:	2300      	movs	r3, #0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10b      	bne.n	800b04a <xQueueGenericSend+0xc6>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	61fb      	str	r3, [r7, #28]
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop
 800b048:	e7fd      	b.n	800b046 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b04a:	f001 fd45 	bl	800cad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b056:	429a      	cmp	r2, r3
 800b058:	d302      	bcc.n	800b060 <xQueueGenericSend+0xdc>
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d129      	bne.n	800b0b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b066:	f000 fac9 	bl	800b5fc <prvCopyDataToQueue>
 800b06a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b070:	2b00      	cmp	r3, #0
 800b072:	d010      	beq.n	800b096 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b076:	3324      	adds	r3, #36	@ 0x24
 800b078:	4618      	mov	r0, r3
 800b07a:	f001 f815 	bl	800c0a8 <xTaskRemoveFromEventList>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d013      	beq.n	800b0ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b084:	4b3f      	ldr	r3, [pc, #252]	@ (800b184 <xQueueGenericSend+0x200>)
 800b086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b08a:	601a      	str	r2, [r3, #0]
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	e00a      	b.n	800b0ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d007      	beq.n	800b0ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b09c:	4b39      	ldr	r3, [pc, #228]	@ (800b184 <xQueueGenericSend+0x200>)
 800b09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b0ac:	f001 fd46 	bl	800cb3c <vPortExitCritical>
				return pdPASS;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e063      	b.n	800b17c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d103      	bne.n	800b0c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b0ba:	f001 fd3f 	bl	800cb3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e05c      	b.n	800b17c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d106      	bne.n	800b0d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0c8:	f107 0314 	add.w	r3, r7, #20
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f001 f84f 	bl	800c170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0d6:	f001 fd31 	bl	800cb3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0da:	f000 fdd7 	bl	800bc8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0de:	f001 fcfb 	bl	800cad8 <vPortEnterCritical>
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0e8:	b25b      	sxtb	r3, r3
 800b0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ee:	d103      	bne.n	800b0f8 <xQueueGenericSend+0x174>
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0fe:	b25b      	sxtb	r3, r3
 800b100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b104:	d103      	bne.n	800b10e <xQueueGenericSend+0x18a>
 800b106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b10e:	f001 fd15 	bl	800cb3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b112:	1d3a      	adds	r2, r7, #4
 800b114:	f107 0314 	add.w	r3, r7, #20
 800b118:	4611      	mov	r1, r2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 f83e 	bl	800c19c <xTaskCheckForTimeOut>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d124      	bne.n	800b170 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b126:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b128:	f000 fb60 	bl	800b7ec <prvIsQueueFull>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d018      	beq.n	800b164 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	3310      	adds	r3, #16
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 ff8e 	bl	800c05c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b142:	f000 faeb 	bl	800b71c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b146:	f000 fdaf 	bl	800bca8 <xTaskResumeAll>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f47f af7c 	bne.w	800b04a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b152:	4b0c      	ldr	r3, [pc, #48]	@ (800b184 <xQueueGenericSend+0x200>)
 800b154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b158:	601a      	str	r2, [r3, #0]
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	e772      	b.n	800b04a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b166:	f000 fad9 	bl	800b71c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b16a:	f000 fd9d 	bl	800bca8 <xTaskResumeAll>
 800b16e:	e76c      	b.n	800b04a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b170:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b172:	f000 fad3 	bl	800b71c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b176:	f000 fd97 	bl	800bca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b17a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3738      	adds	r7, #56	@ 0x38
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}
 800b184:	e000ed04 	.word	0xe000ed04

0800b188 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08e      	sub	sp, #56	@ 0x38
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10b      	bne.n	800b1b4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	623b      	str	r3, [r7, #32]
}
 800b1ae:	bf00      	nop
 800b1b0:	bf00      	nop
 800b1b2:	e7fd      	b.n	800b1b0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	61fb      	str	r3, [r7, #28]
}
 800b1ce:	bf00      	nop
 800b1d0:	bf00      	nop
 800b1d2:	e7fd      	b.n	800b1d0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d103      	bne.n	800b1e4 <xQueueGiveFromISR+0x5c>
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d101      	bne.n	800b1e8 <xQueueGiveFromISR+0x60>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e000      	b.n	800b1ea <xQueueGiveFromISR+0x62>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10b      	bne.n	800b206 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	61bb      	str	r3, [r7, #24]
}
 800b200:	bf00      	nop
 800b202:	bf00      	nop
 800b204:	e7fd      	b.n	800b202 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b206:	f001 fd47 	bl	800cc98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b20a:	f3ef 8211 	mrs	r2, BASEPRI
 800b20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	617a      	str	r2, [r7, #20]
 800b220:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b222:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b224:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b22a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b232:	429a      	cmp	r2, r3
 800b234:	d22b      	bcs.n	800b28e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b23c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b242:	1c5a      	adds	r2, r3, #1
 800b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b246:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b248:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b250:	d112      	bne.n	800b278 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b256:	2b00      	cmp	r3, #0
 800b258:	d016      	beq.n	800b288 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25c:	3324      	adds	r3, #36	@ 0x24
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 ff22 	bl	800c0a8 <xTaskRemoveFromEventList>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00e      	beq.n	800b288 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00b      	beq.n	800b288 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2201      	movs	r2, #1
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	e007      	b.n	800b288 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b27c:	3301      	adds	r3, #1
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	b25a      	sxtb	r2, r3
 800b282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b288:	2301      	movs	r3, #1
 800b28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b28c:	e001      	b.n	800b292 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	637b      	str	r3, [r7, #52]	@ 0x34
 800b292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b294:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b29c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3738      	adds	r7, #56	@ 0x38
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08e      	sub	sp, #56	@ 0x38
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10b      	bne.n	800b2dc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	623b      	str	r3, [r7, #32]
}
 800b2d6:	bf00      	nop
 800b2d8:	bf00      	nop
 800b2da:	e7fd      	b.n	800b2d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00b      	beq.n	800b2fc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	61fb      	str	r3, [r7, #28]
}
 800b2f6:	bf00      	nop
 800b2f8:	bf00      	nop
 800b2fa:	e7fd      	b.n	800b2f8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2fc:	f001 f894 	bl	800c428 <xTaskGetSchedulerState>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d102      	bne.n	800b30c <xQueueSemaphoreTake+0x64>
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <xQueueSemaphoreTake+0x68>
 800b30c:	2301      	movs	r3, #1
 800b30e:	e000      	b.n	800b312 <xQueueSemaphoreTake+0x6a>
 800b310:	2300      	movs	r3, #0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	61bb      	str	r3, [r7, #24]
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	e7fd      	b.n	800b32a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b32e:	f001 fbd3 	bl	800cad8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b336:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d024      	beq.n	800b388 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b340:	1e5a      	subs	r2, r3, #1
 800b342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b344:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d104      	bne.n	800b358 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b34e:	f001 fa17 	bl	800c780 <pvTaskIncrementMutexHeldCount>
 800b352:	4602      	mov	r2, r0
 800b354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b356:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00f      	beq.n	800b380 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b362:	3310      	adds	r3, #16
 800b364:	4618      	mov	r0, r3
 800b366:	f000 fe9f 	bl	800c0a8 <xTaskRemoveFromEventList>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d007      	beq.n	800b380 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b370:	4b54      	ldr	r3, [pc, #336]	@ (800b4c4 <xQueueSemaphoreTake+0x21c>)
 800b372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b376:	601a      	str	r2, [r3, #0]
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b380:	f001 fbdc 	bl	800cb3c <vPortExitCritical>
				return pdPASS;
 800b384:	2301      	movs	r3, #1
 800b386:	e098      	b.n	800b4ba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d112      	bne.n	800b3b4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00b      	beq.n	800b3ac <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	617b      	str	r3, [r7, #20]
}
 800b3a6:	bf00      	nop
 800b3a8:	bf00      	nop
 800b3aa:	e7fd      	b.n	800b3a8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b3ac:	f001 fbc6 	bl	800cb3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e082      	b.n	800b4ba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d106      	bne.n	800b3c8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3ba:	f107 030c 	add.w	r3, r7, #12
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fed6 	bl	800c170 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3c8:	f001 fbb8 	bl	800cb3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3cc:	f000 fc5e 	bl	800bc8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b3d0:	f001 fb82 	bl	800cad8 <vPortEnterCritical>
 800b3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3da:	b25b      	sxtb	r3, r3
 800b3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e0:	d103      	bne.n	800b3ea <xQueueSemaphoreTake+0x142>
 800b3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3f0:	b25b      	sxtb	r3, r3
 800b3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f6:	d103      	bne.n	800b400 <xQueueSemaphoreTake+0x158>
 800b3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b400:	f001 fb9c 	bl	800cb3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b404:	463a      	mov	r2, r7
 800b406:	f107 030c 	add.w	r3, r7, #12
 800b40a:	4611      	mov	r1, r2
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 fec5 	bl	800c19c <xTaskCheckForTimeOut>
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d132      	bne.n	800b47e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b418:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b41a:	f000 f9d1 	bl	800b7c0 <prvIsQueueEmpty>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d026      	beq.n	800b472 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d109      	bne.n	800b440 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b42c:	f001 fb54 	bl	800cad8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	4618      	mov	r0, r3
 800b436:	f001 f815 	bl	800c464 <xTaskPriorityInherit>
 800b43a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b43c:	f001 fb7e 	bl	800cb3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b442:	3324      	adds	r3, #36	@ 0x24
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	4611      	mov	r1, r2
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 fe07 	bl	800c05c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b44e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b450:	f000 f964 	bl	800b71c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b454:	f000 fc28 	bl	800bca8 <xTaskResumeAll>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f47f af67 	bne.w	800b32e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b460:	4b18      	ldr	r3, [pc, #96]	@ (800b4c4 <xQueueSemaphoreTake+0x21c>)
 800b462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	e75d      	b.n	800b32e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b474:	f000 f952 	bl	800b71c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b478:	f000 fc16 	bl	800bca8 <xTaskResumeAll>
 800b47c:	e757      	b.n	800b32e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b47e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b480:	f000 f94c 	bl	800b71c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b484:	f000 fc10 	bl	800bca8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b488:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b48a:	f000 f999 	bl	800b7c0 <prvIsQueueEmpty>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	f43f af4c 	beq.w	800b32e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00d      	beq.n	800b4b8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b49c:	f001 fb1c 	bl	800cad8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b4a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b4a2:	f000 f893 	bl	800b5cc <prvGetDisinheritPriorityAfterTimeout>
 800b4a6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f001 f8d6 	bl	800c660 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b4b4:	f001 fb42 	bl	800cb3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b4b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3738      	adds	r7, #56	@ 0x38
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	e000ed04 	.word	0xe000ed04

0800b4c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08e      	sub	sp, #56	@ 0x38
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10b      	bne.n	800b4f6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	623b      	str	r3, [r7, #32]
}
 800b4f0:	bf00      	nop
 800b4f2:	bf00      	nop
 800b4f4:	e7fd      	b.n	800b4f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d103      	bne.n	800b504 <xQueueReceiveFromISR+0x3c>
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <xQueueReceiveFromISR+0x40>
 800b504:	2301      	movs	r3, #1
 800b506:	e000      	b.n	800b50a <xQueueReceiveFromISR+0x42>
 800b508:	2300      	movs	r3, #0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10b      	bne.n	800b526 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	61fb      	str	r3, [r7, #28]
}
 800b520:	bf00      	nop
 800b522:	bf00      	nop
 800b524:	e7fd      	b.n	800b522 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b526:	f001 fbb7 	bl	800cc98 <vPortValidateInterruptPriority>
	__asm volatile
 800b52a:	f3ef 8211 	mrs	r2, BASEPRI
 800b52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	61ba      	str	r2, [r7, #24]
 800b540:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b542:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b544:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b54a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d02f      	beq.n	800b5b2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b55c:	68b9      	ldr	r1, [r7, #8]
 800b55e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b560:	f000 f8b6 	bl	800b6d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b566:	1e5a      	subs	r2, r3, #1
 800b568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b56c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b574:	d112      	bne.n	800b59c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d016      	beq.n	800b5ac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b580:	3310      	adds	r3, #16
 800b582:	4618      	mov	r0, r3
 800b584:	f000 fd90 	bl	800c0a8 <xTaskRemoveFromEventList>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00e      	beq.n	800b5ac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	601a      	str	r2, [r3, #0]
 800b59a:	e007      	b.n	800b5ac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b59c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	b25a      	sxtb	r2, r3
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5b0:	e001      	b.n	800b5b6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	f383 8811 	msr	BASEPRI, r3
}
 800b5c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3738      	adds	r7, #56	@ 0x38
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d006      	beq.n	800b5ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f1c3 0307 	rsb	r3, r3, #7
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	e001      	b.n	800b5ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
	}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b610:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10d      	bne.n	800b636 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d14d      	bne.n	800b6be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	4618      	mov	r0, r3
 800b628:	f000 ff92 	bl	800c550 <xTaskPriorityDisinherit>
 800b62c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	609a      	str	r2, [r3, #8]
 800b634:	e043      	b.n	800b6be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d119      	bne.n	800b670 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6858      	ldr	r0, [r3, #4]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b644:	461a      	mov	r2, r3
 800b646:	68b9      	ldr	r1, [r7, #8]
 800b648:	f003 fbed 	bl	800ee26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b654:	441a      	add	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	429a      	cmp	r2, r3
 800b664:	d32b      	bcc.n	800b6be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	605a      	str	r2, [r3, #4]
 800b66e:	e026      	b.n	800b6be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	68d8      	ldr	r0, [r3, #12]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b678:	461a      	mov	r2, r3
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	f003 fbd3 	bl	800ee26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	68da      	ldr	r2, [r3, #12]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b688:	425b      	negs	r3, r3
 800b68a:	441a      	add	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d207      	bcs.n	800b6ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a4:	425b      	negs	r3, r3
 800b6a6:	441a      	add	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d105      	bne.n	800b6be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b6c6:	697b      	ldr	r3, [r7, #20]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d018      	beq.n	800b714 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68da      	ldr	r2, [r3, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ea:	441a      	add	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d303      	bcc.n	800b704 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68d9      	ldr	r1, [r3, #12]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b70c:	461a      	mov	r2, r3
 800b70e:	6838      	ldr	r0, [r7, #0]
 800b710:	f003 fb89 	bl	800ee26 <memcpy>
	}
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b724:	f001 f9d8 	bl	800cad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b72e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b730:	e011      	b.n	800b756 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b736:	2b00      	cmp	r3, #0
 800b738:	d012      	beq.n	800b760 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	3324      	adds	r3, #36	@ 0x24
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 fcb2 	bl	800c0a8 <xTaskRemoveFromEventList>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b74a:	f000 fd8b 	bl	800c264 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	3b01      	subs	r3, #1
 800b752:	b2db      	uxtb	r3, r3
 800b754:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dce9      	bgt.n	800b732 <prvUnlockQueue+0x16>
 800b75e:	e000      	b.n	800b762 <prvUnlockQueue+0x46>
					break;
 800b760:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	22ff      	movs	r2, #255	@ 0xff
 800b766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b76a:	f001 f9e7 	bl	800cb3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b76e:	f001 f9b3 	bl	800cad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b778:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b77a:	e011      	b.n	800b7a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d012      	beq.n	800b7aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3310      	adds	r3, #16
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 fc8d 	bl	800c0a8 <xTaskRemoveFromEventList>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b794:	f000 fd66 	bl	800c264 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b798:	7bbb      	ldrb	r3, [r7, #14]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	dce9      	bgt.n	800b77c <prvUnlockQueue+0x60>
 800b7a8:	e000      	b.n	800b7ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	22ff      	movs	r2, #255	@ 0xff
 800b7b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b7b4:	f001 f9c2 	bl	800cb3c <vPortExitCritical>
}
 800b7b8:	bf00      	nop
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7c8:	f001 f986 	bl	800cad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e001      	b.n	800b7de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7de:	f001 f9ad 	bl	800cb3c <vPortExitCritical>

	return xReturn;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7f4:	f001 f970 	bl	800cad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b800:	429a      	cmp	r2, r3
 800b802:	d102      	bne.n	800b80a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b804:	2301      	movs	r3, #1
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	e001      	b.n	800b80e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b80e:	f001 f995 	bl	800cb3c <vPortExitCritical>

	return xReturn;
 800b812:	68fb      	ldr	r3, [r7, #12]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b08e      	sub	sp, #56	@ 0x38
 800b820:	af04      	add	r7, sp, #16
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10b      	bne.n	800b848 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	623b      	str	r3, [r7, #32]
}
 800b842:	bf00      	nop
 800b844:	bf00      	nop
 800b846:	e7fd      	b.n	800b844 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10b      	bne.n	800b866 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	61fb      	str	r3, [r7, #28]
}
 800b860:	bf00      	nop
 800b862:	bf00      	nop
 800b864:	e7fd      	b.n	800b862 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b866:	2354      	movs	r3, #84	@ 0x54
 800b868:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	2b54      	cmp	r3, #84	@ 0x54
 800b86e:	d00b      	beq.n	800b888 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	61bb      	str	r3, [r7, #24]
}
 800b882:	bf00      	nop
 800b884:	bf00      	nop
 800b886:	e7fd      	b.n	800b884 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b888:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d01e      	beq.n	800b8ce <xTaskCreateStatic+0xb2>
 800b890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b892:	2b00      	cmp	r3, #0
 800b894:	d01b      	beq.n	800b8ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b898:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b89e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9303      	str	r3, [sp, #12]
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ae:	9302      	str	r3, [sp, #8]
 800b8b0:	f107 0314 	add.w	r3, r7, #20
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	68b9      	ldr	r1, [r7, #8]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 f850 	bl	800b966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b8c8:	f000 f8de 	bl	800ba88 <prvAddNewTaskToReadyList>
 800b8cc:	e001      	b.n	800b8d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8d2:	697b      	ldr	r3, [r7, #20]
	}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3728      	adds	r7, #40	@ 0x28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08c      	sub	sp, #48	@ 0x30
 800b8e0:	af04      	add	r7, sp, #16
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8ec:	88fb      	ldrh	r3, [r7, #6]
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f001 fa13 	bl	800cd1c <pvPortMalloc>
 800b8f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00e      	beq.n	800b91c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8fe:	2054      	movs	r0, #84	@ 0x54
 800b900:	f001 fa0c 	bl	800cd1c <pvPortMalloc>
 800b904:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	631a      	str	r2, [r3, #48]	@ 0x30
 800b912:	e005      	b.n	800b920 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b914:	6978      	ldr	r0, [r7, #20]
 800b916:	f001 fad5 	bl	800cec4 <vPortFree>
 800b91a:	e001      	b.n	800b920 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b91c:	2300      	movs	r3, #0
 800b91e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d017      	beq.n	800b956 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b92e:	88fa      	ldrh	r2, [r7, #6]
 800b930:	2300      	movs	r3, #0
 800b932:	9303      	str	r3, [sp, #12]
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	9302      	str	r3, [sp, #8]
 800b938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b93a:	9301      	str	r3, [sp, #4]
 800b93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 f80e 	bl	800b966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b94a:	69f8      	ldr	r0, [r7, #28]
 800b94c:	f000 f89c 	bl	800ba88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b950:	2301      	movs	r3, #1
 800b952:	61bb      	str	r3, [r7, #24]
 800b954:	e002      	b.n	800b95c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b956:	f04f 33ff 	mov.w	r3, #4294967295
 800b95a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b95c:	69bb      	ldr	r3, [r7, #24]
	}
 800b95e:	4618      	mov	r0, r3
 800b960:	3720      	adds	r7, #32
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b088      	sub	sp, #32
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	60f8      	str	r0, [r7, #12]
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	607a      	str	r2, [r7, #4]
 800b972:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b976:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	461a      	mov	r2, r3
 800b97e:	21a5      	movs	r1, #165	@ 0xa5
 800b980:	f003 f9d1 	bl	800ed26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b98e:	3b01      	subs	r3, #1
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	f023 0307 	bic.w	r3, r3, #7
 800b99c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	f003 0307 	and.w	r3, r3, #7
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00b      	beq.n	800b9c0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	617b      	str	r3, [r7, #20]
}
 800b9ba:	bf00      	nop
 800b9bc:	bf00      	nop
 800b9be:	e7fd      	b.n	800b9bc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d01f      	beq.n	800ba06 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	61fb      	str	r3, [r7, #28]
 800b9ca:	e012      	b.n	800b9f2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	7819      	ldrb	r1, [r3, #0]
 800b9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	4413      	add	r3, r2
 800b9da:	3334      	adds	r3, #52	@ 0x34
 800b9dc:	460a      	mov	r2, r1
 800b9de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d006      	beq.n	800b9fa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	61fb      	str	r3, [r7, #28]
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	2b0f      	cmp	r3, #15
 800b9f6:	d9e9      	bls.n	800b9cc <prvInitialiseNewTask+0x66>
 800b9f8:	e000      	b.n	800b9fc <prvInitialiseNewTask+0x96>
			{
				break;
 800b9fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ba04:	e003      	b.n	800ba0e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba10:	2b06      	cmp	r3, #6
 800ba12:	d901      	bls.n	800ba18 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba14:	2306      	movs	r3, #6
 800ba16:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba22:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ba24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba26:	2200      	movs	r2, #0
 800ba28:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff f886 	bl	800ab40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba36:	3318      	adds	r3, #24
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7ff f881 	bl	800ab40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	f1c3 0207 	rsb	r2, r3, #7
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba52:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba56:	2200      	movs	r2, #0
 800ba58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	68f9      	ldr	r1, [r7, #12]
 800ba66:	69b8      	ldr	r0, [r7, #24]
 800ba68:	f000 ff04 	bl	800c874 <pxPortInitialiseStack>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba7e:	bf00      	nop
 800ba80:	3720      	adds	r7, #32
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
	...

0800ba88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba90:	f001 f822 	bl	800cad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba94:	4b2a      	ldr	r3, [pc, #168]	@ (800bb40 <prvAddNewTaskToReadyList+0xb8>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	4a29      	ldr	r2, [pc, #164]	@ (800bb40 <prvAddNewTaskToReadyList+0xb8>)
 800ba9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba9e:	4b29      	ldr	r3, [pc, #164]	@ (800bb44 <prvAddNewTaskToReadyList+0xbc>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d109      	bne.n	800baba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800baa6:	4a27      	ldr	r2, [pc, #156]	@ (800bb44 <prvAddNewTaskToReadyList+0xbc>)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800baac:	4b24      	ldr	r3, [pc, #144]	@ (800bb40 <prvAddNewTaskToReadyList+0xb8>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d110      	bne.n	800bad6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bab4:	f000 fbfa 	bl	800c2ac <prvInitialiseTaskLists>
 800bab8:	e00d      	b.n	800bad6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800baba:	4b23      	ldr	r3, [pc, #140]	@ (800bb48 <prvAddNewTaskToReadyList+0xc0>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d109      	bne.n	800bad6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bac2:	4b20      	ldr	r3, [pc, #128]	@ (800bb44 <prvAddNewTaskToReadyList+0xbc>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bacc:	429a      	cmp	r2, r3
 800bace:	d802      	bhi.n	800bad6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bad0:	4a1c      	ldr	r2, [pc, #112]	@ (800bb44 <prvAddNewTaskToReadyList+0xbc>)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bad6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb4c <prvAddNewTaskToReadyList+0xc4>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	4a1b      	ldr	r2, [pc, #108]	@ (800bb4c <prvAddNewTaskToReadyList+0xc4>)
 800bade:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae4:	2201      	movs	r2, #1
 800bae6:	409a      	lsls	r2, r3
 800bae8:	4b19      	ldr	r3, [pc, #100]	@ (800bb50 <prvAddNewTaskToReadyList+0xc8>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4313      	orrs	r3, r2
 800baee:	4a18      	ldr	r2, [pc, #96]	@ (800bb50 <prvAddNewTaskToReadyList+0xc8>)
 800baf0:	6013      	str	r3, [r2, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baf6:	4613      	mov	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4a15      	ldr	r2, [pc, #84]	@ (800bb54 <prvAddNewTaskToReadyList+0xcc>)
 800bb00:	441a      	add	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	3304      	adds	r3, #4
 800bb06:	4619      	mov	r1, r3
 800bb08:	4610      	mov	r0, r2
 800bb0a:	f7ff f826 	bl	800ab5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb0e:	f001 f815 	bl	800cb3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb12:	4b0d      	ldr	r3, [pc, #52]	@ (800bb48 <prvAddNewTaskToReadyList+0xc0>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00e      	beq.n	800bb38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb1a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb44 <prvAddNewTaskToReadyList+0xbc>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d207      	bcs.n	800bb38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb28:	4b0b      	ldr	r3, [pc, #44]	@ (800bb58 <prvAddNewTaskToReadyList+0xd0>)
 800bb2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	20000b98 	.word	0x20000b98
 800bb44:	20000a98 	.word	0x20000a98
 800bb48:	20000ba4 	.word	0x20000ba4
 800bb4c:	20000bb4 	.word	0x20000bb4
 800bb50:	20000ba0 	.word	0x20000ba0
 800bb54:	20000a9c 	.word	0x20000a9c
 800bb58:	e000ed04 	.word	0xe000ed04

0800bb5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb64:	2300      	movs	r3, #0
 800bb66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d018      	beq.n	800bba0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb6e:	4b14      	ldr	r3, [pc, #80]	@ (800bbc0 <vTaskDelay+0x64>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00b      	beq.n	800bb8e <vTaskDelay+0x32>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	60bb      	str	r3, [r7, #8]
}
 800bb88:	bf00      	nop
 800bb8a:	bf00      	nop
 800bb8c:	e7fd      	b.n	800bb8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb8e:	f000 f87d 	bl	800bc8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb92:	2100      	movs	r1, #0
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 fe07 	bl	800c7a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb9a:	f000 f885 	bl	800bca8 <xTaskResumeAll>
 800bb9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d107      	bne.n	800bbb6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bba6:	4b07      	ldr	r3, [pc, #28]	@ (800bbc4 <vTaskDelay+0x68>)
 800bba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbb6:	bf00      	nop
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	20000bc0 	.word	0x20000bc0
 800bbc4:	e000ed04 	.word	0xe000ed04

0800bbc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b08a      	sub	sp, #40	@ 0x28
 800bbcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbd6:	463a      	mov	r2, r7
 800bbd8:	1d39      	adds	r1, r7, #4
 800bbda:	f107 0308 	add.w	r3, r7, #8
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7f5 f9ca 	bl	8000f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	9202      	str	r2, [sp, #8]
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	2300      	movs	r3, #0
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	460a      	mov	r2, r1
 800bbf6:	491f      	ldr	r1, [pc, #124]	@ (800bc74 <vTaskStartScheduler+0xac>)
 800bbf8:	481f      	ldr	r0, [pc, #124]	@ (800bc78 <vTaskStartScheduler+0xb0>)
 800bbfa:	f7ff fe0f 	bl	800b81c <xTaskCreateStatic>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	4a1e      	ldr	r2, [pc, #120]	@ (800bc7c <vTaskStartScheduler+0xb4>)
 800bc02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc04:	4b1d      	ldr	r3, [pc, #116]	@ (800bc7c <vTaskStartScheduler+0xb4>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	617b      	str	r3, [r7, #20]
 800bc10:	e001      	b.n	800bc16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d116      	bne.n	800bc4a <vTaskStartScheduler+0x82>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	613b      	str	r3, [r7, #16]
}
 800bc2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc30:	4b13      	ldr	r3, [pc, #76]	@ (800bc80 <vTaskStartScheduler+0xb8>)
 800bc32:	f04f 32ff 	mov.w	r2, #4294967295
 800bc36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc38:	4b12      	ldr	r3, [pc, #72]	@ (800bc84 <vTaskStartScheduler+0xbc>)
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc3e:	4b12      	ldr	r3, [pc, #72]	@ (800bc88 <vTaskStartScheduler+0xc0>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc44:	f000 fea4 	bl	800c990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc48:	e00f      	b.n	800bc6a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc50:	d10b      	bne.n	800bc6a <vTaskStartScheduler+0xa2>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	60fb      	str	r3, [r7, #12]
}
 800bc64:	bf00      	nop
 800bc66:	bf00      	nop
 800bc68:	e7fd      	b.n	800bc66 <vTaskStartScheduler+0x9e>
}
 800bc6a:	bf00      	nop
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	08010ff4 	.word	0x08010ff4
 800bc78:	0800c27d 	.word	0x0800c27d
 800bc7c:	20000bbc 	.word	0x20000bbc
 800bc80:	20000bb8 	.word	0x20000bb8
 800bc84:	20000ba4 	.word	0x20000ba4
 800bc88:	20000b9c 	.word	0x20000b9c

0800bc8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc90:	4b04      	ldr	r3, [pc, #16]	@ (800bca4 <vTaskSuspendAll+0x18>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3301      	adds	r3, #1
 800bc96:	4a03      	ldr	r2, [pc, #12]	@ (800bca4 <vTaskSuspendAll+0x18>)
 800bc98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc9a:	bf00      	nop
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	20000bc0 	.word	0x20000bc0

0800bca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcb6:	4b42      	ldr	r3, [pc, #264]	@ (800bdc0 <xTaskResumeAll+0x118>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10b      	bne.n	800bcd6 <xTaskResumeAll+0x2e>
	__asm volatile
 800bcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	603b      	str	r3, [r7, #0]
}
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	e7fd      	b.n	800bcd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bcd6:	f000 feff 	bl	800cad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bcda:	4b39      	ldr	r3, [pc, #228]	@ (800bdc0 <xTaskResumeAll+0x118>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3b01      	subs	r3, #1
 800bce0:	4a37      	ldr	r2, [pc, #220]	@ (800bdc0 <xTaskResumeAll+0x118>)
 800bce2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bce4:	4b36      	ldr	r3, [pc, #216]	@ (800bdc0 <xTaskResumeAll+0x118>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d161      	bne.n	800bdb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcec:	4b35      	ldr	r3, [pc, #212]	@ (800bdc4 <xTaskResumeAll+0x11c>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d05d      	beq.n	800bdb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcf4:	e02e      	b.n	800bd54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcf6:	4b34      	ldr	r3, [pc, #208]	@ (800bdc8 <xTaskResumeAll+0x120>)
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3318      	adds	r3, #24
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe ff86 	bl	800ac14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe ff81 	bl	800ac14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd16:	2201      	movs	r2, #1
 800bd18:	409a      	lsls	r2, r3
 800bd1a:	4b2c      	ldr	r3, [pc, #176]	@ (800bdcc <xTaskResumeAll+0x124>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	4a2a      	ldr	r2, [pc, #168]	@ (800bdcc <xTaskResumeAll+0x124>)
 800bd22:	6013      	str	r3, [r2, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd28:	4613      	mov	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	4a27      	ldr	r2, [pc, #156]	@ (800bdd0 <xTaskResumeAll+0x128>)
 800bd32:	441a      	add	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3304      	adds	r3, #4
 800bd38:	4619      	mov	r1, r3
 800bd3a:	4610      	mov	r0, r2
 800bd3c:	f7fe ff0d 	bl	800ab5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd44:	4b23      	ldr	r3, [pc, #140]	@ (800bdd4 <xTaskResumeAll+0x12c>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d302      	bcc.n	800bd54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd4e:	4b22      	ldr	r3, [pc, #136]	@ (800bdd8 <xTaskResumeAll+0x130>)
 800bd50:	2201      	movs	r2, #1
 800bd52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd54:	4b1c      	ldr	r3, [pc, #112]	@ (800bdc8 <xTaskResumeAll+0x120>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1cc      	bne.n	800bcf6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d001      	beq.n	800bd66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd62:	f000 fb41 	bl	800c3e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd66:	4b1d      	ldr	r3, [pc, #116]	@ (800bddc <xTaskResumeAll+0x134>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d010      	beq.n	800bd94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd72:	f000 f837 	bl	800bde4 <xTaskIncrementTick>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd7c:	4b16      	ldr	r3, [pc, #88]	@ (800bdd8 <xTaskResumeAll+0x130>)
 800bd7e:	2201      	movs	r2, #1
 800bd80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1f1      	bne.n	800bd72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd8e:	4b13      	ldr	r3, [pc, #76]	@ (800bddc <xTaskResumeAll+0x134>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd94:	4b10      	ldr	r3, [pc, #64]	@ (800bdd8 <xTaskResumeAll+0x130>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d009      	beq.n	800bdb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bda0:	4b0f      	ldr	r3, [pc, #60]	@ (800bde0 <xTaskResumeAll+0x138>)
 800bda2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bda6:	601a      	str	r2, [r3, #0]
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdb0:	f000 fec4 	bl	800cb3c <vPortExitCritical>

	return xAlreadyYielded;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	20000bc0 	.word	0x20000bc0
 800bdc4:	20000b98 	.word	0x20000b98
 800bdc8:	20000b58 	.word	0x20000b58
 800bdcc:	20000ba0 	.word	0x20000ba0
 800bdd0:	20000a9c 	.word	0x20000a9c
 800bdd4:	20000a98 	.word	0x20000a98
 800bdd8:	20000bac 	.word	0x20000bac
 800bddc:	20000ba8 	.word	0x20000ba8
 800bde0:	e000ed04 	.word	0xe000ed04

0800bde4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdea:	2300      	movs	r3, #0
 800bdec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdee:	4b4f      	ldr	r3, [pc, #316]	@ (800bf2c <xTaskIncrementTick+0x148>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f040 808f 	bne.w	800bf16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bdf8:	4b4d      	ldr	r3, [pc, #308]	@ (800bf30 <xTaskIncrementTick+0x14c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be00:	4a4b      	ldr	r2, [pc, #300]	@ (800bf30 <xTaskIncrementTick+0x14c>)
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d121      	bne.n	800be50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800be0c:	4b49      	ldr	r3, [pc, #292]	@ (800bf34 <xTaskIncrementTick+0x150>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00b      	beq.n	800be2e <xTaskIncrementTick+0x4a>
	__asm volatile
 800be16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be1a:	f383 8811 	msr	BASEPRI, r3
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	f3bf 8f4f 	dsb	sy
 800be26:	603b      	str	r3, [r7, #0]
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	e7fd      	b.n	800be2a <xTaskIncrementTick+0x46>
 800be2e:	4b41      	ldr	r3, [pc, #260]	@ (800bf34 <xTaskIncrementTick+0x150>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	4b40      	ldr	r3, [pc, #256]	@ (800bf38 <xTaskIncrementTick+0x154>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a3e      	ldr	r2, [pc, #248]	@ (800bf34 <xTaskIncrementTick+0x150>)
 800be3a:	6013      	str	r3, [r2, #0]
 800be3c:	4a3e      	ldr	r2, [pc, #248]	@ (800bf38 <xTaskIncrementTick+0x154>)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	4b3e      	ldr	r3, [pc, #248]	@ (800bf3c <xTaskIncrementTick+0x158>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	3301      	adds	r3, #1
 800be48:	4a3c      	ldr	r2, [pc, #240]	@ (800bf3c <xTaskIncrementTick+0x158>)
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	f000 facc 	bl	800c3e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be50:	4b3b      	ldr	r3, [pc, #236]	@ (800bf40 <xTaskIncrementTick+0x15c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	429a      	cmp	r2, r3
 800be58:	d348      	bcc.n	800beec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be5a:	4b36      	ldr	r3, [pc, #216]	@ (800bf34 <xTaskIncrementTick+0x150>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d104      	bne.n	800be6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be64:	4b36      	ldr	r3, [pc, #216]	@ (800bf40 <xTaskIncrementTick+0x15c>)
 800be66:	f04f 32ff 	mov.w	r2, #4294967295
 800be6a:	601a      	str	r2, [r3, #0]
					break;
 800be6c:	e03e      	b.n	800beec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be6e:	4b31      	ldr	r3, [pc, #196]	@ (800bf34 <xTaskIncrementTick+0x150>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	429a      	cmp	r2, r3
 800be84:	d203      	bcs.n	800be8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be86:	4a2e      	ldr	r2, [pc, #184]	@ (800bf40 <xTaskIncrementTick+0x15c>)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be8c:	e02e      	b.n	800beec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	3304      	adds	r3, #4
 800be92:	4618      	mov	r0, r3
 800be94:	f7fe febe 	bl	800ac14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d004      	beq.n	800beaa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	3318      	adds	r3, #24
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe feb5 	bl	800ac14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beae:	2201      	movs	r2, #1
 800beb0:	409a      	lsls	r2, r3
 800beb2:	4b24      	ldr	r3, [pc, #144]	@ (800bf44 <xTaskIncrementTick+0x160>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	4a22      	ldr	r2, [pc, #136]	@ (800bf44 <xTaskIncrementTick+0x160>)
 800beba:	6013      	str	r3, [r2, #0]
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bec0:	4613      	mov	r3, r2
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4a1f      	ldr	r2, [pc, #124]	@ (800bf48 <xTaskIncrementTick+0x164>)
 800beca:	441a      	add	r2, r3
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	3304      	adds	r3, #4
 800bed0:	4619      	mov	r1, r3
 800bed2:	4610      	mov	r0, r2
 800bed4:	f7fe fe41 	bl	800ab5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bedc:	4b1b      	ldr	r3, [pc, #108]	@ (800bf4c <xTaskIncrementTick+0x168>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d3b9      	bcc.n	800be5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bee6:	2301      	movs	r3, #1
 800bee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beea:	e7b6      	b.n	800be5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800beec:	4b17      	ldr	r3, [pc, #92]	@ (800bf4c <xTaskIncrementTick+0x168>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef2:	4915      	ldr	r1, [pc, #84]	@ (800bf48 <xTaskIncrementTick+0x164>)
 800bef4:	4613      	mov	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	440b      	add	r3, r1
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d901      	bls.n	800bf08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bf04:	2301      	movs	r3, #1
 800bf06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf08:	4b11      	ldr	r3, [pc, #68]	@ (800bf50 <xTaskIncrementTick+0x16c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d007      	beq.n	800bf20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bf10:	2301      	movs	r3, #1
 800bf12:	617b      	str	r3, [r7, #20]
 800bf14:	e004      	b.n	800bf20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf16:	4b0f      	ldr	r3, [pc, #60]	@ (800bf54 <xTaskIncrementTick+0x170>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	4a0d      	ldr	r2, [pc, #52]	@ (800bf54 <xTaskIncrementTick+0x170>)
 800bf1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf20:	697b      	ldr	r3, [r7, #20]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20000bc0 	.word	0x20000bc0
 800bf30:	20000b9c 	.word	0x20000b9c
 800bf34:	20000b50 	.word	0x20000b50
 800bf38:	20000b54 	.word	0x20000b54
 800bf3c:	20000bb0 	.word	0x20000bb0
 800bf40:	20000bb8 	.word	0x20000bb8
 800bf44:	20000ba0 	.word	0x20000ba0
 800bf48:	20000a9c 	.word	0x20000a9c
 800bf4c:	20000a98 	.word	0x20000a98
 800bf50:	20000bac 	.word	0x20000bac
 800bf54:	20000ba8 	.word	0x20000ba8

0800bf58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf5e:	4b3a      	ldr	r3, [pc, #232]	@ (800c048 <vTaskSwitchContext+0xf0>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf66:	4b39      	ldr	r3, [pc, #228]	@ (800c04c <vTaskSwitchContext+0xf4>)
 800bf68:	2201      	movs	r2, #1
 800bf6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf6c:	e067      	b.n	800c03e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800bf6e:	4b37      	ldr	r3, [pc, #220]	@ (800c04c <vTaskSwitchContext+0xf4>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bf74:	4b36      	ldr	r3, [pc, #216]	@ (800c050 <vTaskSwitchContext+0xf8>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf7a:	61fb      	str	r3, [r7, #28]
 800bf7c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800bf80:	61bb      	str	r3, [r7, #24]
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	69ba      	ldr	r2, [r7, #24]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d111      	bne.n	800bfb0 <vTaskSwitchContext+0x58>
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	3304      	adds	r3, #4
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	69ba      	ldr	r2, [r7, #24]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d10b      	bne.n	800bfb0 <vTaskSwitchContext+0x58>
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d105      	bne.n	800bfb0 <vTaskSwitchContext+0x58>
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	330c      	adds	r3, #12
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	69ba      	ldr	r2, [r7, #24]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d008      	beq.n	800bfc2 <vTaskSwitchContext+0x6a>
 800bfb0:	4b27      	ldr	r3, [pc, #156]	@ (800c050 <vTaskSwitchContext+0xf8>)
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	4b26      	ldr	r3, [pc, #152]	@ (800c050 <vTaskSwitchContext+0xf8>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3334      	adds	r3, #52	@ 0x34
 800bfba:	4619      	mov	r1, r3
 800bfbc:	4610      	mov	r0, r2
 800bfbe:	f7f6 f975 	bl	80022ac <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc2:	4b24      	ldr	r3, [pc, #144]	@ (800c054 <vTaskSwitchContext+0xfc>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	fab3 f383 	clz	r3, r3
 800bfce:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bfd0:	7afb      	ldrb	r3, [r7, #11]
 800bfd2:	f1c3 031f 	rsb	r3, r3, #31
 800bfd6:	617b      	str	r3, [r7, #20]
 800bfd8:	491f      	ldr	r1, [pc, #124]	@ (800c058 <vTaskSwitchContext+0x100>)
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	4413      	add	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	440b      	add	r3, r1
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10b      	bne.n	800c004 <vTaskSwitchContext+0xac>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	607b      	str	r3, [r7, #4]
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	e7fd      	b.n	800c000 <vTaskSwitchContext+0xa8>
 800c004:	697a      	ldr	r2, [r7, #20]
 800c006:	4613      	mov	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4a12      	ldr	r2, [pc, #72]	@ (800c058 <vTaskSwitchContext+0x100>)
 800c010:	4413      	add	r3, r2
 800c012:	613b      	str	r3, [r7, #16]
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	605a      	str	r2, [r3, #4]
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	685a      	ldr	r2, [r3, #4]
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	3308      	adds	r3, #8
 800c026:	429a      	cmp	r2, r3
 800c028:	d104      	bne.n	800c034 <vTaskSwitchContext+0xdc>
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	605a      	str	r2, [r3, #4]
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	4a05      	ldr	r2, [pc, #20]	@ (800c050 <vTaskSwitchContext+0xf8>)
 800c03c:	6013      	str	r3, [r2, #0]
}
 800c03e:	bf00      	nop
 800c040:	3720      	adds	r7, #32
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	20000bc0 	.word	0x20000bc0
 800c04c:	20000bac 	.word	0x20000bac
 800c050:	20000a98 	.word	0x20000a98
 800c054:	20000ba0 	.word	0x20000ba0
 800c058:	20000a9c 	.word	0x20000a9c

0800c05c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10b      	bne.n	800c084 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	60fb      	str	r3, [r7, #12]
}
 800c07e:	bf00      	nop
 800c080:	bf00      	nop
 800c082:	e7fd      	b.n	800c080 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c084:	4b07      	ldr	r3, [pc, #28]	@ (800c0a4 <vTaskPlaceOnEventList+0x48>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3318      	adds	r3, #24
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7fe fd88 	bl	800aba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c092:	2101      	movs	r1, #1
 800c094:	6838      	ldr	r0, [r7, #0]
 800c096:	f000 fb87 	bl	800c7a8 <prvAddCurrentTaskToDelayedList>
}
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20000a98 	.word	0x20000a98

0800c0a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10b      	bne.n	800c0d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	60fb      	str	r3, [r7, #12]
}
 800c0d0:	bf00      	nop
 800c0d2:	bf00      	nop
 800c0d4:	e7fd      	b.n	800c0d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	3318      	adds	r3, #24
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fe fd9a 	bl	800ac14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c158 <xTaskRemoveFromEventList+0xb0>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d11c      	bne.n	800c122 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe fd91 	bl	800ac14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	409a      	lsls	r2, r3
 800c0fa:	4b18      	ldr	r3, [pc, #96]	@ (800c15c <xTaskRemoveFromEventList+0xb4>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	4a16      	ldr	r2, [pc, #88]	@ (800c15c <xTaskRemoveFromEventList+0xb4>)
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c108:	4613      	mov	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4a13      	ldr	r2, [pc, #76]	@ (800c160 <xTaskRemoveFromEventList+0xb8>)
 800c112:	441a      	add	r2, r3
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	3304      	adds	r3, #4
 800c118:	4619      	mov	r1, r3
 800c11a:	4610      	mov	r0, r2
 800c11c:	f7fe fd1d 	bl	800ab5a <vListInsertEnd>
 800c120:	e005      	b.n	800c12e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	3318      	adds	r3, #24
 800c126:	4619      	mov	r1, r3
 800c128:	480e      	ldr	r0, [pc, #56]	@ (800c164 <xTaskRemoveFromEventList+0xbc>)
 800c12a:	f7fe fd16 	bl	800ab5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c132:	4b0d      	ldr	r3, [pc, #52]	@ (800c168 <xTaskRemoveFromEventList+0xc0>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c138:	429a      	cmp	r2, r3
 800c13a:	d905      	bls.n	800c148 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c13c:	2301      	movs	r3, #1
 800c13e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c140:	4b0a      	ldr	r3, [pc, #40]	@ (800c16c <xTaskRemoveFromEventList+0xc4>)
 800c142:	2201      	movs	r2, #1
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	e001      	b.n	800c14c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c148:	2300      	movs	r3, #0
 800c14a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c14c:	697b      	ldr	r3, [r7, #20]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20000bc0 	.word	0x20000bc0
 800c15c:	20000ba0 	.word	0x20000ba0
 800c160:	20000a9c 	.word	0x20000a9c
 800c164:	20000b58 	.word	0x20000b58
 800c168:	20000a98 	.word	0x20000a98
 800c16c:	20000bac 	.word	0x20000bac

0800c170 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c178:	4b06      	ldr	r3, [pc, #24]	@ (800c194 <vTaskInternalSetTimeOutState+0x24>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c180:	4b05      	ldr	r3, [pc, #20]	@ (800c198 <vTaskInternalSetTimeOutState+0x28>)
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	605a      	str	r2, [r3, #4]
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	20000bb0 	.word	0x20000bb0
 800c198:	20000b9c 	.word	0x20000b9c

0800c19c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10b      	bne.n	800c1c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	613b      	str	r3, [r7, #16]
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	e7fd      	b.n	800c1c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10b      	bne.n	800c1e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	60fb      	str	r3, [r7, #12]
}
 800c1dc:	bf00      	nop
 800c1de:	bf00      	nop
 800c1e0:	e7fd      	b.n	800c1de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c1e2:	f000 fc79 	bl	800cad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c1e6:	4b1d      	ldr	r3, [pc, #116]	@ (800c25c <xTaskCheckForTimeOut+0xc0>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	69ba      	ldr	r2, [r7, #24]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fe:	d102      	bne.n	800c206 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c200:	2300      	movs	r3, #0
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	e023      	b.n	800c24e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	4b15      	ldr	r3, [pc, #84]	@ (800c260 <xTaskCheckForTimeOut+0xc4>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d007      	beq.n	800c222 <xTaskCheckForTimeOut+0x86>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	69ba      	ldr	r2, [r7, #24]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d302      	bcc.n	800c222 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c21c:	2301      	movs	r3, #1
 800c21e:	61fb      	str	r3, [r7, #28]
 800c220:	e015      	b.n	800c24e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d20b      	bcs.n	800c244 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	1ad2      	subs	r2, r2, r3
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff ff99 	bl	800c170 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c23e:	2300      	movs	r3, #0
 800c240:	61fb      	str	r3, [r7, #28]
 800c242:	e004      	b.n	800c24e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	2200      	movs	r2, #0
 800c248:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c24a:	2301      	movs	r3, #1
 800c24c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c24e:	f000 fc75 	bl	800cb3c <vPortExitCritical>

	return xReturn;
 800c252:	69fb      	ldr	r3, [r7, #28]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3720      	adds	r7, #32
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	20000b9c 	.word	0x20000b9c
 800c260:	20000bb0 	.word	0x20000bb0

0800c264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c264:	b480      	push	{r7}
 800c266:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c268:	4b03      	ldr	r3, [pc, #12]	@ (800c278 <vTaskMissedYield+0x14>)
 800c26a:	2201      	movs	r2, #1
 800c26c:	601a      	str	r2, [r3, #0]
}
 800c26e:	bf00      	nop
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr
 800c278:	20000bac 	.word	0x20000bac

0800c27c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c284:	f000 f852 	bl	800c32c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c288:	4b06      	ldr	r3, [pc, #24]	@ (800c2a4 <prvIdleTask+0x28>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d9f9      	bls.n	800c284 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c290:	4b05      	ldr	r3, [pc, #20]	@ (800c2a8 <prvIdleTask+0x2c>)
 800c292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2a0:	e7f0      	b.n	800c284 <prvIdleTask+0x8>
 800c2a2:	bf00      	nop
 800c2a4:	20000a9c 	.word	0x20000a9c
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	607b      	str	r3, [r7, #4]
 800c2b6:	e00c      	b.n	800c2d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	4413      	add	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4a12      	ldr	r2, [pc, #72]	@ (800c30c <prvInitialiseTaskLists+0x60>)
 800c2c4:	4413      	add	r3, r2
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe fc1a 	bl	800ab00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	607b      	str	r3, [r7, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b06      	cmp	r3, #6
 800c2d6:	d9ef      	bls.n	800c2b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c2d8:	480d      	ldr	r0, [pc, #52]	@ (800c310 <prvInitialiseTaskLists+0x64>)
 800c2da:	f7fe fc11 	bl	800ab00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c2de:	480d      	ldr	r0, [pc, #52]	@ (800c314 <prvInitialiseTaskLists+0x68>)
 800c2e0:	f7fe fc0e 	bl	800ab00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c2e4:	480c      	ldr	r0, [pc, #48]	@ (800c318 <prvInitialiseTaskLists+0x6c>)
 800c2e6:	f7fe fc0b 	bl	800ab00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c2ea:	480c      	ldr	r0, [pc, #48]	@ (800c31c <prvInitialiseTaskLists+0x70>)
 800c2ec:	f7fe fc08 	bl	800ab00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c2f0:	480b      	ldr	r0, [pc, #44]	@ (800c320 <prvInitialiseTaskLists+0x74>)
 800c2f2:	f7fe fc05 	bl	800ab00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c324 <prvInitialiseTaskLists+0x78>)
 800c2f8:	4a05      	ldr	r2, [pc, #20]	@ (800c310 <prvInitialiseTaskLists+0x64>)
 800c2fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c328 <prvInitialiseTaskLists+0x7c>)
 800c2fe:	4a05      	ldr	r2, [pc, #20]	@ (800c314 <prvInitialiseTaskLists+0x68>)
 800c300:	601a      	str	r2, [r3, #0]
}
 800c302:	bf00      	nop
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	20000a9c 	.word	0x20000a9c
 800c310:	20000b28 	.word	0x20000b28
 800c314:	20000b3c 	.word	0x20000b3c
 800c318:	20000b58 	.word	0x20000b58
 800c31c:	20000b6c 	.word	0x20000b6c
 800c320:	20000b84 	.word	0x20000b84
 800c324:	20000b50 	.word	0x20000b50
 800c328:	20000b54 	.word	0x20000b54

0800c32c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c332:	e019      	b.n	800c368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c334:	f000 fbd0 	bl	800cad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c338:	4b10      	ldr	r3, [pc, #64]	@ (800c37c <prvCheckTasksWaitingTermination+0x50>)
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3304      	adds	r3, #4
 800c344:	4618      	mov	r0, r3
 800c346:	f7fe fc65 	bl	800ac14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c34a:	4b0d      	ldr	r3, [pc, #52]	@ (800c380 <prvCheckTasksWaitingTermination+0x54>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	3b01      	subs	r3, #1
 800c350:	4a0b      	ldr	r2, [pc, #44]	@ (800c380 <prvCheckTasksWaitingTermination+0x54>)
 800c352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c354:	4b0b      	ldr	r3, [pc, #44]	@ (800c384 <prvCheckTasksWaitingTermination+0x58>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	3b01      	subs	r3, #1
 800c35a:	4a0a      	ldr	r2, [pc, #40]	@ (800c384 <prvCheckTasksWaitingTermination+0x58>)
 800c35c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c35e:	f000 fbed 	bl	800cb3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f810 	bl	800c388 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c368:	4b06      	ldr	r3, [pc, #24]	@ (800c384 <prvCheckTasksWaitingTermination+0x58>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1e1      	bne.n	800c334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c370:	bf00      	nop
 800c372:	bf00      	nop
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20000b6c 	.word	0x20000b6c
 800c380:	20000b98 	.word	0x20000b98
 800c384:	20000b80 	.word	0x20000b80

0800c388 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c396:	2b00      	cmp	r3, #0
 800c398:	d108      	bne.n	800c3ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 fd90 	bl	800cec4 <vPortFree>
				vPortFree( pxTCB );
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fd8d 	bl	800cec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3aa:	e019      	b.n	800c3e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d103      	bne.n	800c3be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fd84 	bl	800cec4 <vPortFree>
	}
 800c3bc:	e010      	b.n	800c3e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d00b      	beq.n	800c3e0 <prvDeleteTCB+0x58>
	__asm volatile
 800c3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	60fb      	str	r3, [r7, #12]
}
 800c3da:	bf00      	nop
 800c3dc:	bf00      	nop
 800c3de:	e7fd      	b.n	800c3dc <prvDeleteTCB+0x54>
	}
 800c3e0:	bf00      	nop
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c420 <prvResetNextTaskUnblockTime+0x38>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d104      	bne.n	800c402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c424 <prvResetNextTaskUnblockTime+0x3c>)
 800c3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c400:	e008      	b.n	800c414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c402:	4b07      	ldr	r3, [pc, #28]	@ (800c420 <prvResetNextTaskUnblockTime+0x38>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	4a04      	ldr	r2, [pc, #16]	@ (800c424 <prvResetNextTaskUnblockTime+0x3c>)
 800c412:	6013      	str	r3, [r2, #0]
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	20000b50 	.word	0x20000b50
 800c424:	20000bb8 	.word	0x20000bb8

0800c428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c42e:	4b0b      	ldr	r3, [pc, #44]	@ (800c45c <xTaskGetSchedulerState+0x34>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d102      	bne.n	800c43c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c436:	2301      	movs	r3, #1
 800c438:	607b      	str	r3, [r7, #4]
 800c43a:	e008      	b.n	800c44e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c43c:	4b08      	ldr	r3, [pc, #32]	@ (800c460 <xTaskGetSchedulerState+0x38>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d102      	bne.n	800c44a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c444:	2302      	movs	r3, #2
 800c446:	607b      	str	r3, [r7, #4]
 800c448:	e001      	b.n	800c44e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c44a:	2300      	movs	r3, #0
 800c44c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c44e:	687b      	ldr	r3, [r7, #4]
	}
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	20000ba4 	.word	0x20000ba4
 800c460:	20000bc0 	.word	0x20000bc0

0800c464 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c470:	2300      	movs	r3, #0
 800c472:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d05e      	beq.n	800c538 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c47e:	4b31      	ldr	r3, [pc, #196]	@ (800c544 <xTaskPriorityInherit+0xe0>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c484:	429a      	cmp	r2, r3
 800c486:	d24e      	bcs.n	800c526 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	db06      	blt.n	800c49e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c490:	4b2c      	ldr	r3, [pc, #176]	@ (800c544 <xTaskPriorityInherit+0xe0>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c496:	f1c3 0207 	rsb	r2, r3, #7
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	6959      	ldr	r1, [r3, #20]
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4413      	add	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4a26      	ldr	r2, [pc, #152]	@ (800c548 <xTaskPriorityInherit+0xe4>)
 800c4b0:	4413      	add	r3, r2
 800c4b2:	4299      	cmp	r1, r3
 800c4b4:	d12f      	bne.n	800c516 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe fbaa 	bl	800ac14 <uxListRemove>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d10a      	bne.n	800c4dc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d0:	43da      	mvns	r2, r3
 800c4d2:	4b1e      	ldr	r3, [pc, #120]	@ (800c54c <xTaskPriorityInherit+0xe8>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	4a1c      	ldr	r2, [pc, #112]	@ (800c54c <xTaskPriorityInherit+0xe8>)
 800c4da:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c4dc:	4b19      	ldr	r3, [pc, #100]	@ (800c544 <xTaskPriorityInherit+0xe0>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	409a      	lsls	r2, r3
 800c4ee:	4b17      	ldr	r3, [pc, #92]	@ (800c54c <xTaskPriorityInherit+0xe8>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	4a15      	ldr	r2, [pc, #84]	@ (800c54c <xTaskPriorityInherit+0xe8>)
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	4413      	add	r3, r2
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4a10      	ldr	r2, [pc, #64]	@ (800c548 <xTaskPriorityInherit+0xe4>)
 800c506:	441a      	add	r2, r3
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	3304      	adds	r3, #4
 800c50c:	4619      	mov	r1, r3
 800c50e:	4610      	mov	r0, r2
 800c510:	f7fe fb23 	bl	800ab5a <vListInsertEnd>
 800c514:	e004      	b.n	800c520 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c516:	4b0b      	ldr	r3, [pc, #44]	@ (800c544 <xTaskPriorityInherit+0xe0>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c520:	2301      	movs	r3, #1
 800c522:	60fb      	str	r3, [r7, #12]
 800c524:	e008      	b.n	800c538 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c52a:	4b06      	ldr	r3, [pc, #24]	@ (800c544 <xTaskPriorityInherit+0xe0>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c530:	429a      	cmp	r2, r3
 800c532:	d201      	bcs.n	800c538 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c534:	2301      	movs	r3, #1
 800c536:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c538:	68fb      	ldr	r3, [r7, #12]
	}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20000a98 	.word	0x20000a98
 800c548:	20000a9c 	.word	0x20000a9c
 800c54c:	20000ba0 	.word	0x20000ba0

0800c550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c55c:	2300      	movs	r3, #0
 800c55e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d070      	beq.n	800c648 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c566:	4b3b      	ldr	r3, [pc, #236]	@ (800c654 <xTaskPriorityDisinherit+0x104>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d00b      	beq.n	800c588 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	60fb      	str	r3, [r7, #12]
}
 800c582:	bf00      	nop
 800c584:	bf00      	nop
 800c586:	e7fd      	b.n	800c584 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10b      	bne.n	800c5a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	60bb      	str	r3, [r7, #8]
}
 800c5a2:	bf00      	nop
 800c5a4:	bf00      	nop
 800c5a6:	e7fd      	b.n	800c5a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5ac:	1e5a      	subs	r2, r3, #1
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d044      	beq.n	800c648 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d140      	bne.n	800c648 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe fb22 	bl	800ac14 <uxListRemove>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d115      	bne.n	800c602 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5da:	491f      	ldr	r1, [pc, #124]	@ (800c658 <xTaskPriorityDisinherit+0x108>)
 800c5dc:	4613      	mov	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4413      	add	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	440b      	add	r3, r1
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10a      	bne.n	800c602 <xTaskPriorityDisinherit+0xb2>
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f6:	43da      	mvns	r2, r3
 800c5f8:	4b18      	ldr	r3, [pc, #96]	@ (800c65c <xTaskPriorityDisinherit+0x10c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4013      	ands	r3, r2
 800c5fe:	4a17      	ldr	r2, [pc, #92]	@ (800c65c <xTaskPriorityDisinherit+0x10c>)
 800c600:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c60e:	f1c3 0207 	rsb	r2, r3, #7
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c61a:	2201      	movs	r2, #1
 800c61c:	409a      	lsls	r2, r3
 800c61e:	4b0f      	ldr	r3, [pc, #60]	@ (800c65c <xTaskPriorityDisinherit+0x10c>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4313      	orrs	r3, r2
 800c624:	4a0d      	ldr	r2, [pc, #52]	@ (800c65c <xTaskPriorityDisinherit+0x10c>)
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c62c:	4613      	mov	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4a08      	ldr	r2, [pc, #32]	@ (800c658 <xTaskPriorityDisinherit+0x108>)
 800c636:	441a      	add	r2, r3
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	3304      	adds	r3, #4
 800c63c:	4619      	mov	r1, r3
 800c63e:	4610      	mov	r0, r2
 800c640:	f7fe fa8b 	bl	800ab5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c644:	2301      	movs	r3, #1
 800c646:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c648:	697b      	ldr	r3, [r7, #20]
	}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3718      	adds	r7, #24
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	20000a98 	.word	0x20000a98
 800c658:	20000a9c 	.word	0x20000a9c
 800c65c:	20000ba0 	.word	0x20000ba0

0800c660 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c66e:	2301      	movs	r3, #1
 800c670:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d079      	beq.n	800c76c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10b      	bne.n	800c698 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	60fb      	str	r3, [r7, #12]
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	e7fd      	b.n	800c694 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c69c:	683a      	ldr	r2, [r7, #0]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d902      	bls.n	800c6a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	61fb      	str	r3, [r7, #28]
 800c6a6:	e002      	b.n	800c6ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b2:	69fa      	ldr	r2, [r7, #28]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d059      	beq.n	800c76c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6bc:	697a      	ldr	r2, [r7, #20]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d154      	bne.n	800c76c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c6c2:	4b2c      	ldr	r3, [pc, #176]	@ (800c774 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	69ba      	ldr	r2, [r7, #24]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d10b      	bne.n	800c6e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d0:	f383 8811 	msr	BASEPRI, r3
 800c6d4:	f3bf 8f6f 	isb	sy
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	60bb      	str	r3, [r7, #8]
}
 800c6de:	bf00      	nop
 800c6e0:	bf00      	nop
 800c6e2:	e7fd      	b.n	800c6e0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	69fa      	ldr	r2, [r7, #28]
 800c6ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	db04      	blt.n	800c702 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	f1c3 0207 	rsb	r2, r3, #7
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	6959      	ldr	r1, [r3, #20]
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	4613      	mov	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4a19      	ldr	r2, [pc, #100]	@ (800c778 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c712:	4413      	add	r3, r2
 800c714:	4299      	cmp	r1, r3
 800c716:	d129      	bne.n	800c76c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	3304      	adds	r3, #4
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fe fa79 	bl	800ac14 <uxListRemove>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10a      	bne.n	800c73e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c72c:	2201      	movs	r2, #1
 800c72e:	fa02 f303 	lsl.w	r3, r2, r3
 800c732:	43da      	mvns	r2, r3
 800c734:	4b11      	ldr	r3, [pc, #68]	@ (800c77c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4013      	ands	r3, r2
 800c73a:	4a10      	ldr	r2, [pc, #64]	@ (800c77c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c73c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c742:	2201      	movs	r2, #1
 800c744:	409a      	lsls	r2, r3
 800c746:	4b0d      	ldr	r3, [pc, #52]	@ (800c77c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	4a0b      	ldr	r2, [pc, #44]	@ (800c77c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c754:	4613      	mov	r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	4413      	add	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4a06      	ldr	r2, [pc, #24]	@ (800c778 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c75e:	441a      	add	r2, r3
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	3304      	adds	r3, #4
 800c764:	4619      	mov	r1, r3
 800c766:	4610      	mov	r0, r2
 800c768:	f7fe f9f7 	bl	800ab5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c76c:	bf00      	nop
 800c76e:	3720      	adds	r7, #32
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	20000a98 	.word	0x20000a98
 800c778:	20000a9c 	.word	0x20000a9c
 800c77c:	20000ba0 	.word	0x20000ba0

0800c780 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c780:	b480      	push	{r7}
 800c782:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c784:	4b07      	ldr	r3, [pc, #28]	@ (800c7a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d004      	beq.n	800c796 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c78c:	4b05      	ldr	r3, [pc, #20]	@ (800c7a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c792:	3201      	adds	r2, #1
 800c794:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800c796:	4b03      	ldr	r3, [pc, #12]	@ (800c7a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c798:	681b      	ldr	r3, [r3, #0]
	}
 800c79a:	4618      	mov	r0, r3
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr
 800c7a4:	20000a98 	.word	0x20000a98

0800c7a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c7b2:	4b29      	ldr	r3, [pc, #164]	@ (800c858 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7b8:	4b28      	ldr	r3, [pc, #160]	@ (800c85c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	3304      	adds	r3, #4
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7fe fa28 	bl	800ac14 <uxListRemove>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10b      	bne.n	800c7e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c7ca:	4b24      	ldr	r3, [pc, #144]	@ (800c85c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7d6:	43da      	mvns	r2, r3
 800c7d8:	4b21      	ldr	r3, [pc, #132]	@ (800c860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4013      	ands	r3, r2
 800c7de:	4a20      	ldr	r2, [pc, #128]	@ (800c860 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e8:	d10a      	bne.n	800c800 <prvAddCurrentTaskToDelayedList+0x58>
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d007      	beq.n	800c800 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c85c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3304      	adds	r3, #4
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	481a      	ldr	r0, [pc, #104]	@ (800c864 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c7fa:	f7fe f9ae 	bl	800ab5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7fe:	e026      	b.n	800c84e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4413      	add	r3, r2
 800c806:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c808:	4b14      	ldr	r3, [pc, #80]	@ (800c85c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	429a      	cmp	r2, r3
 800c816:	d209      	bcs.n	800c82c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c818:	4b13      	ldr	r3, [pc, #76]	@ (800c868 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	4b0f      	ldr	r3, [pc, #60]	@ (800c85c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3304      	adds	r3, #4
 800c822:	4619      	mov	r1, r3
 800c824:	4610      	mov	r0, r2
 800c826:	f7fe f9bc 	bl	800aba2 <vListInsert>
}
 800c82a:	e010      	b.n	800c84e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c82c:	4b0f      	ldr	r3, [pc, #60]	@ (800c86c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	4b0a      	ldr	r3, [pc, #40]	@ (800c85c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3304      	adds	r3, #4
 800c836:	4619      	mov	r1, r3
 800c838:	4610      	mov	r0, r2
 800c83a:	f7fe f9b2 	bl	800aba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c83e:	4b0c      	ldr	r3, [pc, #48]	@ (800c870 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	429a      	cmp	r2, r3
 800c846:	d202      	bcs.n	800c84e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c848:	4a09      	ldr	r2, [pc, #36]	@ (800c870 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	6013      	str	r3, [r2, #0]
}
 800c84e:	bf00      	nop
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	20000b9c 	.word	0x20000b9c
 800c85c:	20000a98 	.word	0x20000a98
 800c860:	20000ba0 	.word	0x20000ba0
 800c864:	20000b84 	.word	0x20000b84
 800c868:	20000b54 	.word	0x20000b54
 800c86c:	20000b50 	.word	0x20000b50
 800c870:	20000bb8 	.word	0x20000bb8

0800c874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	3b04      	subs	r3, #4
 800c884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c88c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3b04      	subs	r3, #4
 800c892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	f023 0201 	bic.w	r2, r3, #1
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	3b04      	subs	r3, #4
 800c8a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8a4:	4a0c      	ldr	r2, [pc, #48]	@ (800c8d8 <pxPortInitialiseStack+0x64>)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3b14      	subs	r3, #20
 800c8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3b04      	subs	r3, #4
 800c8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f06f 0202 	mvn.w	r2, #2
 800c8c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3b20      	subs	r3, #32
 800c8c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr
 800c8d8:	0800c8dd 	.word	0x0800c8dd

0800c8dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8e6:	4b13      	ldr	r3, [pc, #76]	@ (800c934 <prvTaskExitError+0x58>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ee:	d00b      	beq.n	800c908 <prvTaskExitError+0x2c>
	__asm volatile
 800c8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	60fb      	str	r3, [r7, #12]
}
 800c902:	bf00      	nop
 800c904:	bf00      	nop
 800c906:	e7fd      	b.n	800c904 <prvTaskExitError+0x28>
	__asm volatile
 800c908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	60bb      	str	r3, [r7, #8]
}
 800c91a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c91c:	bf00      	nop
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d0fc      	beq.n	800c91e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	20000010 	.word	0x20000010
	...

0800c940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c940:	4b07      	ldr	r3, [pc, #28]	@ (800c960 <pxCurrentTCBConst2>)
 800c942:	6819      	ldr	r1, [r3, #0]
 800c944:	6808      	ldr	r0, [r1, #0]
 800c946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94a:	f380 8809 	msr	PSP, r0
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f04f 0000 	mov.w	r0, #0
 800c956:	f380 8811 	msr	BASEPRI, r0
 800c95a:	4770      	bx	lr
 800c95c:	f3af 8000 	nop.w

0800c960 <pxCurrentTCBConst2>:
 800c960:	20000a98 	.word	0x20000a98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c964:	bf00      	nop
 800c966:	bf00      	nop

0800c968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c968:	4808      	ldr	r0, [pc, #32]	@ (800c98c <prvPortStartFirstTask+0x24>)
 800c96a:	6800      	ldr	r0, [r0, #0]
 800c96c:	6800      	ldr	r0, [r0, #0]
 800c96e:	f380 8808 	msr	MSP, r0
 800c972:	f04f 0000 	mov.w	r0, #0
 800c976:	f380 8814 	msr	CONTROL, r0
 800c97a:	b662      	cpsie	i
 800c97c:	b661      	cpsie	f
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	df00      	svc	0
 800c988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c98a:	bf00      	nop
 800c98c:	e000ed08 	.word	0xe000ed08

0800c990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c996:	4b47      	ldr	r3, [pc, #284]	@ (800cab4 <xPortStartScheduler+0x124>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a47      	ldr	r2, [pc, #284]	@ (800cab8 <xPortStartScheduler+0x128>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d10b      	bne.n	800c9b8 <xPortStartScheduler+0x28>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	613b      	str	r3, [r7, #16]
}
 800c9b2:	bf00      	nop
 800c9b4:	bf00      	nop
 800c9b6:	e7fd      	b.n	800c9b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c9b8:	4b3e      	ldr	r3, [pc, #248]	@ (800cab4 <xPortStartScheduler+0x124>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a3f      	ldr	r2, [pc, #252]	@ (800cabc <xPortStartScheduler+0x12c>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d10b      	bne.n	800c9da <xPortStartScheduler+0x4a>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	60fb      	str	r3, [r7, #12]
}
 800c9d4:	bf00      	nop
 800c9d6:	bf00      	nop
 800c9d8:	e7fd      	b.n	800c9d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9da:	4b39      	ldr	r3, [pc, #228]	@ (800cac0 <xPortStartScheduler+0x130>)
 800c9dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	22ff      	movs	r2, #255	@ 0xff
 800c9ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9f4:	78fb      	ldrb	r3, [r7, #3]
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c9fc:	b2da      	uxtb	r2, r3
 800c9fe:	4b31      	ldr	r3, [pc, #196]	@ (800cac4 <xPortStartScheduler+0x134>)
 800ca00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca02:	4b31      	ldr	r3, [pc, #196]	@ (800cac8 <xPortStartScheduler+0x138>)
 800ca04:	2207      	movs	r2, #7
 800ca06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca08:	e009      	b.n	800ca1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ca0a:	4b2f      	ldr	r3, [pc, #188]	@ (800cac8 <xPortStartScheduler+0x138>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	4a2d      	ldr	r2, [pc, #180]	@ (800cac8 <xPortStartScheduler+0x138>)
 800ca12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca14:	78fb      	ldrb	r3, [r7, #3]
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	005b      	lsls	r3, r3, #1
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca1e:	78fb      	ldrb	r3, [r7, #3]
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca26:	2b80      	cmp	r3, #128	@ 0x80
 800ca28:	d0ef      	beq.n	800ca0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca2a:	4b27      	ldr	r3, [pc, #156]	@ (800cac8 <xPortStartScheduler+0x138>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f1c3 0307 	rsb	r3, r3, #7
 800ca32:	2b04      	cmp	r3, #4
 800ca34:	d00b      	beq.n	800ca4e <xPortStartScheduler+0xbe>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	60bb      	str	r3, [r7, #8]
}
 800ca48:	bf00      	nop
 800ca4a:	bf00      	nop
 800ca4c:	e7fd      	b.n	800ca4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca4e:	4b1e      	ldr	r3, [pc, #120]	@ (800cac8 <xPortStartScheduler+0x138>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	4a1c      	ldr	r2, [pc, #112]	@ (800cac8 <xPortStartScheduler+0x138>)
 800ca56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca58:	4b1b      	ldr	r3, [pc, #108]	@ (800cac8 <xPortStartScheduler+0x138>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ca60:	4a19      	ldr	r2, [pc, #100]	@ (800cac8 <xPortStartScheduler+0x138>)
 800ca62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca6c:	4b17      	ldr	r3, [pc, #92]	@ (800cacc <xPortStartScheduler+0x13c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a16      	ldr	r2, [pc, #88]	@ (800cacc <xPortStartScheduler+0x13c>)
 800ca72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ca76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca78:	4b14      	ldr	r3, [pc, #80]	@ (800cacc <xPortStartScheduler+0x13c>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a13      	ldr	r2, [pc, #76]	@ (800cacc <xPortStartScheduler+0x13c>)
 800ca7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ca82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca84:	f000 f8da 	bl	800cc3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca88:	4b11      	ldr	r3, [pc, #68]	@ (800cad0 <xPortStartScheduler+0x140>)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca8e:	f000 f8f9 	bl	800cc84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca92:	4b10      	ldr	r3, [pc, #64]	@ (800cad4 <xPortStartScheduler+0x144>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a0f      	ldr	r2, [pc, #60]	@ (800cad4 <xPortStartScheduler+0x144>)
 800ca98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ca9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca9e:	f7ff ff63 	bl	800c968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800caa2:	f7ff fa59 	bl	800bf58 <vTaskSwitchContext>
	prvTaskExitError();
 800caa6:	f7ff ff19 	bl	800c8dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3718      	adds	r7, #24
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	e000ed00 	.word	0xe000ed00
 800cab8:	410fc271 	.word	0x410fc271
 800cabc:	410fc270 	.word	0x410fc270
 800cac0:	e000e400 	.word	0xe000e400
 800cac4:	20000bc4 	.word	0x20000bc4
 800cac8:	20000bc8 	.word	0x20000bc8
 800cacc:	e000ed20 	.word	0xe000ed20
 800cad0:	20000010 	.word	0x20000010
 800cad4:	e000ef34 	.word	0xe000ef34

0800cad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	607b      	str	r3, [r7, #4]
}
 800caf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800caf2:	4b10      	ldr	r3, [pc, #64]	@ (800cb34 <vPortEnterCritical+0x5c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3301      	adds	r3, #1
 800caf8:	4a0e      	ldr	r2, [pc, #56]	@ (800cb34 <vPortEnterCritical+0x5c>)
 800cafa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cafc:	4b0d      	ldr	r3, [pc, #52]	@ (800cb34 <vPortEnterCritical+0x5c>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d110      	bne.n	800cb26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb04:	4b0c      	ldr	r3, [pc, #48]	@ (800cb38 <vPortEnterCritical+0x60>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00b      	beq.n	800cb26 <vPortEnterCritical+0x4e>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	603b      	str	r3, [r7, #0]
}
 800cb20:	bf00      	nop
 800cb22:	bf00      	nop
 800cb24:	e7fd      	b.n	800cb22 <vPortEnterCritical+0x4a>
	}
}
 800cb26:	bf00      	nop
 800cb28:	370c      	adds	r7, #12
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	20000010 	.word	0x20000010
 800cb38:	e000ed04 	.word	0xe000ed04

0800cb3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb42:	4b12      	ldr	r3, [pc, #72]	@ (800cb8c <vPortExitCritical+0x50>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d10b      	bne.n	800cb62 <vPortExitCritical+0x26>
	__asm volatile
 800cb4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4e:	f383 8811 	msr	BASEPRI, r3
 800cb52:	f3bf 8f6f 	isb	sy
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	607b      	str	r3, [r7, #4]
}
 800cb5c:	bf00      	nop
 800cb5e:	bf00      	nop
 800cb60:	e7fd      	b.n	800cb5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb62:	4b0a      	ldr	r3, [pc, #40]	@ (800cb8c <vPortExitCritical+0x50>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	3b01      	subs	r3, #1
 800cb68:	4a08      	ldr	r2, [pc, #32]	@ (800cb8c <vPortExitCritical+0x50>)
 800cb6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb6c:	4b07      	ldr	r3, [pc, #28]	@ (800cb8c <vPortExitCritical+0x50>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d105      	bne.n	800cb80 <vPortExitCritical+0x44>
 800cb74:	2300      	movs	r3, #0
 800cb76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	f383 8811 	msr	BASEPRI, r3
}
 800cb7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb80:	bf00      	nop
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr
 800cb8c:	20000010 	.word	0x20000010

0800cb90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb90:	f3ef 8009 	mrs	r0, PSP
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	4b15      	ldr	r3, [pc, #84]	@ (800cbf0 <pxCurrentTCBConst>)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	f01e 0f10 	tst.w	lr, #16
 800cba0:	bf08      	it	eq
 800cba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbaa:	6010      	str	r0, [r2, #0]
 800cbac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cbb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cbb4:	f380 8811 	msr	BASEPRI, r0
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f7ff f9ca 	bl	800bf58 <vTaskSwitchContext>
 800cbc4:	f04f 0000 	mov.w	r0, #0
 800cbc8:	f380 8811 	msr	BASEPRI, r0
 800cbcc:	bc09      	pop	{r0, r3}
 800cbce:	6819      	ldr	r1, [r3, #0]
 800cbd0:	6808      	ldr	r0, [r1, #0]
 800cbd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd6:	f01e 0f10 	tst.w	lr, #16
 800cbda:	bf08      	it	eq
 800cbdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cbe0:	f380 8809 	msr	PSP, r0
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w

0800cbf0 <pxCurrentTCBConst>:
 800cbf0:	20000a98 	.word	0x20000a98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop

0800cbf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	607b      	str	r3, [r7, #4]
}
 800cc10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc12:	f7ff f8e7 	bl	800bde4 <xTaskIncrementTick>
 800cc16:	4603      	mov	r3, r0
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d003      	beq.n	800cc24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc1c:	4b06      	ldr	r3, [pc, #24]	@ (800cc38 <xPortSysTickHandler+0x40>)
 800cc1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	2300      	movs	r3, #0
 800cc26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	f383 8811 	msr	BASEPRI, r3
}
 800cc2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	e000ed04 	.word	0xe000ed04

0800cc3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc40:	4b0b      	ldr	r3, [pc, #44]	@ (800cc70 <vPortSetupTimerInterrupt+0x34>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc46:	4b0b      	ldr	r3, [pc, #44]	@ (800cc74 <vPortSetupTimerInterrupt+0x38>)
 800cc48:	2200      	movs	r2, #0
 800cc4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc4c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc78 <vPortSetupTimerInterrupt+0x3c>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a0a      	ldr	r2, [pc, #40]	@ (800cc7c <vPortSetupTimerInterrupt+0x40>)
 800cc52:	fba2 2303 	umull	r2, r3, r2, r3
 800cc56:	099b      	lsrs	r3, r3, #6
 800cc58:	4a09      	ldr	r2, [pc, #36]	@ (800cc80 <vPortSetupTimerInterrupt+0x44>)
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc5e:	4b04      	ldr	r3, [pc, #16]	@ (800cc70 <vPortSetupTimerInterrupt+0x34>)
 800cc60:	2207      	movs	r2, #7
 800cc62:	601a      	str	r2, [r3, #0]
}
 800cc64:	bf00      	nop
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	e000e010 	.word	0xe000e010
 800cc74:	e000e018 	.word	0xe000e018
 800cc78:	20000004 	.word	0x20000004
 800cc7c:	10624dd3 	.word	0x10624dd3
 800cc80:	e000e014 	.word	0xe000e014

0800cc84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cc94 <vPortEnableVFP+0x10>
 800cc88:	6801      	ldr	r1, [r0, #0]
 800cc8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cc8e:	6001      	str	r1, [r0, #0]
 800cc90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc92:	bf00      	nop
 800cc94:	e000ed88 	.word	0xe000ed88

0800cc98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc9e:	f3ef 8305 	mrs	r3, IPSR
 800cca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2b0f      	cmp	r3, #15
 800cca8:	d915      	bls.n	800ccd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccaa:	4a18      	ldr	r2, [pc, #96]	@ (800cd0c <vPortValidateInterruptPriority+0x74>)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	4413      	add	r3, r2
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ccb4:	4b16      	ldr	r3, [pc, #88]	@ (800cd10 <vPortValidateInterruptPriority+0x78>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	7afa      	ldrb	r2, [r7, #11]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d20b      	bcs.n	800ccd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	607b      	str	r3, [r7, #4]
}
 800ccd0:	bf00      	nop
 800ccd2:	bf00      	nop
 800ccd4:	e7fd      	b.n	800ccd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ccd6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd14 <vPortValidateInterruptPriority+0x7c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ccde:	4b0e      	ldr	r3, [pc, #56]	@ (800cd18 <vPortValidateInterruptPriority+0x80>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d90b      	bls.n	800ccfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	603b      	str	r3, [r7, #0]
}
 800ccf8:	bf00      	nop
 800ccfa:	bf00      	nop
 800ccfc:	e7fd      	b.n	800ccfa <vPortValidateInterruptPriority+0x62>
	}
 800ccfe:	bf00      	nop
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	e000e3f0 	.word	0xe000e3f0
 800cd10:	20000bc4 	.word	0x20000bc4
 800cd14:	e000ed0c 	.word	0xe000ed0c
 800cd18:	20000bc8 	.word	0x20000bc8

0800cd1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b08a      	sub	sp, #40	@ 0x28
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd24:	2300      	movs	r3, #0
 800cd26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd28:	f7fe ffb0 	bl	800bc8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd2c:	4b5f      	ldr	r3, [pc, #380]	@ (800ceac <pvPortMalloc+0x190>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d101      	bne.n	800cd38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd34:	f000 f92a 	bl	800cf8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd38:	4b5d      	ldr	r3, [pc, #372]	@ (800ceb0 <pvPortMalloc+0x194>)
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4013      	ands	r3, r2
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f040 8095 	bne.w	800ce70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d01e      	beq.n	800cd8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cd4c:	2208      	movs	r2, #8
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4413      	add	r3, r2
 800cd52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f003 0307 	and.w	r3, r3, #7
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d015      	beq.n	800cd8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f023 0307 	bic.w	r3, r3, #7
 800cd64:	3308      	adds	r3, #8
 800cd66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f003 0307 	and.w	r3, r3, #7
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00b      	beq.n	800cd8a <pvPortMalloc+0x6e>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	617b      	str	r3, [r7, #20]
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop
 800cd88:	e7fd      	b.n	800cd86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d06f      	beq.n	800ce70 <pvPortMalloc+0x154>
 800cd90:	4b48      	ldr	r3, [pc, #288]	@ (800ceb4 <pvPortMalloc+0x198>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d86a      	bhi.n	800ce70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd9a:	4b47      	ldr	r3, [pc, #284]	@ (800ceb8 <pvPortMalloc+0x19c>)
 800cd9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd9e:	4b46      	ldr	r3, [pc, #280]	@ (800ceb8 <pvPortMalloc+0x19c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cda4:	e004      	b.n	800cdb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d903      	bls.n	800cdc2 <pvPortMalloc+0xa6>
 800cdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1f1      	bne.n	800cda6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdc2:	4b3a      	ldr	r3, [pc, #232]	@ (800ceac <pvPortMalloc+0x190>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d051      	beq.n	800ce70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2208      	movs	r2, #8
 800cdd2:	4413      	add	r3, r2
 800cdd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde0:	685a      	ldr	r2, [r3, #4]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	1ad2      	subs	r2, r2, r3
 800cde6:	2308      	movs	r3, #8
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d920      	bls.n	800ce30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cdee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	f003 0307 	and.w	r3, r3, #7
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00b      	beq.n	800ce18 <pvPortMalloc+0xfc>
	__asm volatile
 800ce00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	613b      	str	r3, [r7, #16]
}
 800ce12:	bf00      	nop
 800ce14:	bf00      	nop
 800ce16:	e7fd      	b.n	800ce14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1a:	685a      	ldr	r2, [r3, #4]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	1ad2      	subs	r2, r2, r3
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce2a:	69b8      	ldr	r0, [r7, #24]
 800ce2c:	f000 f910 	bl	800d050 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce30:	4b20      	ldr	r3, [pc, #128]	@ (800ceb4 <pvPortMalloc+0x198>)
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	4a1e      	ldr	r2, [pc, #120]	@ (800ceb4 <pvPortMalloc+0x198>)
 800ce3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce3e:	4b1d      	ldr	r3, [pc, #116]	@ (800ceb4 <pvPortMalloc+0x198>)
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	4b1e      	ldr	r3, [pc, #120]	@ (800cebc <pvPortMalloc+0x1a0>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d203      	bcs.n	800ce52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce4a:	4b1a      	ldr	r3, [pc, #104]	@ (800ceb4 <pvPortMalloc+0x198>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a1b      	ldr	r2, [pc, #108]	@ (800cebc <pvPortMalloc+0x1a0>)
 800ce50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce54:	685a      	ldr	r2, [r3, #4]
 800ce56:	4b16      	ldr	r3, [pc, #88]	@ (800ceb0 <pvPortMalloc+0x194>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce62:	2200      	movs	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ce66:	4b16      	ldr	r3, [pc, #88]	@ (800cec0 <pvPortMalloc+0x1a4>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	4a14      	ldr	r2, [pc, #80]	@ (800cec0 <pvPortMalloc+0x1a4>)
 800ce6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce70:	f7fe ff1a 	bl	800bca8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ce7a:	f7f5 fa32 	bl	80022e2 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	f003 0307 	and.w	r3, r3, #7
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00b      	beq.n	800cea0 <pvPortMalloc+0x184>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	60fb      	str	r3, [r7, #12]
}
 800ce9a:	bf00      	nop
 800ce9c:	bf00      	nop
 800ce9e:	e7fd      	b.n	800ce9c <pvPortMalloc+0x180>
	return pvReturn;
 800cea0:	69fb      	ldr	r3, [r7, #28]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3728      	adds	r7, #40	@ 0x28
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20004ad4 	.word	0x20004ad4
 800ceb0:	20004ae8 	.word	0x20004ae8
 800ceb4:	20004ad8 	.word	0x20004ad8
 800ceb8:	20004acc 	.word	0x20004acc
 800cebc:	20004adc 	.word	0x20004adc
 800cec0:	20004ae0 	.word	0x20004ae0

0800cec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d04f      	beq.n	800cf76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ced6:	2308      	movs	r3, #8
 800ced8:	425b      	negs	r3, r3
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	4413      	add	r3, r2
 800cede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	685a      	ldr	r2, [r3, #4]
 800cee8:	4b25      	ldr	r3, [pc, #148]	@ (800cf80 <vPortFree+0xbc>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4013      	ands	r3, r2
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10b      	bne.n	800cf0a <vPortFree+0x46>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	60fb      	str	r3, [r7, #12]
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	e7fd      	b.n	800cf06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00b      	beq.n	800cf2a <vPortFree+0x66>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	60bb      	str	r3, [r7, #8]
}
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop
 800cf28:	e7fd      	b.n	800cf26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	4b14      	ldr	r3, [pc, #80]	@ (800cf80 <vPortFree+0xbc>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4013      	ands	r3, r2
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d01e      	beq.n	800cf76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d11a      	bne.n	800cf76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	685a      	ldr	r2, [r3, #4]
 800cf44:	4b0e      	ldr	r3, [pc, #56]	@ (800cf80 <vPortFree+0xbc>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	43db      	mvns	r3, r3
 800cf4a:	401a      	ands	r2, r3
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf50:	f7fe fe9c 	bl	800bc8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	4b0a      	ldr	r3, [pc, #40]	@ (800cf84 <vPortFree+0xc0>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	4a09      	ldr	r2, [pc, #36]	@ (800cf84 <vPortFree+0xc0>)
 800cf60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf62:	6938      	ldr	r0, [r7, #16]
 800cf64:	f000 f874 	bl	800d050 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cf68:	4b07      	ldr	r3, [pc, #28]	@ (800cf88 <vPortFree+0xc4>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	4a06      	ldr	r2, [pc, #24]	@ (800cf88 <vPortFree+0xc4>)
 800cf70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cf72:	f7fe fe99 	bl	800bca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf76:	bf00      	nop
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	20004ae8 	.word	0x20004ae8
 800cf84:	20004ad8 	.word	0x20004ad8
 800cf88:	20004ae4 	.word	0x20004ae4

0800cf8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf92:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 800cf96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf98:	4b27      	ldr	r3, [pc, #156]	@ (800d038 <prvHeapInit+0xac>)
 800cf9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f003 0307 	and.w	r3, r3, #7
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00c      	beq.n	800cfc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3307      	adds	r3, #7
 800cfaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f023 0307 	bic.w	r3, r3, #7
 800cfb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	1ad3      	subs	r3, r2, r3
 800cfba:	4a1f      	ldr	r2, [pc, #124]	@ (800d038 <prvHeapInit+0xac>)
 800cfbc:	4413      	add	r3, r2
 800cfbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfc4:	4a1d      	ldr	r2, [pc, #116]	@ (800d03c <prvHeapInit+0xb0>)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfca:	4b1c      	ldr	r3, [pc, #112]	@ (800d03c <prvHeapInit+0xb0>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	68ba      	ldr	r2, [r7, #8]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cfd8:	2208      	movs	r2, #8
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	1a9b      	subs	r3, r3, r2
 800cfde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f023 0307 	bic.w	r3, r3, #7
 800cfe6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4a15      	ldr	r2, [pc, #84]	@ (800d040 <prvHeapInit+0xb4>)
 800cfec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfee:	4b14      	ldr	r3, [pc, #80]	@ (800d040 <prvHeapInit+0xb4>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2200      	movs	r2, #0
 800cff4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cff6:	4b12      	ldr	r3, [pc, #72]	@ (800d040 <prvHeapInit+0xb4>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2200      	movs	r2, #0
 800cffc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	1ad2      	subs	r2, r2, r3
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d00c:	4b0c      	ldr	r3, [pc, #48]	@ (800d040 <prvHeapInit+0xb4>)
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	4a0a      	ldr	r2, [pc, #40]	@ (800d044 <prvHeapInit+0xb8>)
 800d01a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	4a09      	ldr	r2, [pc, #36]	@ (800d048 <prvHeapInit+0xbc>)
 800d022:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d024:	4b09      	ldr	r3, [pc, #36]	@ (800d04c <prvHeapInit+0xc0>)
 800d026:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d02a:	601a      	str	r2, [r3, #0]
}
 800d02c:	bf00      	nop
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	20000bcc 	.word	0x20000bcc
 800d03c:	20004acc 	.word	0x20004acc
 800d040:	20004ad4 	.word	0x20004ad4
 800d044:	20004adc 	.word	0x20004adc
 800d048:	20004ad8 	.word	0x20004ad8
 800d04c:	20004ae8 	.word	0x20004ae8

0800d050 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d058:	4b28      	ldr	r3, [pc, #160]	@ (800d0fc <prvInsertBlockIntoFreeList+0xac>)
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	e002      	b.n	800d064 <prvInsertBlockIntoFreeList+0x14>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d8f7      	bhi.n	800d05e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	4413      	add	r3, r2
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d108      	bne.n	800d092 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	685a      	ldr	r2, [r3, #4]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	441a      	add	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	441a      	add	r2, r3
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d118      	bne.n	800d0d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4b15      	ldr	r3, [pc, #84]	@ (800d100 <prvInsertBlockIntoFreeList+0xb0>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d00d      	beq.n	800d0ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	441a      	add	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	601a      	str	r2, [r3, #0]
 800d0cc:	e008      	b.n	800d0e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d100 <prvInsertBlockIntoFreeList+0xb0>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	e003      	b.n	800d0e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d002      	beq.n	800d0ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0ee:	bf00      	nop
 800d0f0:	3714      	adds	r7, #20
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	20004acc 	.word	0x20004acc
 800d100:	20004ad4 	.word	0x20004ad4

0800d104 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 800d104:	b580      	push	{r7, lr}
 800d106:	af00      	add	r7, sp, #0
	select_bank_zero();
 800d108:	f000 f966 	bl	800d3d8 <select_bank_zero>
	while(!icm20948_who_am_i());
 800d10c:	bf00      	nop
 800d10e:	f000 f96f 	bl	800d3f0 <icm20948_who_am_i>
 800d112:	4603      	mov	r3, r0
 800d114:	f083 0301 	eor.w	r3, r3, #1
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1f7      	bne.n	800d10e <icm20948_init+0xa>

	icm20948_device_reset();
 800d11e:	f000 f97a 	bl	800d416 <icm20948_device_reset>
	icm20948_wakeup();
 800d122:	f000 f984 	bl	800d42e <icm20948_wakeup>

	icm20948_clock_source(1);
 800d126:	2001      	movs	r0, #1
 800d128:	f000 f99b 	bl	800d462 <icm20948_clock_source>
	icm20948_odr_align_enable();
 800d12c:	f000 f9b2 	bl	800d494 <icm20948_odr_align_enable>
	
	icm20948_gyro_low_pass_filter(0);
 800d130:	2000      	movs	r0, #0
 800d132:	f000 f9b8 	bl	800d4a6 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 800d136:	2000      	movs	r0, #0
 800d138:	f000 f9d2 	bl	800d4e0 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 800d13c:	2000      	movs	r0, #0
 800d13e:	f000 f9ec 	bl	800d51a <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 800d142:	2000      	movs	r0, #0
 800d144:	f000 f9f8 	bl	800d538 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 800d148:	f000 fa14 	bl	800d574 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 800d14c:	f000 fb86 	bl	800d85c <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_250dps);
 800d150:	2000      	movs	r0, #0
 800d152:	f000 fc9b 	bl	800da8c <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 800d156:	2003      	movs	r0, #3
 800d158:	f000 fce2 	bl	800db20 <icm20948_accel_full_scale_select>
}
 800d15c:	bf00      	nop
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <icm20948_gyro_read>:
	ak09916_soft_reset();
	ak09916_operation_mode_setting(continuous_measurement_100hz);
}

void icm20948_gyro_read(axises* data)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 800d168:	2206      	movs	r2, #6
 800d16a:	2133      	movs	r1, #51	@ 0x33
 800d16c:	2000      	movs	r0, #0
 800d16e:	f000 fd83 	bl	800dc78 <read_multiple_icm20948_reg>
 800d172:	60f8      	str	r0, [r7, #12]

	data->x = (double)((int16_t)(temp[0] << 8 | temp[1]));
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	021b      	lsls	r3, r3, #8
 800d17a:	b21a      	sxth	r2, r3
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	3301      	adds	r3, #1
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	b21b      	sxth	r3, r3
 800d184:	4313      	orrs	r3, r2
 800d186:	b21b      	sxth	r3, r3
 800d188:	4618      	mov	r0, r3
 800d18a:	f7f3 f9cb 	bl	8000524 <__aeabi_i2d>
 800d18e:	4602      	mov	r2, r0
 800d190:	460b      	mov	r3, r1
 800d192:	6879      	ldr	r1, [r7, #4]
 800d194:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = (double)((int16_t)(temp[2] << 8 | temp[3]));
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3302      	adds	r3, #2
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	021b      	lsls	r3, r3, #8
 800d1a0:	b21a      	sxth	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3303      	adds	r3, #3
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	b21b      	sxth	r3, r3
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	b21b      	sxth	r3, r3
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7f3 f9b8 	bl	8000524 <__aeabi_i2d>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	6879      	ldr	r1, [r7, #4]
 800d1ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = (double)((int16_t)(temp[4] << 8 | temp[5]));
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	021b      	lsls	r3, r3, #8
 800d1c6:	b21a      	sxth	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	3305      	adds	r3, #5
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	b21b      	sxth	r3, r3
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	b21b      	sxth	r3, r3
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7f3 f9a5 	bl	8000524 <__aeabi_i2d>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	6879      	ldr	r1, [r7, #4]
 800d1e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800d1e4:	bf00      	nop
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 800d1f4:	2206      	movs	r2, #6
 800d1f6:	212d      	movs	r1, #45	@ 0x2d
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	f000 fd3d 	bl	800dc78 <read_multiple_icm20948_reg>
 800d1fe:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	021b      	lsls	r3, r3, #8
 800d206:	b21a      	sxth	r2, r3
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	3301      	adds	r3, #1
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	b21b      	sxth	r3, r3
 800d210:	4313      	orrs	r3, r2
 800d212:	b21b      	sxth	r3, r3
 800d214:	4618      	mov	r0, r3
 800d216:	f7f3 f985 	bl	8000524 <__aeabi_i2d>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	6879      	ldr	r1, [r7, #4]
 800d220:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	3302      	adds	r3, #2
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	021b      	lsls	r3, r3, #8
 800d22c:	b21a      	sxth	r2, r3
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	3303      	adds	r3, #3
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	b21b      	sxth	r3, r3
 800d236:	4313      	orrs	r3, r2
 800d238:	b21b      	sxth	r3, r3
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7f3 f972 	bl	8000524 <__aeabi_i2d>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	6879      	ldr	r1, [r7, #4]
 800d246:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	3304      	adds	r3, #4
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	021b      	lsls	r3, r3, #8
 800d252:	b21a      	sxth	r2, r3
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3305      	adds	r3, #5
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	b21b      	sxth	r3, r3
 800d25c:	4313      	orrs	r3, r2
 800d25e:	b21b      	sxth	r3, r3
 800d260:	ee07 3a90 	vmov	s15, r3
 800d264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d268:	4b08      	ldr	r3, [pc, #32]	@ (800d28c <icm20948_accel_read+0xa0>)
 800d26a:	edd3 7a00 	vldr	s15, [r3]
 800d26e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d272:	ee17 0a90 	vmov	r0, s15
 800d276:	f7f3 f967 	bl	8000548 <__aeabi_f2d>
 800d27a:	4602      	mov	r2, r0
 800d27c:	460b      	mov	r3, r1
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	e9c1 2304 	strd	r2, r3, [r1, #16]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 800d284:	bf00      	nop
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	20004af0 	.word	0x20004af0

0800d290 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 800d298:	2010      	movs	r0, #16
 800d29a:	f000 fd49 	bl	800dd30 <read_single_ak09916_reg>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	f003 0301 	and.w	r3, r3, #1
 800d2a4:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d101      	bne.n	800d2b0 <ak09916_mag_read+0x20>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e049      	b.n	800d344 <ak09916_mag_read+0xb4>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 800d2b0:	2106      	movs	r1, #6
 800d2b2:	2011      	movs	r0, #17
 800d2b4:	f000 fd5d 	bl	800dd72 <read_multiple_ak09916_reg>
 800d2b8:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 800d2ba:	2018      	movs	r0, #24
 800d2bc:	f000 fd38 	bl	800dd30 <read_single_ak09916_reg>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f003 0308 	and.w	r3, r3, #8
 800d2c6:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 800d2c8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <ak09916_mag_read+0x42>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	e038      	b.n	800d344 <ak09916_mag_read+0xb4>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	021b      	lsls	r3, r3, #8
 800d2da:	b21a      	sxth	r2, r3
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	b21b      	sxth	r3, r3
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	b21b      	sxth	r3, r3
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7f3 f91c 	bl	8000524 <__aeabi_i2d>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	6879      	ldr	r1, [r7, #4]
 800d2f2:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	3303      	adds	r3, #3
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	021b      	lsls	r3, r3, #8
 800d2fe:	b21a      	sxth	r2, r3
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	3302      	adds	r3, #2
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	b21b      	sxth	r3, r3
 800d308:	4313      	orrs	r3, r2
 800d30a:	b21b      	sxth	r3, r3
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7f3 f909 	bl	8000524 <__aeabi_i2d>
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	3305      	adds	r3, #5
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	021b      	lsls	r3, r3, #8
 800d324:	b21a      	sxth	r2, r3
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	3304      	adds	r3, #4
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	b21b      	sxth	r3, r3
 800d32e:	4313      	orrs	r3, r2
 800d330:	b21b      	sxth	r3, r3
 800d332:	4618      	mov	r0, r3
 800d334:	f7f3 f8f6 	bl	8000524 <__aeabi_i2d>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	6879      	ldr	r1, [r7, #4]
 800d33e:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return true;
 800d342:	2301      	movs	r3, #1
}
 800d344:	4618      	mov	r0, r3
 800d346:	3718      	adds	r7, #24
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <icm20948_gyro_read_dps>:

void icm20948_gyro_read_dps(axises* data)
{
 800d34c:	b5b0      	push	{r4, r5, r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7ff ff03 	bl	800d160 <icm20948_gyro_read>

	data->x /= (double) gyro_scale_factor;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d360:	4b1c      	ldr	r3, [pc, #112]	@ (800d3d4 <icm20948_gyro_read_dps+0x88>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4618      	mov	r0, r3
 800d366:	f7f3 f8ef 	bl	8000548 <__aeabi_f2d>
 800d36a:	4602      	mov	r2, r0
 800d36c:	460b      	mov	r3, r1
 800d36e:	4620      	mov	r0, r4
 800d370:	4629      	mov	r1, r5
 800d372:	f7f3 fa6b 	bl	800084c <__aeabi_ddiv>
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	6879      	ldr	r1, [r7, #4]
 800d37c:	e9c1 2300 	strd	r2, r3, [r1]
	data->y /= (double) gyro_scale_factor;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800d386:	4b13      	ldr	r3, [pc, #76]	@ (800d3d4 <icm20948_gyro_read_dps+0x88>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7f3 f8dc 	bl	8000548 <__aeabi_f2d>
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	4620      	mov	r0, r4
 800d396:	4629      	mov	r1, r5
 800d398:	f7f3 fa58 	bl	800084c <__aeabi_ddiv>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z /= (double) gyro_scale_factor;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800d3ac:	4b09      	ldr	r3, [pc, #36]	@ (800d3d4 <icm20948_gyro_read_dps+0x88>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7f3 f8c9 	bl	8000548 <__aeabi_f2d>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	4629      	mov	r1, r5
 800d3be:	f7f3 fa45 	bl	800084c <__aeabi_ddiv>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	6879      	ldr	r1, [r7, #4]
 800d3c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800d3cc:	bf00      	nop
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bdb0      	pop	{r4, r5, r7, pc}
 800d3d4:	20004aec 	.word	0x20004aec

0800d3d8 <select_bank_zero>:
}	


/* Sub Functions */
void select_bank_zero()
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, 0x7f, 0x00);
 800d3dc:	2200      	movs	r2, #0
 800d3de:	217f      	movs	r1, #127	@ 0x7f
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	f000 fc27 	bl	800dc34 <write_single_icm20948_reg>
	HAL_Delay(100);
 800d3e6:	2064      	movs	r0, #100	@ 0x64
 800d3e8:	f7f7 fd02 	bl	8004df0 <HAL_Delay>
}
 800d3ec:	bf00      	nop
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <icm20948_who_am_i>:

bool icm20948_who_am_i()
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	f000 fbef 	bl	800dbdc <read_single_icm20948_reg>
 800d3fe:	4603      	mov	r3, r0
 800d400:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 800d402:	79fb      	ldrb	r3, [r7, #7]
 800d404:	2bea      	cmp	r3, #234	@ 0xea
 800d406:	d101      	bne.n	800d40c <icm20948_who_am_i+0x1c>
		return true;
 800d408:	2301      	movs	r3, #1
 800d40a:	e000      	b.n	800d40e <icm20948_who_am_i+0x1e>
	else
		return false;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <icm20948_device_reset>:
	else
		return false;
}

void icm20948_device_reset()
{
 800d416:	b580      	push	{r7, lr}
 800d418:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 800d41a:	22c1      	movs	r2, #193	@ 0xc1
 800d41c:	2106      	movs	r1, #6
 800d41e:	2000      	movs	r0, #0
 800d420:	f000 fc08 	bl	800dc34 <write_single_icm20948_reg>
	HAL_Delay(100);
 800d424:	2064      	movs	r0, #100	@ 0x64
 800d426:	f7f7 fce3 	bl	8004df0 <HAL_Delay>
}
 800d42a:	bf00      	nop
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <icm20948_wakeup>:
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
	HAL_Delay(100);
}

void icm20948_wakeup()
{
 800d42e:	b580      	push	{r7, lr}
 800d430:	b082      	sub	sp, #8
 800d432:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800d434:	2106      	movs	r1, #6
 800d436:	2000      	movs	r0, #0
 800d438:	f000 fbd0 	bl	800dbdc <read_single_icm20948_reg>
 800d43c:	4603      	mov	r3, r0
 800d43e:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 800d440:	79fb      	ldrb	r3, [r7, #7]
 800d442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d446:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	461a      	mov	r2, r3
 800d44c:	2106      	movs	r1, #6
 800d44e:	2000      	movs	r0, #0
 800d450:	f000 fbf0 	bl	800dc34 <write_single_icm20948_reg>
	HAL_Delay(100);
 800d454:	2064      	movs	r0, #100	@ 0x64
 800d456:	f7f7 fccb 	bl	8004df0 <HAL_Delay>
}
 800d45a:	bf00      	nop
 800d45c:	3708      	adds	r7, #8
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <icm20948_clock_source>:

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
}

void icm20948_clock_source(uint8_t source)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	4603      	mov	r3, r0
 800d46a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800d46c:	2106      	movs	r1, #6
 800d46e:	2000      	movs	r0, #0
 800d470:	f000 fbb4 	bl	800dbdc <read_single_icm20948_reg>
 800d474:	4603      	mov	r3, r0
 800d476:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 800d478:	7bfa      	ldrb	r2, [r7, #15]
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800d480:	7bfb      	ldrb	r3, [r7, #15]
 800d482:	461a      	mov	r2, r3
 800d484:	2106      	movs	r1, #6
 800d486:	2000      	movs	r0, #0
 800d488:	f000 fbd4 	bl	800dc34 <write_single_icm20948_reg>
}
 800d48c:	bf00      	nop
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 800d498:	2201      	movs	r2, #1
 800d49a:	2109      	movs	r1, #9
 800d49c:	2020      	movs	r0, #32
 800d49e:	f000 fbc9 	bl	800dc34 <write_single_icm20948_reg>
}
 800d4a2:	bf00      	nop
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800d4b0:	2101      	movs	r1, #1
 800d4b2:	2020      	movs	r0, #32
 800d4b4:	f000 fb92 	bl	800dbdc <read_single_icm20948_reg>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800d4bc:	79fb      	ldrb	r3, [r7, #7]
 800d4be:	00db      	lsls	r3, r3, #3
 800d4c0:	b25a      	sxtb	r2, r3
 800d4c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	b25b      	sxtb	r3, r3
 800d4ca:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	2101      	movs	r1, #1
 800d4d2:	2020      	movs	r0, #32
 800d4d4:	f000 fbae 	bl	800dc34 <write_single_icm20948_reg>
}
 800d4d8:	bf00      	nop
 800d4da:	3710      	adds	r7, #16
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800d4ea:	2114      	movs	r1, #20
 800d4ec:	2020      	movs	r0, #32
 800d4ee:	f000 fb75 	bl	800dbdc <read_single_icm20948_reg>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800d4f6:	79fb      	ldrb	r3, [r7, #7]
 800d4f8:	00db      	lsls	r3, r3, #3
 800d4fa:	b25a      	sxtb	r2, r3
 800d4fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d500:	4313      	orrs	r3, r2
 800d502:	b25b      	sxtb	r3, r3
 800d504:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800d506:	7bfb      	ldrb	r3, [r7, #15]
 800d508:	461a      	mov	r2, r3
 800d50a:	2101      	movs	r1, #1
 800d50c:	2020      	movs	r0, #32
 800d50e:	f000 fb91 	bl	800dc34 <write_single_icm20948_reg>
}
 800d512:	bf00      	nop
 800d514:	3710      	adds	r7, #16
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b082      	sub	sp, #8
 800d51e:	af00      	add	r7, sp, #0
 800d520:	4603      	mov	r3, r0
 800d522:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	461a      	mov	r2, r3
 800d528:	2100      	movs	r1, #0
 800d52a:	2020      	movs	r0, #32
 800d52c:	f000 fb82 	bl	800dc34 <write_single_icm20948_reg>
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	4603      	mov	r3, r0
 800d540:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 800d542:	88fb      	ldrh	r3, [r7, #6]
 800d544:	0a1b      	lsrs	r3, r3, #8
 800d546:	b29b      	uxth	r3, r3
 800d548:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 800d54a:	88fb      	ldrh	r3, [r7, #6]
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	f003 030f 	and.w	r3, r3, #15
 800d552:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 800d554:	7bfb      	ldrb	r3, [r7, #15]
 800d556:	461a      	mov	r2, r3
 800d558:	2110      	movs	r1, #16
 800d55a:	2020      	movs	r0, #32
 800d55c:	f000 fb6a 	bl	800dc34 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800d560:	7bbb      	ldrb	r3, [r7, #14]
 800d562:	461a      	mov	r2, r3
 800d564:	2111      	movs	r1, #17
 800d566:	2020      	movs	r0, #32
 800d568:	f000 fb64 	bl	800dc34 <write_single_icm20948_reg>
}
 800d56c:	bf00      	nop
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <icm20948_gyro_calibration>:
	write_single_ak09916_reg(MAG_CNTL2, mode);
	HAL_Delay(100);
}

void icm20948_gyro_calibration()
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b090      	sub	sp, #64	@ 0x40
 800d578:	af00      	add	r7, sp, #0
    axises temp;
    int32_t gyro_bias[3] = {0};
 800d57a:	f107 030c 	add.w	r3, r7, #12
 800d57e:	2200      	movs	r2, #0
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	605a      	str	r2, [r3, #4]
 800d584:	609a      	str	r2, [r3, #8]
    uint8_t gyro_offset[6] = {0};
 800d586:	2300      	movs	r3, #0
 800d588:	607b      	str	r3, [r7, #4]
 800d58a:	2300      	movs	r3, #0
 800d58c:	813b      	strh	r3, [r7, #8]
    uint32_t start_time = HAL_GetTick();
 800d58e:	f7f7 fc23 	bl	8004dd8 <HAL_GetTick>
 800d592:	63f8      	str	r0, [r7, #60]	@ 0x3c
    uint32_t sample_count = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	63bb      	str	r3, [r7, #56]	@ 0x38
    const uint32_t sample_interval_ms = 10; // 10 ms interval for each sample
 800d598:	230a      	movs	r3, #10
 800d59a:	637b      	str	r3, [r7, #52]	@ 0x34

    // Collect 100 samples at 10 ms intervals
    while (sample_count < 500)
 800d59c:	e042      	b.n	800d624 <icm20948_gyro_calibration+0xb0>
    {
        // Check if the desired time interval has passed
        if (HAL_GetTick() - start_time >= sample_interval_ms)
 800d59e:	f7f7 fc1b 	bl	8004dd8 <HAL_GetTick>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d83a      	bhi.n	800d624 <icm20948_gyro_calibration+0xb0>
        {
            // Reset the timer for the next sample
            start_time = HAL_GetTick();
 800d5ae:	f7f7 fc13 	bl	8004dd8 <HAL_GetTick>
 800d5b2:	63f8      	str	r0, [r7, #60]	@ 0x3c

            // Read gyro data
            icm20948_gyro_read(&temp);
 800d5b4:	f107 0318 	add.w	r3, r7, #24
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7ff fdd1 	bl	800d160 <icm20948_gyro_read>

            // Accumulate the gyro readings
            gyro_bias[0] += temp.x;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7f2 ffaf 	bl	8000524 <__aeabi_i2d>
 800d5c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d5ca:	f7f2 fe5f 	bl	800028c <__adddf3>
 800d5ce:	4602      	mov	r2, r0
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	f7f3 fabf 	bl	8000b58 <__aeabi_d2iz>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	60fb      	str	r3, [r7, #12]
            gyro_bias[1] += temp.y;
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7f2 ff9f 	bl	8000524 <__aeabi_i2d>
 800d5e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d5ea:	f7f2 fe4f 	bl	800028c <__adddf3>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	f7f3 faaf 	bl	8000b58 <__aeabi_d2iz>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	613b      	str	r3, [r7, #16]
            gyro_bias[2] += temp.z;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	4618      	mov	r0, r3
 800d602:	f7f2 ff8f 	bl	8000524 <__aeabi_i2d>
 800d606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d60a:	f7f2 fe3f 	bl	800028c <__adddf3>
 800d60e:	4602      	mov	r2, r0
 800d610:	460b      	mov	r3, r1
 800d612:	4610      	mov	r0, r2
 800d614:	4619      	mov	r1, r3
 800d616:	f7f3 fa9f 	bl	8000b58 <__aeabi_d2iz>
 800d61a:	4603      	mov	r3, r0
 800d61c:	617b      	str	r3, [r7, #20]

            // Increment the sample counter
            sample_count++;
 800d61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d620:	3301      	adds	r3, #1
 800d622:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (sample_count < 500)
 800d624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d626:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800d62a:	d3b8      	bcc.n	800d59e <icm20948_gyro_calibration+0x2a>
        }
    }

    // Calculate the average gyro bias
    gyro_bias[0] /= 500;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4a30      	ldr	r2, [pc, #192]	@ (800d6f0 <icm20948_gyro_calibration+0x17c>)
 800d630:	fb82 1203 	smull	r1, r2, r2, r3
 800d634:	1152      	asrs	r2, r2, #5
 800d636:	17db      	asrs	r3, r3, #31
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	60fb      	str	r3, [r7, #12]
    gyro_bias[1] /= 500;
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	4a2c      	ldr	r2, [pc, #176]	@ (800d6f0 <icm20948_gyro_calibration+0x17c>)
 800d640:	fb82 1203 	smull	r1, r2, r2, r3
 800d644:	1152      	asrs	r2, r2, #5
 800d646:	17db      	asrs	r3, r3, #31
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	613b      	str	r3, [r7, #16]
    gyro_bias[2] /= 500;
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	4a28      	ldr	r2, [pc, #160]	@ (800d6f0 <icm20948_gyro_calibration+0x17c>)
 800d650:	fb82 1203 	smull	r1, r2, r2, r3
 800d654:	1152      	asrs	r2, r2, #5
 800d656:	17db      	asrs	r3, r3, #31
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	617b      	str	r3, [r7, #20]

    // Adjust for sensitivity of 131 LSB/°/s (for ±250°/s full-scale range)
        // The division adjusts the bias to match the expected input format for bias registers
        gyro_offset[0] = (-gyro_bias[0] / 131 >> 8) & 0xFF;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	425b      	negs	r3, r3
 800d660:	4a24      	ldr	r2, [pc, #144]	@ (800d6f4 <icm20948_gyro_calibration+0x180>)
 800d662:	fb82 1203 	smull	r1, r2, r2, r3
 800d666:	1152      	asrs	r2, r2, #5
 800d668:	17db      	asrs	r3, r3, #31
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	121b      	asrs	r3, r3, #8
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	713b      	strb	r3, [r7, #4]
        gyro_offset[1] = (-gyro_bias[0] / 131) & 0xFF;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	425b      	negs	r3, r3
 800d676:	4a1f      	ldr	r2, [pc, #124]	@ (800d6f4 <icm20948_gyro_calibration+0x180>)
 800d678:	fb82 1203 	smull	r1, r2, r2, r3
 800d67c:	1152      	asrs	r2, r2, #5
 800d67e:	17db      	asrs	r3, r3, #31
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	b2db      	uxtb	r3, r3
 800d684:	717b      	strb	r3, [r7, #5]
        gyro_offset[2] = (-gyro_bias[1] / 131 >> 8) & 0xFF;
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	425b      	negs	r3, r3
 800d68a:	4a1a      	ldr	r2, [pc, #104]	@ (800d6f4 <icm20948_gyro_calibration+0x180>)
 800d68c:	fb82 1203 	smull	r1, r2, r2, r3
 800d690:	1152      	asrs	r2, r2, #5
 800d692:	17db      	asrs	r3, r3, #31
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	121b      	asrs	r3, r3, #8
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	71bb      	strb	r3, [r7, #6]
        gyro_offset[3] = (-gyro_bias[1] / 131) & 0xFF;
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	425b      	negs	r3, r3
 800d6a0:	4a14      	ldr	r2, [pc, #80]	@ (800d6f4 <icm20948_gyro_calibration+0x180>)
 800d6a2:	fb82 1203 	smull	r1, r2, r2, r3
 800d6a6:	1152      	asrs	r2, r2, #5
 800d6a8:	17db      	asrs	r3, r3, #31
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	71fb      	strb	r3, [r7, #7]
        gyro_offset[4] = (-gyro_bias[2] / 131 >> 8) & 0xFF;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	425b      	negs	r3, r3
 800d6b4:	4a0f      	ldr	r2, [pc, #60]	@ (800d6f4 <icm20948_gyro_calibration+0x180>)
 800d6b6:	fb82 1203 	smull	r1, r2, r2, r3
 800d6ba:	1152      	asrs	r2, r2, #5
 800d6bc:	17db      	asrs	r3, r3, #31
 800d6be:	1ad3      	subs	r3, r2, r3
 800d6c0:	121b      	asrs	r3, r3, #8
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	723b      	strb	r3, [r7, #8]
        gyro_offset[5] = (-gyro_bias[2] / 131) & 0xFF;
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	425b      	negs	r3, r3
 800d6ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d6f4 <icm20948_gyro_calibration+0x180>)
 800d6cc:	fb82 1203 	smull	r1, r2, r2, r3
 800d6d0:	1152      	asrs	r2, r2, #5
 800d6d2:	17db      	asrs	r3, r3, #31
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	727b      	strb	r3, [r7, #9]

        // Write the calculated offset to the gyro registers
        write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 800d6da:	1d3a      	adds	r2, r7, #4
 800d6dc:	2306      	movs	r3, #6
 800d6de:	2103      	movs	r1, #3
 800d6e0:	2020      	movs	r0, #32
 800d6e2:	f000 faf9 	bl	800dcd8 <write_multiple_icm20948_reg>
}
 800d6e6:	bf00      	nop
 800d6e8:	3740      	adds	r7, #64	@ 0x40
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	10624dd3 	.word	0x10624dd3
 800d6f4:	3e88cb3d 	.word	0x3e88cb3d

0800d6f8 <icm20948_gyro_calibration_runtime>:

void icm20948_gyro_calibration_runtime()
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b090      	sub	sp, #64	@ 0x40
 800d6fc:	af00      	add	r7, sp, #0
    axises temp;
    int32_t gyro_bias[3] = {0};
 800d6fe:	f107 030c 	add.w	r3, r7, #12
 800d702:	2200      	movs	r2, #0
 800d704:	601a      	str	r2, [r3, #0]
 800d706:	605a      	str	r2, [r3, #4]
 800d708:	609a      	str	r2, [r3, #8]
    uint8_t gyro_offset[6] = {0};
 800d70a:	2300      	movs	r3, #0
 800d70c:	607b      	str	r3, [r7, #4]
 800d70e:	2300      	movs	r3, #0
 800d710:	813b      	strh	r3, [r7, #8]
    uint32_t start_time = HAL_GetTick();
 800d712:	f7f7 fb61 	bl	8004dd8 <HAL_GetTick>
 800d716:	63f8      	str	r0, [r7, #60]	@ 0x3c
    uint32_t sample_count = 0;
 800d718:	2300      	movs	r3, #0
 800d71a:	63bb      	str	r3, [r7, #56]	@ 0x38
    const uint32_t sample_interval_ms = 10; // 10 ms interval for each sample
 800d71c:	230a      	movs	r3, #10
 800d71e:	637b      	str	r3, [r7, #52]	@ 0x34

    // Collect 100 samples at 10 ms intervals
    while (sample_count < 100)
 800d720:	e042      	b.n	800d7a8 <icm20948_gyro_calibration_runtime+0xb0>
    {
        // Check if the desired time interval has passed
        if (HAL_GetTick() - start_time >= sample_interval_ms)
 800d722:	f7f7 fb59 	bl	8004dd8 <HAL_GetTick>
 800d726:	4602      	mov	r2, r0
 800d728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d72a:	1ad3      	subs	r3, r2, r3
 800d72c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d72e:	429a      	cmp	r2, r3
 800d730:	d83a      	bhi.n	800d7a8 <icm20948_gyro_calibration_runtime+0xb0>
        {
            // Reset the timer for the next sample
            start_time = HAL_GetTick();
 800d732:	f7f7 fb51 	bl	8004dd8 <HAL_GetTick>
 800d736:	63f8      	str	r0, [r7, #60]	@ 0x3c

            // Read gyro data
            icm20948_gyro_read(&temp);
 800d738:	f107 0318 	add.w	r3, r7, #24
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7ff fd0f 	bl	800d160 <icm20948_gyro_read>

            // Accumulate the gyro readings
            gyro_bias[0] += temp.x;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	4618      	mov	r0, r3
 800d746:	f7f2 feed 	bl	8000524 <__aeabi_i2d>
 800d74a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d74e:	f7f2 fd9d 	bl	800028c <__adddf3>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	4610      	mov	r0, r2
 800d758:	4619      	mov	r1, r3
 800d75a:	f7f3 f9fd 	bl	8000b58 <__aeabi_d2iz>
 800d75e:	4603      	mov	r3, r0
 800d760:	60fb      	str	r3, [r7, #12]
            gyro_bias[1] += temp.y;
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	4618      	mov	r0, r3
 800d766:	f7f2 fedd 	bl	8000524 <__aeabi_i2d>
 800d76a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d76e:	f7f2 fd8d 	bl	800028c <__adddf3>
 800d772:	4602      	mov	r2, r0
 800d774:	460b      	mov	r3, r1
 800d776:	4610      	mov	r0, r2
 800d778:	4619      	mov	r1, r3
 800d77a:	f7f3 f9ed 	bl	8000b58 <__aeabi_d2iz>
 800d77e:	4603      	mov	r3, r0
 800d780:	613b      	str	r3, [r7, #16]
            gyro_bias[2] += temp.z;
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	4618      	mov	r0, r3
 800d786:	f7f2 fecd 	bl	8000524 <__aeabi_i2d>
 800d78a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d78e:	f7f2 fd7d 	bl	800028c <__adddf3>
 800d792:	4602      	mov	r2, r0
 800d794:	460b      	mov	r3, r1
 800d796:	4610      	mov	r0, r2
 800d798:	4619      	mov	r1, r3
 800d79a:	f7f3 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	617b      	str	r3, [r7, #20]

            // Increment the sample counter
            sample_count++;
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (sample_count < 100)
 800d7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7aa:	2b63      	cmp	r3, #99	@ 0x63
 800d7ac:	d9b9      	bls.n	800d722 <icm20948_gyro_calibration_runtime+0x2a>
        }
    }

    // Calculate the average gyro bias
    gyro_bias[0] /= 100;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	4a29      	ldr	r2, [pc, #164]	@ (800d858 <icm20948_gyro_calibration_runtime+0x160>)
 800d7b2:	fb82 1203 	smull	r1, r2, r2, r3
 800d7b6:	1152      	asrs	r2, r2, #5
 800d7b8:	17db      	asrs	r3, r3, #31
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	60fb      	str	r3, [r7, #12]
    gyro_bias[1] /= 100;
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	4a25      	ldr	r2, [pc, #148]	@ (800d858 <icm20948_gyro_calibration_runtime+0x160>)
 800d7c2:	fb82 1203 	smull	r1, r2, r2, r3
 800d7c6:	1152      	asrs	r2, r2, #5
 800d7c8:	17db      	asrs	r3, r3, #31
 800d7ca:	1ad3      	subs	r3, r2, r3
 800d7cc:	613b      	str	r3, [r7, #16]
    gyro_bias[2] /= 100;
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	4a21      	ldr	r2, [pc, #132]	@ (800d858 <icm20948_gyro_calibration_runtime+0x160>)
 800d7d2:	fb82 1203 	smull	r1, r2, r2, r3
 800d7d6:	1152      	asrs	r2, r2, #5
 800d7d8:	17db      	asrs	r3, r3, #31
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	617b      	str	r3, [r7, #20]

    // Construct the gyro biases for push to the hardware gyro bias registers
    // Divide by 4 to match the 32.9 LSB per deg/s, and apply the negative bias
    gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	425b      	negs	r3, r3
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	da00      	bge.n	800d7e8 <icm20948_gyro_calibration_runtime+0xf0>
 800d7e6:	3303      	adds	r3, #3
 800d7e8:	109b      	asrs	r3, r3, #2
 800d7ea:	121b      	asrs	r3, r3, #8
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	713b      	strb	r3, [r7, #4]
    gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	425b      	negs	r3, r3
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	da00      	bge.n	800d7fa <icm20948_gyro_calibration_runtime+0x102>
 800d7f8:	3303      	adds	r3, #3
 800d7fa:	109b      	asrs	r3, r3, #2
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	717b      	strb	r3, [r7, #5]
    gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	425b      	negs	r3, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	da00      	bge.n	800d80a <icm20948_gyro_calibration_runtime+0x112>
 800d808:	3303      	adds	r3, #3
 800d80a:	109b      	asrs	r3, r3, #2
 800d80c:	121b      	asrs	r3, r3, #8
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	71bb      	strb	r3, [r7, #6]
    gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	425b      	negs	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	da00      	bge.n	800d81c <icm20948_gyro_calibration_runtime+0x124>
 800d81a:	3303      	adds	r3, #3
 800d81c:	109b      	asrs	r3, r3, #2
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	71fb      	strb	r3, [r7, #7]
    gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	425b      	negs	r3, r3
 800d826:	2b00      	cmp	r3, #0
 800d828:	da00      	bge.n	800d82c <icm20948_gyro_calibration_runtime+0x134>
 800d82a:	3303      	adds	r3, #3
 800d82c:	109b      	asrs	r3, r3, #2
 800d82e:	121b      	asrs	r3, r3, #8
 800d830:	b2db      	uxtb	r3, r3
 800d832:	723b      	strb	r3, [r7, #8]
    gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	425b      	negs	r3, r3
 800d838:	2b00      	cmp	r3, #0
 800d83a:	da00      	bge.n	800d83e <icm20948_gyro_calibration_runtime+0x146>
 800d83c:	3303      	adds	r3, #3
 800d83e:	109b      	asrs	r3, r3, #2
 800d840:	b2db      	uxtb	r3, r3
 800d842:	727b      	strb	r3, [r7, #9]

    // Write the calculated offset to the gyro registers
    write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 800d844:	1d3a      	adds	r2, r7, #4
 800d846:	2306      	movs	r3, #6
 800d848:	2103      	movs	r1, #3
 800d84a:	2020      	movs	r0, #32
 800d84c:	f000 fa44 	bl	800dcd8 <write_multiple_icm20948_reg>
}
 800d850:	bf00      	nop
 800d852:	3740      	adds	r7, #64	@ 0x40
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	51eb851f 	.word	0x51eb851f

0800d85c <icm20948_accel_calibration>:


void icm20948_accel_calibration()
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b094      	sub	sp, #80	@ 0x50
 800d860:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 800d862:	f107 031c 	add.w	r3, r7, #28
 800d866:	2200      	movs	r2, #0
 800d868:	601a      	str	r2, [r3, #0]
 800d86a:	605a      	str	r2, [r3, #4]
 800d86c:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 800d86e:	f107 0310 	add.w	r3, r7, #16
 800d872:	2200      	movs	r2, #0
 800d874:	601a      	str	r2, [r3, #0]
 800d876:	605a      	str	r2, [r3, #4]
 800d878:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 800d87a:	2300      	movs	r3, #0
 800d87c:	60bb      	str	r3, [r7, #8]
 800d87e:	2300      	movs	r3, #0
 800d880:	81bb      	strh	r3, [r7, #12]

	for(int i = 0; i < 100; i++)
 800d882:	2300      	movs	r3, #0
 800d884:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d886:	e037      	b.n	800d8f8 <icm20948_accel_calibration+0x9c>
	{
		icm20948_accel_read(&temp);
 800d888:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7ff fcad 	bl	800d1ec <icm20948_accel_read>
		accel_bias[0] += temp.x;
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	4618      	mov	r0, r3
 800d896:	f7f2 fe45 	bl	8000524 <__aeabi_i2d>
 800d89a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d89e:	f7f2 fcf5 	bl	800028c <__adddf3>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	4610      	mov	r0, r2
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	f7f3 f955 	bl	8000b58 <__aeabi_d2iz>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	61fb      	str	r3, [r7, #28]
		accel_bias[1] += temp.y;
 800d8b2:	6a3b      	ldr	r3, [r7, #32]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7f2 fe35 	bl	8000524 <__aeabi_i2d>
 800d8ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d8be:	f7f2 fce5 	bl	800028c <__adddf3>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	f7f3 f945 	bl	8000b58 <__aeabi_d2iz>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	623b      	str	r3, [r7, #32]
		accel_bias[2] += temp.z;
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7f2 fe25 	bl	8000524 <__aeabi_i2d>
 800d8da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d8de:	f7f2 fcd5 	bl	800028c <__adddf3>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f7f3 f935 	bl	8000b58 <__aeabi_d2iz>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 0; i < 100; i++)
 800d8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8fa:	2b63      	cmp	r3, #99	@ 0x63
 800d8fc:	ddc4      	ble.n	800d888 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	4a60      	ldr	r2, [pc, #384]	@ (800da84 <icm20948_accel_calibration+0x228>)
 800d902:	fb82 1203 	smull	r1, r2, r2, r3
 800d906:	1152      	asrs	r2, r2, #5
 800d908:	17db      	asrs	r3, r3, #31
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	61fb      	str	r3, [r7, #28]
	accel_bias[1] /= 100;
 800d90e:	6a3b      	ldr	r3, [r7, #32]
 800d910:	4a5c      	ldr	r2, [pc, #368]	@ (800da84 <icm20948_accel_calibration+0x228>)
 800d912:	fb82 1203 	smull	r1, r2, r2, r3
 800d916:	1152      	asrs	r2, r2, #5
 800d918:	17db      	asrs	r3, r3, #31
 800d91a:	1ad3      	subs	r3, r2, r3
 800d91c:	623b      	str	r3, [r7, #32]
	accel_bias[2] /= 100;
 800d91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d920:	4a58      	ldr	r2, [pc, #352]	@ (800da84 <icm20948_accel_calibration+0x228>)
 800d922:	fb82 1203 	smull	r1, r2, r2, r3
 800d926:	1152      	asrs	r2, r2, #5
 800d928:	17db      	asrs	r3, r3, #31
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	627b      	str	r3, [r7, #36]	@ 0x24

	uint8_t mask_bit[3] = {0, 0, 0};
 800d92e:	4a56      	ldr	r2, [pc, #344]	@ (800da88 <icm20948_accel_calibration+0x22c>)
 800d930:	1d3b      	adds	r3, r7, #4
 800d932:	6812      	ldr	r2, [r2, #0]
 800d934:	4611      	mov	r1, r2
 800d936:	8019      	strh	r1, [r3, #0]
 800d938:	3302      	adds	r3, #2
 800d93a:	0c12      	lsrs	r2, r2, #16
 800d93c:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 800d93e:	2202      	movs	r2, #2
 800d940:	2114      	movs	r1, #20
 800d942:	2010      	movs	r0, #16
 800d944:	f000 f998 	bl	800dc78 <read_multiple_icm20948_reg>
 800d948:	64b8      	str	r0, [r7, #72]	@ 0x48
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 800d94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	021b      	lsls	r3, r3, #8
 800d950:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d952:	3201      	adds	r2, #1
 800d954:	7812      	ldrb	r2, [r2, #0]
 800d956:	4313      	orrs	r3, r2
 800d958:	613b      	str	r3, [r7, #16]
	mask_bit[0] = temp2[1] & 0x01;
 800d95a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d95c:	3301      	adds	r3, #1
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	f003 0301 	and.w	r3, r3, #1
 800d964:	b2db      	uxtb	r3, r3
 800d966:	713b      	strb	r3, [r7, #4]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 800d968:	2202      	movs	r2, #2
 800d96a:	2117      	movs	r1, #23
 800d96c:	2010      	movs	r0, #16
 800d96e:	f000 f983 	bl	800dc78 <read_multiple_icm20948_reg>
 800d972:	6478      	str	r0, [r7, #68]	@ 0x44
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800d974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	021b      	lsls	r3, r3, #8
 800d97a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d97c:	3201      	adds	r2, #1
 800d97e:	7812      	ldrb	r2, [r2, #0]
 800d980:	4313      	orrs	r3, r2
 800d982:	617b      	str	r3, [r7, #20]
	mask_bit[1] = temp3[1] & 0x01;
 800d984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d986:	3301      	adds	r3, #1
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	f003 0301 	and.w	r3, r3, #1
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	717b      	strb	r3, [r7, #5]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 800d992:	2202      	movs	r2, #2
 800d994:	211a      	movs	r1, #26
 800d996:	2010      	movs	r0, #16
 800d998:	f000 f96e 	bl	800dc78 <read_multiple_icm20948_reg>
 800d99c:	6438      	str	r0, [r7, #64]	@ 0x40
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 800d99e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	021b      	lsls	r3, r3, #8
 800d9a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9a6:	3201      	adds	r2, #1
 800d9a8:	7812      	ldrb	r2, [r2, #0]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	61bb      	str	r3, [r7, #24]
	mask_bit[2] = temp4[1] & 0x01;
 800d9ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	71bb      	strb	r3, [r7, #6]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	da00      	bge.n	800d9c6 <icm20948_accel_calibration+0x16a>
 800d9c4:	3307      	adds	r3, #7
 800d9c6:	10db      	asrs	r3, r3, #3
 800d9c8:	425b      	negs	r3, r3
 800d9ca:	4413      	add	r3, r2
 800d9cc:	613b      	str	r3, [r7, #16]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 800d9ce:	697a      	ldr	r2, [r7, #20]
 800d9d0:	6a3b      	ldr	r3, [r7, #32]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	da00      	bge.n	800d9d8 <icm20948_accel_calibration+0x17c>
 800d9d6:	3307      	adds	r3, #7
 800d9d8:	10db      	asrs	r3, r3, #3
 800d9da:	425b      	negs	r3, r3
 800d9dc:	4413      	add	r3, r2
 800d9de:	617b      	str	r3, [r7, #20]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 800d9e0:	69ba      	ldr	r2, [r7, #24]
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	da00      	bge.n	800d9ea <icm20948_accel_calibration+0x18e>
 800d9e8:	3307      	adds	r3, #7
 800d9ea:	10db      	asrs	r3, r3, #3
 800d9ec:	425b      	negs	r3, r3
 800d9ee:	4413      	add	r3, r2
 800d9f0:	61bb      	str	r3, [r7, #24]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	121b      	asrs	r3, r3, #8
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	723b      	strb	r3, [r7, #8]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f023 0301 	bic.w	r3, r3, #1
 800da02:	b2db      	uxtb	r3, r3
 800da04:	727b      	strb	r3, [r7, #9]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800da06:	7a7a      	ldrb	r2, [r7, #9]
 800da08:	793b      	ldrb	r3, [r7, #4]
 800da0a:	4313      	orrs	r3, r2
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	727b      	strb	r3, [r7, #9]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	121b      	asrs	r3, r3, #8
 800da14:	b2db      	uxtb	r3, r3
 800da16:	72bb      	strb	r3, [r7, #10]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	f023 0301 	bic.w	r3, r3, #1
 800da20:	b2db      	uxtb	r3, r3
 800da22:	72fb      	strb	r3, [r7, #11]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 800da24:	7afa      	ldrb	r2, [r7, #11]
 800da26:	797b      	ldrb	r3, [r7, #5]
 800da28:	4313      	orrs	r3, r2
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	72fb      	strb	r3, [r7, #11]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	121b      	asrs	r3, r3, #8
 800da32:	b2db      	uxtb	r3, r3
 800da34:	733b      	strb	r3, [r7, #12]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	f023 0301 	bic.w	r3, r3, #1
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	737b      	strb	r3, [r7, #13]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 800da42:	7b7a      	ldrb	r2, [r7, #13]
 800da44:	79bb      	ldrb	r3, [r7, #6]
 800da46:	4313      	orrs	r3, r2
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	737b      	strb	r3, [r7, #13]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800da4c:	f107 0208 	add.w	r2, r7, #8
 800da50:	2302      	movs	r3, #2
 800da52:	2114      	movs	r1, #20
 800da54:	2010      	movs	r0, #16
 800da56:	f000 f93f 	bl	800dcd8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 800da5a:	f107 0308 	add.w	r3, r7, #8
 800da5e:	1c9a      	adds	r2, r3, #2
 800da60:	2302      	movs	r3, #2
 800da62:	2117      	movs	r1, #23
 800da64:	2010      	movs	r0, #16
 800da66:	f000 f937 	bl	800dcd8 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 800da6a:	f107 0308 	add.w	r3, r7, #8
 800da6e:	1d1a      	adds	r2, r3, #4
 800da70:	2302      	movs	r3, #2
 800da72:	211a      	movs	r1, #26
 800da74:	2010      	movs	r0, #16
 800da76:	f000 f92f 	bl	800dcd8 <write_multiple_icm20948_reg>
}
 800da7a:	bf00      	nop
 800da7c:	3750      	adds	r7, #80	@ 0x50
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	51eb851f 	.word	0x51eb851f
 800da88:	08010ffc 	.word	0x08010ffc

0800da8c <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	4603      	mov	r3, r0
 800da94:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800da96:	2101      	movs	r1, #1
 800da98:	2020      	movs	r0, #32
 800da9a:	f000 f89f 	bl	800dbdc <read_single_icm20948_reg>
 800da9e:	4603      	mov	r3, r0
 800daa0:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	2b03      	cmp	r3, #3
 800daa6:	d827      	bhi.n	800daf8 <icm20948_gyro_full_scale_select+0x6c>
 800daa8:	a201      	add	r2, pc, #4	@ (adr r2, 800dab0 <icm20948_gyro_full_scale_select+0x24>)
 800daaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daae:	bf00      	nop
 800dab0:	0800dac1 	.word	0x0800dac1
 800dab4:	0800dac9 	.word	0x0800dac9
 800dab8:	0800dad9 	.word	0x0800dad9
 800dabc:	0800dae9 	.word	0x0800dae9
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 800dac0:	4b12      	ldr	r3, [pc, #72]	@ (800db0c <icm20948_gyro_full_scale_select+0x80>)
 800dac2:	4a13      	ldr	r2, [pc, #76]	@ (800db10 <icm20948_gyro_full_scale_select+0x84>)
 800dac4:	601a      	str	r2, [r3, #0]
			break;
 800dac6:	e017      	b.n	800daf8 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
 800daca:	f043 0302 	orr.w	r3, r3, #2
 800dace:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 800dad0:	4b0e      	ldr	r3, [pc, #56]	@ (800db0c <icm20948_gyro_full_scale_select+0x80>)
 800dad2:	4a10      	ldr	r2, [pc, #64]	@ (800db14 <icm20948_gyro_full_scale_select+0x88>)
 800dad4:	601a      	str	r2, [r3, #0]
			break;
 800dad6:	e00f      	b.n	800daf8 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	f043 0304 	orr.w	r3, r3, #4
 800dade:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 800dae0:	4b0a      	ldr	r3, [pc, #40]	@ (800db0c <icm20948_gyro_full_scale_select+0x80>)
 800dae2:	4a0d      	ldr	r2, [pc, #52]	@ (800db18 <icm20948_gyro_full_scale_select+0x8c>)
 800dae4:	601a      	str	r2, [r3, #0]
			break;
 800dae6:	e007      	b.n	800daf8 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
 800daea:	f043 0306 	orr.w	r3, r3, #6
 800daee:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 800daf0:	4b06      	ldr	r3, [pc, #24]	@ (800db0c <icm20948_gyro_full_scale_select+0x80>)
 800daf2:	4a0a      	ldr	r2, [pc, #40]	@ (800db1c <icm20948_gyro_full_scale_select+0x90>)
 800daf4:	601a      	str	r2, [r3, #0]
			break;
 800daf6:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
 800dafa:	461a      	mov	r2, r3
 800dafc:	2101      	movs	r1, #1
 800dafe:	2020      	movs	r0, #32
 800db00:	f000 f898 	bl	800dc34 <write_single_icm20948_reg>
}
 800db04:	bf00      	nop
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	20004aec 	.word	0x20004aec
 800db10:	43030000 	.word	0x43030000
 800db14:	42830000 	.word	0x42830000
 800db18:	42033333 	.word	0x42033333
 800db1c:	41833333 	.word	0x41833333

0800db20 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800db2a:	2114      	movs	r1, #20
 800db2c:	2020      	movs	r0, #32
 800db2e:	f000 f855 	bl	800dbdc <read_single_icm20948_reg>
 800db32:	4603      	mov	r3, r0
 800db34:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800db36:	79fb      	ldrb	r3, [r7, #7]
 800db38:	2b03      	cmp	r3, #3
 800db3a:	d82b      	bhi.n	800db94 <icm20948_accel_full_scale_select+0x74>
 800db3c:	a201      	add	r2, pc, #4	@ (adr r2, 800db44 <icm20948_accel_full_scale_select+0x24>)
 800db3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db42:	bf00      	nop
 800db44:	0800db55 	.word	0x0800db55
 800db48:	0800db5f 	.word	0x0800db5f
 800db4c:	0800db71 	.word	0x0800db71
 800db50:	0800db83 	.word	0x0800db83
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 800db54:	4b14      	ldr	r3, [pc, #80]	@ (800dba8 <icm20948_accel_full_scale_select+0x88>)
 800db56:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 800db5a:	601a      	str	r2, [r3, #0]
			break;
 800db5c:	e01a      	b.n	800db94 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 800db5e:	7bfb      	ldrb	r3, [r7, #15]
 800db60:	f043 0302 	orr.w	r3, r3, #2
 800db64:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 800db66:	4b10      	ldr	r3, [pc, #64]	@ (800dba8 <icm20948_accel_full_scale_select+0x88>)
 800db68:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800db6c:	601a      	str	r2, [r3, #0]
			break;
 800db6e:	e011      	b.n	800db94 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 800db70:	7bfb      	ldrb	r3, [r7, #15]
 800db72:	f043 0304 	orr.w	r3, r3, #4
 800db76:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 800db78:	4b0b      	ldr	r3, [pc, #44]	@ (800dba8 <icm20948_accel_full_scale_select+0x88>)
 800db7a:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 800db7e:	601a      	str	r2, [r3, #0]
			break;
 800db80:	e008      	b.n	800db94 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800db82:	7bfb      	ldrb	r3, [r7, #15]
 800db84:	f043 0306 	orr.w	r3, r3, #6
 800db88:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 800db8a:	4b07      	ldr	r3, [pc, #28]	@ (800dba8 <icm20948_accel_full_scale_select+0x88>)
 800db8c:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 800db90:	601a      	str	r2, [r3, #0]
			break;
 800db92:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800db94:	7bfb      	ldrb	r3, [r7, #15]
 800db96:	461a      	mov	r2, r3
 800db98:	2114      	movs	r1, #20
 800db9a:	2020      	movs	r0, #32
 800db9c:	f000 f84a 	bl	800dc34 <write_single_icm20948_reg>
}
 800dba0:	bf00      	nop
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	20004af0 	.word	0x20004af0

0800dbac <select_user_bank>:



static void select_user_bank(userbank ub)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b086      	sub	sp, #24
 800dbb0:	af02      	add	r7, sp, #8
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	71fb      	strb	r3, [r7, #7]
    uint8_t write_reg[2];
    write_reg[0] = WRITE | REG_BANK_SEL; // Command to select the user bank
 800dbb6:	237f      	movs	r3, #127	@ 0x7f
 800dbb8:	733b      	strb	r3, [r7, #12]
    write_reg[1] = ub;                   // User bank value
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(ICM20948_I2C, (ICM20948_I2C_ADDR << 1), write_reg, 2, 10);
 800dbbe:	f107 020c 	add.w	r2, r7, #12
 800dbc2:	230a      	movs	r3, #10
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	2302      	movs	r3, #2
 800dbc8:	21d0      	movs	r1, #208	@ 0xd0
 800dbca:	4803      	ldr	r0, [pc, #12]	@ (800dbd8 <select_user_bank+0x2c>)
 800dbcc:	f7f8 fd6e 	bl	80066ac <HAL_I2C_Master_Transmit>
}
 800dbd0:	bf00      	nop
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	200005a0 	.word	0x200005a0

0800dbdc <read_single_icm20948_reg>:


static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af02      	add	r7, sp, #8
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	460a      	mov	r2, r1
 800dbe6:	71fb      	strb	r3, [r7, #7]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	71bb      	strb	r3, [r7, #6]
    uint8_t reg_val;
    uint8_t read_reg = READ | reg;
 800dbec:	79bb      	ldrb	r3, [r7, #6]
 800dbee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	73bb      	strb	r3, [r7, #14]

    select_user_bank(ub);
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7ff ffd7 	bl	800dbac <select_user_bank>

    // Send the register address (read request)
    HAL_I2C_Master_Transmit(ICM20948_I2C, (ICM20948_I2C_ADDR << 1), &read_reg, 1, 1000);
 800dbfe:	f107 020e 	add.w	r2, r7, #14
 800dc02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	2301      	movs	r3, #1
 800dc0a:	21d0      	movs	r1, #208	@ 0xd0
 800dc0c:	4808      	ldr	r0, [pc, #32]	@ (800dc30 <read_single_icm20948_reg+0x54>)
 800dc0e:	f7f8 fd4d 	bl	80066ac <HAL_I2C_Master_Transmit>

    // Read the data from the specified register
    HAL_I2C_Master_Receive(ICM20948_I2C, (ICM20948_I2C_ADDR << 1), &reg_val, 1, 1000);
 800dc12:	f107 020f 	add.w	r2, r7, #15
 800dc16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	21d0      	movs	r1, #208	@ 0xd0
 800dc20:	4803      	ldr	r0, [pc, #12]	@ (800dc30 <read_single_icm20948_reg+0x54>)
 800dc22:	f7f8 fe41 	bl	80068a8 <HAL_I2C_Master_Receive>

    return reg_val;
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	200005a0 	.word	0x200005a0

0800dc34 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b086      	sub	sp, #24
 800dc38:	af02      	add	r7, sp, #8
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	71fb      	strb	r3, [r7, #7]
 800dc3e:	460b      	mov	r3, r1
 800dc40:	71bb      	strb	r3, [r7, #6]
 800dc42:	4613      	mov	r3, r2
 800dc44:	717b      	strb	r3, [r7, #5]
    uint8_t write_reg[2];
    write_reg[0] = WRITE | reg;  // Register address
 800dc46:	79bb      	ldrb	r3, [r7, #6]
 800dc48:	733b      	strb	r3, [r7, #12]
    write_reg[1] = val;          // Value to write
 800dc4a:	797b      	ldrb	r3, [r7, #5]
 800dc4c:	737b      	strb	r3, [r7, #13]

    select_user_bank(ub);
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7ff ffab 	bl	800dbac <select_user_bank>

    // Transmit register and value
    HAL_I2C_Master_Transmit(ICM20948_I2C, (ICM20948_I2C_ADDR << 1), write_reg, 2, 1000);
 800dc56:	f107 020c 	add.w	r2, r7, #12
 800dc5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	2302      	movs	r3, #2
 800dc62:	21d0      	movs	r1, #208	@ 0xd0
 800dc64:	4803      	ldr	r0, [pc, #12]	@ (800dc74 <write_single_icm20948_reg+0x40>)
 800dc66:	f7f8 fd21 	bl	80066ac <HAL_I2C_Master_Transmit>
}
 800dc6a:	bf00      	nop
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	200005a0 	.word	0x200005a0

0800dc78 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af02      	add	r7, sp, #8
 800dc7e:	4603      	mov	r3, r0
 800dc80:	71fb      	strb	r3, [r7, #7]
 800dc82:	460b      	mov	r3, r1
 800dc84:	71bb      	strb	r3, [r7, #6]
 800dc86:	4613      	mov	r3, r2
 800dc88:	717b      	strb	r3, [r7, #5]
    uint8_t read_reg = READ | reg;
 800dc8a:	79bb      	ldrb	r3, [r7, #6]
 800dc8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	73fb      	strb	r3, [r7, #15]
    static uint8_t reg_val[6];

    select_user_bank(ub);
 800dc94:	79fb      	ldrb	r3, [r7, #7]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff ff88 	bl	800dbac <select_user_bank>

    // Send the register address (read request)
    HAL_I2C_Master_Transmit(ICM20948_I2C, (ICM20948_I2C_ADDR << 1), &read_reg, 1, 1000);
 800dc9c:	f107 020f 	add.w	r2, r7, #15
 800dca0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dca4:	9300      	str	r3, [sp, #0]
 800dca6:	2301      	movs	r3, #1
 800dca8:	21d0      	movs	r1, #208	@ 0xd0
 800dcaa:	4809      	ldr	r0, [pc, #36]	@ (800dcd0 <read_multiple_icm20948_reg+0x58>)
 800dcac:	f7f8 fcfe 	bl	80066ac <HAL_I2C_Master_Transmit>

    // Read the multiple data from the registers
    HAL_I2C_Master_Receive(ICM20948_I2C, (ICM20948_I2C_ADDR << 1), reg_val, len, 1000);
 800dcb0:	797b      	ldrb	r3, [r7, #5]
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dcb8:	9200      	str	r2, [sp, #0]
 800dcba:	4a06      	ldr	r2, [pc, #24]	@ (800dcd4 <read_multiple_icm20948_reg+0x5c>)
 800dcbc:	21d0      	movs	r1, #208	@ 0xd0
 800dcbe:	4804      	ldr	r0, [pc, #16]	@ (800dcd0 <read_multiple_icm20948_reg+0x58>)
 800dcc0:	f7f8 fdf2 	bl	80068a8 <HAL_I2C_Master_Receive>

    return reg_val;
 800dcc4:	4b03      	ldr	r3, [pc, #12]	@ (800dcd4 <read_multiple_icm20948_reg+0x5c>)
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	200005a0 	.word	0x200005a0
 800dcd4:	20004af4 	.word	0x20004af4

0800dcd8 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b086      	sub	sp, #24
 800dcdc:	af02      	add	r7, sp, #8
 800dcde:	603a      	str	r2, [r7, #0]
 800dce0:	461a      	mov	r2, r3
 800dce2:	4603      	mov	r3, r0
 800dce4:	71fb      	strb	r3, [r7, #7]
 800dce6:	460b      	mov	r3, r1
 800dce8:	71bb      	strb	r3, [r7, #6]
 800dcea:	4613      	mov	r3, r2
 800dcec:	717b      	strb	r3, [r7, #5]
    uint8_t write_reg = WRITE | reg;
 800dcee:	79bb      	ldrb	r3, [r7, #6]
 800dcf0:	73fb      	strb	r3, [r7, #15]

    select_user_bank(ub);
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7ff ff59 	bl	800dbac <select_user_bank>

    // First send the register address
    HAL_I2C_Master_Transmit(ICM20948_I2C, (ICM20948_I2C_ADDR << 1), &write_reg, 1, 1000);
 800dcfa:	f107 020f 	add.w	r2, r7, #15
 800dcfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	2301      	movs	r3, #1
 800dd06:	21d0      	movs	r1, #208	@ 0xd0
 800dd08:	4808      	ldr	r0, [pc, #32]	@ (800dd2c <write_multiple_icm20948_reg+0x54>)
 800dd0a:	f7f8 fccf 	bl	80066ac <HAL_I2C_Master_Transmit>

    // Then send the data to write to the registers
    HAL_I2C_Master_Transmit(ICM20948_I2C, (ICM20948_I2C_ADDR << 1), val, len, 1000);
 800dd0e:	797b      	ldrb	r3, [r7, #5]
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dd16:	9200      	str	r2, [sp, #0]
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	21d0      	movs	r1, #208	@ 0xd0
 800dd1c:	4803      	ldr	r0, [pc, #12]	@ (800dd2c <write_multiple_icm20948_reg+0x54>)
 800dd1e:	f7f8 fcc5 	bl	80066ac <HAL_I2C_Master_Transmit>
}
 800dd22:	bf00      	nop
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	200005a0 	.word	0x200005a0

0800dd30 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	4603      	mov	r3, r0
 800dd38:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800dd3a:	228c      	movs	r2, #140	@ 0x8c
 800dd3c:	2103      	movs	r1, #3
 800dd3e:	2030      	movs	r0, #48	@ 0x30
 800dd40:	f7ff ff78 	bl	800dc34 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 800dd44:	79fb      	ldrb	r3, [r7, #7]
 800dd46:	461a      	mov	r2, r3
 800dd48:	2104      	movs	r1, #4
 800dd4a:	2030      	movs	r0, #48	@ 0x30
 800dd4c:	f7ff ff72 	bl	800dc34 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800dd50:	2281      	movs	r2, #129	@ 0x81
 800dd52:	2105      	movs	r1, #5
 800dd54:	2030      	movs	r0, #48	@ 0x30
 800dd56:	f7ff ff6d 	bl	800dc34 <write_single_icm20948_reg>

	HAL_Delay(1);
 800dd5a:	2001      	movs	r0, #1
 800dd5c:	f7f7 f848 	bl	8004df0 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 800dd60:	213b      	movs	r1, #59	@ 0x3b
 800dd62:	2000      	movs	r0, #0
 800dd64:	f7ff ff3a 	bl	800dbdc <read_single_icm20948_reg>
 800dd68:	4603      	mov	r3, r0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <read_multiple_ak09916_reg>:
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
}

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b082      	sub	sp, #8
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	4603      	mov	r3, r0
 800dd7a:	460a      	mov	r2, r1
 800dd7c:	71fb      	strb	r3, [r7, #7]
 800dd7e:	4613      	mov	r3, r2
 800dd80:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800dd82:	228c      	movs	r2, #140	@ 0x8c
 800dd84:	2103      	movs	r1, #3
 800dd86:	2030      	movs	r0, #48	@ 0x30
 800dd88:	f7ff ff54 	bl	800dc34 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 800dd8c:	79fb      	ldrb	r3, [r7, #7]
 800dd8e:	461a      	mov	r2, r3
 800dd90:	2104      	movs	r1, #4
 800dd92:	2030      	movs	r0, #48	@ 0x30
 800dd94:	f7ff ff4e 	bl	800dc34 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 800dd98:	79bb      	ldrb	r3, [r7, #6]
 800dd9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	461a      	mov	r2, r3
 800dda2:	2105      	movs	r1, #5
 800dda4:	2030      	movs	r0, #48	@ 0x30
 800dda6:	f7ff ff45 	bl	800dc34 <write_single_icm20948_reg>

	HAL_Delay(1);
 800ddaa:	2001      	movs	r0, #1
 800ddac:	f7f7 f820 	bl	8004df0 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 800ddb0:	79bb      	ldrb	r3, [r7, #6]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	213b      	movs	r1, #59	@ 0x3b
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	f7ff ff5e 	bl	800dc78 <read_multiple_icm20948_reg>
 800ddbc:	4603      	mov	r3, r0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
	...

0800ddc8 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800ddce:	2300      	movs	r3, #0
 800ddd0:	71fb      	strb	r3, [r7, #7]
 800ddd2:	e026      	b.n	800de22 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800ddd4:	79fb      	ldrb	r3, [r7, #7]
 800ddd6:	3b50      	subs	r3, #80	@ 0x50
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2100      	movs	r1, #0
 800dddc:	4618      	mov	r0, r3
 800ddde:	f000 f82b 	bl	800de38 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800dde2:	2100      	movs	r1, #0
 800dde4:	2000      	movs	r0, #0
 800dde6:	f000 f827 	bl	800de38 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800ddea:	2100      	movs	r1, #0
 800ddec:	2010      	movs	r0, #16
 800ddee:	f000 f823 	bl	800de38 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	71bb      	strb	r3, [r7, #6]
 800ddf6:	e00d      	b.n	800de14 <OLED_Refresh_Gram+0x4c>
 800ddf8:	79ba      	ldrb	r2, [r7, #6]
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	490d      	ldr	r1, [pc, #52]	@ (800de34 <OLED_Refresh_Gram+0x6c>)
 800ddfe:	00d2      	lsls	r2, r2, #3
 800de00:	440a      	add	r2, r1
 800de02:	4413      	add	r3, r2
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	2101      	movs	r1, #1
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 f815 	bl	800de38 <OLED_WR_Byte>
 800de0e:	79bb      	ldrb	r3, [r7, #6]
 800de10:	3301      	adds	r3, #1
 800de12:	71bb      	strb	r3, [r7, #6]
 800de14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	daed      	bge.n	800ddf8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800de1c:	79fb      	ldrb	r3, [r7, #7]
 800de1e:	3301      	adds	r3, #1
 800de20:	71fb      	strb	r3, [r7, #7]
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	2b07      	cmp	r3, #7
 800de26:	d9d5      	bls.n	800ddd4 <OLED_Refresh_Gram+0xc>
	}   
}
 800de28:	bf00      	nop
 800de2a:	bf00      	nop
 800de2c:	3708      	adds	r7, #8
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	20004afc 	.word	0x20004afc

0800de38 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	4603      	mov	r3, r0
 800de40:	460a      	mov	r2, r1
 800de42:	71fb      	strb	r3, [r7, #7]
 800de44:	4613      	mov	r3, r2
 800de46:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800de48:	79bb      	ldrb	r3, [r7, #6]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d006      	beq.n	800de5c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800de4e:	2201      	movs	r2, #1
 800de50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800de54:	481c      	ldr	r0, [pc, #112]	@ (800dec8 <OLED_WR_Byte+0x90>)
 800de56:	f7f8 fab1 	bl	80063bc <HAL_GPIO_WritePin>
 800de5a:	e005      	b.n	800de68 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800de5c:	2200      	movs	r2, #0
 800de5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800de62:	4819      	ldr	r0, [pc, #100]	@ (800dec8 <OLED_WR_Byte+0x90>)
 800de64:	f7f8 faaa 	bl	80063bc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800de68:	2300      	movs	r3, #0
 800de6a:	73fb      	strb	r3, [r7, #15]
 800de6c:	e01e      	b.n	800deac <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800de6e:	2200      	movs	r2, #0
 800de70:	2120      	movs	r1, #32
 800de72:	4815      	ldr	r0, [pc, #84]	@ (800dec8 <OLED_WR_Byte+0x90>)
 800de74:	f7f8 faa2 	bl	80063bc <HAL_GPIO_WritePin>
		if(dat&0x80)
 800de78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	da05      	bge.n	800de8c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800de80:	2201      	movs	r2, #1
 800de82:	2140      	movs	r1, #64	@ 0x40
 800de84:	4810      	ldr	r0, [pc, #64]	@ (800dec8 <OLED_WR_Byte+0x90>)
 800de86:	f7f8 fa99 	bl	80063bc <HAL_GPIO_WritePin>
 800de8a:	e004      	b.n	800de96 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800de8c:	2200      	movs	r2, #0
 800de8e:	2140      	movs	r1, #64	@ 0x40
 800de90:	480d      	ldr	r0, [pc, #52]	@ (800dec8 <OLED_WR_Byte+0x90>)
 800de92:	f7f8 fa93 	bl	80063bc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800de96:	2201      	movs	r2, #1
 800de98:	2120      	movs	r1, #32
 800de9a:	480b      	ldr	r0, [pc, #44]	@ (800dec8 <OLED_WR_Byte+0x90>)
 800de9c:	f7f8 fa8e 	bl	80063bc <HAL_GPIO_WritePin>
		dat<<=1;   
 800dea0:	79fb      	ldrb	r3, [r7, #7]
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800dea6:	7bfb      	ldrb	r3, [r7, #15]
 800dea8:	3301      	adds	r3, #1
 800deaa:	73fb      	strb	r3, [r7, #15]
 800deac:	7bfb      	ldrb	r3, [r7, #15]
 800deae:	2b07      	cmp	r3, #7
 800deb0:	d9dd      	bls.n	800de6e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800deb2:	2201      	movs	r2, #1
 800deb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800deb8:	4803      	ldr	r0, [pc, #12]	@ (800dec8 <OLED_WR_Byte+0x90>)
 800deba:	f7f8 fa7f 	bl	80063bc <HAL_GPIO_WritePin>
} 
 800debe:	bf00      	nop
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	40021000 	.word	0x40021000

0800decc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800ded2:	2300      	movs	r3, #0
 800ded4:	71fb      	strb	r3, [r7, #7]
 800ded6:	e014      	b.n	800df02 <OLED_Clear+0x36>
 800ded8:	2300      	movs	r3, #0
 800deda:	71bb      	strb	r3, [r7, #6]
 800dedc:	e00a      	b.n	800def4 <OLED_Clear+0x28>
 800dede:	79ba      	ldrb	r2, [r7, #6]
 800dee0:	79fb      	ldrb	r3, [r7, #7]
 800dee2:	490c      	ldr	r1, [pc, #48]	@ (800df14 <OLED_Clear+0x48>)
 800dee4:	00d2      	lsls	r2, r2, #3
 800dee6:	440a      	add	r2, r1
 800dee8:	4413      	add	r3, r2
 800deea:	2200      	movs	r2, #0
 800deec:	701a      	strb	r2, [r3, #0]
 800deee:	79bb      	ldrb	r3, [r7, #6]
 800def0:	3301      	adds	r3, #1
 800def2:	71bb      	strb	r3, [r7, #6]
 800def4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800def8:	2b00      	cmp	r3, #0
 800defa:	daf0      	bge.n	800dede <OLED_Clear+0x12>
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	3301      	adds	r3, #1
 800df00:	71fb      	strb	r3, [r7, #7]
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	2b07      	cmp	r3, #7
 800df06:	d9e7      	bls.n	800ded8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800df08:	f7ff ff5e 	bl	800ddc8 <OLED_Refresh_Gram>
}
 800df0c:	bf00      	nop
 800df0e:	3708      	adds	r7, #8
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	20004afc 	.word	0x20004afc

0800df18 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	4603      	mov	r3, r0
 800df20:	71fb      	strb	r3, [r7, #7]
 800df22:	460b      	mov	r3, r1
 800df24:	71bb      	strb	r3, [r7, #6]
 800df26:	4613      	mov	r3, r2
 800df28:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800df2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df32:	2b00      	cmp	r3, #0
 800df34:	db41      	blt.n	800dfba <OLED_DrawPoint+0xa2>
 800df36:	79bb      	ldrb	r3, [r7, #6]
 800df38:	2b3f      	cmp	r3, #63	@ 0x3f
 800df3a:	d83e      	bhi.n	800dfba <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800df3c:	79bb      	ldrb	r3, [r7, #6]
 800df3e:	08db      	lsrs	r3, r3, #3
 800df40:	b2db      	uxtb	r3, r3
 800df42:	f1c3 0307 	rsb	r3, r3, #7
 800df46:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800df48:	79bb      	ldrb	r3, [r7, #6]
 800df4a:	f003 0307 	and.w	r3, r3, #7
 800df4e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800df50:	7b7b      	ldrb	r3, [r7, #13]
 800df52:	f1c3 0307 	rsb	r3, r3, #7
 800df56:	2201      	movs	r2, #1
 800df58:	fa02 f303 	lsl.w	r3, r2, r3
 800df5c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800df5e:	797b      	ldrb	r3, [r7, #5]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d012      	beq.n	800df8a <OLED_DrawPoint+0x72>
 800df64:	79fa      	ldrb	r2, [r7, #7]
 800df66:	7bbb      	ldrb	r3, [r7, #14]
 800df68:	4917      	ldr	r1, [pc, #92]	@ (800dfc8 <OLED_DrawPoint+0xb0>)
 800df6a:	00d2      	lsls	r2, r2, #3
 800df6c:	440a      	add	r2, r1
 800df6e:	4413      	add	r3, r2
 800df70:	7818      	ldrb	r0, [r3, #0]
 800df72:	79fa      	ldrb	r2, [r7, #7]
 800df74:	7bbb      	ldrb	r3, [r7, #14]
 800df76:	7bf9      	ldrb	r1, [r7, #15]
 800df78:	4301      	orrs	r1, r0
 800df7a:	b2c8      	uxtb	r0, r1
 800df7c:	4912      	ldr	r1, [pc, #72]	@ (800dfc8 <OLED_DrawPoint+0xb0>)
 800df7e:	00d2      	lsls	r2, r2, #3
 800df80:	440a      	add	r2, r1
 800df82:	4413      	add	r3, r2
 800df84:	4602      	mov	r2, r0
 800df86:	701a      	strb	r2, [r3, #0]
 800df88:	e018      	b.n	800dfbc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800df8a:	79fa      	ldrb	r2, [r7, #7]
 800df8c:	7bbb      	ldrb	r3, [r7, #14]
 800df8e:	490e      	ldr	r1, [pc, #56]	@ (800dfc8 <OLED_DrawPoint+0xb0>)
 800df90:	00d2      	lsls	r2, r2, #3
 800df92:	440a      	add	r2, r1
 800df94:	4413      	add	r3, r2
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	b25a      	sxtb	r2, r3
 800df9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df9e:	43db      	mvns	r3, r3
 800dfa0:	b25b      	sxtb	r3, r3
 800dfa2:	4013      	ands	r3, r2
 800dfa4:	b259      	sxtb	r1, r3
 800dfa6:	79fa      	ldrb	r2, [r7, #7]
 800dfa8:	7bbb      	ldrb	r3, [r7, #14]
 800dfaa:	b2c8      	uxtb	r0, r1
 800dfac:	4906      	ldr	r1, [pc, #24]	@ (800dfc8 <OLED_DrawPoint+0xb0>)
 800dfae:	00d2      	lsls	r2, r2, #3
 800dfb0:	440a      	add	r2, r1
 800dfb2:	4413      	add	r3, r2
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	701a      	strb	r2, [r3, #0]
 800dfb8:	e000      	b.n	800dfbc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800dfba:	bf00      	nop
}
 800dfbc:	3714      	adds	r7, #20
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	20004afc 	.word	0x20004afc

0800dfcc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800dfcc:	b590      	push	{r4, r7, lr}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	4608      	mov	r0, r1
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4623      	mov	r3, r4
 800dfdc:	71fb      	strb	r3, [r7, #7]
 800dfde:	4603      	mov	r3, r0
 800dfe0:	71bb      	strb	r3, [r7, #6]
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	717b      	strb	r3, [r7, #5]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800dfea:	79bb      	ldrb	r3, [r7, #6]
 800dfec:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800dfee:	797b      	ldrb	r3, [r7, #5]
 800dff0:	3b20      	subs	r3, #32
 800dff2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800dff4:	2300      	movs	r3, #0
 800dff6:	73bb      	strb	r3, [r7, #14]
 800dff8:	e04d      	b.n	800e096 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800dffa:	793b      	ldrb	r3, [r7, #4]
 800dffc:	2b0c      	cmp	r3, #12
 800dffe:	d10b      	bne.n	800e018 <OLED_ShowChar+0x4c>
 800e000:	797a      	ldrb	r2, [r7, #5]
 800e002:	7bb9      	ldrb	r1, [r7, #14]
 800e004:	4828      	ldr	r0, [pc, #160]	@ (800e0a8 <OLED_ShowChar+0xdc>)
 800e006:	4613      	mov	r3, r2
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4403      	add	r3, r0
 800e010:	440b      	add	r3, r1
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	73fb      	strb	r3, [r7, #15]
 800e016:	e007      	b.n	800e028 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800e018:	797a      	ldrb	r2, [r7, #5]
 800e01a:	7bbb      	ldrb	r3, [r7, #14]
 800e01c:	4923      	ldr	r1, [pc, #140]	@ (800e0ac <OLED_ShowChar+0xe0>)
 800e01e:	0112      	lsls	r2, r2, #4
 800e020:	440a      	add	r2, r1
 800e022:	4413      	add	r3, r2
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800e028:	2300      	movs	r3, #0
 800e02a:	737b      	strb	r3, [r7, #13]
 800e02c:	e02d      	b.n	800e08a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800e02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e032:	2b00      	cmp	r3, #0
 800e034:	da07      	bge.n	800e046 <OLED_ShowChar+0x7a>
 800e036:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e03a:	79b9      	ldrb	r1, [r7, #6]
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff ff6a 	bl	800df18 <OLED_DrawPoint>
 800e044:	e00c      	b.n	800e060 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800e046:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	bf0c      	ite	eq
 800e04e:	2301      	moveq	r3, #1
 800e050:	2300      	movne	r3, #0
 800e052:	b2db      	uxtb	r3, r3
 800e054:	461a      	mov	r2, r3
 800e056:	79b9      	ldrb	r1, [r7, #6]
 800e058:	79fb      	ldrb	r3, [r7, #7]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff ff5c 	bl	800df18 <OLED_DrawPoint>
			temp<<=1;
 800e060:	7bfb      	ldrb	r3, [r7, #15]
 800e062:	005b      	lsls	r3, r3, #1
 800e064:	73fb      	strb	r3, [r7, #15]
			y++;
 800e066:	79bb      	ldrb	r3, [r7, #6]
 800e068:	3301      	adds	r3, #1
 800e06a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800e06c:	79ba      	ldrb	r2, [r7, #6]
 800e06e:	7b3b      	ldrb	r3, [r7, #12]
 800e070:	1ad2      	subs	r2, r2, r3
 800e072:	793b      	ldrb	r3, [r7, #4]
 800e074:	429a      	cmp	r2, r3
 800e076:	d105      	bne.n	800e084 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800e078:	7b3b      	ldrb	r3, [r7, #12]
 800e07a:	71bb      	strb	r3, [r7, #6]
				x++;
 800e07c:	79fb      	ldrb	r3, [r7, #7]
 800e07e:	3301      	adds	r3, #1
 800e080:	71fb      	strb	r3, [r7, #7]
				break;
 800e082:	e005      	b.n	800e090 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800e084:	7b7b      	ldrb	r3, [r7, #13]
 800e086:	3301      	adds	r3, #1
 800e088:	737b      	strb	r3, [r7, #13]
 800e08a:	7b7b      	ldrb	r3, [r7, #13]
 800e08c:	2b07      	cmp	r3, #7
 800e08e:	d9ce      	bls.n	800e02e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	3301      	adds	r3, #1
 800e094:	73bb      	strb	r3, [r7, #14]
 800e096:	7bba      	ldrb	r2, [r7, #14]
 800e098:	793b      	ldrb	r3, [r7, #4]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d3ad      	bcc.n	800dffa <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800e09e:	bf00      	nop
 800e0a0:	bf00      	nop
 800e0a2:	3714      	adds	r7, #20
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd90      	pop	{r4, r7, pc}
 800e0a8:	08011020 	.word	0x08011020
 800e0ac:	08011494 	.word	0x08011494

0800e0b0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af02      	add	r7, sp, #8
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	603a      	str	r2, [r7, #0]
 800e0ba:	71fb      	strb	r3, [r7, #7]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800e0c0:	e01f      	b.n	800e102 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
 800e0c4:	2b7a      	cmp	r3, #122	@ 0x7a
 800e0c6:	d904      	bls.n	800e0d2 <OLED_ShowString+0x22>
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	71fb      	strb	r3, [r7, #7]
 800e0cc:	79bb      	ldrb	r3, [r7, #6]
 800e0ce:	3310      	adds	r3, #16
 800e0d0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800e0d2:	79bb      	ldrb	r3, [r7, #6]
 800e0d4:	2b3a      	cmp	r3, #58	@ 0x3a
 800e0d6:	d905      	bls.n	800e0e4 <OLED_ShowString+0x34>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	71fb      	strb	r3, [r7, #7]
 800e0dc:	79fb      	ldrb	r3, [r7, #7]
 800e0de:	71bb      	strb	r3, [r7, #6]
 800e0e0:	f7ff fef4 	bl	800decc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	781a      	ldrb	r2, [r3, #0]
 800e0e8:	79b9      	ldrb	r1, [r7, #6]
 800e0ea:	79f8      	ldrb	r0, [r7, #7]
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	230c      	movs	r3, #12
 800e0f2:	f7ff ff6b 	bl	800dfcc <OLED_ShowChar>
        x+=8;
 800e0f6:	79fb      	ldrb	r3, [r7, #7]
 800e0f8:	3308      	adds	r3, #8
 800e0fa:	71fb      	strb	r3, [r7, #7]
        p++;
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	3301      	adds	r3, #1
 800e100:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1db      	bne.n	800e0c2 <OLED_ShowString+0x12>
    }  
}	 
 800e10a:	bf00      	nop
 800e10c:	bf00      	nop
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <OLED_Init>:

void OLED_Init(void)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800e118:	f7f9 f97e 	bl	8007418 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800e11c:	4b41      	ldr	r3, [pc, #260]	@ (800e224 <OLED_Init+0x110>)
 800e11e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e120:	4a40      	ldr	r2, [pc, #256]	@ (800e224 <OLED_Init+0x110>)
 800e122:	f023 0301 	bic.w	r3, r3, #1
 800e126:	6713      	str	r3, [r2, #112]	@ 0x70
 800e128:	4b3e      	ldr	r3, [pc, #248]	@ (800e224 <OLED_Init+0x110>)
 800e12a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e12c:	4a3d      	ldr	r2, [pc, #244]	@ (800e224 <OLED_Init+0x110>)
 800e12e:	f023 0304 	bic.w	r3, r3, #4
 800e132:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800e134:	f7f9 f984 	bl	8007440 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800e138:	2200      	movs	r2, #0
 800e13a:	2180      	movs	r1, #128	@ 0x80
 800e13c:	483a      	ldr	r0, [pc, #232]	@ (800e228 <OLED_Init+0x114>)
 800e13e:	f7f8 f93d 	bl	80063bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800e142:	2064      	movs	r0, #100	@ 0x64
 800e144:	f7f6 fe54 	bl	8004df0 <HAL_Delay>
	OLED_RST_Set();
 800e148:	2201      	movs	r2, #1
 800e14a:	2180      	movs	r1, #128	@ 0x80
 800e14c:	4836      	ldr	r0, [pc, #216]	@ (800e228 <OLED_Init+0x114>)
 800e14e:	f7f8 f935 	bl	80063bc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800e152:	2100      	movs	r1, #0
 800e154:	20ae      	movs	r0, #174	@ 0xae
 800e156:	f7ff fe6f 	bl	800de38 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800e15a:	2100      	movs	r1, #0
 800e15c:	20d5      	movs	r0, #213	@ 0xd5
 800e15e:	f7ff fe6b 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800e162:	2100      	movs	r1, #0
 800e164:	2050      	movs	r0, #80	@ 0x50
 800e166:	f7ff fe67 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800e16a:	2100      	movs	r1, #0
 800e16c:	20a8      	movs	r0, #168	@ 0xa8
 800e16e:	f7ff fe63 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800e172:	2100      	movs	r1, #0
 800e174:	203f      	movs	r0, #63	@ 0x3f
 800e176:	f7ff fe5f 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800e17a:	2100      	movs	r1, #0
 800e17c:	20d3      	movs	r0, #211	@ 0xd3
 800e17e:	f7ff fe5b 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800e182:	2100      	movs	r1, #0
 800e184:	2000      	movs	r0, #0
 800e186:	f7ff fe57 	bl	800de38 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800e18a:	2100      	movs	r1, #0
 800e18c:	2040      	movs	r0, #64	@ 0x40
 800e18e:	f7ff fe53 	bl	800de38 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800e192:	2100      	movs	r1, #0
 800e194:	208d      	movs	r0, #141	@ 0x8d
 800e196:	f7ff fe4f 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800e19a:	2100      	movs	r1, #0
 800e19c:	2014      	movs	r0, #20
 800e19e:	f7ff fe4b 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	2020      	movs	r0, #32
 800e1a6:	f7ff fe47 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	2002      	movs	r0, #2
 800e1ae:	f7ff fe43 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	20a1      	movs	r0, #161	@ 0xa1
 800e1b6:	f7ff fe3f 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800e1ba:	2100      	movs	r1, #0
 800e1bc:	20c0      	movs	r0, #192	@ 0xc0
 800e1be:	f7ff fe3b 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800e1c2:	2100      	movs	r1, #0
 800e1c4:	20da      	movs	r0, #218	@ 0xda
 800e1c6:	f7ff fe37 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	2012      	movs	r0, #18
 800e1ce:	f7ff fe33 	bl	800de38 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	2081      	movs	r0, #129	@ 0x81
 800e1d6:	f7ff fe2f 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800e1da:	2100      	movs	r1, #0
 800e1dc:	20ef      	movs	r0, #239	@ 0xef
 800e1de:	f7ff fe2b 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	20d9      	movs	r0, #217	@ 0xd9
 800e1e6:	f7ff fe27 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	20f1      	movs	r0, #241	@ 0xf1
 800e1ee:	f7ff fe23 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	20db      	movs	r0, #219	@ 0xdb
 800e1f6:	f7ff fe1f 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	2030      	movs	r0, #48	@ 0x30
 800e1fe:	f7ff fe1b 	bl	800de38 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800e202:	2100      	movs	r1, #0
 800e204:	20a4      	movs	r0, #164	@ 0xa4
 800e206:	f7ff fe17 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800e20a:	2100      	movs	r1, #0
 800e20c:	20a6      	movs	r0, #166	@ 0xa6
 800e20e:	f7ff fe13 	bl	800de38 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800e212:	2100      	movs	r1, #0
 800e214:	20af      	movs	r0, #175	@ 0xaf
 800e216:	f7ff fe0f 	bl	800de38 <OLED_WR_Byte>
	OLED_Clear(); 
 800e21a:	f7ff fe57 	bl	800decc <OLED_Clear>
 800e21e:	bf00      	nop
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	40023800 	.word	0x40023800
 800e228:	40021000 	.word	0x40021000

0800e22c <__cvt>:
 800e22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	ec57 6b10 	vmov	r6, r7, d0
 800e234:	2f00      	cmp	r7, #0
 800e236:	460c      	mov	r4, r1
 800e238:	4619      	mov	r1, r3
 800e23a:	463b      	mov	r3, r7
 800e23c:	bfbb      	ittet	lt
 800e23e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e242:	461f      	movlt	r7, r3
 800e244:	2300      	movge	r3, #0
 800e246:	232d      	movlt	r3, #45	@ 0x2d
 800e248:	700b      	strb	r3, [r1, #0]
 800e24a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e24c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e250:	4691      	mov	r9, r2
 800e252:	f023 0820 	bic.w	r8, r3, #32
 800e256:	bfbc      	itt	lt
 800e258:	4632      	movlt	r2, r6
 800e25a:	4616      	movlt	r6, r2
 800e25c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e260:	d005      	beq.n	800e26e <__cvt+0x42>
 800e262:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e266:	d100      	bne.n	800e26a <__cvt+0x3e>
 800e268:	3401      	adds	r4, #1
 800e26a:	2102      	movs	r1, #2
 800e26c:	e000      	b.n	800e270 <__cvt+0x44>
 800e26e:	2103      	movs	r1, #3
 800e270:	ab03      	add	r3, sp, #12
 800e272:	9301      	str	r3, [sp, #4]
 800e274:	ab02      	add	r3, sp, #8
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	ec47 6b10 	vmov	d0, r6, r7
 800e27c:	4653      	mov	r3, sl
 800e27e:	4622      	mov	r2, r4
 800e280:	f000 fe6a 	bl	800ef58 <_dtoa_r>
 800e284:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e288:	4605      	mov	r5, r0
 800e28a:	d119      	bne.n	800e2c0 <__cvt+0x94>
 800e28c:	f019 0f01 	tst.w	r9, #1
 800e290:	d00e      	beq.n	800e2b0 <__cvt+0x84>
 800e292:	eb00 0904 	add.w	r9, r0, r4
 800e296:	2200      	movs	r2, #0
 800e298:	2300      	movs	r3, #0
 800e29a:	4630      	mov	r0, r6
 800e29c:	4639      	mov	r1, r7
 800e29e:	f7f2 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2a2:	b108      	cbz	r0, 800e2a8 <__cvt+0x7c>
 800e2a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e2a8:	2230      	movs	r2, #48	@ 0x30
 800e2aa:	9b03      	ldr	r3, [sp, #12]
 800e2ac:	454b      	cmp	r3, r9
 800e2ae:	d31e      	bcc.n	800e2ee <__cvt+0xc2>
 800e2b0:	9b03      	ldr	r3, [sp, #12]
 800e2b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2b4:	1b5b      	subs	r3, r3, r5
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	6013      	str	r3, [r2, #0]
 800e2ba:	b004      	add	sp, #16
 800e2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e2c4:	eb00 0904 	add.w	r9, r0, r4
 800e2c8:	d1e5      	bne.n	800e296 <__cvt+0x6a>
 800e2ca:	7803      	ldrb	r3, [r0, #0]
 800e2cc:	2b30      	cmp	r3, #48	@ 0x30
 800e2ce:	d10a      	bne.n	800e2e6 <__cvt+0xba>
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	4639      	mov	r1, r7
 800e2d8:	f7f2 fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2dc:	b918      	cbnz	r0, 800e2e6 <__cvt+0xba>
 800e2de:	f1c4 0401 	rsb	r4, r4, #1
 800e2e2:	f8ca 4000 	str.w	r4, [sl]
 800e2e6:	f8da 3000 	ldr.w	r3, [sl]
 800e2ea:	4499      	add	r9, r3
 800e2ec:	e7d3      	b.n	800e296 <__cvt+0x6a>
 800e2ee:	1c59      	adds	r1, r3, #1
 800e2f0:	9103      	str	r1, [sp, #12]
 800e2f2:	701a      	strb	r2, [r3, #0]
 800e2f4:	e7d9      	b.n	800e2aa <__cvt+0x7e>

0800e2f6 <__exponent>:
 800e2f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2f8:	2900      	cmp	r1, #0
 800e2fa:	bfba      	itte	lt
 800e2fc:	4249      	neglt	r1, r1
 800e2fe:	232d      	movlt	r3, #45	@ 0x2d
 800e300:	232b      	movge	r3, #43	@ 0x2b
 800e302:	2909      	cmp	r1, #9
 800e304:	7002      	strb	r2, [r0, #0]
 800e306:	7043      	strb	r3, [r0, #1]
 800e308:	dd29      	ble.n	800e35e <__exponent+0x68>
 800e30a:	f10d 0307 	add.w	r3, sp, #7
 800e30e:	461d      	mov	r5, r3
 800e310:	270a      	movs	r7, #10
 800e312:	461a      	mov	r2, r3
 800e314:	fbb1 f6f7 	udiv	r6, r1, r7
 800e318:	fb07 1416 	mls	r4, r7, r6, r1
 800e31c:	3430      	adds	r4, #48	@ 0x30
 800e31e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e322:	460c      	mov	r4, r1
 800e324:	2c63      	cmp	r4, #99	@ 0x63
 800e326:	f103 33ff 	add.w	r3, r3, #4294967295
 800e32a:	4631      	mov	r1, r6
 800e32c:	dcf1      	bgt.n	800e312 <__exponent+0x1c>
 800e32e:	3130      	adds	r1, #48	@ 0x30
 800e330:	1e94      	subs	r4, r2, #2
 800e332:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e336:	1c41      	adds	r1, r0, #1
 800e338:	4623      	mov	r3, r4
 800e33a:	42ab      	cmp	r3, r5
 800e33c:	d30a      	bcc.n	800e354 <__exponent+0x5e>
 800e33e:	f10d 0309 	add.w	r3, sp, #9
 800e342:	1a9b      	subs	r3, r3, r2
 800e344:	42ac      	cmp	r4, r5
 800e346:	bf88      	it	hi
 800e348:	2300      	movhi	r3, #0
 800e34a:	3302      	adds	r3, #2
 800e34c:	4403      	add	r3, r0
 800e34e:	1a18      	subs	r0, r3, r0
 800e350:	b003      	add	sp, #12
 800e352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e354:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e358:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e35c:	e7ed      	b.n	800e33a <__exponent+0x44>
 800e35e:	2330      	movs	r3, #48	@ 0x30
 800e360:	3130      	adds	r1, #48	@ 0x30
 800e362:	7083      	strb	r3, [r0, #2]
 800e364:	70c1      	strb	r1, [r0, #3]
 800e366:	1d03      	adds	r3, r0, #4
 800e368:	e7f1      	b.n	800e34e <__exponent+0x58>
	...

0800e36c <_printf_float>:
 800e36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e370:	b08d      	sub	sp, #52	@ 0x34
 800e372:	460c      	mov	r4, r1
 800e374:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e378:	4616      	mov	r6, r2
 800e37a:	461f      	mov	r7, r3
 800e37c:	4605      	mov	r5, r0
 800e37e:	f000 fcdb 	bl	800ed38 <_localeconv_r>
 800e382:	6803      	ldr	r3, [r0, #0]
 800e384:	9304      	str	r3, [sp, #16]
 800e386:	4618      	mov	r0, r3
 800e388:	f7f1 ff72 	bl	8000270 <strlen>
 800e38c:	2300      	movs	r3, #0
 800e38e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e390:	f8d8 3000 	ldr.w	r3, [r8]
 800e394:	9005      	str	r0, [sp, #20]
 800e396:	3307      	adds	r3, #7
 800e398:	f023 0307 	bic.w	r3, r3, #7
 800e39c:	f103 0208 	add.w	r2, r3, #8
 800e3a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e3a4:	f8d4 b000 	ldr.w	fp, [r4]
 800e3a8:	f8c8 2000 	str.w	r2, [r8]
 800e3ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e3b4:	9307      	str	r3, [sp, #28]
 800e3b6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e3ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e3be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3c2:	4b9c      	ldr	r3, [pc, #624]	@ (800e634 <_printf_float+0x2c8>)
 800e3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c8:	f7f2 fbb0 	bl	8000b2c <__aeabi_dcmpun>
 800e3cc:	bb70      	cbnz	r0, 800e42c <_printf_float+0xc0>
 800e3ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3d2:	4b98      	ldr	r3, [pc, #608]	@ (800e634 <_printf_float+0x2c8>)
 800e3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d8:	f7f2 fb8a 	bl	8000af0 <__aeabi_dcmple>
 800e3dc:	bb30      	cbnz	r0, 800e42c <_printf_float+0xc0>
 800e3de:	2200      	movs	r2, #0
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	4640      	mov	r0, r8
 800e3e4:	4649      	mov	r1, r9
 800e3e6:	f7f2 fb79 	bl	8000adc <__aeabi_dcmplt>
 800e3ea:	b110      	cbz	r0, 800e3f2 <_printf_float+0x86>
 800e3ec:	232d      	movs	r3, #45	@ 0x2d
 800e3ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e3f2:	4a91      	ldr	r2, [pc, #580]	@ (800e638 <_printf_float+0x2cc>)
 800e3f4:	4b91      	ldr	r3, [pc, #580]	@ (800e63c <_printf_float+0x2d0>)
 800e3f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e3fa:	bf94      	ite	ls
 800e3fc:	4690      	movls	r8, r2
 800e3fe:	4698      	movhi	r8, r3
 800e400:	2303      	movs	r3, #3
 800e402:	6123      	str	r3, [r4, #16]
 800e404:	f02b 0304 	bic.w	r3, fp, #4
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	f04f 0900 	mov.w	r9, #0
 800e40e:	9700      	str	r7, [sp, #0]
 800e410:	4633      	mov	r3, r6
 800e412:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e414:	4621      	mov	r1, r4
 800e416:	4628      	mov	r0, r5
 800e418:	f000 f9d2 	bl	800e7c0 <_printf_common>
 800e41c:	3001      	adds	r0, #1
 800e41e:	f040 808d 	bne.w	800e53c <_printf_float+0x1d0>
 800e422:	f04f 30ff 	mov.w	r0, #4294967295
 800e426:	b00d      	add	sp, #52	@ 0x34
 800e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42c:	4642      	mov	r2, r8
 800e42e:	464b      	mov	r3, r9
 800e430:	4640      	mov	r0, r8
 800e432:	4649      	mov	r1, r9
 800e434:	f7f2 fb7a 	bl	8000b2c <__aeabi_dcmpun>
 800e438:	b140      	cbz	r0, 800e44c <_printf_float+0xe0>
 800e43a:	464b      	mov	r3, r9
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	bfbc      	itt	lt
 800e440:	232d      	movlt	r3, #45	@ 0x2d
 800e442:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e446:	4a7e      	ldr	r2, [pc, #504]	@ (800e640 <_printf_float+0x2d4>)
 800e448:	4b7e      	ldr	r3, [pc, #504]	@ (800e644 <_printf_float+0x2d8>)
 800e44a:	e7d4      	b.n	800e3f6 <_printf_float+0x8a>
 800e44c:	6863      	ldr	r3, [r4, #4]
 800e44e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e452:	9206      	str	r2, [sp, #24]
 800e454:	1c5a      	adds	r2, r3, #1
 800e456:	d13b      	bne.n	800e4d0 <_printf_float+0x164>
 800e458:	2306      	movs	r3, #6
 800e45a:	6063      	str	r3, [r4, #4]
 800e45c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e460:	2300      	movs	r3, #0
 800e462:	6022      	str	r2, [r4, #0]
 800e464:	9303      	str	r3, [sp, #12]
 800e466:	ab0a      	add	r3, sp, #40	@ 0x28
 800e468:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e46c:	ab09      	add	r3, sp, #36	@ 0x24
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	6861      	ldr	r1, [r4, #4]
 800e472:	ec49 8b10 	vmov	d0, r8, r9
 800e476:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e47a:	4628      	mov	r0, r5
 800e47c:	f7ff fed6 	bl	800e22c <__cvt>
 800e480:	9b06      	ldr	r3, [sp, #24]
 800e482:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e484:	2b47      	cmp	r3, #71	@ 0x47
 800e486:	4680      	mov	r8, r0
 800e488:	d129      	bne.n	800e4de <_printf_float+0x172>
 800e48a:	1cc8      	adds	r0, r1, #3
 800e48c:	db02      	blt.n	800e494 <_printf_float+0x128>
 800e48e:	6863      	ldr	r3, [r4, #4]
 800e490:	4299      	cmp	r1, r3
 800e492:	dd41      	ble.n	800e518 <_printf_float+0x1ac>
 800e494:	f1aa 0a02 	sub.w	sl, sl, #2
 800e498:	fa5f fa8a 	uxtb.w	sl, sl
 800e49c:	3901      	subs	r1, #1
 800e49e:	4652      	mov	r2, sl
 800e4a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e4a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e4a6:	f7ff ff26 	bl	800e2f6 <__exponent>
 800e4aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4ac:	1813      	adds	r3, r2, r0
 800e4ae:	2a01      	cmp	r2, #1
 800e4b0:	4681      	mov	r9, r0
 800e4b2:	6123      	str	r3, [r4, #16]
 800e4b4:	dc02      	bgt.n	800e4bc <_printf_float+0x150>
 800e4b6:	6822      	ldr	r2, [r4, #0]
 800e4b8:	07d2      	lsls	r2, r2, #31
 800e4ba:	d501      	bpl.n	800e4c0 <_printf_float+0x154>
 800e4bc:	3301      	adds	r3, #1
 800e4be:	6123      	str	r3, [r4, #16]
 800e4c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d0a2      	beq.n	800e40e <_printf_float+0xa2>
 800e4c8:	232d      	movs	r3, #45	@ 0x2d
 800e4ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4ce:	e79e      	b.n	800e40e <_printf_float+0xa2>
 800e4d0:	9a06      	ldr	r2, [sp, #24]
 800e4d2:	2a47      	cmp	r2, #71	@ 0x47
 800e4d4:	d1c2      	bne.n	800e45c <_printf_float+0xf0>
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1c0      	bne.n	800e45c <_printf_float+0xf0>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e7bd      	b.n	800e45a <_printf_float+0xee>
 800e4de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e4e2:	d9db      	bls.n	800e49c <_printf_float+0x130>
 800e4e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e4e8:	d118      	bne.n	800e51c <_printf_float+0x1b0>
 800e4ea:	2900      	cmp	r1, #0
 800e4ec:	6863      	ldr	r3, [r4, #4]
 800e4ee:	dd0b      	ble.n	800e508 <_printf_float+0x19c>
 800e4f0:	6121      	str	r1, [r4, #16]
 800e4f2:	b913      	cbnz	r3, 800e4fa <_printf_float+0x18e>
 800e4f4:	6822      	ldr	r2, [r4, #0]
 800e4f6:	07d0      	lsls	r0, r2, #31
 800e4f8:	d502      	bpl.n	800e500 <_printf_float+0x194>
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	440b      	add	r3, r1
 800e4fe:	6123      	str	r3, [r4, #16]
 800e500:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e502:	f04f 0900 	mov.w	r9, #0
 800e506:	e7db      	b.n	800e4c0 <_printf_float+0x154>
 800e508:	b913      	cbnz	r3, 800e510 <_printf_float+0x1a4>
 800e50a:	6822      	ldr	r2, [r4, #0]
 800e50c:	07d2      	lsls	r2, r2, #31
 800e50e:	d501      	bpl.n	800e514 <_printf_float+0x1a8>
 800e510:	3302      	adds	r3, #2
 800e512:	e7f4      	b.n	800e4fe <_printf_float+0x192>
 800e514:	2301      	movs	r3, #1
 800e516:	e7f2      	b.n	800e4fe <_printf_float+0x192>
 800e518:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e51c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e51e:	4299      	cmp	r1, r3
 800e520:	db05      	blt.n	800e52e <_printf_float+0x1c2>
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	6121      	str	r1, [r4, #16]
 800e526:	07d8      	lsls	r0, r3, #31
 800e528:	d5ea      	bpl.n	800e500 <_printf_float+0x194>
 800e52a:	1c4b      	adds	r3, r1, #1
 800e52c:	e7e7      	b.n	800e4fe <_printf_float+0x192>
 800e52e:	2900      	cmp	r1, #0
 800e530:	bfd4      	ite	le
 800e532:	f1c1 0202 	rsble	r2, r1, #2
 800e536:	2201      	movgt	r2, #1
 800e538:	4413      	add	r3, r2
 800e53a:	e7e0      	b.n	800e4fe <_printf_float+0x192>
 800e53c:	6823      	ldr	r3, [r4, #0]
 800e53e:	055a      	lsls	r2, r3, #21
 800e540:	d407      	bmi.n	800e552 <_printf_float+0x1e6>
 800e542:	6923      	ldr	r3, [r4, #16]
 800e544:	4642      	mov	r2, r8
 800e546:	4631      	mov	r1, r6
 800e548:	4628      	mov	r0, r5
 800e54a:	47b8      	blx	r7
 800e54c:	3001      	adds	r0, #1
 800e54e:	d12b      	bne.n	800e5a8 <_printf_float+0x23c>
 800e550:	e767      	b.n	800e422 <_printf_float+0xb6>
 800e552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e556:	f240 80dd 	bls.w	800e714 <_printf_float+0x3a8>
 800e55a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e55e:	2200      	movs	r2, #0
 800e560:	2300      	movs	r3, #0
 800e562:	f7f2 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 800e566:	2800      	cmp	r0, #0
 800e568:	d033      	beq.n	800e5d2 <_printf_float+0x266>
 800e56a:	4a37      	ldr	r2, [pc, #220]	@ (800e648 <_printf_float+0x2dc>)
 800e56c:	2301      	movs	r3, #1
 800e56e:	4631      	mov	r1, r6
 800e570:	4628      	mov	r0, r5
 800e572:	47b8      	blx	r7
 800e574:	3001      	adds	r0, #1
 800e576:	f43f af54 	beq.w	800e422 <_printf_float+0xb6>
 800e57a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e57e:	4543      	cmp	r3, r8
 800e580:	db02      	blt.n	800e588 <_printf_float+0x21c>
 800e582:	6823      	ldr	r3, [r4, #0]
 800e584:	07d8      	lsls	r0, r3, #31
 800e586:	d50f      	bpl.n	800e5a8 <_printf_float+0x23c>
 800e588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e58c:	4631      	mov	r1, r6
 800e58e:	4628      	mov	r0, r5
 800e590:	47b8      	blx	r7
 800e592:	3001      	adds	r0, #1
 800e594:	f43f af45 	beq.w	800e422 <_printf_float+0xb6>
 800e598:	f04f 0900 	mov.w	r9, #0
 800e59c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e5a0:	f104 0a1a 	add.w	sl, r4, #26
 800e5a4:	45c8      	cmp	r8, r9
 800e5a6:	dc09      	bgt.n	800e5bc <_printf_float+0x250>
 800e5a8:	6823      	ldr	r3, [r4, #0]
 800e5aa:	079b      	lsls	r3, r3, #30
 800e5ac:	f100 8103 	bmi.w	800e7b6 <_printf_float+0x44a>
 800e5b0:	68e0      	ldr	r0, [r4, #12]
 800e5b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5b4:	4298      	cmp	r0, r3
 800e5b6:	bfb8      	it	lt
 800e5b8:	4618      	movlt	r0, r3
 800e5ba:	e734      	b.n	800e426 <_printf_float+0xba>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	4652      	mov	r2, sl
 800e5c0:	4631      	mov	r1, r6
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	47b8      	blx	r7
 800e5c6:	3001      	adds	r0, #1
 800e5c8:	f43f af2b 	beq.w	800e422 <_printf_float+0xb6>
 800e5cc:	f109 0901 	add.w	r9, r9, #1
 800e5d0:	e7e8      	b.n	800e5a4 <_printf_float+0x238>
 800e5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	dc39      	bgt.n	800e64c <_printf_float+0x2e0>
 800e5d8:	4a1b      	ldr	r2, [pc, #108]	@ (800e648 <_printf_float+0x2dc>)
 800e5da:	2301      	movs	r3, #1
 800e5dc:	4631      	mov	r1, r6
 800e5de:	4628      	mov	r0, r5
 800e5e0:	47b8      	blx	r7
 800e5e2:	3001      	adds	r0, #1
 800e5e4:	f43f af1d 	beq.w	800e422 <_printf_float+0xb6>
 800e5e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e5ec:	ea59 0303 	orrs.w	r3, r9, r3
 800e5f0:	d102      	bne.n	800e5f8 <_printf_float+0x28c>
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	07d9      	lsls	r1, r3, #31
 800e5f6:	d5d7      	bpl.n	800e5a8 <_printf_float+0x23c>
 800e5f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4628      	mov	r0, r5
 800e600:	47b8      	blx	r7
 800e602:	3001      	adds	r0, #1
 800e604:	f43f af0d 	beq.w	800e422 <_printf_float+0xb6>
 800e608:	f04f 0a00 	mov.w	sl, #0
 800e60c:	f104 0b1a 	add.w	fp, r4, #26
 800e610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e612:	425b      	negs	r3, r3
 800e614:	4553      	cmp	r3, sl
 800e616:	dc01      	bgt.n	800e61c <_printf_float+0x2b0>
 800e618:	464b      	mov	r3, r9
 800e61a:	e793      	b.n	800e544 <_printf_float+0x1d8>
 800e61c:	2301      	movs	r3, #1
 800e61e:	465a      	mov	r2, fp
 800e620:	4631      	mov	r1, r6
 800e622:	4628      	mov	r0, r5
 800e624:	47b8      	blx	r7
 800e626:	3001      	adds	r0, #1
 800e628:	f43f aefb 	beq.w	800e422 <_printf_float+0xb6>
 800e62c:	f10a 0a01 	add.w	sl, sl, #1
 800e630:	e7ee      	b.n	800e610 <_printf_float+0x2a4>
 800e632:	bf00      	nop
 800e634:	7fefffff 	.word	0x7fefffff
 800e638:	08011a84 	.word	0x08011a84
 800e63c:	08011a88 	.word	0x08011a88
 800e640:	08011a8c 	.word	0x08011a8c
 800e644:	08011a90 	.word	0x08011a90
 800e648:	08011a94 	.word	0x08011a94
 800e64c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e64e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e652:	4553      	cmp	r3, sl
 800e654:	bfa8      	it	ge
 800e656:	4653      	movge	r3, sl
 800e658:	2b00      	cmp	r3, #0
 800e65a:	4699      	mov	r9, r3
 800e65c:	dc36      	bgt.n	800e6cc <_printf_float+0x360>
 800e65e:	f04f 0b00 	mov.w	fp, #0
 800e662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e666:	f104 021a 	add.w	r2, r4, #26
 800e66a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e66c:	9306      	str	r3, [sp, #24]
 800e66e:	eba3 0309 	sub.w	r3, r3, r9
 800e672:	455b      	cmp	r3, fp
 800e674:	dc31      	bgt.n	800e6da <_printf_float+0x36e>
 800e676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e678:	459a      	cmp	sl, r3
 800e67a:	dc3a      	bgt.n	800e6f2 <_printf_float+0x386>
 800e67c:	6823      	ldr	r3, [r4, #0]
 800e67e:	07da      	lsls	r2, r3, #31
 800e680:	d437      	bmi.n	800e6f2 <_printf_float+0x386>
 800e682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e684:	ebaa 0903 	sub.w	r9, sl, r3
 800e688:	9b06      	ldr	r3, [sp, #24]
 800e68a:	ebaa 0303 	sub.w	r3, sl, r3
 800e68e:	4599      	cmp	r9, r3
 800e690:	bfa8      	it	ge
 800e692:	4699      	movge	r9, r3
 800e694:	f1b9 0f00 	cmp.w	r9, #0
 800e698:	dc33      	bgt.n	800e702 <_printf_float+0x396>
 800e69a:	f04f 0800 	mov.w	r8, #0
 800e69e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6a2:	f104 0b1a 	add.w	fp, r4, #26
 800e6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6a8:	ebaa 0303 	sub.w	r3, sl, r3
 800e6ac:	eba3 0309 	sub.w	r3, r3, r9
 800e6b0:	4543      	cmp	r3, r8
 800e6b2:	f77f af79 	ble.w	800e5a8 <_printf_float+0x23c>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	465a      	mov	r2, fp
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	4628      	mov	r0, r5
 800e6be:	47b8      	blx	r7
 800e6c0:	3001      	adds	r0, #1
 800e6c2:	f43f aeae 	beq.w	800e422 <_printf_float+0xb6>
 800e6c6:	f108 0801 	add.w	r8, r8, #1
 800e6ca:	e7ec      	b.n	800e6a6 <_printf_float+0x33a>
 800e6cc:	4642      	mov	r2, r8
 800e6ce:	4631      	mov	r1, r6
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	47b8      	blx	r7
 800e6d4:	3001      	adds	r0, #1
 800e6d6:	d1c2      	bne.n	800e65e <_printf_float+0x2f2>
 800e6d8:	e6a3      	b.n	800e422 <_printf_float+0xb6>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	4631      	mov	r1, r6
 800e6de:	4628      	mov	r0, r5
 800e6e0:	9206      	str	r2, [sp, #24]
 800e6e2:	47b8      	blx	r7
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	f43f ae9c 	beq.w	800e422 <_printf_float+0xb6>
 800e6ea:	9a06      	ldr	r2, [sp, #24]
 800e6ec:	f10b 0b01 	add.w	fp, fp, #1
 800e6f0:	e7bb      	b.n	800e66a <_printf_float+0x2fe>
 800e6f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6f6:	4631      	mov	r1, r6
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	47b8      	blx	r7
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	d1c0      	bne.n	800e682 <_printf_float+0x316>
 800e700:	e68f      	b.n	800e422 <_printf_float+0xb6>
 800e702:	9a06      	ldr	r2, [sp, #24]
 800e704:	464b      	mov	r3, r9
 800e706:	4442      	add	r2, r8
 800e708:	4631      	mov	r1, r6
 800e70a:	4628      	mov	r0, r5
 800e70c:	47b8      	blx	r7
 800e70e:	3001      	adds	r0, #1
 800e710:	d1c3      	bne.n	800e69a <_printf_float+0x32e>
 800e712:	e686      	b.n	800e422 <_printf_float+0xb6>
 800e714:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e718:	f1ba 0f01 	cmp.w	sl, #1
 800e71c:	dc01      	bgt.n	800e722 <_printf_float+0x3b6>
 800e71e:	07db      	lsls	r3, r3, #31
 800e720:	d536      	bpl.n	800e790 <_printf_float+0x424>
 800e722:	2301      	movs	r3, #1
 800e724:	4642      	mov	r2, r8
 800e726:	4631      	mov	r1, r6
 800e728:	4628      	mov	r0, r5
 800e72a:	47b8      	blx	r7
 800e72c:	3001      	adds	r0, #1
 800e72e:	f43f ae78 	beq.w	800e422 <_printf_float+0xb6>
 800e732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e736:	4631      	mov	r1, r6
 800e738:	4628      	mov	r0, r5
 800e73a:	47b8      	blx	r7
 800e73c:	3001      	adds	r0, #1
 800e73e:	f43f ae70 	beq.w	800e422 <_printf_float+0xb6>
 800e742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e746:	2200      	movs	r2, #0
 800e748:	2300      	movs	r3, #0
 800e74a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e74e:	f7f2 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e752:	b9c0      	cbnz	r0, 800e786 <_printf_float+0x41a>
 800e754:	4653      	mov	r3, sl
 800e756:	f108 0201 	add.w	r2, r8, #1
 800e75a:	4631      	mov	r1, r6
 800e75c:	4628      	mov	r0, r5
 800e75e:	47b8      	blx	r7
 800e760:	3001      	adds	r0, #1
 800e762:	d10c      	bne.n	800e77e <_printf_float+0x412>
 800e764:	e65d      	b.n	800e422 <_printf_float+0xb6>
 800e766:	2301      	movs	r3, #1
 800e768:	465a      	mov	r2, fp
 800e76a:	4631      	mov	r1, r6
 800e76c:	4628      	mov	r0, r5
 800e76e:	47b8      	blx	r7
 800e770:	3001      	adds	r0, #1
 800e772:	f43f ae56 	beq.w	800e422 <_printf_float+0xb6>
 800e776:	f108 0801 	add.w	r8, r8, #1
 800e77a:	45d0      	cmp	r8, sl
 800e77c:	dbf3      	blt.n	800e766 <_printf_float+0x3fa>
 800e77e:	464b      	mov	r3, r9
 800e780:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e784:	e6df      	b.n	800e546 <_printf_float+0x1da>
 800e786:	f04f 0800 	mov.w	r8, #0
 800e78a:	f104 0b1a 	add.w	fp, r4, #26
 800e78e:	e7f4      	b.n	800e77a <_printf_float+0x40e>
 800e790:	2301      	movs	r3, #1
 800e792:	4642      	mov	r2, r8
 800e794:	e7e1      	b.n	800e75a <_printf_float+0x3ee>
 800e796:	2301      	movs	r3, #1
 800e798:	464a      	mov	r2, r9
 800e79a:	4631      	mov	r1, r6
 800e79c:	4628      	mov	r0, r5
 800e79e:	47b8      	blx	r7
 800e7a0:	3001      	adds	r0, #1
 800e7a2:	f43f ae3e 	beq.w	800e422 <_printf_float+0xb6>
 800e7a6:	f108 0801 	add.w	r8, r8, #1
 800e7aa:	68e3      	ldr	r3, [r4, #12]
 800e7ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e7ae:	1a5b      	subs	r3, r3, r1
 800e7b0:	4543      	cmp	r3, r8
 800e7b2:	dcf0      	bgt.n	800e796 <_printf_float+0x42a>
 800e7b4:	e6fc      	b.n	800e5b0 <_printf_float+0x244>
 800e7b6:	f04f 0800 	mov.w	r8, #0
 800e7ba:	f104 0919 	add.w	r9, r4, #25
 800e7be:	e7f4      	b.n	800e7aa <_printf_float+0x43e>

0800e7c0 <_printf_common>:
 800e7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7c4:	4616      	mov	r6, r2
 800e7c6:	4698      	mov	r8, r3
 800e7c8:	688a      	ldr	r2, [r1, #8]
 800e7ca:	690b      	ldr	r3, [r1, #16]
 800e7cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	bfb8      	it	lt
 800e7d4:	4613      	movlt	r3, r2
 800e7d6:	6033      	str	r3, [r6, #0]
 800e7d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e7dc:	4607      	mov	r7, r0
 800e7de:	460c      	mov	r4, r1
 800e7e0:	b10a      	cbz	r2, 800e7e6 <_printf_common+0x26>
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	6033      	str	r3, [r6, #0]
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	0699      	lsls	r1, r3, #26
 800e7ea:	bf42      	ittt	mi
 800e7ec:	6833      	ldrmi	r3, [r6, #0]
 800e7ee:	3302      	addmi	r3, #2
 800e7f0:	6033      	strmi	r3, [r6, #0]
 800e7f2:	6825      	ldr	r5, [r4, #0]
 800e7f4:	f015 0506 	ands.w	r5, r5, #6
 800e7f8:	d106      	bne.n	800e808 <_printf_common+0x48>
 800e7fa:	f104 0a19 	add.w	sl, r4, #25
 800e7fe:	68e3      	ldr	r3, [r4, #12]
 800e800:	6832      	ldr	r2, [r6, #0]
 800e802:	1a9b      	subs	r3, r3, r2
 800e804:	42ab      	cmp	r3, r5
 800e806:	dc26      	bgt.n	800e856 <_printf_common+0x96>
 800e808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e80c:	6822      	ldr	r2, [r4, #0]
 800e80e:	3b00      	subs	r3, #0
 800e810:	bf18      	it	ne
 800e812:	2301      	movne	r3, #1
 800e814:	0692      	lsls	r2, r2, #26
 800e816:	d42b      	bmi.n	800e870 <_printf_common+0xb0>
 800e818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e81c:	4641      	mov	r1, r8
 800e81e:	4638      	mov	r0, r7
 800e820:	47c8      	blx	r9
 800e822:	3001      	adds	r0, #1
 800e824:	d01e      	beq.n	800e864 <_printf_common+0xa4>
 800e826:	6823      	ldr	r3, [r4, #0]
 800e828:	6922      	ldr	r2, [r4, #16]
 800e82a:	f003 0306 	and.w	r3, r3, #6
 800e82e:	2b04      	cmp	r3, #4
 800e830:	bf02      	ittt	eq
 800e832:	68e5      	ldreq	r5, [r4, #12]
 800e834:	6833      	ldreq	r3, [r6, #0]
 800e836:	1aed      	subeq	r5, r5, r3
 800e838:	68a3      	ldr	r3, [r4, #8]
 800e83a:	bf0c      	ite	eq
 800e83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e840:	2500      	movne	r5, #0
 800e842:	4293      	cmp	r3, r2
 800e844:	bfc4      	itt	gt
 800e846:	1a9b      	subgt	r3, r3, r2
 800e848:	18ed      	addgt	r5, r5, r3
 800e84a:	2600      	movs	r6, #0
 800e84c:	341a      	adds	r4, #26
 800e84e:	42b5      	cmp	r5, r6
 800e850:	d11a      	bne.n	800e888 <_printf_common+0xc8>
 800e852:	2000      	movs	r0, #0
 800e854:	e008      	b.n	800e868 <_printf_common+0xa8>
 800e856:	2301      	movs	r3, #1
 800e858:	4652      	mov	r2, sl
 800e85a:	4641      	mov	r1, r8
 800e85c:	4638      	mov	r0, r7
 800e85e:	47c8      	blx	r9
 800e860:	3001      	adds	r0, #1
 800e862:	d103      	bne.n	800e86c <_printf_common+0xac>
 800e864:	f04f 30ff 	mov.w	r0, #4294967295
 800e868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86c:	3501      	adds	r5, #1
 800e86e:	e7c6      	b.n	800e7fe <_printf_common+0x3e>
 800e870:	18e1      	adds	r1, r4, r3
 800e872:	1c5a      	adds	r2, r3, #1
 800e874:	2030      	movs	r0, #48	@ 0x30
 800e876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e87a:	4422      	add	r2, r4
 800e87c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e884:	3302      	adds	r3, #2
 800e886:	e7c7      	b.n	800e818 <_printf_common+0x58>
 800e888:	2301      	movs	r3, #1
 800e88a:	4622      	mov	r2, r4
 800e88c:	4641      	mov	r1, r8
 800e88e:	4638      	mov	r0, r7
 800e890:	47c8      	blx	r9
 800e892:	3001      	adds	r0, #1
 800e894:	d0e6      	beq.n	800e864 <_printf_common+0xa4>
 800e896:	3601      	adds	r6, #1
 800e898:	e7d9      	b.n	800e84e <_printf_common+0x8e>
	...

0800e89c <_printf_i>:
 800e89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8a0:	7e0f      	ldrb	r7, [r1, #24]
 800e8a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e8a4:	2f78      	cmp	r7, #120	@ 0x78
 800e8a6:	4691      	mov	r9, r2
 800e8a8:	4680      	mov	r8, r0
 800e8aa:	460c      	mov	r4, r1
 800e8ac:	469a      	mov	sl, r3
 800e8ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e8b2:	d807      	bhi.n	800e8c4 <_printf_i+0x28>
 800e8b4:	2f62      	cmp	r7, #98	@ 0x62
 800e8b6:	d80a      	bhi.n	800e8ce <_printf_i+0x32>
 800e8b8:	2f00      	cmp	r7, #0
 800e8ba:	f000 80d2 	beq.w	800ea62 <_printf_i+0x1c6>
 800e8be:	2f58      	cmp	r7, #88	@ 0x58
 800e8c0:	f000 80b9 	beq.w	800ea36 <_printf_i+0x19a>
 800e8c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8cc:	e03a      	b.n	800e944 <_printf_i+0xa8>
 800e8ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8d2:	2b15      	cmp	r3, #21
 800e8d4:	d8f6      	bhi.n	800e8c4 <_printf_i+0x28>
 800e8d6:	a101      	add	r1, pc, #4	@ (adr r1, 800e8dc <_printf_i+0x40>)
 800e8d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8dc:	0800e935 	.word	0x0800e935
 800e8e0:	0800e949 	.word	0x0800e949
 800e8e4:	0800e8c5 	.word	0x0800e8c5
 800e8e8:	0800e8c5 	.word	0x0800e8c5
 800e8ec:	0800e8c5 	.word	0x0800e8c5
 800e8f0:	0800e8c5 	.word	0x0800e8c5
 800e8f4:	0800e949 	.word	0x0800e949
 800e8f8:	0800e8c5 	.word	0x0800e8c5
 800e8fc:	0800e8c5 	.word	0x0800e8c5
 800e900:	0800e8c5 	.word	0x0800e8c5
 800e904:	0800e8c5 	.word	0x0800e8c5
 800e908:	0800ea49 	.word	0x0800ea49
 800e90c:	0800e973 	.word	0x0800e973
 800e910:	0800ea03 	.word	0x0800ea03
 800e914:	0800e8c5 	.word	0x0800e8c5
 800e918:	0800e8c5 	.word	0x0800e8c5
 800e91c:	0800ea6b 	.word	0x0800ea6b
 800e920:	0800e8c5 	.word	0x0800e8c5
 800e924:	0800e973 	.word	0x0800e973
 800e928:	0800e8c5 	.word	0x0800e8c5
 800e92c:	0800e8c5 	.word	0x0800e8c5
 800e930:	0800ea0b 	.word	0x0800ea0b
 800e934:	6833      	ldr	r3, [r6, #0]
 800e936:	1d1a      	adds	r2, r3, #4
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	6032      	str	r2, [r6, #0]
 800e93c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e944:	2301      	movs	r3, #1
 800e946:	e09d      	b.n	800ea84 <_printf_i+0x1e8>
 800e948:	6833      	ldr	r3, [r6, #0]
 800e94a:	6820      	ldr	r0, [r4, #0]
 800e94c:	1d19      	adds	r1, r3, #4
 800e94e:	6031      	str	r1, [r6, #0]
 800e950:	0606      	lsls	r6, r0, #24
 800e952:	d501      	bpl.n	800e958 <_printf_i+0xbc>
 800e954:	681d      	ldr	r5, [r3, #0]
 800e956:	e003      	b.n	800e960 <_printf_i+0xc4>
 800e958:	0645      	lsls	r5, r0, #25
 800e95a:	d5fb      	bpl.n	800e954 <_printf_i+0xb8>
 800e95c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e960:	2d00      	cmp	r5, #0
 800e962:	da03      	bge.n	800e96c <_printf_i+0xd0>
 800e964:	232d      	movs	r3, #45	@ 0x2d
 800e966:	426d      	negs	r5, r5
 800e968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e96c:	4859      	ldr	r0, [pc, #356]	@ (800ead4 <_printf_i+0x238>)
 800e96e:	230a      	movs	r3, #10
 800e970:	e011      	b.n	800e996 <_printf_i+0xfa>
 800e972:	6821      	ldr	r1, [r4, #0]
 800e974:	6833      	ldr	r3, [r6, #0]
 800e976:	0608      	lsls	r0, r1, #24
 800e978:	f853 5b04 	ldr.w	r5, [r3], #4
 800e97c:	d402      	bmi.n	800e984 <_printf_i+0xe8>
 800e97e:	0649      	lsls	r1, r1, #25
 800e980:	bf48      	it	mi
 800e982:	b2ad      	uxthmi	r5, r5
 800e984:	2f6f      	cmp	r7, #111	@ 0x6f
 800e986:	4853      	ldr	r0, [pc, #332]	@ (800ead4 <_printf_i+0x238>)
 800e988:	6033      	str	r3, [r6, #0]
 800e98a:	bf14      	ite	ne
 800e98c:	230a      	movne	r3, #10
 800e98e:	2308      	moveq	r3, #8
 800e990:	2100      	movs	r1, #0
 800e992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e996:	6866      	ldr	r6, [r4, #4]
 800e998:	60a6      	str	r6, [r4, #8]
 800e99a:	2e00      	cmp	r6, #0
 800e99c:	bfa2      	ittt	ge
 800e99e:	6821      	ldrge	r1, [r4, #0]
 800e9a0:	f021 0104 	bicge.w	r1, r1, #4
 800e9a4:	6021      	strge	r1, [r4, #0]
 800e9a6:	b90d      	cbnz	r5, 800e9ac <_printf_i+0x110>
 800e9a8:	2e00      	cmp	r6, #0
 800e9aa:	d04b      	beq.n	800ea44 <_printf_i+0x1a8>
 800e9ac:	4616      	mov	r6, r2
 800e9ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800e9b2:	fb03 5711 	mls	r7, r3, r1, r5
 800e9b6:	5dc7      	ldrb	r7, [r0, r7]
 800e9b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9bc:	462f      	mov	r7, r5
 800e9be:	42bb      	cmp	r3, r7
 800e9c0:	460d      	mov	r5, r1
 800e9c2:	d9f4      	bls.n	800e9ae <_printf_i+0x112>
 800e9c4:	2b08      	cmp	r3, #8
 800e9c6:	d10b      	bne.n	800e9e0 <_printf_i+0x144>
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	07df      	lsls	r7, r3, #31
 800e9cc:	d508      	bpl.n	800e9e0 <_printf_i+0x144>
 800e9ce:	6923      	ldr	r3, [r4, #16]
 800e9d0:	6861      	ldr	r1, [r4, #4]
 800e9d2:	4299      	cmp	r1, r3
 800e9d4:	bfde      	ittt	le
 800e9d6:	2330      	movle	r3, #48	@ 0x30
 800e9d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e9e0:	1b92      	subs	r2, r2, r6
 800e9e2:	6122      	str	r2, [r4, #16]
 800e9e4:	f8cd a000 	str.w	sl, [sp]
 800e9e8:	464b      	mov	r3, r9
 800e9ea:	aa03      	add	r2, sp, #12
 800e9ec:	4621      	mov	r1, r4
 800e9ee:	4640      	mov	r0, r8
 800e9f0:	f7ff fee6 	bl	800e7c0 <_printf_common>
 800e9f4:	3001      	adds	r0, #1
 800e9f6:	d14a      	bne.n	800ea8e <_printf_i+0x1f2>
 800e9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9fc:	b004      	add	sp, #16
 800e9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea02:	6823      	ldr	r3, [r4, #0]
 800ea04:	f043 0320 	orr.w	r3, r3, #32
 800ea08:	6023      	str	r3, [r4, #0]
 800ea0a:	4833      	ldr	r0, [pc, #204]	@ (800ead8 <_printf_i+0x23c>)
 800ea0c:	2778      	movs	r7, #120	@ 0x78
 800ea0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea12:	6823      	ldr	r3, [r4, #0]
 800ea14:	6831      	ldr	r1, [r6, #0]
 800ea16:	061f      	lsls	r7, r3, #24
 800ea18:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea1c:	d402      	bmi.n	800ea24 <_printf_i+0x188>
 800ea1e:	065f      	lsls	r7, r3, #25
 800ea20:	bf48      	it	mi
 800ea22:	b2ad      	uxthmi	r5, r5
 800ea24:	6031      	str	r1, [r6, #0]
 800ea26:	07d9      	lsls	r1, r3, #31
 800ea28:	bf44      	itt	mi
 800ea2a:	f043 0320 	orrmi.w	r3, r3, #32
 800ea2e:	6023      	strmi	r3, [r4, #0]
 800ea30:	b11d      	cbz	r5, 800ea3a <_printf_i+0x19e>
 800ea32:	2310      	movs	r3, #16
 800ea34:	e7ac      	b.n	800e990 <_printf_i+0xf4>
 800ea36:	4827      	ldr	r0, [pc, #156]	@ (800ead4 <_printf_i+0x238>)
 800ea38:	e7e9      	b.n	800ea0e <_printf_i+0x172>
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	f023 0320 	bic.w	r3, r3, #32
 800ea40:	6023      	str	r3, [r4, #0]
 800ea42:	e7f6      	b.n	800ea32 <_printf_i+0x196>
 800ea44:	4616      	mov	r6, r2
 800ea46:	e7bd      	b.n	800e9c4 <_printf_i+0x128>
 800ea48:	6833      	ldr	r3, [r6, #0]
 800ea4a:	6825      	ldr	r5, [r4, #0]
 800ea4c:	6961      	ldr	r1, [r4, #20]
 800ea4e:	1d18      	adds	r0, r3, #4
 800ea50:	6030      	str	r0, [r6, #0]
 800ea52:	062e      	lsls	r6, r5, #24
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	d501      	bpl.n	800ea5c <_printf_i+0x1c0>
 800ea58:	6019      	str	r1, [r3, #0]
 800ea5a:	e002      	b.n	800ea62 <_printf_i+0x1c6>
 800ea5c:	0668      	lsls	r0, r5, #25
 800ea5e:	d5fb      	bpl.n	800ea58 <_printf_i+0x1bc>
 800ea60:	8019      	strh	r1, [r3, #0]
 800ea62:	2300      	movs	r3, #0
 800ea64:	6123      	str	r3, [r4, #16]
 800ea66:	4616      	mov	r6, r2
 800ea68:	e7bc      	b.n	800e9e4 <_printf_i+0x148>
 800ea6a:	6833      	ldr	r3, [r6, #0]
 800ea6c:	1d1a      	adds	r2, r3, #4
 800ea6e:	6032      	str	r2, [r6, #0]
 800ea70:	681e      	ldr	r6, [r3, #0]
 800ea72:	6862      	ldr	r2, [r4, #4]
 800ea74:	2100      	movs	r1, #0
 800ea76:	4630      	mov	r0, r6
 800ea78:	f7f1 fbaa 	bl	80001d0 <memchr>
 800ea7c:	b108      	cbz	r0, 800ea82 <_printf_i+0x1e6>
 800ea7e:	1b80      	subs	r0, r0, r6
 800ea80:	6060      	str	r0, [r4, #4]
 800ea82:	6863      	ldr	r3, [r4, #4]
 800ea84:	6123      	str	r3, [r4, #16]
 800ea86:	2300      	movs	r3, #0
 800ea88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea8c:	e7aa      	b.n	800e9e4 <_printf_i+0x148>
 800ea8e:	6923      	ldr	r3, [r4, #16]
 800ea90:	4632      	mov	r2, r6
 800ea92:	4649      	mov	r1, r9
 800ea94:	4640      	mov	r0, r8
 800ea96:	47d0      	blx	sl
 800ea98:	3001      	adds	r0, #1
 800ea9a:	d0ad      	beq.n	800e9f8 <_printf_i+0x15c>
 800ea9c:	6823      	ldr	r3, [r4, #0]
 800ea9e:	079b      	lsls	r3, r3, #30
 800eaa0:	d413      	bmi.n	800eaca <_printf_i+0x22e>
 800eaa2:	68e0      	ldr	r0, [r4, #12]
 800eaa4:	9b03      	ldr	r3, [sp, #12]
 800eaa6:	4298      	cmp	r0, r3
 800eaa8:	bfb8      	it	lt
 800eaaa:	4618      	movlt	r0, r3
 800eaac:	e7a6      	b.n	800e9fc <_printf_i+0x160>
 800eaae:	2301      	movs	r3, #1
 800eab0:	4632      	mov	r2, r6
 800eab2:	4649      	mov	r1, r9
 800eab4:	4640      	mov	r0, r8
 800eab6:	47d0      	blx	sl
 800eab8:	3001      	adds	r0, #1
 800eaba:	d09d      	beq.n	800e9f8 <_printf_i+0x15c>
 800eabc:	3501      	adds	r5, #1
 800eabe:	68e3      	ldr	r3, [r4, #12]
 800eac0:	9903      	ldr	r1, [sp, #12]
 800eac2:	1a5b      	subs	r3, r3, r1
 800eac4:	42ab      	cmp	r3, r5
 800eac6:	dcf2      	bgt.n	800eaae <_printf_i+0x212>
 800eac8:	e7eb      	b.n	800eaa2 <_printf_i+0x206>
 800eaca:	2500      	movs	r5, #0
 800eacc:	f104 0619 	add.w	r6, r4, #25
 800ead0:	e7f5      	b.n	800eabe <_printf_i+0x222>
 800ead2:	bf00      	nop
 800ead4:	08011a96 	.word	0x08011a96
 800ead8:	08011aa7 	.word	0x08011aa7

0800eadc <std>:
 800eadc:	2300      	movs	r3, #0
 800eade:	b510      	push	{r4, lr}
 800eae0:	4604      	mov	r4, r0
 800eae2:	e9c0 3300 	strd	r3, r3, [r0]
 800eae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaea:	6083      	str	r3, [r0, #8]
 800eaec:	8181      	strh	r1, [r0, #12]
 800eaee:	6643      	str	r3, [r0, #100]	@ 0x64
 800eaf0:	81c2      	strh	r2, [r0, #14]
 800eaf2:	6183      	str	r3, [r0, #24]
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	2208      	movs	r2, #8
 800eaf8:	305c      	adds	r0, #92	@ 0x5c
 800eafa:	f000 f914 	bl	800ed26 <memset>
 800eafe:	4b0d      	ldr	r3, [pc, #52]	@ (800eb34 <std+0x58>)
 800eb00:	6263      	str	r3, [r4, #36]	@ 0x24
 800eb02:	4b0d      	ldr	r3, [pc, #52]	@ (800eb38 <std+0x5c>)
 800eb04:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eb06:	4b0d      	ldr	r3, [pc, #52]	@ (800eb3c <std+0x60>)
 800eb08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eb0a:	4b0d      	ldr	r3, [pc, #52]	@ (800eb40 <std+0x64>)
 800eb0c:	6323      	str	r3, [r4, #48]	@ 0x30
 800eb0e:	4b0d      	ldr	r3, [pc, #52]	@ (800eb44 <std+0x68>)
 800eb10:	6224      	str	r4, [r4, #32]
 800eb12:	429c      	cmp	r4, r3
 800eb14:	d006      	beq.n	800eb24 <std+0x48>
 800eb16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800eb1a:	4294      	cmp	r4, r2
 800eb1c:	d002      	beq.n	800eb24 <std+0x48>
 800eb1e:	33d0      	adds	r3, #208	@ 0xd0
 800eb20:	429c      	cmp	r4, r3
 800eb22:	d105      	bne.n	800eb30 <std+0x54>
 800eb24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eb28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb2c:	f000 b978 	b.w	800ee20 <__retarget_lock_init_recursive>
 800eb30:	bd10      	pop	{r4, pc}
 800eb32:	bf00      	nop
 800eb34:	0800eca1 	.word	0x0800eca1
 800eb38:	0800ecc3 	.word	0x0800ecc3
 800eb3c:	0800ecfb 	.word	0x0800ecfb
 800eb40:	0800ed1f 	.word	0x0800ed1f
 800eb44:	20004efc 	.word	0x20004efc

0800eb48 <stdio_exit_handler>:
 800eb48:	4a02      	ldr	r2, [pc, #8]	@ (800eb54 <stdio_exit_handler+0xc>)
 800eb4a:	4903      	ldr	r1, [pc, #12]	@ (800eb58 <stdio_exit_handler+0x10>)
 800eb4c:	4803      	ldr	r0, [pc, #12]	@ (800eb5c <stdio_exit_handler+0x14>)
 800eb4e:	f000 b869 	b.w	800ec24 <_fwalk_sglue>
 800eb52:	bf00      	nop
 800eb54:	20000014 	.word	0x20000014
 800eb58:	0801079d 	.word	0x0801079d
 800eb5c:	20000024 	.word	0x20000024

0800eb60 <cleanup_stdio>:
 800eb60:	6841      	ldr	r1, [r0, #4]
 800eb62:	4b0c      	ldr	r3, [pc, #48]	@ (800eb94 <cleanup_stdio+0x34>)
 800eb64:	4299      	cmp	r1, r3
 800eb66:	b510      	push	{r4, lr}
 800eb68:	4604      	mov	r4, r0
 800eb6a:	d001      	beq.n	800eb70 <cleanup_stdio+0x10>
 800eb6c:	f001 fe16 	bl	801079c <_fflush_r>
 800eb70:	68a1      	ldr	r1, [r4, #8]
 800eb72:	4b09      	ldr	r3, [pc, #36]	@ (800eb98 <cleanup_stdio+0x38>)
 800eb74:	4299      	cmp	r1, r3
 800eb76:	d002      	beq.n	800eb7e <cleanup_stdio+0x1e>
 800eb78:	4620      	mov	r0, r4
 800eb7a:	f001 fe0f 	bl	801079c <_fflush_r>
 800eb7e:	68e1      	ldr	r1, [r4, #12]
 800eb80:	4b06      	ldr	r3, [pc, #24]	@ (800eb9c <cleanup_stdio+0x3c>)
 800eb82:	4299      	cmp	r1, r3
 800eb84:	d004      	beq.n	800eb90 <cleanup_stdio+0x30>
 800eb86:	4620      	mov	r0, r4
 800eb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb8c:	f001 be06 	b.w	801079c <_fflush_r>
 800eb90:	bd10      	pop	{r4, pc}
 800eb92:	bf00      	nop
 800eb94:	20004efc 	.word	0x20004efc
 800eb98:	20004f64 	.word	0x20004f64
 800eb9c:	20004fcc 	.word	0x20004fcc

0800eba0 <global_stdio_init.part.0>:
 800eba0:	b510      	push	{r4, lr}
 800eba2:	4b0b      	ldr	r3, [pc, #44]	@ (800ebd0 <global_stdio_init.part.0+0x30>)
 800eba4:	4c0b      	ldr	r4, [pc, #44]	@ (800ebd4 <global_stdio_init.part.0+0x34>)
 800eba6:	4a0c      	ldr	r2, [pc, #48]	@ (800ebd8 <global_stdio_init.part.0+0x38>)
 800eba8:	601a      	str	r2, [r3, #0]
 800ebaa:	4620      	mov	r0, r4
 800ebac:	2200      	movs	r2, #0
 800ebae:	2104      	movs	r1, #4
 800ebb0:	f7ff ff94 	bl	800eadc <std>
 800ebb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ebb8:	2201      	movs	r2, #1
 800ebba:	2109      	movs	r1, #9
 800ebbc:	f7ff ff8e 	bl	800eadc <std>
 800ebc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ebc4:	2202      	movs	r2, #2
 800ebc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebca:	2112      	movs	r1, #18
 800ebcc:	f7ff bf86 	b.w	800eadc <std>
 800ebd0:	20005034 	.word	0x20005034
 800ebd4:	20004efc 	.word	0x20004efc
 800ebd8:	0800eb49 	.word	0x0800eb49

0800ebdc <__sfp_lock_acquire>:
 800ebdc:	4801      	ldr	r0, [pc, #4]	@ (800ebe4 <__sfp_lock_acquire+0x8>)
 800ebde:	f000 b920 	b.w	800ee22 <__retarget_lock_acquire_recursive>
 800ebe2:	bf00      	nop
 800ebe4:	2000503d 	.word	0x2000503d

0800ebe8 <__sfp_lock_release>:
 800ebe8:	4801      	ldr	r0, [pc, #4]	@ (800ebf0 <__sfp_lock_release+0x8>)
 800ebea:	f000 b91b 	b.w	800ee24 <__retarget_lock_release_recursive>
 800ebee:	bf00      	nop
 800ebf0:	2000503d 	.word	0x2000503d

0800ebf4 <__sinit>:
 800ebf4:	b510      	push	{r4, lr}
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	f7ff fff0 	bl	800ebdc <__sfp_lock_acquire>
 800ebfc:	6a23      	ldr	r3, [r4, #32]
 800ebfe:	b11b      	cbz	r3, 800ec08 <__sinit+0x14>
 800ec00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec04:	f7ff bff0 	b.w	800ebe8 <__sfp_lock_release>
 800ec08:	4b04      	ldr	r3, [pc, #16]	@ (800ec1c <__sinit+0x28>)
 800ec0a:	6223      	str	r3, [r4, #32]
 800ec0c:	4b04      	ldr	r3, [pc, #16]	@ (800ec20 <__sinit+0x2c>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d1f5      	bne.n	800ec00 <__sinit+0xc>
 800ec14:	f7ff ffc4 	bl	800eba0 <global_stdio_init.part.0>
 800ec18:	e7f2      	b.n	800ec00 <__sinit+0xc>
 800ec1a:	bf00      	nop
 800ec1c:	0800eb61 	.word	0x0800eb61
 800ec20:	20005034 	.word	0x20005034

0800ec24 <_fwalk_sglue>:
 800ec24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec28:	4607      	mov	r7, r0
 800ec2a:	4688      	mov	r8, r1
 800ec2c:	4614      	mov	r4, r2
 800ec2e:	2600      	movs	r6, #0
 800ec30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec34:	f1b9 0901 	subs.w	r9, r9, #1
 800ec38:	d505      	bpl.n	800ec46 <_fwalk_sglue+0x22>
 800ec3a:	6824      	ldr	r4, [r4, #0]
 800ec3c:	2c00      	cmp	r4, #0
 800ec3e:	d1f7      	bne.n	800ec30 <_fwalk_sglue+0xc>
 800ec40:	4630      	mov	r0, r6
 800ec42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec46:	89ab      	ldrh	r3, [r5, #12]
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d907      	bls.n	800ec5c <_fwalk_sglue+0x38>
 800ec4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec50:	3301      	adds	r3, #1
 800ec52:	d003      	beq.n	800ec5c <_fwalk_sglue+0x38>
 800ec54:	4629      	mov	r1, r5
 800ec56:	4638      	mov	r0, r7
 800ec58:	47c0      	blx	r8
 800ec5a:	4306      	orrs	r6, r0
 800ec5c:	3568      	adds	r5, #104	@ 0x68
 800ec5e:	e7e9      	b.n	800ec34 <_fwalk_sglue+0x10>

0800ec60 <siprintf>:
 800ec60:	b40e      	push	{r1, r2, r3}
 800ec62:	b500      	push	{lr}
 800ec64:	b09c      	sub	sp, #112	@ 0x70
 800ec66:	ab1d      	add	r3, sp, #116	@ 0x74
 800ec68:	9002      	str	r0, [sp, #8]
 800ec6a:	9006      	str	r0, [sp, #24]
 800ec6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ec70:	4809      	ldr	r0, [pc, #36]	@ (800ec98 <siprintf+0x38>)
 800ec72:	9107      	str	r1, [sp, #28]
 800ec74:	9104      	str	r1, [sp, #16]
 800ec76:	4909      	ldr	r1, [pc, #36]	@ (800ec9c <siprintf+0x3c>)
 800ec78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec7c:	9105      	str	r1, [sp, #20]
 800ec7e:	6800      	ldr	r0, [r0, #0]
 800ec80:	9301      	str	r3, [sp, #4]
 800ec82:	a902      	add	r1, sp, #8
 800ec84:	f001 fc0a 	bl	801049c <_svfiprintf_r>
 800ec88:	9b02      	ldr	r3, [sp, #8]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	701a      	strb	r2, [r3, #0]
 800ec8e:	b01c      	add	sp, #112	@ 0x70
 800ec90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec94:	b003      	add	sp, #12
 800ec96:	4770      	bx	lr
 800ec98:	20000020 	.word	0x20000020
 800ec9c:	ffff0208 	.word	0xffff0208

0800eca0 <__sread>:
 800eca0:	b510      	push	{r4, lr}
 800eca2:	460c      	mov	r4, r1
 800eca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca8:	f000 f86c 	bl	800ed84 <_read_r>
 800ecac:	2800      	cmp	r0, #0
 800ecae:	bfab      	itete	ge
 800ecb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ecb2:	89a3      	ldrhlt	r3, [r4, #12]
 800ecb4:	181b      	addge	r3, r3, r0
 800ecb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ecba:	bfac      	ite	ge
 800ecbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ecbe:	81a3      	strhlt	r3, [r4, #12]
 800ecc0:	bd10      	pop	{r4, pc}

0800ecc2 <__swrite>:
 800ecc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc6:	461f      	mov	r7, r3
 800ecc8:	898b      	ldrh	r3, [r1, #12]
 800ecca:	05db      	lsls	r3, r3, #23
 800eccc:	4605      	mov	r5, r0
 800ecce:	460c      	mov	r4, r1
 800ecd0:	4616      	mov	r6, r2
 800ecd2:	d505      	bpl.n	800ece0 <__swrite+0x1e>
 800ecd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecd8:	2302      	movs	r3, #2
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f000 f840 	bl	800ed60 <_lseek_r>
 800ece0:	89a3      	ldrh	r3, [r4, #12]
 800ece2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ece6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ecea:	81a3      	strh	r3, [r4, #12]
 800ecec:	4632      	mov	r2, r6
 800ecee:	463b      	mov	r3, r7
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf6:	f000 b857 	b.w	800eda8 <_write_r>

0800ecfa <__sseek>:
 800ecfa:	b510      	push	{r4, lr}
 800ecfc:	460c      	mov	r4, r1
 800ecfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed02:	f000 f82d 	bl	800ed60 <_lseek_r>
 800ed06:	1c43      	adds	r3, r0, #1
 800ed08:	89a3      	ldrh	r3, [r4, #12]
 800ed0a:	bf15      	itete	ne
 800ed0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ed0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ed12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ed16:	81a3      	strheq	r3, [r4, #12]
 800ed18:	bf18      	it	ne
 800ed1a:	81a3      	strhne	r3, [r4, #12]
 800ed1c:	bd10      	pop	{r4, pc}

0800ed1e <__sclose>:
 800ed1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed22:	f000 b80d 	b.w	800ed40 <_close_r>

0800ed26 <memset>:
 800ed26:	4402      	add	r2, r0
 800ed28:	4603      	mov	r3, r0
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d100      	bne.n	800ed30 <memset+0xa>
 800ed2e:	4770      	bx	lr
 800ed30:	f803 1b01 	strb.w	r1, [r3], #1
 800ed34:	e7f9      	b.n	800ed2a <memset+0x4>
	...

0800ed38 <_localeconv_r>:
 800ed38:	4800      	ldr	r0, [pc, #0]	@ (800ed3c <_localeconv_r+0x4>)
 800ed3a:	4770      	bx	lr
 800ed3c:	20000160 	.word	0x20000160

0800ed40 <_close_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4d06      	ldr	r5, [pc, #24]	@ (800ed5c <_close_r+0x1c>)
 800ed44:	2300      	movs	r3, #0
 800ed46:	4604      	mov	r4, r0
 800ed48:	4608      	mov	r0, r1
 800ed4a:	602b      	str	r3, [r5, #0]
 800ed4c:	f7f5 ff38 	bl	8004bc0 <_close>
 800ed50:	1c43      	adds	r3, r0, #1
 800ed52:	d102      	bne.n	800ed5a <_close_r+0x1a>
 800ed54:	682b      	ldr	r3, [r5, #0]
 800ed56:	b103      	cbz	r3, 800ed5a <_close_r+0x1a>
 800ed58:	6023      	str	r3, [r4, #0]
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}
 800ed5c:	20005038 	.word	0x20005038

0800ed60 <_lseek_r>:
 800ed60:	b538      	push	{r3, r4, r5, lr}
 800ed62:	4d07      	ldr	r5, [pc, #28]	@ (800ed80 <_lseek_r+0x20>)
 800ed64:	4604      	mov	r4, r0
 800ed66:	4608      	mov	r0, r1
 800ed68:	4611      	mov	r1, r2
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	602a      	str	r2, [r5, #0]
 800ed6e:	461a      	mov	r2, r3
 800ed70:	f7f5 ff4d 	bl	8004c0e <_lseek>
 800ed74:	1c43      	adds	r3, r0, #1
 800ed76:	d102      	bne.n	800ed7e <_lseek_r+0x1e>
 800ed78:	682b      	ldr	r3, [r5, #0]
 800ed7a:	b103      	cbz	r3, 800ed7e <_lseek_r+0x1e>
 800ed7c:	6023      	str	r3, [r4, #0]
 800ed7e:	bd38      	pop	{r3, r4, r5, pc}
 800ed80:	20005038 	.word	0x20005038

0800ed84 <_read_r>:
 800ed84:	b538      	push	{r3, r4, r5, lr}
 800ed86:	4d07      	ldr	r5, [pc, #28]	@ (800eda4 <_read_r+0x20>)
 800ed88:	4604      	mov	r4, r0
 800ed8a:	4608      	mov	r0, r1
 800ed8c:	4611      	mov	r1, r2
 800ed8e:	2200      	movs	r2, #0
 800ed90:	602a      	str	r2, [r5, #0]
 800ed92:	461a      	mov	r2, r3
 800ed94:	f7f5 fedb 	bl	8004b4e <_read>
 800ed98:	1c43      	adds	r3, r0, #1
 800ed9a:	d102      	bne.n	800eda2 <_read_r+0x1e>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	b103      	cbz	r3, 800eda2 <_read_r+0x1e>
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
 800eda4:	20005038 	.word	0x20005038

0800eda8 <_write_r>:
 800eda8:	b538      	push	{r3, r4, r5, lr}
 800edaa:	4d07      	ldr	r5, [pc, #28]	@ (800edc8 <_write_r+0x20>)
 800edac:	4604      	mov	r4, r0
 800edae:	4608      	mov	r0, r1
 800edb0:	4611      	mov	r1, r2
 800edb2:	2200      	movs	r2, #0
 800edb4:	602a      	str	r2, [r5, #0]
 800edb6:	461a      	mov	r2, r3
 800edb8:	f7f5 fee6 	bl	8004b88 <_write>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d102      	bne.n	800edc6 <_write_r+0x1e>
 800edc0:	682b      	ldr	r3, [r5, #0]
 800edc2:	b103      	cbz	r3, 800edc6 <_write_r+0x1e>
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	bd38      	pop	{r3, r4, r5, pc}
 800edc8:	20005038 	.word	0x20005038

0800edcc <__errno>:
 800edcc:	4b01      	ldr	r3, [pc, #4]	@ (800edd4 <__errno+0x8>)
 800edce:	6818      	ldr	r0, [r3, #0]
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	20000020 	.word	0x20000020

0800edd8 <__libc_init_array>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	4d0d      	ldr	r5, [pc, #52]	@ (800ee10 <__libc_init_array+0x38>)
 800eddc:	4c0d      	ldr	r4, [pc, #52]	@ (800ee14 <__libc_init_array+0x3c>)
 800edde:	1b64      	subs	r4, r4, r5
 800ede0:	10a4      	asrs	r4, r4, #2
 800ede2:	2600      	movs	r6, #0
 800ede4:	42a6      	cmp	r6, r4
 800ede6:	d109      	bne.n	800edfc <__libc_init_array+0x24>
 800ede8:	4d0b      	ldr	r5, [pc, #44]	@ (800ee18 <__libc_init_array+0x40>)
 800edea:	4c0c      	ldr	r4, [pc, #48]	@ (800ee1c <__libc_init_array+0x44>)
 800edec:	f002 f866 	bl	8010ebc <_init>
 800edf0:	1b64      	subs	r4, r4, r5
 800edf2:	10a4      	asrs	r4, r4, #2
 800edf4:	2600      	movs	r6, #0
 800edf6:	42a6      	cmp	r6, r4
 800edf8:	d105      	bne.n	800ee06 <__libc_init_array+0x2e>
 800edfa:	bd70      	pop	{r4, r5, r6, pc}
 800edfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee00:	4798      	blx	r3
 800ee02:	3601      	adds	r6, #1
 800ee04:	e7ee      	b.n	800ede4 <__libc_init_array+0xc>
 800ee06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee0a:	4798      	blx	r3
 800ee0c:	3601      	adds	r6, #1
 800ee0e:	e7f2      	b.n	800edf6 <__libc_init_array+0x1e>
 800ee10:	08011e00 	.word	0x08011e00
 800ee14:	08011e00 	.word	0x08011e00
 800ee18:	08011e00 	.word	0x08011e00
 800ee1c:	08011e04 	.word	0x08011e04

0800ee20 <__retarget_lock_init_recursive>:
 800ee20:	4770      	bx	lr

0800ee22 <__retarget_lock_acquire_recursive>:
 800ee22:	4770      	bx	lr

0800ee24 <__retarget_lock_release_recursive>:
 800ee24:	4770      	bx	lr

0800ee26 <memcpy>:
 800ee26:	440a      	add	r2, r1
 800ee28:	4291      	cmp	r1, r2
 800ee2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee2e:	d100      	bne.n	800ee32 <memcpy+0xc>
 800ee30:	4770      	bx	lr
 800ee32:	b510      	push	{r4, lr}
 800ee34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee3c:	4291      	cmp	r1, r2
 800ee3e:	d1f9      	bne.n	800ee34 <memcpy+0xe>
 800ee40:	bd10      	pop	{r4, pc}

0800ee42 <quorem>:
 800ee42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee46:	6903      	ldr	r3, [r0, #16]
 800ee48:	690c      	ldr	r4, [r1, #16]
 800ee4a:	42a3      	cmp	r3, r4
 800ee4c:	4607      	mov	r7, r0
 800ee4e:	db7e      	blt.n	800ef4e <quorem+0x10c>
 800ee50:	3c01      	subs	r4, #1
 800ee52:	f101 0814 	add.w	r8, r1, #20
 800ee56:	00a3      	lsls	r3, r4, #2
 800ee58:	f100 0514 	add.w	r5, r0, #20
 800ee5c:	9300      	str	r3, [sp, #0]
 800ee5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee62:	9301      	str	r3, [sp, #4]
 800ee64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee74:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee78:	d32e      	bcc.n	800eed8 <quorem+0x96>
 800ee7a:	f04f 0a00 	mov.w	sl, #0
 800ee7e:	46c4      	mov	ip, r8
 800ee80:	46ae      	mov	lr, r5
 800ee82:	46d3      	mov	fp, sl
 800ee84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee88:	b298      	uxth	r0, r3
 800ee8a:	fb06 a000 	mla	r0, r6, r0, sl
 800ee8e:	0c02      	lsrs	r2, r0, #16
 800ee90:	0c1b      	lsrs	r3, r3, #16
 800ee92:	fb06 2303 	mla	r3, r6, r3, r2
 800ee96:	f8de 2000 	ldr.w	r2, [lr]
 800ee9a:	b280      	uxth	r0, r0
 800ee9c:	b292      	uxth	r2, r2
 800ee9e:	1a12      	subs	r2, r2, r0
 800eea0:	445a      	add	r2, fp
 800eea2:	f8de 0000 	ldr.w	r0, [lr]
 800eea6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eeb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eeb4:	b292      	uxth	r2, r2
 800eeb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eeba:	45e1      	cmp	r9, ip
 800eebc:	f84e 2b04 	str.w	r2, [lr], #4
 800eec0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eec4:	d2de      	bcs.n	800ee84 <quorem+0x42>
 800eec6:	9b00      	ldr	r3, [sp, #0]
 800eec8:	58eb      	ldr	r3, [r5, r3]
 800eeca:	b92b      	cbnz	r3, 800eed8 <quorem+0x96>
 800eecc:	9b01      	ldr	r3, [sp, #4]
 800eece:	3b04      	subs	r3, #4
 800eed0:	429d      	cmp	r5, r3
 800eed2:	461a      	mov	r2, r3
 800eed4:	d32f      	bcc.n	800ef36 <quorem+0xf4>
 800eed6:	613c      	str	r4, [r7, #16]
 800eed8:	4638      	mov	r0, r7
 800eeda:	f001 f97b 	bl	80101d4 <__mcmp>
 800eede:	2800      	cmp	r0, #0
 800eee0:	db25      	blt.n	800ef2e <quorem+0xec>
 800eee2:	4629      	mov	r1, r5
 800eee4:	2000      	movs	r0, #0
 800eee6:	f858 2b04 	ldr.w	r2, [r8], #4
 800eeea:	f8d1 c000 	ldr.w	ip, [r1]
 800eeee:	fa1f fe82 	uxth.w	lr, r2
 800eef2:	fa1f f38c 	uxth.w	r3, ip
 800eef6:	eba3 030e 	sub.w	r3, r3, lr
 800eefa:	4403      	add	r3, r0
 800eefc:	0c12      	lsrs	r2, r2, #16
 800eefe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ef02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef0c:	45c1      	cmp	r9, r8
 800ef0e:	f841 3b04 	str.w	r3, [r1], #4
 800ef12:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef16:	d2e6      	bcs.n	800eee6 <quorem+0xa4>
 800ef18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef20:	b922      	cbnz	r2, 800ef2c <quorem+0xea>
 800ef22:	3b04      	subs	r3, #4
 800ef24:	429d      	cmp	r5, r3
 800ef26:	461a      	mov	r2, r3
 800ef28:	d30b      	bcc.n	800ef42 <quorem+0x100>
 800ef2a:	613c      	str	r4, [r7, #16]
 800ef2c:	3601      	adds	r6, #1
 800ef2e:	4630      	mov	r0, r6
 800ef30:	b003      	add	sp, #12
 800ef32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef36:	6812      	ldr	r2, [r2, #0]
 800ef38:	3b04      	subs	r3, #4
 800ef3a:	2a00      	cmp	r2, #0
 800ef3c:	d1cb      	bne.n	800eed6 <quorem+0x94>
 800ef3e:	3c01      	subs	r4, #1
 800ef40:	e7c6      	b.n	800eed0 <quorem+0x8e>
 800ef42:	6812      	ldr	r2, [r2, #0]
 800ef44:	3b04      	subs	r3, #4
 800ef46:	2a00      	cmp	r2, #0
 800ef48:	d1ef      	bne.n	800ef2a <quorem+0xe8>
 800ef4a:	3c01      	subs	r4, #1
 800ef4c:	e7ea      	b.n	800ef24 <quorem+0xe2>
 800ef4e:	2000      	movs	r0, #0
 800ef50:	e7ee      	b.n	800ef30 <quorem+0xee>
 800ef52:	0000      	movs	r0, r0
 800ef54:	0000      	movs	r0, r0
	...

0800ef58 <_dtoa_r>:
 800ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5c:	69c7      	ldr	r7, [r0, #28]
 800ef5e:	b099      	sub	sp, #100	@ 0x64
 800ef60:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ef64:	ec55 4b10 	vmov	r4, r5, d0
 800ef68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ef6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef6c:	4683      	mov	fp, r0
 800ef6e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef72:	b97f      	cbnz	r7, 800ef94 <_dtoa_r+0x3c>
 800ef74:	2010      	movs	r0, #16
 800ef76:	f000 fdfd 	bl	800fb74 <malloc>
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ef80:	b920      	cbnz	r0, 800ef8c <_dtoa_r+0x34>
 800ef82:	4ba7      	ldr	r3, [pc, #668]	@ (800f220 <_dtoa_r+0x2c8>)
 800ef84:	21ef      	movs	r1, #239	@ 0xef
 800ef86:	48a7      	ldr	r0, [pc, #668]	@ (800f224 <_dtoa_r+0x2cc>)
 800ef88:	f001 fc5a 	bl	8010840 <__assert_func>
 800ef8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ef90:	6007      	str	r7, [r0, #0]
 800ef92:	60c7      	str	r7, [r0, #12]
 800ef94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ef98:	6819      	ldr	r1, [r3, #0]
 800ef9a:	b159      	cbz	r1, 800efb4 <_dtoa_r+0x5c>
 800ef9c:	685a      	ldr	r2, [r3, #4]
 800ef9e:	604a      	str	r2, [r1, #4]
 800efa0:	2301      	movs	r3, #1
 800efa2:	4093      	lsls	r3, r2
 800efa4:	608b      	str	r3, [r1, #8]
 800efa6:	4658      	mov	r0, fp
 800efa8:	f000 feda 	bl	800fd60 <_Bfree>
 800efac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800efb0:	2200      	movs	r2, #0
 800efb2:	601a      	str	r2, [r3, #0]
 800efb4:	1e2b      	subs	r3, r5, #0
 800efb6:	bfb9      	ittee	lt
 800efb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800efbc:	9303      	strlt	r3, [sp, #12]
 800efbe:	2300      	movge	r3, #0
 800efc0:	6033      	strge	r3, [r6, #0]
 800efc2:	9f03      	ldr	r7, [sp, #12]
 800efc4:	4b98      	ldr	r3, [pc, #608]	@ (800f228 <_dtoa_r+0x2d0>)
 800efc6:	bfbc      	itt	lt
 800efc8:	2201      	movlt	r2, #1
 800efca:	6032      	strlt	r2, [r6, #0]
 800efcc:	43bb      	bics	r3, r7
 800efce:	d112      	bne.n	800eff6 <_dtoa_r+0x9e>
 800efd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800efd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800efd6:	6013      	str	r3, [r2, #0]
 800efd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800efdc:	4323      	orrs	r3, r4
 800efde:	f000 854d 	beq.w	800fa7c <_dtoa_r+0xb24>
 800efe2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800efe4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f23c <_dtoa_r+0x2e4>
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f000 854f 	beq.w	800fa8c <_dtoa_r+0xb34>
 800efee:	f10a 0303 	add.w	r3, sl, #3
 800eff2:	f000 bd49 	b.w	800fa88 <_dtoa_r+0xb30>
 800eff6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800effa:	2200      	movs	r2, #0
 800effc:	ec51 0b17 	vmov	r0, r1, d7
 800f000:	2300      	movs	r3, #0
 800f002:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f006:	f7f1 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f00a:	4680      	mov	r8, r0
 800f00c:	b158      	cbz	r0, 800f026 <_dtoa_r+0xce>
 800f00e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f010:	2301      	movs	r3, #1
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f016:	b113      	cbz	r3, 800f01e <_dtoa_r+0xc6>
 800f018:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f01a:	4b84      	ldr	r3, [pc, #528]	@ (800f22c <_dtoa_r+0x2d4>)
 800f01c:	6013      	str	r3, [r2, #0]
 800f01e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f240 <_dtoa_r+0x2e8>
 800f022:	f000 bd33 	b.w	800fa8c <_dtoa_r+0xb34>
 800f026:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f02a:	aa16      	add	r2, sp, #88	@ 0x58
 800f02c:	a917      	add	r1, sp, #92	@ 0x5c
 800f02e:	4658      	mov	r0, fp
 800f030:	f001 f980 	bl	8010334 <__d2b>
 800f034:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f038:	4681      	mov	r9, r0
 800f03a:	2e00      	cmp	r6, #0
 800f03c:	d077      	beq.n	800f12e <_dtoa_r+0x1d6>
 800f03e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f040:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f04c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f050:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f054:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f058:	4619      	mov	r1, r3
 800f05a:	2200      	movs	r2, #0
 800f05c:	4b74      	ldr	r3, [pc, #464]	@ (800f230 <_dtoa_r+0x2d8>)
 800f05e:	f7f1 f913 	bl	8000288 <__aeabi_dsub>
 800f062:	a369      	add	r3, pc, #420	@ (adr r3, 800f208 <_dtoa_r+0x2b0>)
 800f064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f068:	f7f1 fac6 	bl	80005f8 <__aeabi_dmul>
 800f06c:	a368      	add	r3, pc, #416	@ (adr r3, 800f210 <_dtoa_r+0x2b8>)
 800f06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f072:	f7f1 f90b 	bl	800028c <__adddf3>
 800f076:	4604      	mov	r4, r0
 800f078:	4630      	mov	r0, r6
 800f07a:	460d      	mov	r5, r1
 800f07c:	f7f1 fa52 	bl	8000524 <__aeabi_i2d>
 800f080:	a365      	add	r3, pc, #404	@ (adr r3, 800f218 <_dtoa_r+0x2c0>)
 800f082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f086:	f7f1 fab7 	bl	80005f8 <__aeabi_dmul>
 800f08a:	4602      	mov	r2, r0
 800f08c:	460b      	mov	r3, r1
 800f08e:	4620      	mov	r0, r4
 800f090:	4629      	mov	r1, r5
 800f092:	f7f1 f8fb 	bl	800028c <__adddf3>
 800f096:	4604      	mov	r4, r0
 800f098:	460d      	mov	r5, r1
 800f09a:	f7f1 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800f09e:	2200      	movs	r2, #0
 800f0a0:	4607      	mov	r7, r0
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	4629      	mov	r1, r5
 800f0a8:	f7f1 fd18 	bl	8000adc <__aeabi_dcmplt>
 800f0ac:	b140      	cbz	r0, 800f0c0 <_dtoa_r+0x168>
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	f7f1 fa38 	bl	8000524 <__aeabi_i2d>
 800f0b4:	4622      	mov	r2, r4
 800f0b6:	462b      	mov	r3, r5
 800f0b8:	f7f1 fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0bc:	b900      	cbnz	r0, 800f0c0 <_dtoa_r+0x168>
 800f0be:	3f01      	subs	r7, #1
 800f0c0:	2f16      	cmp	r7, #22
 800f0c2:	d851      	bhi.n	800f168 <_dtoa_r+0x210>
 800f0c4:	4b5b      	ldr	r3, [pc, #364]	@ (800f234 <_dtoa_r+0x2dc>)
 800f0c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0d2:	f7f1 fd03 	bl	8000adc <__aeabi_dcmplt>
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d048      	beq.n	800f16c <_dtoa_r+0x214>
 800f0da:	3f01      	subs	r7, #1
 800f0dc:	2300      	movs	r3, #0
 800f0de:	9312      	str	r3, [sp, #72]	@ 0x48
 800f0e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f0e2:	1b9b      	subs	r3, r3, r6
 800f0e4:	1e5a      	subs	r2, r3, #1
 800f0e6:	bf44      	itt	mi
 800f0e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f0ec:	2300      	movmi	r3, #0
 800f0ee:	9208      	str	r2, [sp, #32]
 800f0f0:	bf54      	ite	pl
 800f0f2:	f04f 0800 	movpl.w	r8, #0
 800f0f6:	9308      	strmi	r3, [sp, #32]
 800f0f8:	2f00      	cmp	r7, #0
 800f0fa:	db39      	blt.n	800f170 <_dtoa_r+0x218>
 800f0fc:	9b08      	ldr	r3, [sp, #32]
 800f0fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f100:	443b      	add	r3, r7
 800f102:	9308      	str	r3, [sp, #32]
 800f104:	2300      	movs	r3, #0
 800f106:	930a      	str	r3, [sp, #40]	@ 0x28
 800f108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f10a:	2b09      	cmp	r3, #9
 800f10c:	d864      	bhi.n	800f1d8 <_dtoa_r+0x280>
 800f10e:	2b05      	cmp	r3, #5
 800f110:	bfc4      	itt	gt
 800f112:	3b04      	subgt	r3, #4
 800f114:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f118:	f1a3 0302 	sub.w	r3, r3, #2
 800f11c:	bfcc      	ite	gt
 800f11e:	2400      	movgt	r4, #0
 800f120:	2401      	movle	r4, #1
 800f122:	2b03      	cmp	r3, #3
 800f124:	d863      	bhi.n	800f1ee <_dtoa_r+0x296>
 800f126:	e8df f003 	tbb	[pc, r3]
 800f12a:	372a      	.short	0x372a
 800f12c:	5535      	.short	0x5535
 800f12e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f132:	441e      	add	r6, r3
 800f134:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f138:	2b20      	cmp	r3, #32
 800f13a:	bfc1      	itttt	gt
 800f13c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f140:	409f      	lslgt	r7, r3
 800f142:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f146:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f14a:	bfd6      	itet	le
 800f14c:	f1c3 0320 	rsble	r3, r3, #32
 800f150:	ea47 0003 	orrgt.w	r0, r7, r3
 800f154:	fa04 f003 	lslle.w	r0, r4, r3
 800f158:	f7f1 f9d4 	bl	8000504 <__aeabi_ui2d>
 800f15c:	2201      	movs	r2, #1
 800f15e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f162:	3e01      	subs	r6, #1
 800f164:	9214      	str	r2, [sp, #80]	@ 0x50
 800f166:	e777      	b.n	800f058 <_dtoa_r+0x100>
 800f168:	2301      	movs	r3, #1
 800f16a:	e7b8      	b.n	800f0de <_dtoa_r+0x186>
 800f16c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f16e:	e7b7      	b.n	800f0e0 <_dtoa_r+0x188>
 800f170:	427b      	negs	r3, r7
 800f172:	930a      	str	r3, [sp, #40]	@ 0x28
 800f174:	2300      	movs	r3, #0
 800f176:	eba8 0807 	sub.w	r8, r8, r7
 800f17a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f17c:	e7c4      	b.n	800f108 <_dtoa_r+0x1b0>
 800f17e:	2300      	movs	r3, #0
 800f180:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f184:	2b00      	cmp	r3, #0
 800f186:	dc35      	bgt.n	800f1f4 <_dtoa_r+0x29c>
 800f188:	2301      	movs	r3, #1
 800f18a:	9300      	str	r3, [sp, #0]
 800f18c:	9307      	str	r3, [sp, #28]
 800f18e:	461a      	mov	r2, r3
 800f190:	920e      	str	r2, [sp, #56]	@ 0x38
 800f192:	e00b      	b.n	800f1ac <_dtoa_r+0x254>
 800f194:	2301      	movs	r3, #1
 800f196:	e7f3      	b.n	800f180 <_dtoa_r+0x228>
 800f198:	2300      	movs	r3, #0
 800f19a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f19c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f19e:	18fb      	adds	r3, r7, r3
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	9307      	str	r3, [sp, #28]
 800f1a8:	bfb8      	it	lt
 800f1aa:	2301      	movlt	r3, #1
 800f1ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	2204      	movs	r2, #4
 800f1b4:	f102 0514 	add.w	r5, r2, #20
 800f1b8:	429d      	cmp	r5, r3
 800f1ba:	d91f      	bls.n	800f1fc <_dtoa_r+0x2a4>
 800f1bc:	6041      	str	r1, [r0, #4]
 800f1be:	4658      	mov	r0, fp
 800f1c0:	f000 fd8e 	bl	800fce0 <_Balloc>
 800f1c4:	4682      	mov	sl, r0
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d13c      	bne.n	800f244 <_dtoa_r+0x2ec>
 800f1ca:	4b1b      	ldr	r3, [pc, #108]	@ (800f238 <_dtoa_r+0x2e0>)
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800f1d2:	e6d8      	b.n	800ef86 <_dtoa_r+0x2e>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e7e0      	b.n	800f19a <_dtoa_r+0x242>
 800f1d8:	2401      	movs	r4, #1
 800f1da:	2300      	movs	r3, #0
 800f1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	9307      	str	r3, [sp, #28]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	2312      	movs	r3, #18
 800f1ec:	e7d0      	b.n	800f190 <_dtoa_r+0x238>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1f2:	e7f5      	b.n	800f1e0 <_dtoa_r+0x288>
 800f1f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	9307      	str	r3, [sp, #28]
 800f1fa:	e7d7      	b.n	800f1ac <_dtoa_r+0x254>
 800f1fc:	3101      	adds	r1, #1
 800f1fe:	0052      	lsls	r2, r2, #1
 800f200:	e7d8      	b.n	800f1b4 <_dtoa_r+0x25c>
 800f202:	bf00      	nop
 800f204:	f3af 8000 	nop.w
 800f208:	636f4361 	.word	0x636f4361
 800f20c:	3fd287a7 	.word	0x3fd287a7
 800f210:	8b60c8b3 	.word	0x8b60c8b3
 800f214:	3fc68a28 	.word	0x3fc68a28
 800f218:	509f79fb 	.word	0x509f79fb
 800f21c:	3fd34413 	.word	0x3fd34413
 800f220:	08011ac5 	.word	0x08011ac5
 800f224:	08011adc 	.word	0x08011adc
 800f228:	7ff00000 	.word	0x7ff00000
 800f22c:	08011a95 	.word	0x08011a95
 800f230:	3ff80000 	.word	0x3ff80000
 800f234:	08011bd8 	.word	0x08011bd8
 800f238:	08011b34 	.word	0x08011b34
 800f23c:	08011ac1 	.word	0x08011ac1
 800f240:	08011a94 	.word	0x08011a94
 800f244:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f248:	6018      	str	r0, [r3, #0]
 800f24a:	9b07      	ldr	r3, [sp, #28]
 800f24c:	2b0e      	cmp	r3, #14
 800f24e:	f200 80a4 	bhi.w	800f39a <_dtoa_r+0x442>
 800f252:	2c00      	cmp	r4, #0
 800f254:	f000 80a1 	beq.w	800f39a <_dtoa_r+0x442>
 800f258:	2f00      	cmp	r7, #0
 800f25a:	dd33      	ble.n	800f2c4 <_dtoa_r+0x36c>
 800f25c:	4bad      	ldr	r3, [pc, #692]	@ (800f514 <_dtoa_r+0x5bc>)
 800f25e:	f007 020f 	and.w	r2, r7, #15
 800f262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f266:	ed93 7b00 	vldr	d7, [r3]
 800f26a:	05f8      	lsls	r0, r7, #23
 800f26c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f270:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f274:	d516      	bpl.n	800f2a4 <_dtoa_r+0x34c>
 800f276:	4ba8      	ldr	r3, [pc, #672]	@ (800f518 <_dtoa_r+0x5c0>)
 800f278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f27c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f280:	f7f1 fae4 	bl	800084c <__aeabi_ddiv>
 800f284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f288:	f004 040f 	and.w	r4, r4, #15
 800f28c:	2603      	movs	r6, #3
 800f28e:	4da2      	ldr	r5, [pc, #648]	@ (800f518 <_dtoa_r+0x5c0>)
 800f290:	b954      	cbnz	r4, 800f2a8 <_dtoa_r+0x350>
 800f292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f29a:	f7f1 fad7 	bl	800084c <__aeabi_ddiv>
 800f29e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2a2:	e028      	b.n	800f2f6 <_dtoa_r+0x39e>
 800f2a4:	2602      	movs	r6, #2
 800f2a6:	e7f2      	b.n	800f28e <_dtoa_r+0x336>
 800f2a8:	07e1      	lsls	r1, r4, #31
 800f2aa:	d508      	bpl.n	800f2be <_dtoa_r+0x366>
 800f2ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f2b4:	f7f1 f9a0 	bl	80005f8 <__aeabi_dmul>
 800f2b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f2bc:	3601      	adds	r6, #1
 800f2be:	1064      	asrs	r4, r4, #1
 800f2c0:	3508      	adds	r5, #8
 800f2c2:	e7e5      	b.n	800f290 <_dtoa_r+0x338>
 800f2c4:	f000 80d2 	beq.w	800f46c <_dtoa_r+0x514>
 800f2c8:	427c      	negs	r4, r7
 800f2ca:	4b92      	ldr	r3, [pc, #584]	@ (800f514 <_dtoa_r+0x5bc>)
 800f2cc:	4d92      	ldr	r5, [pc, #584]	@ (800f518 <_dtoa_r+0x5c0>)
 800f2ce:	f004 020f 	and.w	r2, r4, #15
 800f2d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2de:	f7f1 f98b 	bl	80005f8 <__aeabi_dmul>
 800f2e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2e6:	1124      	asrs	r4, r4, #4
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	2602      	movs	r6, #2
 800f2ec:	2c00      	cmp	r4, #0
 800f2ee:	f040 80b2 	bne.w	800f456 <_dtoa_r+0x4fe>
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1d3      	bne.n	800f29e <_dtoa_r+0x346>
 800f2f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f2f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f000 80b7 	beq.w	800f470 <_dtoa_r+0x518>
 800f302:	4b86      	ldr	r3, [pc, #536]	@ (800f51c <_dtoa_r+0x5c4>)
 800f304:	2200      	movs	r2, #0
 800f306:	4620      	mov	r0, r4
 800f308:	4629      	mov	r1, r5
 800f30a:	f7f1 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800f30e:	2800      	cmp	r0, #0
 800f310:	f000 80ae 	beq.w	800f470 <_dtoa_r+0x518>
 800f314:	9b07      	ldr	r3, [sp, #28]
 800f316:	2b00      	cmp	r3, #0
 800f318:	f000 80aa 	beq.w	800f470 <_dtoa_r+0x518>
 800f31c:	9b00      	ldr	r3, [sp, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	dd37      	ble.n	800f392 <_dtoa_r+0x43a>
 800f322:	1e7b      	subs	r3, r7, #1
 800f324:	9304      	str	r3, [sp, #16]
 800f326:	4620      	mov	r0, r4
 800f328:	4b7d      	ldr	r3, [pc, #500]	@ (800f520 <_dtoa_r+0x5c8>)
 800f32a:	2200      	movs	r2, #0
 800f32c:	4629      	mov	r1, r5
 800f32e:	f7f1 f963 	bl	80005f8 <__aeabi_dmul>
 800f332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f336:	9c00      	ldr	r4, [sp, #0]
 800f338:	3601      	adds	r6, #1
 800f33a:	4630      	mov	r0, r6
 800f33c:	f7f1 f8f2 	bl	8000524 <__aeabi_i2d>
 800f340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f344:	f7f1 f958 	bl	80005f8 <__aeabi_dmul>
 800f348:	4b76      	ldr	r3, [pc, #472]	@ (800f524 <_dtoa_r+0x5cc>)
 800f34a:	2200      	movs	r2, #0
 800f34c:	f7f0 ff9e 	bl	800028c <__adddf3>
 800f350:	4605      	mov	r5, r0
 800f352:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f356:	2c00      	cmp	r4, #0
 800f358:	f040 808d 	bne.w	800f476 <_dtoa_r+0x51e>
 800f35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f360:	4b71      	ldr	r3, [pc, #452]	@ (800f528 <_dtoa_r+0x5d0>)
 800f362:	2200      	movs	r2, #0
 800f364:	f7f0 ff90 	bl	8000288 <__aeabi_dsub>
 800f368:	4602      	mov	r2, r0
 800f36a:	460b      	mov	r3, r1
 800f36c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f370:	462a      	mov	r2, r5
 800f372:	4633      	mov	r3, r6
 800f374:	f7f1 fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 800f378:	2800      	cmp	r0, #0
 800f37a:	f040 828b 	bne.w	800f894 <_dtoa_r+0x93c>
 800f37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f382:	462a      	mov	r2, r5
 800f384:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f388:	f7f1 fba8 	bl	8000adc <__aeabi_dcmplt>
 800f38c:	2800      	cmp	r0, #0
 800f38e:	f040 8128 	bne.w	800f5e2 <_dtoa_r+0x68a>
 800f392:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f396:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f39a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f2c0 815a 	blt.w	800f656 <_dtoa_r+0x6fe>
 800f3a2:	2f0e      	cmp	r7, #14
 800f3a4:	f300 8157 	bgt.w	800f656 <_dtoa_r+0x6fe>
 800f3a8:	4b5a      	ldr	r3, [pc, #360]	@ (800f514 <_dtoa_r+0x5bc>)
 800f3aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f3ae:	ed93 7b00 	vldr	d7, [r3]
 800f3b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	ed8d 7b00 	vstr	d7, [sp]
 800f3ba:	da03      	bge.n	800f3c4 <_dtoa_r+0x46c>
 800f3bc:	9b07      	ldr	r3, [sp, #28]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f340 8101 	ble.w	800f5c6 <_dtoa_r+0x66e>
 800f3c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f3c8:	4656      	mov	r6, sl
 800f3ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	4629      	mov	r1, r5
 800f3d2:	f7f1 fa3b 	bl	800084c <__aeabi_ddiv>
 800f3d6:	f7f1 fbbf 	bl	8000b58 <__aeabi_d2iz>
 800f3da:	4680      	mov	r8, r0
 800f3dc:	f7f1 f8a2 	bl	8000524 <__aeabi_i2d>
 800f3e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3e4:	f7f1 f908 	bl	80005f8 <__aeabi_dmul>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f3f4:	f7f0 ff48 	bl	8000288 <__aeabi_dsub>
 800f3f8:	f806 4b01 	strb.w	r4, [r6], #1
 800f3fc:	9d07      	ldr	r5, [sp, #28]
 800f3fe:	eba6 040a 	sub.w	r4, r6, sl
 800f402:	42a5      	cmp	r5, r4
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	f040 8117 	bne.w	800f63a <_dtoa_r+0x6e2>
 800f40c:	f7f0 ff3e 	bl	800028c <__adddf3>
 800f410:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f414:	4604      	mov	r4, r0
 800f416:	460d      	mov	r5, r1
 800f418:	f7f1 fb7e 	bl	8000b18 <__aeabi_dcmpgt>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	f040 80f9 	bne.w	800f614 <_dtoa_r+0x6bc>
 800f422:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f426:	4620      	mov	r0, r4
 800f428:	4629      	mov	r1, r5
 800f42a:	f7f1 fb4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f42e:	b118      	cbz	r0, 800f438 <_dtoa_r+0x4e0>
 800f430:	f018 0f01 	tst.w	r8, #1
 800f434:	f040 80ee 	bne.w	800f614 <_dtoa_r+0x6bc>
 800f438:	4649      	mov	r1, r9
 800f43a:	4658      	mov	r0, fp
 800f43c:	f000 fc90 	bl	800fd60 <_Bfree>
 800f440:	2300      	movs	r3, #0
 800f442:	7033      	strb	r3, [r6, #0]
 800f444:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f446:	3701      	adds	r7, #1
 800f448:	601f      	str	r7, [r3, #0]
 800f44a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f000 831d 	beq.w	800fa8c <_dtoa_r+0xb34>
 800f452:	601e      	str	r6, [r3, #0]
 800f454:	e31a      	b.n	800fa8c <_dtoa_r+0xb34>
 800f456:	07e2      	lsls	r2, r4, #31
 800f458:	d505      	bpl.n	800f466 <_dtoa_r+0x50e>
 800f45a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f45e:	f7f1 f8cb 	bl	80005f8 <__aeabi_dmul>
 800f462:	3601      	adds	r6, #1
 800f464:	2301      	movs	r3, #1
 800f466:	1064      	asrs	r4, r4, #1
 800f468:	3508      	adds	r5, #8
 800f46a:	e73f      	b.n	800f2ec <_dtoa_r+0x394>
 800f46c:	2602      	movs	r6, #2
 800f46e:	e742      	b.n	800f2f6 <_dtoa_r+0x39e>
 800f470:	9c07      	ldr	r4, [sp, #28]
 800f472:	9704      	str	r7, [sp, #16]
 800f474:	e761      	b.n	800f33a <_dtoa_r+0x3e2>
 800f476:	4b27      	ldr	r3, [pc, #156]	@ (800f514 <_dtoa_r+0x5bc>)
 800f478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f47a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f47e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f482:	4454      	add	r4, sl
 800f484:	2900      	cmp	r1, #0
 800f486:	d053      	beq.n	800f530 <_dtoa_r+0x5d8>
 800f488:	4928      	ldr	r1, [pc, #160]	@ (800f52c <_dtoa_r+0x5d4>)
 800f48a:	2000      	movs	r0, #0
 800f48c:	f7f1 f9de 	bl	800084c <__aeabi_ddiv>
 800f490:	4633      	mov	r3, r6
 800f492:	462a      	mov	r2, r5
 800f494:	f7f0 fef8 	bl	8000288 <__aeabi_dsub>
 800f498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f49c:	4656      	mov	r6, sl
 800f49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4a2:	f7f1 fb59 	bl	8000b58 <__aeabi_d2iz>
 800f4a6:	4605      	mov	r5, r0
 800f4a8:	f7f1 f83c 	bl	8000524 <__aeabi_i2d>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4b4:	f7f0 fee8 	bl	8000288 <__aeabi_dsub>
 800f4b8:	3530      	adds	r5, #48	@ 0x30
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4c2:	f806 5b01 	strb.w	r5, [r6], #1
 800f4c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f4ca:	f7f1 fb07 	bl	8000adc <__aeabi_dcmplt>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d171      	bne.n	800f5b6 <_dtoa_r+0x65e>
 800f4d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4d6:	4911      	ldr	r1, [pc, #68]	@ (800f51c <_dtoa_r+0x5c4>)
 800f4d8:	2000      	movs	r0, #0
 800f4da:	f7f0 fed5 	bl	8000288 <__aeabi_dsub>
 800f4de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f4e2:	f7f1 fafb 	bl	8000adc <__aeabi_dcmplt>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	f040 8095 	bne.w	800f616 <_dtoa_r+0x6be>
 800f4ec:	42a6      	cmp	r6, r4
 800f4ee:	f43f af50 	beq.w	800f392 <_dtoa_r+0x43a>
 800f4f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800f520 <_dtoa_r+0x5c8>)
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f7f1 f87d 	bl	80005f8 <__aeabi_dmul>
 800f4fe:	4b08      	ldr	r3, [pc, #32]	@ (800f520 <_dtoa_r+0x5c8>)
 800f500:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f504:	2200      	movs	r2, #0
 800f506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f50a:	f7f1 f875 	bl	80005f8 <__aeabi_dmul>
 800f50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f512:	e7c4      	b.n	800f49e <_dtoa_r+0x546>
 800f514:	08011bd8 	.word	0x08011bd8
 800f518:	08011bb0 	.word	0x08011bb0
 800f51c:	3ff00000 	.word	0x3ff00000
 800f520:	40240000 	.word	0x40240000
 800f524:	401c0000 	.word	0x401c0000
 800f528:	40140000 	.word	0x40140000
 800f52c:	3fe00000 	.word	0x3fe00000
 800f530:	4631      	mov	r1, r6
 800f532:	4628      	mov	r0, r5
 800f534:	f7f1 f860 	bl	80005f8 <__aeabi_dmul>
 800f538:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f53c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f53e:	4656      	mov	r6, sl
 800f540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f544:	f7f1 fb08 	bl	8000b58 <__aeabi_d2iz>
 800f548:	4605      	mov	r5, r0
 800f54a:	f7f0 ffeb 	bl	8000524 <__aeabi_i2d>
 800f54e:	4602      	mov	r2, r0
 800f550:	460b      	mov	r3, r1
 800f552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f556:	f7f0 fe97 	bl	8000288 <__aeabi_dsub>
 800f55a:	3530      	adds	r5, #48	@ 0x30
 800f55c:	f806 5b01 	strb.w	r5, [r6], #1
 800f560:	4602      	mov	r2, r0
 800f562:	460b      	mov	r3, r1
 800f564:	42a6      	cmp	r6, r4
 800f566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f56a:	f04f 0200 	mov.w	r2, #0
 800f56e:	d124      	bne.n	800f5ba <_dtoa_r+0x662>
 800f570:	4bac      	ldr	r3, [pc, #688]	@ (800f824 <_dtoa_r+0x8cc>)
 800f572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f576:	f7f0 fe89 	bl	800028c <__adddf3>
 800f57a:	4602      	mov	r2, r0
 800f57c:	460b      	mov	r3, r1
 800f57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f582:	f7f1 fac9 	bl	8000b18 <__aeabi_dcmpgt>
 800f586:	2800      	cmp	r0, #0
 800f588:	d145      	bne.n	800f616 <_dtoa_r+0x6be>
 800f58a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f58e:	49a5      	ldr	r1, [pc, #660]	@ (800f824 <_dtoa_r+0x8cc>)
 800f590:	2000      	movs	r0, #0
 800f592:	f7f0 fe79 	bl	8000288 <__aeabi_dsub>
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f59e:	f7f1 fa9d 	bl	8000adc <__aeabi_dcmplt>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	f43f aef5 	beq.w	800f392 <_dtoa_r+0x43a>
 800f5a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f5aa:	1e73      	subs	r3, r6, #1
 800f5ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800f5ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f5b2:	2b30      	cmp	r3, #48	@ 0x30
 800f5b4:	d0f8      	beq.n	800f5a8 <_dtoa_r+0x650>
 800f5b6:	9f04      	ldr	r7, [sp, #16]
 800f5b8:	e73e      	b.n	800f438 <_dtoa_r+0x4e0>
 800f5ba:	4b9b      	ldr	r3, [pc, #620]	@ (800f828 <_dtoa_r+0x8d0>)
 800f5bc:	f7f1 f81c 	bl	80005f8 <__aeabi_dmul>
 800f5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5c4:	e7bc      	b.n	800f540 <_dtoa_r+0x5e8>
 800f5c6:	d10c      	bne.n	800f5e2 <_dtoa_r+0x68a>
 800f5c8:	4b98      	ldr	r3, [pc, #608]	@ (800f82c <_dtoa_r+0x8d4>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5d0:	f7f1 f812 	bl	80005f8 <__aeabi_dmul>
 800f5d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5d8:	f7f1 fa94 	bl	8000b04 <__aeabi_dcmpge>
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	f000 8157 	beq.w	800f890 <_dtoa_r+0x938>
 800f5e2:	2400      	movs	r4, #0
 800f5e4:	4625      	mov	r5, r4
 800f5e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5e8:	43db      	mvns	r3, r3
 800f5ea:	9304      	str	r3, [sp, #16]
 800f5ec:	4656      	mov	r6, sl
 800f5ee:	2700      	movs	r7, #0
 800f5f0:	4621      	mov	r1, r4
 800f5f2:	4658      	mov	r0, fp
 800f5f4:	f000 fbb4 	bl	800fd60 <_Bfree>
 800f5f8:	2d00      	cmp	r5, #0
 800f5fa:	d0dc      	beq.n	800f5b6 <_dtoa_r+0x65e>
 800f5fc:	b12f      	cbz	r7, 800f60a <_dtoa_r+0x6b2>
 800f5fe:	42af      	cmp	r7, r5
 800f600:	d003      	beq.n	800f60a <_dtoa_r+0x6b2>
 800f602:	4639      	mov	r1, r7
 800f604:	4658      	mov	r0, fp
 800f606:	f000 fbab 	bl	800fd60 <_Bfree>
 800f60a:	4629      	mov	r1, r5
 800f60c:	4658      	mov	r0, fp
 800f60e:	f000 fba7 	bl	800fd60 <_Bfree>
 800f612:	e7d0      	b.n	800f5b6 <_dtoa_r+0x65e>
 800f614:	9704      	str	r7, [sp, #16]
 800f616:	4633      	mov	r3, r6
 800f618:	461e      	mov	r6, r3
 800f61a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f61e:	2a39      	cmp	r2, #57	@ 0x39
 800f620:	d107      	bne.n	800f632 <_dtoa_r+0x6da>
 800f622:	459a      	cmp	sl, r3
 800f624:	d1f8      	bne.n	800f618 <_dtoa_r+0x6c0>
 800f626:	9a04      	ldr	r2, [sp, #16]
 800f628:	3201      	adds	r2, #1
 800f62a:	9204      	str	r2, [sp, #16]
 800f62c:	2230      	movs	r2, #48	@ 0x30
 800f62e:	f88a 2000 	strb.w	r2, [sl]
 800f632:	781a      	ldrb	r2, [r3, #0]
 800f634:	3201      	adds	r2, #1
 800f636:	701a      	strb	r2, [r3, #0]
 800f638:	e7bd      	b.n	800f5b6 <_dtoa_r+0x65e>
 800f63a:	4b7b      	ldr	r3, [pc, #492]	@ (800f828 <_dtoa_r+0x8d0>)
 800f63c:	2200      	movs	r2, #0
 800f63e:	f7f0 ffdb 	bl	80005f8 <__aeabi_dmul>
 800f642:	2200      	movs	r2, #0
 800f644:	2300      	movs	r3, #0
 800f646:	4604      	mov	r4, r0
 800f648:	460d      	mov	r5, r1
 800f64a:	f7f1 fa3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f64e:	2800      	cmp	r0, #0
 800f650:	f43f aebb 	beq.w	800f3ca <_dtoa_r+0x472>
 800f654:	e6f0      	b.n	800f438 <_dtoa_r+0x4e0>
 800f656:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f658:	2a00      	cmp	r2, #0
 800f65a:	f000 80db 	beq.w	800f814 <_dtoa_r+0x8bc>
 800f65e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f660:	2a01      	cmp	r2, #1
 800f662:	f300 80bf 	bgt.w	800f7e4 <_dtoa_r+0x88c>
 800f666:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f668:	2a00      	cmp	r2, #0
 800f66a:	f000 80b7 	beq.w	800f7dc <_dtoa_r+0x884>
 800f66e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f672:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f674:	4646      	mov	r6, r8
 800f676:	9a08      	ldr	r2, [sp, #32]
 800f678:	2101      	movs	r1, #1
 800f67a:	441a      	add	r2, r3
 800f67c:	4658      	mov	r0, fp
 800f67e:	4498      	add	r8, r3
 800f680:	9208      	str	r2, [sp, #32]
 800f682:	f000 fc21 	bl	800fec8 <__i2b>
 800f686:	4605      	mov	r5, r0
 800f688:	b15e      	cbz	r6, 800f6a2 <_dtoa_r+0x74a>
 800f68a:	9b08      	ldr	r3, [sp, #32]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	dd08      	ble.n	800f6a2 <_dtoa_r+0x74a>
 800f690:	42b3      	cmp	r3, r6
 800f692:	9a08      	ldr	r2, [sp, #32]
 800f694:	bfa8      	it	ge
 800f696:	4633      	movge	r3, r6
 800f698:	eba8 0803 	sub.w	r8, r8, r3
 800f69c:	1af6      	subs	r6, r6, r3
 800f69e:	1ad3      	subs	r3, r2, r3
 800f6a0:	9308      	str	r3, [sp, #32]
 800f6a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6a4:	b1f3      	cbz	r3, 800f6e4 <_dtoa_r+0x78c>
 800f6a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	f000 80b7 	beq.w	800f81c <_dtoa_r+0x8c4>
 800f6ae:	b18c      	cbz	r4, 800f6d4 <_dtoa_r+0x77c>
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	4658      	mov	r0, fp
 800f6b6:	f000 fcc7 	bl	8010048 <__pow5mult>
 800f6ba:	464a      	mov	r2, r9
 800f6bc:	4601      	mov	r1, r0
 800f6be:	4605      	mov	r5, r0
 800f6c0:	4658      	mov	r0, fp
 800f6c2:	f000 fc17 	bl	800fef4 <__multiply>
 800f6c6:	4649      	mov	r1, r9
 800f6c8:	9004      	str	r0, [sp, #16]
 800f6ca:	4658      	mov	r0, fp
 800f6cc:	f000 fb48 	bl	800fd60 <_Bfree>
 800f6d0:	9b04      	ldr	r3, [sp, #16]
 800f6d2:	4699      	mov	r9, r3
 800f6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6d6:	1b1a      	subs	r2, r3, r4
 800f6d8:	d004      	beq.n	800f6e4 <_dtoa_r+0x78c>
 800f6da:	4649      	mov	r1, r9
 800f6dc:	4658      	mov	r0, fp
 800f6de:	f000 fcb3 	bl	8010048 <__pow5mult>
 800f6e2:	4681      	mov	r9, r0
 800f6e4:	2101      	movs	r1, #1
 800f6e6:	4658      	mov	r0, fp
 800f6e8:	f000 fbee 	bl	800fec8 <__i2b>
 800f6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f000 81cf 	beq.w	800fa94 <_dtoa_r+0xb3c>
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	4601      	mov	r1, r0
 800f6fa:	4658      	mov	r0, fp
 800f6fc:	f000 fca4 	bl	8010048 <__pow5mult>
 800f700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f702:	2b01      	cmp	r3, #1
 800f704:	4604      	mov	r4, r0
 800f706:	f300 8095 	bgt.w	800f834 <_dtoa_r+0x8dc>
 800f70a:	9b02      	ldr	r3, [sp, #8]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	f040 8087 	bne.w	800f820 <_dtoa_r+0x8c8>
 800f712:	9b03      	ldr	r3, [sp, #12]
 800f714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f040 8089 	bne.w	800f830 <_dtoa_r+0x8d8>
 800f71e:	9b03      	ldr	r3, [sp, #12]
 800f720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f724:	0d1b      	lsrs	r3, r3, #20
 800f726:	051b      	lsls	r3, r3, #20
 800f728:	b12b      	cbz	r3, 800f736 <_dtoa_r+0x7de>
 800f72a:	9b08      	ldr	r3, [sp, #32]
 800f72c:	3301      	adds	r3, #1
 800f72e:	9308      	str	r3, [sp, #32]
 800f730:	f108 0801 	add.w	r8, r8, #1
 800f734:	2301      	movs	r3, #1
 800f736:	930a      	str	r3, [sp, #40]	@ 0x28
 800f738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	f000 81b0 	beq.w	800faa0 <_dtoa_r+0xb48>
 800f740:	6923      	ldr	r3, [r4, #16]
 800f742:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f746:	6918      	ldr	r0, [r3, #16]
 800f748:	f000 fb72 	bl	800fe30 <__hi0bits>
 800f74c:	f1c0 0020 	rsb	r0, r0, #32
 800f750:	9b08      	ldr	r3, [sp, #32]
 800f752:	4418      	add	r0, r3
 800f754:	f010 001f 	ands.w	r0, r0, #31
 800f758:	d077      	beq.n	800f84a <_dtoa_r+0x8f2>
 800f75a:	f1c0 0320 	rsb	r3, r0, #32
 800f75e:	2b04      	cmp	r3, #4
 800f760:	dd6b      	ble.n	800f83a <_dtoa_r+0x8e2>
 800f762:	9b08      	ldr	r3, [sp, #32]
 800f764:	f1c0 001c 	rsb	r0, r0, #28
 800f768:	4403      	add	r3, r0
 800f76a:	4480      	add	r8, r0
 800f76c:	4406      	add	r6, r0
 800f76e:	9308      	str	r3, [sp, #32]
 800f770:	f1b8 0f00 	cmp.w	r8, #0
 800f774:	dd05      	ble.n	800f782 <_dtoa_r+0x82a>
 800f776:	4649      	mov	r1, r9
 800f778:	4642      	mov	r2, r8
 800f77a:	4658      	mov	r0, fp
 800f77c:	f000 fcbe 	bl	80100fc <__lshift>
 800f780:	4681      	mov	r9, r0
 800f782:	9b08      	ldr	r3, [sp, #32]
 800f784:	2b00      	cmp	r3, #0
 800f786:	dd05      	ble.n	800f794 <_dtoa_r+0x83c>
 800f788:	4621      	mov	r1, r4
 800f78a:	461a      	mov	r2, r3
 800f78c:	4658      	mov	r0, fp
 800f78e:	f000 fcb5 	bl	80100fc <__lshift>
 800f792:	4604      	mov	r4, r0
 800f794:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f796:	2b00      	cmp	r3, #0
 800f798:	d059      	beq.n	800f84e <_dtoa_r+0x8f6>
 800f79a:	4621      	mov	r1, r4
 800f79c:	4648      	mov	r0, r9
 800f79e:	f000 fd19 	bl	80101d4 <__mcmp>
 800f7a2:	2800      	cmp	r0, #0
 800f7a4:	da53      	bge.n	800f84e <_dtoa_r+0x8f6>
 800f7a6:	1e7b      	subs	r3, r7, #1
 800f7a8:	9304      	str	r3, [sp, #16]
 800f7aa:	4649      	mov	r1, r9
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	220a      	movs	r2, #10
 800f7b0:	4658      	mov	r0, fp
 800f7b2:	f000 faf7 	bl	800fda4 <__multadd>
 800f7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7b8:	4681      	mov	r9, r0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 8172 	beq.w	800faa4 <_dtoa_r+0xb4c>
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	4629      	mov	r1, r5
 800f7c4:	220a      	movs	r2, #10
 800f7c6:	4658      	mov	r0, fp
 800f7c8:	f000 faec 	bl	800fda4 <__multadd>
 800f7cc:	9b00      	ldr	r3, [sp, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	4605      	mov	r5, r0
 800f7d2:	dc67      	bgt.n	800f8a4 <_dtoa_r+0x94c>
 800f7d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	dc41      	bgt.n	800f85e <_dtoa_r+0x906>
 800f7da:	e063      	b.n	800f8a4 <_dtoa_r+0x94c>
 800f7dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f7de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f7e2:	e746      	b.n	800f672 <_dtoa_r+0x71a>
 800f7e4:	9b07      	ldr	r3, [sp, #28]
 800f7e6:	1e5c      	subs	r4, r3, #1
 800f7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7ea:	42a3      	cmp	r3, r4
 800f7ec:	bfbf      	itttt	lt
 800f7ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f7f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f7f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f7f4:	1ae3      	sublt	r3, r4, r3
 800f7f6:	bfb4      	ite	lt
 800f7f8:	18d2      	addlt	r2, r2, r3
 800f7fa:	1b1c      	subge	r4, r3, r4
 800f7fc:	9b07      	ldr	r3, [sp, #28]
 800f7fe:	bfbc      	itt	lt
 800f800:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f802:	2400      	movlt	r4, #0
 800f804:	2b00      	cmp	r3, #0
 800f806:	bfb5      	itete	lt
 800f808:	eba8 0603 	sublt.w	r6, r8, r3
 800f80c:	9b07      	ldrge	r3, [sp, #28]
 800f80e:	2300      	movlt	r3, #0
 800f810:	4646      	movge	r6, r8
 800f812:	e730      	b.n	800f676 <_dtoa_r+0x71e>
 800f814:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f816:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f818:	4646      	mov	r6, r8
 800f81a:	e735      	b.n	800f688 <_dtoa_r+0x730>
 800f81c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f81e:	e75c      	b.n	800f6da <_dtoa_r+0x782>
 800f820:	2300      	movs	r3, #0
 800f822:	e788      	b.n	800f736 <_dtoa_r+0x7de>
 800f824:	3fe00000 	.word	0x3fe00000
 800f828:	40240000 	.word	0x40240000
 800f82c:	40140000 	.word	0x40140000
 800f830:	9b02      	ldr	r3, [sp, #8]
 800f832:	e780      	b.n	800f736 <_dtoa_r+0x7de>
 800f834:	2300      	movs	r3, #0
 800f836:	930a      	str	r3, [sp, #40]	@ 0x28
 800f838:	e782      	b.n	800f740 <_dtoa_r+0x7e8>
 800f83a:	d099      	beq.n	800f770 <_dtoa_r+0x818>
 800f83c:	9a08      	ldr	r2, [sp, #32]
 800f83e:	331c      	adds	r3, #28
 800f840:	441a      	add	r2, r3
 800f842:	4498      	add	r8, r3
 800f844:	441e      	add	r6, r3
 800f846:	9208      	str	r2, [sp, #32]
 800f848:	e792      	b.n	800f770 <_dtoa_r+0x818>
 800f84a:	4603      	mov	r3, r0
 800f84c:	e7f6      	b.n	800f83c <_dtoa_r+0x8e4>
 800f84e:	9b07      	ldr	r3, [sp, #28]
 800f850:	9704      	str	r7, [sp, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	dc20      	bgt.n	800f898 <_dtoa_r+0x940>
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f85a:	2b02      	cmp	r3, #2
 800f85c:	dd1e      	ble.n	800f89c <_dtoa_r+0x944>
 800f85e:	9b00      	ldr	r3, [sp, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	f47f aec0 	bne.w	800f5e6 <_dtoa_r+0x68e>
 800f866:	4621      	mov	r1, r4
 800f868:	2205      	movs	r2, #5
 800f86a:	4658      	mov	r0, fp
 800f86c:	f000 fa9a 	bl	800fda4 <__multadd>
 800f870:	4601      	mov	r1, r0
 800f872:	4604      	mov	r4, r0
 800f874:	4648      	mov	r0, r9
 800f876:	f000 fcad 	bl	80101d4 <__mcmp>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	f77f aeb3 	ble.w	800f5e6 <_dtoa_r+0x68e>
 800f880:	4656      	mov	r6, sl
 800f882:	2331      	movs	r3, #49	@ 0x31
 800f884:	f806 3b01 	strb.w	r3, [r6], #1
 800f888:	9b04      	ldr	r3, [sp, #16]
 800f88a:	3301      	adds	r3, #1
 800f88c:	9304      	str	r3, [sp, #16]
 800f88e:	e6ae      	b.n	800f5ee <_dtoa_r+0x696>
 800f890:	9c07      	ldr	r4, [sp, #28]
 800f892:	9704      	str	r7, [sp, #16]
 800f894:	4625      	mov	r5, r4
 800f896:	e7f3      	b.n	800f880 <_dtoa_r+0x928>
 800f898:	9b07      	ldr	r3, [sp, #28]
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f000 8104 	beq.w	800faac <_dtoa_r+0xb54>
 800f8a4:	2e00      	cmp	r6, #0
 800f8a6:	dd05      	ble.n	800f8b4 <_dtoa_r+0x95c>
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	4632      	mov	r2, r6
 800f8ac:	4658      	mov	r0, fp
 800f8ae:	f000 fc25 	bl	80100fc <__lshift>
 800f8b2:	4605      	mov	r5, r0
 800f8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d05a      	beq.n	800f970 <_dtoa_r+0xa18>
 800f8ba:	6869      	ldr	r1, [r5, #4]
 800f8bc:	4658      	mov	r0, fp
 800f8be:	f000 fa0f 	bl	800fce0 <_Balloc>
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	b928      	cbnz	r0, 800f8d2 <_dtoa_r+0x97a>
 800f8c6:	4b84      	ldr	r3, [pc, #528]	@ (800fad8 <_dtoa_r+0xb80>)
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f8ce:	f7ff bb5a 	b.w	800ef86 <_dtoa_r+0x2e>
 800f8d2:	692a      	ldr	r2, [r5, #16]
 800f8d4:	3202      	adds	r2, #2
 800f8d6:	0092      	lsls	r2, r2, #2
 800f8d8:	f105 010c 	add.w	r1, r5, #12
 800f8dc:	300c      	adds	r0, #12
 800f8de:	f7ff faa2 	bl	800ee26 <memcpy>
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	4631      	mov	r1, r6
 800f8e6:	4658      	mov	r0, fp
 800f8e8:	f000 fc08 	bl	80100fc <__lshift>
 800f8ec:	f10a 0301 	add.w	r3, sl, #1
 800f8f0:	9307      	str	r3, [sp, #28]
 800f8f2:	9b00      	ldr	r3, [sp, #0]
 800f8f4:	4453      	add	r3, sl
 800f8f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f8f8:	9b02      	ldr	r3, [sp, #8]
 800f8fa:	f003 0301 	and.w	r3, r3, #1
 800f8fe:	462f      	mov	r7, r5
 800f900:	930a      	str	r3, [sp, #40]	@ 0x28
 800f902:	4605      	mov	r5, r0
 800f904:	9b07      	ldr	r3, [sp, #28]
 800f906:	4621      	mov	r1, r4
 800f908:	3b01      	subs	r3, #1
 800f90a:	4648      	mov	r0, r9
 800f90c:	9300      	str	r3, [sp, #0]
 800f90e:	f7ff fa98 	bl	800ee42 <quorem>
 800f912:	4639      	mov	r1, r7
 800f914:	9002      	str	r0, [sp, #8]
 800f916:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f91a:	4648      	mov	r0, r9
 800f91c:	f000 fc5a 	bl	80101d4 <__mcmp>
 800f920:	462a      	mov	r2, r5
 800f922:	9008      	str	r0, [sp, #32]
 800f924:	4621      	mov	r1, r4
 800f926:	4658      	mov	r0, fp
 800f928:	f000 fc70 	bl	801020c <__mdiff>
 800f92c:	68c2      	ldr	r2, [r0, #12]
 800f92e:	4606      	mov	r6, r0
 800f930:	bb02      	cbnz	r2, 800f974 <_dtoa_r+0xa1c>
 800f932:	4601      	mov	r1, r0
 800f934:	4648      	mov	r0, r9
 800f936:	f000 fc4d 	bl	80101d4 <__mcmp>
 800f93a:	4602      	mov	r2, r0
 800f93c:	4631      	mov	r1, r6
 800f93e:	4658      	mov	r0, fp
 800f940:	920e      	str	r2, [sp, #56]	@ 0x38
 800f942:	f000 fa0d 	bl	800fd60 <_Bfree>
 800f946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f948:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f94a:	9e07      	ldr	r6, [sp, #28]
 800f94c:	ea43 0102 	orr.w	r1, r3, r2
 800f950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f952:	4319      	orrs	r1, r3
 800f954:	d110      	bne.n	800f978 <_dtoa_r+0xa20>
 800f956:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f95a:	d029      	beq.n	800f9b0 <_dtoa_r+0xa58>
 800f95c:	9b08      	ldr	r3, [sp, #32]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	dd02      	ble.n	800f968 <_dtoa_r+0xa10>
 800f962:	9b02      	ldr	r3, [sp, #8]
 800f964:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f968:	9b00      	ldr	r3, [sp, #0]
 800f96a:	f883 8000 	strb.w	r8, [r3]
 800f96e:	e63f      	b.n	800f5f0 <_dtoa_r+0x698>
 800f970:	4628      	mov	r0, r5
 800f972:	e7bb      	b.n	800f8ec <_dtoa_r+0x994>
 800f974:	2201      	movs	r2, #1
 800f976:	e7e1      	b.n	800f93c <_dtoa_r+0x9e4>
 800f978:	9b08      	ldr	r3, [sp, #32]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	db04      	blt.n	800f988 <_dtoa_r+0xa30>
 800f97e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f980:	430b      	orrs	r3, r1
 800f982:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f984:	430b      	orrs	r3, r1
 800f986:	d120      	bne.n	800f9ca <_dtoa_r+0xa72>
 800f988:	2a00      	cmp	r2, #0
 800f98a:	dded      	ble.n	800f968 <_dtoa_r+0xa10>
 800f98c:	4649      	mov	r1, r9
 800f98e:	2201      	movs	r2, #1
 800f990:	4658      	mov	r0, fp
 800f992:	f000 fbb3 	bl	80100fc <__lshift>
 800f996:	4621      	mov	r1, r4
 800f998:	4681      	mov	r9, r0
 800f99a:	f000 fc1b 	bl	80101d4 <__mcmp>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	dc03      	bgt.n	800f9aa <_dtoa_r+0xa52>
 800f9a2:	d1e1      	bne.n	800f968 <_dtoa_r+0xa10>
 800f9a4:	f018 0f01 	tst.w	r8, #1
 800f9a8:	d0de      	beq.n	800f968 <_dtoa_r+0xa10>
 800f9aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f9ae:	d1d8      	bne.n	800f962 <_dtoa_r+0xa0a>
 800f9b0:	9a00      	ldr	r2, [sp, #0]
 800f9b2:	2339      	movs	r3, #57	@ 0x39
 800f9b4:	7013      	strb	r3, [r2, #0]
 800f9b6:	4633      	mov	r3, r6
 800f9b8:	461e      	mov	r6, r3
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f9c0:	2a39      	cmp	r2, #57	@ 0x39
 800f9c2:	d052      	beq.n	800fa6a <_dtoa_r+0xb12>
 800f9c4:	3201      	adds	r2, #1
 800f9c6:	701a      	strb	r2, [r3, #0]
 800f9c8:	e612      	b.n	800f5f0 <_dtoa_r+0x698>
 800f9ca:	2a00      	cmp	r2, #0
 800f9cc:	dd07      	ble.n	800f9de <_dtoa_r+0xa86>
 800f9ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f9d2:	d0ed      	beq.n	800f9b0 <_dtoa_r+0xa58>
 800f9d4:	9a00      	ldr	r2, [sp, #0]
 800f9d6:	f108 0301 	add.w	r3, r8, #1
 800f9da:	7013      	strb	r3, [r2, #0]
 800f9dc:	e608      	b.n	800f5f0 <_dtoa_r+0x698>
 800f9de:	9b07      	ldr	r3, [sp, #28]
 800f9e0:	9a07      	ldr	r2, [sp, #28]
 800f9e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f9e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d028      	beq.n	800fa3e <_dtoa_r+0xae6>
 800f9ec:	4649      	mov	r1, r9
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	220a      	movs	r2, #10
 800f9f2:	4658      	mov	r0, fp
 800f9f4:	f000 f9d6 	bl	800fda4 <__multadd>
 800f9f8:	42af      	cmp	r7, r5
 800f9fa:	4681      	mov	r9, r0
 800f9fc:	f04f 0300 	mov.w	r3, #0
 800fa00:	f04f 020a 	mov.w	r2, #10
 800fa04:	4639      	mov	r1, r7
 800fa06:	4658      	mov	r0, fp
 800fa08:	d107      	bne.n	800fa1a <_dtoa_r+0xac2>
 800fa0a:	f000 f9cb 	bl	800fda4 <__multadd>
 800fa0e:	4607      	mov	r7, r0
 800fa10:	4605      	mov	r5, r0
 800fa12:	9b07      	ldr	r3, [sp, #28]
 800fa14:	3301      	adds	r3, #1
 800fa16:	9307      	str	r3, [sp, #28]
 800fa18:	e774      	b.n	800f904 <_dtoa_r+0x9ac>
 800fa1a:	f000 f9c3 	bl	800fda4 <__multadd>
 800fa1e:	4629      	mov	r1, r5
 800fa20:	4607      	mov	r7, r0
 800fa22:	2300      	movs	r3, #0
 800fa24:	220a      	movs	r2, #10
 800fa26:	4658      	mov	r0, fp
 800fa28:	f000 f9bc 	bl	800fda4 <__multadd>
 800fa2c:	4605      	mov	r5, r0
 800fa2e:	e7f0      	b.n	800fa12 <_dtoa_r+0xaba>
 800fa30:	9b00      	ldr	r3, [sp, #0]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	bfcc      	ite	gt
 800fa36:	461e      	movgt	r6, r3
 800fa38:	2601      	movle	r6, #1
 800fa3a:	4456      	add	r6, sl
 800fa3c:	2700      	movs	r7, #0
 800fa3e:	4649      	mov	r1, r9
 800fa40:	2201      	movs	r2, #1
 800fa42:	4658      	mov	r0, fp
 800fa44:	f000 fb5a 	bl	80100fc <__lshift>
 800fa48:	4621      	mov	r1, r4
 800fa4a:	4681      	mov	r9, r0
 800fa4c:	f000 fbc2 	bl	80101d4 <__mcmp>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	dcb0      	bgt.n	800f9b6 <_dtoa_r+0xa5e>
 800fa54:	d102      	bne.n	800fa5c <_dtoa_r+0xb04>
 800fa56:	f018 0f01 	tst.w	r8, #1
 800fa5a:	d1ac      	bne.n	800f9b6 <_dtoa_r+0xa5e>
 800fa5c:	4633      	mov	r3, r6
 800fa5e:	461e      	mov	r6, r3
 800fa60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa64:	2a30      	cmp	r2, #48	@ 0x30
 800fa66:	d0fa      	beq.n	800fa5e <_dtoa_r+0xb06>
 800fa68:	e5c2      	b.n	800f5f0 <_dtoa_r+0x698>
 800fa6a:	459a      	cmp	sl, r3
 800fa6c:	d1a4      	bne.n	800f9b8 <_dtoa_r+0xa60>
 800fa6e:	9b04      	ldr	r3, [sp, #16]
 800fa70:	3301      	adds	r3, #1
 800fa72:	9304      	str	r3, [sp, #16]
 800fa74:	2331      	movs	r3, #49	@ 0x31
 800fa76:	f88a 3000 	strb.w	r3, [sl]
 800fa7a:	e5b9      	b.n	800f5f0 <_dtoa_r+0x698>
 800fa7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fadc <_dtoa_r+0xb84>
 800fa82:	b11b      	cbz	r3, 800fa8c <_dtoa_r+0xb34>
 800fa84:	f10a 0308 	add.w	r3, sl, #8
 800fa88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa8a:	6013      	str	r3, [r2, #0]
 800fa8c:	4650      	mov	r0, sl
 800fa8e:	b019      	add	sp, #100	@ 0x64
 800fa90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	f77f ae37 	ble.w	800f70a <_dtoa_r+0x7b2>
 800fa9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800faa0:	2001      	movs	r0, #1
 800faa2:	e655      	b.n	800f750 <_dtoa_r+0x7f8>
 800faa4:	9b00      	ldr	r3, [sp, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f77f aed6 	ble.w	800f858 <_dtoa_r+0x900>
 800faac:	4656      	mov	r6, sl
 800faae:	4621      	mov	r1, r4
 800fab0:	4648      	mov	r0, r9
 800fab2:	f7ff f9c6 	bl	800ee42 <quorem>
 800fab6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800faba:	f806 8b01 	strb.w	r8, [r6], #1
 800fabe:	9b00      	ldr	r3, [sp, #0]
 800fac0:	eba6 020a 	sub.w	r2, r6, sl
 800fac4:	4293      	cmp	r3, r2
 800fac6:	ddb3      	ble.n	800fa30 <_dtoa_r+0xad8>
 800fac8:	4649      	mov	r1, r9
 800faca:	2300      	movs	r3, #0
 800facc:	220a      	movs	r2, #10
 800face:	4658      	mov	r0, fp
 800fad0:	f000 f968 	bl	800fda4 <__multadd>
 800fad4:	4681      	mov	r9, r0
 800fad6:	e7ea      	b.n	800faae <_dtoa_r+0xb56>
 800fad8:	08011b34 	.word	0x08011b34
 800fadc:	08011ab8 	.word	0x08011ab8

0800fae0 <_free_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4605      	mov	r5, r0
 800fae4:	2900      	cmp	r1, #0
 800fae6:	d041      	beq.n	800fb6c <_free_r+0x8c>
 800fae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faec:	1f0c      	subs	r4, r1, #4
 800faee:	2b00      	cmp	r3, #0
 800faf0:	bfb8      	it	lt
 800faf2:	18e4      	addlt	r4, r4, r3
 800faf4:	f000 f8e8 	bl	800fcc8 <__malloc_lock>
 800faf8:	4a1d      	ldr	r2, [pc, #116]	@ (800fb70 <_free_r+0x90>)
 800fafa:	6813      	ldr	r3, [r2, #0]
 800fafc:	b933      	cbnz	r3, 800fb0c <_free_r+0x2c>
 800fafe:	6063      	str	r3, [r4, #4]
 800fb00:	6014      	str	r4, [r2, #0]
 800fb02:	4628      	mov	r0, r5
 800fb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb08:	f000 b8e4 	b.w	800fcd4 <__malloc_unlock>
 800fb0c:	42a3      	cmp	r3, r4
 800fb0e:	d908      	bls.n	800fb22 <_free_r+0x42>
 800fb10:	6820      	ldr	r0, [r4, #0]
 800fb12:	1821      	adds	r1, r4, r0
 800fb14:	428b      	cmp	r3, r1
 800fb16:	bf01      	itttt	eq
 800fb18:	6819      	ldreq	r1, [r3, #0]
 800fb1a:	685b      	ldreq	r3, [r3, #4]
 800fb1c:	1809      	addeq	r1, r1, r0
 800fb1e:	6021      	streq	r1, [r4, #0]
 800fb20:	e7ed      	b.n	800fafe <_free_r+0x1e>
 800fb22:	461a      	mov	r2, r3
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	b10b      	cbz	r3, 800fb2c <_free_r+0x4c>
 800fb28:	42a3      	cmp	r3, r4
 800fb2a:	d9fa      	bls.n	800fb22 <_free_r+0x42>
 800fb2c:	6811      	ldr	r1, [r2, #0]
 800fb2e:	1850      	adds	r0, r2, r1
 800fb30:	42a0      	cmp	r0, r4
 800fb32:	d10b      	bne.n	800fb4c <_free_r+0x6c>
 800fb34:	6820      	ldr	r0, [r4, #0]
 800fb36:	4401      	add	r1, r0
 800fb38:	1850      	adds	r0, r2, r1
 800fb3a:	4283      	cmp	r3, r0
 800fb3c:	6011      	str	r1, [r2, #0]
 800fb3e:	d1e0      	bne.n	800fb02 <_free_r+0x22>
 800fb40:	6818      	ldr	r0, [r3, #0]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	6053      	str	r3, [r2, #4]
 800fb46:	4408      	add	r0, r1
 800fb48:	6010      	str	r0, [r2, #0]
 800fb4a:	e7da      	b.n	800fb02 <_free_r+0x22>
 800fb4c:	d902      	bls.n	800fb54 <_free_r+0x74>
 800fb4e:	230c      	movs	r3, #12
 800fb50:	602b      	str	r3, [r5, #0]
 800fb52:	e7d6      	b.n	800fb02 <_free_r+0x22>
 800fb54:	6820      	ldr	r0, [r4, #0]
 800fb56:	1821      	adds	r1, r4, r0
 800fb58:	428b      	cmp	r3, r1
 800fb5a:	bf04      	itt	eq
 800fb5c:	6819      	ldreq	r1, [r3, #0]
 800fb5e:	685b      	ldreq	r3, [r3, #4]
 800fb60:	6063      	str	r3, [r4, #4]
 800fb62:	bf04      	itt	eq
 800fb64:	1809      	addeq	r1, r1, r0
 800fb66:	6021      	streq	r1, [r4, #0]
 800fb68:	6054      	str	r4, [r2, #4]
 800fb6a:	e7ca      	b.n	800fb02 <_free_r+0x22>
 800fb6c:	bd38      	pop	{r3, r4, r5, pc}
 800fb6e:	bf00      	nop
 800fb70:	20005044 	.word	0x20005044

0800fb74 <malloc>:
 800fb74:	4b02      	ldr	r3, [pc, #8]	@ (800fb80 <malloc+0xc>)
 800fb76:	4601      	mov	r1, r0
 800fb78:	6818      	ldr	r0, [r3, #0]
 800fb7a:	f000 b825 	b.w	800fbc8 <_malloc_r>
 800fb7e:	bf00      	nop
 800fb80:	20000020 	.word	0x20000020

0800fb84 <sbrk_aligned>:
 800fb84:	b570      	push	{r4, r5, r6, lr}
 800fb86:	4e0f      	ldr	r6, [pc, #60]	@ (800fbc4 <sbrk_aligned+0x40>)
 800fb88:	460c      	mov	r4, r1
 800fb8a:	6831      	ldr	r1, [r6, #0]
 800fb8c:	4605      	mov	r5, r0
 800fb8e:	b911      	cbnz	r1, 800fb96 <sbrk_aligned+0x12>
 800fb90:	f000 fe46 	bl	8010820 <_sbrk_r>
 800fb94:	6030      	str	r0, [r6, #0]
 800fb96:	4621      	mov	r1, r4
 800fb98:	4628      	mov	r0, r5
 800fb9a:	f000 fe41 	bl	8010820 <_sbrk_r>
 800fb9e:	1c43      	adds	r3, r0, #1
 800fba0:	d103      	bne.n	800fbaa <sbrk_aligned+0x26>
 800fba2:	f04f 34ff 	mov.w	r4, #4294967295
 800fba6:	4620      	mov	r0, r4
 800fba8:	bd70      	pop	{r4, r5, r6, pc}
 800fbaa:	1cc4      	adds	r4, r0, #3
 800fbac:	f024 0403 	bic.w	r4, r4, #3
 800fbb0:	42a0      	cmp	r0, r4
 800fbb2:	d0f8      	beq.n	800fba6 <sbrk_aligned+0x22>
 800fbb4:	1a21      	subs	r1, r4, r0
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f000 fe32 	bl	8010820 <_sbrk_r>
 800fbbc:	3001      	adds	r0, #1
 800fbbe:	d1f2      	bne.n	800fba6 <sbrk_aligned+0x22>
 800fbc0:	e7ef      	b.n	800fba2 <sbrk_aligned+0x1e>
 800fbc2:	bf00      	nop
 800fbc4:	20005040 	.word	0x20005040

0800fbc8 <_malloc_r>:
 800fbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbcc:	1ccd      	adds	r5, r1, #3
 800fbce:	f025 0503 	bic.w	r5, r5, #3
 800fbd2:	3508      	adds	r5, #8
 800fbd4:	2d0c      	cmp	r5, #12
 800fbd6:	bf38      	it	cc
 800fbd8:	250c      	movcc	r5, #12
 800fbda:	2d00      	cmp	r5, #0
 800fbdc:	4606      	mov	r6, r0
 800fbde:	db01      	blt.n	800fbe4 <_malloc_r+0x1c>
 800fbe0:	42a9      	cmp	r1, r5
 800fbe2:	d904      	bls.n	800fbee <_malloc_r+0x26>
 800fbe4:	230c      	movs	r3, #12
 800fbe6:	6033      	str	r3, [r6, #0]
 800fbe8:	2000      	movs	r0, #0
 800fbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fcc4 <_malloc_r+0xfc>
 800fbf2:	f000 f869 	bl	800fcc8 <__malloc_lock>
 800fbf6:	f8d8 3000 	ldr.w	r3, [r8]
 800fbfa:	461c      	mov	r4, r3
 800fbfc:	bb44      	cbnz	r4, 800fc50 <_malloc_r+0x88>
 800fbfe:	4629      	mov	r1, r5
 800fc00:	4630      	mov	r0, r6
 800fc02:	f7ff ffbf 	bl	800fb84 <sbrk_aligned>
 800fc06:	1c43      	adds	r3, r0, #1
 800fc08:	4604      	mov	r4, r0
 800fc0a:	d158      	bne.n	800fcbe <_malloc_r+0xf6>
 800fc0c:	f8d8 4000 	ldr.w	r4, [r8]
 800fc10:	4627      	mov	r7, r4
 800fc12:	2f00      	cmp	r7, #0
 800fc14:	d143      	bne.n	800fc9e <_malloc_r+0xd6>
 800fc16:	2c00      	cmp	r4, #0
 800fc18:	d04b      	beq.n	800fcb2 <_malloc_r+0xea>
 800fc1a:	6823      	ldr	r3, [r4, #0]
 800fc1c:	4639      	mov	r1, r7
 800fc1e:	4630      	mov	r0, r6
 800fc20:	eb04 0903 	add.w	r9, r4, r3
 800fc24:	f000 fdfc 	bl	8010820 <_sbrk_r>
 800fc28:	4581      	cmp	r9, r0
 800fc2a:	d142      	bne.n	800fcb2 <_malloc_r+0xea>
 800fc2c:	6821      	ldr	r1, [r4, #0]
 800fc2e:	1a6d      	subs	r5, r5, r1
 800fc30:	4629      	mov	r1, r5
 800fc32:	4630      	mov	r0, r6
 800fc34:	f7ff ffa6 	bl	800fb84 <sbrk_aligned>
 800fc38:	3001      	adds	r0, #1
 800fc3a:	d03a      	beq.n	800fcb2 <_malloc_r+0xea>
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	442b      	add	r3, r5
 800fc40:	6023      	str	r3, [r4, #0]
 800fc42:	f8d8 3000 	ldr.w	r3, [r8]
 800fc46:	685a      	ldr	r2, [r3, #4]
 800fc48:	bb62      	cbnz	r2, 800fca4 <_malloc_r+0xdc>
 800fc4a:	f8c8 7000 	str.w	r7, [r8]
 800fc4e:	e00f      	b.n	800fc70 <_malloc_r+0xa8>
 800fc50:	6822      	ldr	r2, [r4, #0]
 800fc52:	1b52      	subs	r2, r2, r5
 800fc54:	d420      	bmi.n	800fc98 <_malloc_r+0xd0>
 800fc56:	2a0b      	cmp	r2, #11
 800fc58:	d917      	bls.n	800fc8a <_malloc_r+0xc2>
 800fc5a:	1961      	adds	r1, r4, r5
 800fc5c:	42a3      	cmp	r3, r4
 800fc5e:	6025      	str	r5, [r4, #0]
 800fc60:	bf18      	it	ne
 800fc62:	6059      	strne	r1, [r3, #4]
 800fc64:	6863      	ldr	r3, [r4, #4]
 800fc66:	bf08      	it	eq
 800fc68:	f8c8 1000 	streq.w	r1, [r8]
 800fc6c:	5162      	str	r2, [r4, r5]
 800fc6e:	604b      	str	r3, [r1, #4]
 800fc70:	4630      	mov	r0, r6
 800fc72:	f000 f82f 	bl	800fcd4 <__malloc_unlock>
 800fc76:	f104 000b 	add.w	r0, r4, #11
 800fc7a:	1d23      	adds	r3, r4, #4
 800fc7c:	f020 0007 	bic.w	r0, r0, #7
 800fc80:	1ac2      	subs	r2, r0, r3
 800fc82:	bf1c      	itt	ne
 800fc84:	1a1b      	subne	r3, r3, r0
 800fc86:	50a3      	strne	r3, [r4, r2]
 800fc88:	e7af      	b.n	800fbea <_malloc_r+0x22>
 800fc8a:	6862      	ldr	r2, [r4, #4]
 800fc8c:	42a3      	cmp	r3, r4
 800fc8e:	bf0c      	ite	eq
 800fc90:	f8c8 2000 	streq.w	r2, [r8]
 800fc94:	605a      	strne	r2, [r3, #4]
 800fc96:	e7eb      	b.n	800fc70 <_malloc_r+0xa8>
 800fc98:	4623      	mov	r3, r4
 800fc9a:	6864      	ldr	r4, [r4, #4]
 800fc9c:	e7ae      	b.n	800fbfc <_malloc_r+0x34>
 800fc9e:	463c      	mov	r4, r7
 800fca0:	687f      	ldr	r7, [r7, #4]
 800fca2:	e7b6      	b.n	800fc12 <_malloc_r+0x4a>
 800fca4:	461a      	mov	r2, r3
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	42a3      	cmp	r3, r4
 800fcaa:	d1fb      	bne.n	800fca4 <_malloc_r+0xdc>
 800fcac:	2300      	movs	r3, #0
 800fcae:	6053      	str	r3, [r2, #4]
 800fcb0:	e7de      	b.n	800fc70 <_malloc_r+0xa8>
 800fcb2:	230c      	movs	r3, #12
 800fcb4:	6033      	str	r3, [r6, #0]
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	f000 f80c 	bl	800fcd4 <__malloc_unlock>
 800fcbc:	e794      	b.n	800fbe8 <_malloc_r+0x20>
 800fcbe:	6005      	str	r5, [r0, #0]
 800fcc0:	e7d6      	b.n	800fc70 <_malloc_r+0xa8>
 800fcc2:	bf00      	nop
 800fcc4:	20005044 	.word	0x20005044

0800fcc8 <__malloc_lock>:
 800fcc8:	4801      	ldr	r0, [pc, #4]	@ (800fcd0 <__malloc_lock+0x8>)
 800fcca:	f7ff b8aa 	b.w	800ee22 <__retarget_lock_acquire_recursive>
 800fcce:	bf00      	nop
 800fcd0:	2000503c 	.word	0x2000503c

0800fcd4 <__malloc_unlock>:
 800fcd4:	4801      	ldr	r0, [pc, #4]	@ (800fcdc <__malloc_unlock+0x8>)
 800fcd6:	f7ff b8a5 	b.w	800ee24 <__retarget_lock_release_recursive>
 800fcda:	bf00      	nop
 800fcdc:	2000503c 	.word	0x2000503c

0800fce0 <_Balloc>:
 800fce0:	b570      	push	{r4, r5, r6, lr}
 800fce2:	69c6      	ldr	r6, [r0, #28]
 800fce4:	4604      	mov	r4, r0
 800fce6:	460d      	mov	r5, r1
 800fce8:	b976      	cbnz	r6, 800fd08 <_Balloc+0x28>
 800fcea:	2010      	movs	r0, #16
 800fcec:	f7ff ff42 	bl	800fb74 <malloc>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	61e0      	str	r0, [r4, #28]
 800fcf4:	b920      	cbnz	r0, 800fd00 <_Balloc+0x20>
 800fcf6:	4b18      	ldr	r3, [pc, #96]	@ (800fd58 <_Balloc+0x78>)
 800fcf8:	4818      	ldr	r0, [pc, #96]	@ (800fd5c <_Balloc+0x7c>)
 800fcfa:	216b      	movs	r1, #107	@ 0x6b
 800fcfc:	f000 fda0 	bl	8010840 <__assert_func>
 800fd00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd04:	6006      	str	r6, [r0, #0]
 800fd06:	60c6      	str	r6, [r0, #12]
 800fd08:	69e6      	ldr	r6, [r4, #28]
 800fd0a:	68f3      	ldr	r3, [r6, #12]
 800fd0c:	b183      	cbz	r3, 800fd30 <_Balloc+0x50>
 800fd0e:	69e3      	ldr	r3, [r4, #28]
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd16:	b9b8      	cbnz	r0, 800fd48 <_Balloc+0x68>
 800fd18:	2101      	movs	r1, #1
 800fd1a:	fa01 f605 	lsl.w	r6, r1, r5
 800fd1e:	1d72      	adds	r2, r6, #5
 800fd20:	0092      	lsls	r2, r2, #2
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 fdaa 	bl	801087c <_calloc_r>
 800fd28:	b160      	cbz	r0, 800fd44 <_Balloc+0x64>
 800fd2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd2e:	e00e      	b.n	800fd4e <_Balloc+0x6e>
 800fd30:	2221      	movs	r2, #33	@ 0x21
 800fd32:	2104      	movs	r1, #4
 800fd34:	4620      	mov	r0, r4
 800fd36:	f000 fda1 	bl	801087c <_calloc_r>
 800fd3a:	69e3      	ldr	r3, [r4, #28]
 800fd3c:	60f0      	str	r0, [r6, #12]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d1e4      	bne.n	800fd0e <_Balloc+0x2e>
 800fd44:	2000      	movs	r0, #0
 800fd46:	bd70      	pop	{r4, r5, r6, pc}
 800fd48:	6802      	ldr	r2, [r0, #0]
 800fd4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd54:	e7f7      	b.n	800fd46 <_Balloc+0x66>
 800fd56:	bf00      	nop
 800fd58:	08011ac5 	.word	0x08011ac5
 800fd5c:	08011b45 	.word	0x08011b45

0800fd60 <_Bfree>:
 800fd60:	b570      	push	{r4, r5, r6, lr}
 800fd62:	69c6      	ldr	r6, [r0, #28]
 800fd64:	4605      	mov	r5, r0
 800fd66:	460c      	mov	r4, r1
 800fd68:	b976      	cbnz	r6, 800fd88 <_Bfree+0x28>
 800fd6a:	2010      	movs	r0, #16
 800fd6c:	f7ff ff02 	bl	800fb74 <malloc>
 800fd70:	4602      	mov	r2, r0
 800fd72:	61e8      	str	r0, [r5, #28]
 800fd74:	b920      	cbnz	r0, 800fd80 <_Bfree+0x20>
 800fd76:	4b09      	ldr	r3, [pc, #36]	@ (800fd9c <_Bfree+0x3c>)
 800fd78:	4809      	ldr	r0, [pc, #36]	@ (800fda0 <_Bfree+0x40>)
 800fd7a:	218f      	movs	r1, #143	@ 0x8f
 800fd7c:	f000 fd60 	bl	8010840 <__assert_func>
 800fd80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd84:	6006      	str	r6, [r0, #0]
 800fd86:	60c6      	str	r6, [r0, #12]
 800fd88:	b13c      	cbz	r4, 800fd9a <_Bfree+0x3a>
 800fd8a:	69eb      	ldr	r3, [r5, #28]
 800fd8c:	6862      	ldr	r2, [r4, #4]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd94:	6021      	str	r1, [r4, #0]
 800fd96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd9a:	bd70      	pop	{r4, r5, r6, pc}
 800fd9c:	08011ac5 	.word	0x08011ac5
 800fda0:	08011b45 	.word	0x08011b45

0800fda4 <__multadd>:
 800fda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fda8:	690d      	ldr	r5, [r1, #16]
 800fdaa:	4607      	mov	r7, r0
 800fdac:	460c      	mov	r4, r1
 800fdae:	461e      	mov	r6, r3
 800fdb0:	f101 0c14 	add.w	ip, r1, #20
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	f8dc 3000 	ldr.w	r3, [ip]
 800fdba:	b299      	uxth	r1, r3
 800fdbc:	fb02 6101 	mla	r1, r2, r1, r6
 800fdc0:	0c1e      	lsrs	r6, r3, #16
 800fdc2:	0c0b      	lsrs	r3, r1, #16
 800fdc4:	fb02 3306 	mla	r3, r2, r6, r3
 800fdc8:	b289      	uxth	r1, r1
 800fdca:	3001      	adds	r0, #1
 800fdcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fdd0:	4285      	cmp	r5, r0
 800fdd2:	f84c 1b04 	str.w	r1, [ip], #4
 800fdd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fdda:	dcec      	bgt.n	800fdb6 <__multadd+0x12>
 800fddc:	b30e      	cbz	r6, 800fe22 <__multadd+0x7e>
 800fdde:	68a3      	ldr	r3, [r4, #8]
 800fde0:	42ab      	cmp	r3, r5
 800fde2:	dc19      	bgt.n	800fe18 <__multadd+0x74>
 800fde4:	6861      	ldr	r1, [r4, #4]
 800fde6:	4638      	mov	r0, r7
 800fde8:	3101      	adds	r1, #1
 800fdea:	f7ff ff79 	bl	800fce0 <_Balloc>
 800fdee:	4680      	mov	r8, r0
 800fdf0:	b928      	cbnz	r0, 800fdfe <__multadd+0x5a>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	4b0c      	ldr	r3, [pc, #48]	@ (800fe28 <__multadd+0x84>)
 800fdf6:	480d      	ldr	r0, [pc, #52]	@ (800fe2c <__multadd+0x88>)
 800fdf8:	21ba      	movs	r1, #186	@ 0xba
 800fdfa:	f000 fd21 	bl	8010840 <__assert_func>
 800fdfe:	6922      	ldr	r2, [r4, #16]
 800fe00:	3202      	adds	r2, #2
 800fe02:	f104 010c 	add.w	r1, r4, #12
 800fe06:	0092      	lsls	r2, r2, #2
 800fe08:	300c      	adds	r0, #12
 800fe0a:	f7ff f80c 	bl	800ee26 <memcpy>
 800fe0e:	4621      	mov	r1, r4
 800fe10:	4638      	mov	r0, r7
 800fe12:	f7ff ffa5 	bl	800fd60 <_Bfree>
 800fe16:	4644      	mov	r4, r8
 800fe18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe1c:	3501      	adds	r5, #1
 800fe1e:	615e      	str	r6, [r3, #20]
 800fe20:	6125      	str	r5, [r4, #16]
 800fe22:	4620      	mov	r0, r4
 800fe24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe28:	08011b34 	.word	0x08011b34
 800fe2c:	08011b45 	.word	0x08011b45

0800fe30 <__hi0bits>:
 800fe30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fe34:	4603      	mov	r3, r0
 800fe36:	bf36      	itet	cc
 800fe38:	0403      	lslcc	r3, r0, #16
 800fe3a:	2000      	movcs	r0, #0
 800fe3c:	2010      	movcc	r0, #16
 800fe3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe42:	bf3c      	itt	cc
 800fe44:	021b      	lslcc	r3, r3, #8
 800fe46:	3008      	addcc	r0, #8
 800fe48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe4c:	bf3c      	itt	cc
 800fe4e:	011b      	lslcc	r3, r3, #4
 800fe50:	3004      	addcc	r0, #4
 800fe52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe56:	bf3c      	itt	cc
 800fe58:	009b      	lslcc	r3, r3, #2
 800fe5a:	3002      	addcc	r0, #2
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	db05      	blt.n	800fe6c <__hi0bits+0x3c>
 800fe60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fe64:	f100 0001 	add.w	r0, r0, #1
 800fe68:	bf08      	it	eq
 800fe6a:	2020      	moveq	r0, #32
 800fe6c:	4770      	bx	lr

0800fe6e <__lo0bits>:
 800fe6e:	6803      	ldr	r3, [r0, #0]
 800fe70:	4602      	mov	r2, r0
 800fe72:	f013 0007 	ands.w	r0, r3, #7
 800fe76:	d00b      	beq.n	800fe90 <__lo0bits+0x22>
 800fe78:	07d9      	lsls	r1, r3, #31
 800fe7a:	d421      	bmi.n	800fec0 <__lo0bits+0x52>
 800fe7c:	0798      	lsls	r0, r3, #30
 800fe7e:	bf49      	itett	mi
 800fe80:	085b      	lsrmi	r3, r3, #1
 800fe82:	089b      	lsrpl	r3, r3, #2
 800fe84:	2001      	movmi	r0, #1
 800fe86:	6013      	strmi	r3, [r2, #0]
 800fe88:	bf5c      	itt	pl
 800fe8a:	6013      	strpl	r3, [r2, #0]
 800fe8c:	2002      	movpl	r0, #2
 800fe8e:	4770      	bx	lr
 800fe90:	b299      	uxth	r1, r3
 800fe92:	b909      	cbnz	r1, 800fe98 <__lo0bits+0x2a>
 800fe94:	0c1b      	lsrs	r3, r3, #16
 800fe96:	2010      	movs	r0, #16
 800fe98:	b2d9      	uxtb	r1, r3
 800fe9a:	b909      	cbnz	r1, 800fea0 <__lo0bits+0x32>
 800fe9c:	3008      	adds	r0, #8
 800fe9e:	0a1b      	lsrs	r3, r3, #8
 800fea0:	0719      	lsls	r1, r3, #28
 800fea2:	bf04      	itt	eq
 800fea4:	091b      	lsreq	r3, r3, #4
 800fea6:	3004      	addeq	r0, #4
 800fea8:	0799      	lsls	r1, r3, #30
 800feaa:	bf04      	itt	eq
 800feac:	089b      	lsreq	r3, r3, #2
 800feae:	3002      	addeq	r0, #2
 800feb0:	07d9      	lsls	r1, r3, #31
 800feb2:	d403      	bmi.n	800febc <__lo0bits+0x4e>
 800feb4:	085b      	lsrs	r3, r3, #1
 800feb6:	f100 0001 	add.w	r0, r0, #1
 800feba:	d003      	beq.n	800fec4 <__lo0bits+0x56>
 800febc:	6013      	str	r3, [r2, #0]
 800febe:	4770      	bx	lr
 800fec0:	2000      	movs	r0, #0
 800fec2:	4770      	bx	lr
 800fec4:	2020      	movs	r0, #32
 800fec6:	4770      	bx	lr

0800fec8 <__i2b>:
 800fec8:	b510      	push	{r4, lr}
 800feca:	460c      	mov	r4, r1
 800fecc:	2101      	movs	r1, #1
 800fece:	f7ff ff07 	bl	800fce0 <_Balloc>
 800fed2:	4602      	mov	r2, r0
 800fed4:	b928      	cbnz	r0, 800fee2 <__i2b+0x1a>
 800fed6:	4b05      	ldr	r3, [pc, #20]	@ (800feec <__i2b+0x24>)
 800fed8:	4805      	ldr	r0, [pc, #20]	@ (800fef0 <__i2b+0x28>)
 800feda:	f240 1145 	movw	r1, #325	@ 0x145
 800fede:	f000 fcaf 	bl	8010840 <__assert_func>
 800fee2:	2301      	movs	r3, #1
 800fee4:	6144      	str	r4, [r0, #20]
 800fee6:	6103      	str	r3, [r0, #16]
 800fee8:	bd10      	pop	{r4, pc}
 800feea:	bf00      	nop
 800feec:	08011b34 	.word	0x08011b34
 800fef0:	08011b45 	.word	0x08011b45

0800fef4 <__multiply>:
 800fef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef8:	4614      	mov	r4, r2
 800fefa:	690a      	ldr	r2, [r1, #16]
 800fefc:	6923      	ldr	r3, [r4, #16]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	bfa8      	it	ge
 800ff02:	4623      	movge	r3, r4
 800ff04:	460f      	mov	r7, r1
 800ff06:	bfa4      	itt	ge
 800ff08:	460c      	movge	r4, r1
 800ff0a:	461f      	movge	r7, r3
 800ff0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ff10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ff14:	68a3      	ldr	r3, [r4, #8]
 800ff16:	6861      	ldr	r1, [r4, #4]
 800ff18:	eb0a 0609 	add.w	r6, sl, r9
 800ff1c:	42b3      	cmp	r3, r6
 800ff1e:	b085      	sub	sp, #20
 800ff20:	bfb8      	it	lt
 800ff22:	3101      	addlt	r1, #1
 800ff24:	f7ff fedc 	bl	800fce0 <_Balloc>
 800ff28:	b930      	cbnz	r0, 800ff38 <__multiply+0x44>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	4b44      	ldr	r3, [pc, #272]	@ (8010040 <__multiply+0x14c>)
 800ff2e:	4845      	ldr	r0, [pc, #276]	@ (8010044 <__multiply+0x150>)
 800ff30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ff34:	f000 fc84 	bl	8010840 <__assert_func>
 800ff38:	f100 0514 	add.w	r5, r0, #20
 800ff3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff40:	462b      	mov	r3, r5
 800ff42:	2200      	movs	r2, #0
 800ff44:	4543      	cmp	r3, r8
 800ff46:	d321      	bcc.n	800ff8c <__multiply+0x98>
 800ff48:	f107 0114 	add.w	r1, r7, #20
 800ff4c:	f104 0214 	add.w	r2, r4, #20
 800ff50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ff54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ff58:	9302      	str	r3, [sp, #8]
 800ff5a:	1b13      	subs	r3, r2, r4
 800ff5c:	3b15      	subs	r3, #21
 800ff5e:	f023 0303 	bic.w	r3, r3, #3
 800ff62:	3304      	adds	r3, #4
 800ff64:	f104 0715 	add.w	r7, r4, #21
 800ff68:	42ba      	cmp	r2, r7
 800ff6a:	bf38      	it	cc
 800ff6c:	2304      	movcc	r3, #4
 800ff6e:	9301      	str	r3, [sp, #4]
 800ff70:	9b02      	ldr	r3, [sp, #8]
 800ff72:	9103      	str	r1, [sp, #12]
 800ff74:	428b      	cmp	r3, r1
 800ff76:	d80c      	bhi.n	800ff92 <__multiply+0x9e>
 800ff78:	2e00      	cmp	r6, #0
 800ff7a:	dd03      	ble.n	800ff84 <__multiply+0x90>
 800ff7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d05b      	beq.n	801003c <__multiply+0x148>
 800ff84:	6106      	str	r6, [r0, #16]
 800ff86:	b005      	add	sp, #20
 800ff88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff8c:	f843 2b04 	str.w	r2, [r3], #4
 800ff90:	e7d8      	b.n	800ff44 <__multiply+0x50>
 800ff92:	f8b1 a000 	ldrh.w	sl, [r1]
 800ff96:	f1ba 0f00 	cmp.w	sl, #0
 800ff9a:	d024      	beq.n	800ffe6 <__multiply+0xf2>
 800ff9c:	f104 0e14 	add.w	lr, r4, #20
 800ffa0:	46a9      	mov	r9, r5
 800ffa2:	f04f 0c00 	mov.w	ip, #0
 800ffa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ffaa:	f8d9 3000 	ldr.w	r3, [r9]
 800ffae:	fa1f fb87 	uxth.w	fp, r7
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800ffb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ffbc:	f8d9 7000 	ldr.w	r7, [r9]
 800ffc0:	4463      	add	r3, ip
 800ffc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ffc6:	fb0a c70b 	mla	r7, sl, fp, ip
 800ffca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ffd4:	4572      	cmp	r2, lr
 800ffd6:	f849 3b04 	str.w	r3, [r9], #4
 800ffda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ffde:	d8e2      	bhi.n	800ffa6 <__multiply+0xb2>
 800ffe0:	9b01      	ldr	r3, [sp, #4]
 800ffe2:	f845 c003 	str.w	ip, [r5, r3]
 800ffe6:	9b03      	ldr	r3, [sp, #12]
 800ffe8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ffec:	3104      	adds	r1, #4
 800ffee:	f1b9 0f00 	cmp.w	r9, #0
 800fff2:	d021      	beq.n	8010038 <__multiply+0x144>
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	f104 0c14 	add.w	ip, r4, #20
 800fffa:	46ae      	mov	lr, r5
 800fffc:	f04f 0a00 	mov.w	sl, #0
 8010000:	f8bc b000 	ldrh.w	fp, [ip]
 8010004:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010008:	fb09 770b 	mla	r7, r9, fp, r7
 801000c:	4457      	add	r7, sl
 801000e:	b29b      	uxth	r3, r3
 8010010:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010014:	f84e 3b04 	str.w	r3, [lr], #4
 8010018:	f85c 3b04 	ldr.w	r3, [ip], #4
 801001c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010020:	f8be 3000 	ldrh.w	r3, [lr]
 8010024:	fb09 330a 	mla	r3, r9, sl, r3
 8010028:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801002c:	4562      	cmp	r2, ip
 801002e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010032:	d8e5      	bhi.n	8010000 <__multiply+0x10c>
 8010034:	9f01      	ldr	r7, [sp, #4]
 8010036:	51eb      	str	r3, [r5, r7]
 8010038:	3504      	adds	r5, #4
 801003a:	e799      	b.n	800ff70 <__multiply+0x7c>
 801003c:	3e01      	subs	r6, #1
 801003e:	e79b      	b.n	800ff78 <__multiply+0x84>
 8010040:	08011b34 	.word	0x08011b34
 8010044:	08011b45 	.word	0x08011b45

08010048 <__pow5mult>:
 8010048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801004c:	4615      	mov	r5, r2
 801004e:	f012 0203 	ands.w	r2, r2, #3
 8010052:	4607      	mov	r7, r0
 8010054:	460e      	mov	r6, r1
 8010056:	d007      	beq.n	8010068 <__pow5mult+0x20>
 8010058:	4c25      	ldr	r4, [pc, #148]	@ (80100f0 <__pow5mult+0xa8>)
 801005a:	3a01      	subs	r2, #1
 801005c:	2300      	movs	r3, #0
 801005e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010062:	f7ff fe9f 	bl	800fda4 <__multadd>
 8010066:	4606      	mov	r6, r0
 8010068:	10ad      	asrs	r5, r5, #2
 801006a:	d03d      	beq.n	80100e8 <__pow5mult+0xa0>
 801006c:	69fc      	ldr	r4, [r7, #28]
 801006e:	b97c      	cbnz	r4, 8010090 <__pow5mult+0x48>
 8010070:	2010      	movs	r0, #16
 8010072:	f7ff fd7f 	bl	800fb74 <malloc>
 8010076:	4602      	mov	r2, r0
 8010078:	61f8      	str	r0, [r7, #28]
 801007a:	b928      	cbnz	r0, 8010088 <__pow5mult+0x40>
 801007c:	4b1d      	ldr	r3, [pc, #116]	@ (80100f4 <__pow5mult+0xac>)
 801007e:	481e      	ldr	r0, [pc, #120]	@ (80100f8 <__pow5mult+0xb0>)
 8010080:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010084:	f000 fbdc 	bl	8010840 <__assert_func>
 8010088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801008c:	6004      	str	r4, [r0, #0]
 801008e:	60c4      	str	r4, [r0, #12]
 8010090:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010098:	b94c      	cbnz	r4, 80100ae <__pow5mult+0x66>
 801009a:	f240 2171 	movw	r1, #625	@ 0x271
 801009e:	4638      	mov	r0, r7
 80100a0:	f7ff ff12 	bl	800fec8 <__i2b>
 80100a4:	2300      	movs	r3, #0
 80100a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80100aa:	4604      	mov	r4, r0
 80100ac:	6003      	str	r3, [r0, #0]
 80100ae:	f04f 0900 	mov.w	r9, #0
 80100b2:	07eb      	lsls	r3, r5, #31
 80100b4:	d50a      	bpl.n	80100cc <__pow5mult+0x84>
 80100b6:	4631      	mov	r1, r6
 80100b8:	4622      	mov	r2, r4
 80100ba:	4638      	mov	r0, r7
 80100bc:	f7ff ff1a 	bl	800fef4 <__multiply>
 80100c0:	4631      	mov	r1, r6
 80100c2:	4680      	mov	r8, r0
 80100c4:	4638      	mov	r0, r7
 80100c6:	f7ff fe4b 	bl	800fd60 <_Bfree>
 80100ca:	4646      	mov	r6, r8
 80100cc:	106d      	asrs	r5, r5, #1
 80100ce:	d00b      	beq.n	80100e8 <__pow5mult+0xa0>
 80100d0:	6820      	ldr	r0, [r4, #0]
 80100d2:	b938      	cbnz	r0, 80100e4 <__pow5mult+0x9c>
 80100d4:	4622      	mov	r2, r4
 80100d6:	4621      	mov	r1, r4
 80100d8:	4638      	mov	r0, r7
 80100da:	f7ff ff0b 	bl	800fef4 <__multiply>
 80100de:	6020      	str	r0, [r4, #0]
 80100e0:	f8c0 9000 	str.w	r9, [r0]
 80100e4:	4604      	mov	r4, r0
 80100e6:	e7e4      	b.n	80100b2 <__pow5mult+0x6a>
 80100e8:	4630      	mov	r0, r6
 80100ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100ee:	bf00      	nop
 80100f0:	08011ba0 	.word	0x08011ba0
 80100f4:	08011ac5 	.word	0x08011ac5
 80100f8:	08011b45 	.word	0x08011b45

080100fc <__lshift>:
 80100fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010100:	460c      	mov	r4, r1
 8010102:	6849      	ldr	r1, [r1, #4]
 8010104:	6923      	ldr	r3, [r4, #16]
 8010106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801010a:	68a3      	ldr	r3, [r4, #8]
 801010c:	4607      	mov	r7, r0
 801010e:	4691      	mov	r9, r2
 8010110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010114:	f108 0601 	add.w	r6, r8, #1
 8010118:	42b3      	cmp	r3, r6
 801011a:	db0b      	blt.n	8010134 <__lshift+0x38>
 801011c:	4638      	mov	r0, r7
 801011e:	f7ff fddf 	bl	800fce0 <_Balloc>
 8010122:	4605      	mov	r5, r0
 8010124:	b948      	cbnz	r0, 801013a <__lshift+0x3e>
 8010126:	4602      	mov	r2, r0
 8010128:	4b28      	ldr	r3, [pc, #160]	@ (80101cc <__lshift+0xd0>)
 801012a:	4829      	ldr	r0, [pc, #164]	@ (80101d0 <__lshift+0xd4>)
 801012c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010130:	f000 fb86 	bl	8010840 <__assert_func>
 8010134:	3101      	adds	r1, #1
 8010136:	005b      	lsls	r3, r3, #1
 8010138:	e7ee      	b.n	8010118 <__lshift+0x1c>
 801013a:	2300      	movs	r3, #0
 801013c:	f100 0114 	add.w	r1, r0, #20
 8010140:	f100 0210 	add.w	r2, r0, #16
 8010144:	4618      	mov	r0, r3
 8010146:	4553      	cmp	r3, sl
 8010148:	db33      	blt.n	80101b2 <__lshift+0xb6>
 801014a:	6920      	ldr	r0, [r4, #16]
 801014c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010150:	f104 0314 	add.w	r3, r4, #20
 8010154:	f019 091f 	ands.w	r9, r9, #31
 8010158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801015c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010160:	d02b      	beq.n	80101ba <__lshift+0xbe>
 8010162:	f1c9 0e20 	rsb	lr, r9, #32
 8010166:	468a      	mov	sl, r1
 8010168:	2200      	movs	r2, #0
 801016a:	6818      	ldr	r0, [r3, #0]
 801016c:	fa00 f009 	lsl.w	r0, r0, r9
 8010170:	4310      	orrs	r0, r2
 8010172:	f84a 0b04 	str.w	r0, [sl], #4
 8010176:	f853 2b04 	ldr.w	r2, [r3], #4
 801017a:	459c      	cmp	ip, r3
 801017c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010180:	d8f3      	bhi.n	801016a <__lshift+0x6e>
 8010182:	ebac 0304 	sub.w	r3, ip, r4
 8010186:	3b15      	subs	r3, #21
 8010188:	f023 0303 	bic.w	r3, r3, #3
 801018c:	3304      	adds	r3, #4
 801018e:	f104 0015 	add.w	r0, r4, #21
 8010192:	4584      	cmp	ip, r0
 8010194:	bf38      	it	cc
 8010196:	2304      	movcc	r3, #4
 8010198:	50ca      	str	r2, [r1, r3]
 801019a:	b10a      	cbz	r2, 80101a0 <__lshift+0xa4>
 801019c:	f108 0602 	add.w	r6, r8, #2
 80101a0:	3e01      	subs	r6, #1
 80101a2:	4638      	mov	r0, r7
 80101a4:	612e      	str	r6, [r5, #16]
 80101a6:	4621      	mov	r1, r4
 80101a8:	f7ff fdda 	bl	800fd60 <_Bfree>
 80101ac:	4628      	mov	r0, r5
 80101ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80101b6:	3301      	adds	r3, #1
 80101b8:	e7c5      	b.n	8010146 <__lshift+0x4a>
 80101ba:	3904      	subs	r1, #4
 80101bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80101c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80101c4:	459c      	cmp	ip, r3
 80101c6:	d8f9      	bhi.n	80101bc <__lshift+0xc0>
 80101c8:	e7ea      	b.n	80101a0 <__lshift+0xa4>
 80101ca:	bf00      	nop
 80101cc:	08011b34 	.word	0x08011b34
 80101d0:	08011b45 	.word	0x08011b45

080101d4 <__mcmp>:
 80101d4:	690a      	ldr	r2, [r1, #16]
 80101d6:	4603      	mov	r3, r0
 80101d8:	6900      	ldr	r0, [r0, #16]
 80101da:	1a80      	subs	r0, r0, r2
 80101dc:	b530      	push	{r4, r5, lr}
 80101de:	d10e      	bne.n	80101fe <__mcmp+0x2a>
 80101e0:	3314      	adds	r3, #20
 80101e2:	3114      	adds	r1, #20
 80101e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80101e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80101ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80101f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80101f4:	4295      	cmp	r5, r2
 80101f6:	d003      	beq.n	8010200 <__mcmp+0x2c>
 80101f8:	d205      	bcs.n	8010206 <__mcmp+0x32>
 80101fa:	f04f 30ff 	mov.w	r0, #4294967295
 80101fe:	bd30      	pop	{r4, r5, pc}
 8010200:	42a3      	cmp	r3, r4
 8010202:	d3f3      	bcc.n	80101ec <__mcmp+0x18>
 8010204:	e7fb      	b.n	80101fe <__mcmp+0x2a>
 8010206:	2001      	movs	r0, #1
 8010208:	e7f9      	b.n	80101fe <__mcmp+0x2a>
	...

0801020c <__mdiff>:
 801020c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010210:	4689      	mov	r9, r1
 8010212:	4606      	mov	r6, r0
 8010214:	4611      	mov	r1, r2
 8010216:	4648      	mov	r0, r9
 8010218:	4614      	mov	r4, r2
 801021a:	f7ff ffdb 	bl	80101d4 <__mcmp>
 801021e:	1e05      	subs	r5, r0, #0
 8010220:	d112      	bne.n	8010248 <__mdiff+0x3c>
 8010222:	4629      	mov	r1, r5
 8010224:	4630      	mov	r0, r6
 8010226:	f7ff fd5b 	bl	800fce0 <_Balloc>
 801022a:	4602      	mov	r2, r0
 801022c:	b928      	cbnz	r0, 801023a <__mdiff+0x2e>
 801022e:	4b3f      	ldr	r3, [pc, #252]	@ (801032c <__mdiff+0x120>)
 8010230:	f240 2137 	movw	r1, #567	@ 0x237
 8010234:	483e      	ldr	r0, [pc, #248]	@ (8010330 <__mdiff+0x124>)
 8010236:	f000 fb03 	bl	8010840 <__assert_func>
 801023a:	2301      	movs	r3, #1
 801023c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010240:	4610      	mov	r0, r2
 8010242:	b003      	add	sp, #12
 8010244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010248:	bfbc      	itt	lt
 801024a:	464b      	movlt	r3, r9
 801024c:	46a1      	movlt	r9, r4
 801024e:	4630      	mov	r0, r6
 8010250:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010254:	bfba      	itte	lt
 8010256:	461c      	movlt	r4, r3
 8010258:	2501      	movlt	r5, #1
 801025a:	2500      	movge	r5, #0
 801025c:	f7ff fd40 	bl	800fce0 <_Balloc>
 8010260:	4602      	mov	r2, r0
 8010262:	b918      	cbnz	r0, 801026c <__mdiff+0x60>
 8010264:	4b31      	ldr	r3, [pc, #196]	@ (801032c <__mdiff+0x120>)
 8010266:	f240 2145 	movw	r1, #581	@ 0x245
 801026a:	e7e3      	b.n	8010234 <__mdiff+0x28>
 801026c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010270:	6926      	ldr	r6, [r4, #16]
 8010272:	60c5      	str	r5, [r0, #12]
 8010274:	f109 0310 	add.w	r3, r9, #16
 8010278:	f109 0514 	add.w	r5, r9, #20
 801027c:	f104 0e14 	add.w	lr, r4, #20
 8010280:	f100 0b14 	add.w	fp, r0, #20
 8010284:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010288:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801028c:	9301      	str	r3, [sp, #4]
 801028e:	46d9      	mov	r9, fp
 8010290:	f04f 0c00 	mov.w	ip, #0
 8010294:	9b01      	ldr	r3, [sp, #4]
 8010296:	f85e 0b04 	ldr.w	r0, [lr], #4
 801029a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801029e:	9301      	str	r3, [sp, #4]
 80102a0:	fa1f f38a 	uxth.w	r3, sl
 80102a4:	4619      	mov	r1, r3
 80102a6:	b283      	uxth	r3, r0
 80102a8:	1acb      	subs	r3, r1, r3
 80102aa:	0c00      	lsrs	r0, r0, #16
 80102ac:	4463      	add	r3, ip
 80102ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80102b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80102bc:	4576      	cmp	r6, lr
 80102be:	f849 3b04 	str.w	r3, [r9], #4
 80102c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80102c6:	d8e5      	bhi.n	8010294 <__mdiff+0x88>
 80102c8:	1b33      	subs	r3, r6, r4
 80102ca:	3b15      	subs	r3, #21
 80102cc:	f023 0303 	bic.w	r3, r3, #3
 80102d0:	3415      	adds	r4, #21
 80102d2:	3304      	adds	r3, #4
 80102d4:	42a6      	cmp	r6, r4
 80102d6:	bf38      	it	cc
 80102d8:	2304      	movcc	r3, #4
 80102da:	441d      	add	r5, r3
 80102dc:	445b      	add	r3, fp
 80102de:	461e      	mov	r6, r3
 80102e0:	462c      	mov	r4, r5
 80102e2:	4544      	cmp	r4, r8
 80102e4:	d30e      	bcc.n	8010304 <__mdiff+0xf8>
 80102e6:	f108 0103 	add.w	r1, r8, #3
 80102ea:	1b49      	subs	r1, r1, r5
 80102ec:	f021 0103 	bic.w	r1, r1, #3
 80102f0:	3d03      	subs	r5, #3
 80102f2:	45a8      	cmp	r8, r5
 80102f4:	bf38      	it	cc
 80102f6:	2100      	movcc	r1, #0
 80102f8:	440b      	add	r3, r1
 80102fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80102fe:	b191      	cbz	r1, 8010326 <__mdiff+0x11a>
 8010300:	6117      	str	r7, [r2, #16]
 8010302:	e79d      	b.n	8010240 <__mdiff+0x34>
 8010304:	f854 1b04 	ldr.w	r1, [r4], #4
 8010308:	46e6      	mov	lr, ip
 801030a:	0c08      	lsrs	r0, r1, #16
 801030c:	fa1c fc81 	uxtah	ip, ip, r1
 8010310:	4471      	add	r1, lr
 8010312:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010316:	b289      	uxth	r1, r1
 8010318:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801031c:	f846 1b04 	str.w	r1, [r6], #4
 8010320:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010324:	e7dd      	b.n	80102e2 <__mdiff+0xd6>
 8010326:	3f01      	subs	r7, #1
 8010328:	e7e7      	b.n	80102fa <__mdiff+0xee>
 801032a:	bf00      	nop
 801032c:	08011b34 	.word	0x08011b34
 8010330:	08011b45 	.word	0x08011b45

08010334 <__d2b>:
 8010334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010338:	460f      	mov	r7, r1
 801033a:	2101      	movs	r1, #1
 801033c:	ec59 8b10 	vmov	r8, r9, d0
 8010340:	4616      	mov	r6, r2
 8010342:	f7ff fccd 	bl	800fce0 <_Balloc>
 8010346:	4604      	mov	r4, r0
 8010348:	b930      	cbnz	r0, 8010358 <__d2b+0x24>
 801034a:	4602      	mov	r2, r0
 801034c:	4b23      	ldr	r3, [pc, #140]	@ (80103dc <__d2b+0xa8>)
 801034e:	4824      	ldr	r0, [pc, #144]	@ (80103e0 <__d2b+0xac>)
 8010350:	f240 310f 	movw	r1, #783	@ 0x30f
 8010354:	f000 fa74 	bl	8010840 <__assert_func>
 8010358:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801035c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010360:	b10d      	cbz	r5, 8010366 <__d2b+0x32>
 8010362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010366:	9301      	str	r3, [sp, #4]
 8010368:	f1b8 0300 	subs.w	r3, r8, #0
 801036c:	d023      	beq.n	80103b6 <__d2b+0x82>
 801036e:	4668      	mov	r0, sp
 8010370:	9300      	str	r3, [sp, #0]
 8010372:	f7ff fd7c 	bl	800fe6e <__lo0bits>
 8010376:	e9dd 1200 	ldrd	r1, r2, [sp]
 801037a:	b1d0      	cbz	r0, 80103b2 <__d2b+0x7e>
 801037c:	f1c0 0320 	rsb	r3, r0, #32
 8010380:	fa02 f303 	lsl.w	r3, r2, r3
 8010384:	430b      	orrs	r3, r1
 8010386:	40c2      	lsrs	r2, r0
 8010388:	6163      	str	r3, [r4, #20]
 801038a:	9201      	str	r2, [sp, #4]
 801038c:	9b01      	ldr	r3, [sp, #4]
 801038e:	61a3      	str	r3, [r4, #24]
 8010390:	2b00      	cmp	r3, #0
 8010392:	bf0c      	ite	eq
 8010394:	2201      	moveq	r2, #1
 8010396:	2202      	movne	r2, #2
 8010398:	6122      	str	r2, [r4, #16]
 801039a:	b1a5      	cbz	r5, 80103c6 <__d2b+0x92>
 801039c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80103a0:	4405      	add	r5, r0
 80103a2:	603d      	str	r5, [r7, #0]
 80103a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80103a8:	6030      	str	r0, [r6, #0]
 80103aa:	4620      	mov	r0, r4
 80103ac:	b003      	add	sp, #12
 80103ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103b2:	6161      	str	r1, [r4, #20]
 80103b4:	e7ea      	b.n	801038c <__d2b+0x58>
 80103b6:	a801      	add	r0, sp, #4
 80103b8:	f7ff fd59 	bl	800fe6e <__lo0bits>
 80103bc:	9b01      	ldr	r3, [sp, #4]
 80103be:	6163      	str	r3, [r4, #20]
 80103c0:	3020      	adds	r0, #32
 80103c2:	2201      	movs	r2, #1
 80103c4:	e7e8      	b.n	8010398 <__d2b+0x64>
 80103c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80103ce:	6038      	str	r0, [r7, #0]
 80103d0:	6918      	ldr	r0, [r3, #16]
 80103d2:	f7ff fd2d 	bl	800fe30 <__hi0bits>
 80103d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103da:	e7e5      	b.n	80103a8 <__d2b+0x74>
 80103dc:	08011b34 	.word	0x08011b34
 80103e0:	08011b45 	.word	0x08011b45

080103e4 <__ssputs_r>:
 80103e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103e8:	688e      	ldr	r6, [r1, #8]
 80103ea:	461f      	mov	r7, r3
 80103ec:	42be      	cmp	r6, r7
 80103ee:	680b      	ldr	r3, [r1, #0]
 80103f0:	4682      	mov	sl, r0
 80103f2:	460c      	mov	r4, r1
 80103f4:	4690      	mov	r8, r2
 80103f6:	d82d      	bhi.n	8010454 <__ssputs_r+0x70>
 80103f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010400:	d026      	beq.n	8010450 <__ssputs_r+0x6c>
 8010402:	6965      	ldr	r5, [r4, #20]
 8010404:	6909      	ldr	r1, [r1, #16]
 8010406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801040a:	eba3 0901 	sub.w	r9, r3, r1
 801040e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010412:	1c7b      	adds	r3, r7, #1
 8010414:	444b      	add	r3, r9
 8010416:	106d      	asrs	r5, r5, #1
 8010418:	429d      	cmp	r5, r3
 801041a:	bf38      	it	cc
 801041c:	461d      	movcc	r5, r3
 801041e:	0553      	lsls	r3, r2, #21
 8010420:	d527      	bpl.n	8010472 <__ssputs_r+0x8e>
 8010422:	4629      	mov	r1, r5
 8010424:	f7ff fbd0 	bl	800fbc8 <_malloc_r>
 8010428:	4606      	mov	r6, r0
 801042a:	b360      	cbz	r0, 8010486 <__ssputs_r+0xa2>
 801042c:	6921      	ldr	r1, [r4, #16]
 801042e:	464a      	mov	r2, r9
 8010430:	f7fe fcf9 	bl	800ee26 <memcpy>
 8010434:	89a3      	ldrh	r3, [r4, #12]
 8010436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801043a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801043e:	81a3      	strh	r3, [r4, #12]
 8010440:	6126      	str	r6, [r4, #16]
 8010442:	6165      	str	r5, [r4, #20]
 8010444:	444e      	add	r6, r9
 8010446:	eba5 0509 	sub.w	r5, r5, r9
 801044a:	6026      	str	r6, [r4, #0]
 801044c:	60a5      	str	r5, [r4, #8]
 801044e:	463e      	mov	r6, r7
 8010450:	42be      	cmp	r6, r7
 8010452:	d900      	bls.n	8010456 <__ssputs_r+0x72>
 8010454:	463e      	mov	r6, r7
 8010456:	6820      	ldr	r0, [r4, #0]
 8010458:	4632      	mov	r2, r6
 801045a:	4641      	mov	r1, r8
 801045c:	f000 f9c6 	bl	80107ec <memmove>
 8010460:	68a3      	ldr	r3, [r4, #8]
 8010462:	1b9b      	subs	r3, r3, r6
 8010464:	60a3      	str	r3, [r4, #8]
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	4433      	add	r3, r6
 801046a:	6023      	str	r3, [r4, #0]
 801046c:	2000      	movs	r0, #0
 801046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010472:	462a      	mov	r2, r5
 8010474:	f000 fa28 	bl	80108c8 <_realloc_r>
 8010478:	4606      	mov	r6, r0
 801047a:	2800      	cmp	r0, #0
 801047c:	d1e0      	bne.n	8010440 <__ssputs_r+0x5c>
 801047e:	6921      	ldr	r1, [r4, #16]
 8010480:	4650      	mov	r0, sl
 8010482:	f7ff fb2d 	bl	800fae0 <_free_r>
 8010486:	230c      	movs	r3, #12
 8010488:	f8ca 3000 	str.w	r3, [sl]
 801048c:	89a3      	ldrh	r3, [r4, #12]
 801048e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010492:	81a3      	strh	r3, [r4, #12]
 8010494:	f04f 30ff 	mov.w	r0, #4294967295
 8010498:	e7e9      	b.n	801046e <__ssputs_r+0x8a>
	...

0801049c <_svfiprintf_r>:
 801049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a0:	4698      	mov	r8, r3
 80104a2:	898b      	ldrh	r3, [r1, #12]
 80104a4:	061b      	lsls	r3, r3, #24
 80104a6:	b09d      	sub	sp, #116	@ 0x74
 80104a8:	4607      	mov	r7, r0
 80104aa:	460d      	mov	r5, r1
 80104ac:	4614      	mov	r4, r2
 80104ae:	d510      	bpl.n	80104d2 <_svfiprintf_r+0x36>
 80104b0:	690b      	ldr	r3, [r1, #16]
 80104b2:	b973      	cbnz	r3, 80104d2 <_svfiprintf_r+0x36>
 80104b4:	2140      	movs	r1, #64	@ 0x40
 80104b6:	f7ff fb87 	bl	800fbc8 <_malloc_r>
 80104ba:	6028      	str	r0, [r5, #0]
 80104bc:	6128      	str	r0, [r5, #16]
 80104be:	b930      	cbnz	r0, 80104ce <_svfiprintf_r+0x32>
 80104c0:	230c      	movs	r3, #12
 80104c2:	603b      	str	r3, [r7, #0]
 80104c4:	f04f 30ff 	mov.w	r0, #4294967295
 80104c8:	b01d      	add	sp, #116	@ 0x74
 80104ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ce:	2340      	movs	r3, #64	@ 0x40
 80104d0:	616b      	str	r3, [r5, #20]
 80104d2:	2300      	movs	r3, #0
 80104d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80104d6:	2320      	movs	r3, #32
 80104d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80104e0:	2330      	movs	r3, #48	@ 0x30
 80104e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010680 <_svfiprintf_r+0x1e4>
 80104e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104ea:	f04f 0901 	mov.w	r9, #1
 80104ee:	4623      	mov	r3, r4
 80104f0:	469a      	mov	sl, r3
 80104f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104f6:	b10a      	cbz	r2, 80104fc <_svfiprintf_r+0x60>
 80104f8:	2a25      	cmp	r2, #37	@ 0x25
 80104fa:	d1f9      	bne.n	80104f0 <_svfiprintf_r+0x54>
 80104fc:	ebba 0b04 	subs.w	fp, sl, r4
 8010500:	d00b      	beq.n	801051a <_svfiprintf_r+0x7e>
 8010502:	465b      	mov	r3, fp
 8010504:	4622      	mov	r2, r4
 8010506:	4629      	mov	r1, r5
 8010508:	4638      	mov	r0, r7
 801050a:	f7ff ff6b 	bl	80103e4 <__ssputs_r>
 801050e:	3001      	adds	r0, #1
 8010510:	f000 80a7 	beq.w	8010662 <_svfiprintf_r+0x1c6>
 8010514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010516:	445a      	add	r2, fp
 8010518:	9209      	str	r2, [sp, #36]	@ 0x24
 801051a:	f89a 3000 	ldrb.w	r3, [sl]
 801051e:	2b00      	cmp	r3, #0
 8010520:	f000 809f 	beq.w	8010662 <_svfiprintf_r+0x1c6>
 8010524:	2300      	movs	r3, #0
 8010526:	f04f 32ff 	mov.w	r2, #4294967295
 801052a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801052e:	f10a 0a01 	add.w	sl, sl, #1
 8010532:	9304      	str	r3, [sp, #16]
 8010534:	9307      	str	r3, [sp, #28]
 8010536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801053a:	931a      	str	r3, [sp, #104]	@ 0x68
 801053c:	4654      	mov	r4, sl
 801053e:	2205      	movs	r2, #5
 8010540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010544:	484e      	ldr	r0, [pc, #312]	@ (8010680 <_svfiprintf_r+0x1e4>)
 8010546:	f7ef fe43 	bl	80001d0 <memchr>
 801054a:	9a04      	ldr	r2, [sp, #16]
 801054c:	b9d8      	cbnz	r0, 8010586 <_svfiprintf_r+0xea>
 801054e:	06d0      	lsls	r0, r2, #27
 8010550:	bf44      	itt	mi
 8010552:	2320      	movmi	r3, #32
 8010554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010558:	0711      	lsls	r1, r2, #28
 801055a:	bf44      	itt	mi
 801055c:	232b      	movmi	r3, #43	@ 0x2b
 801055e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010562:	f89a 3000 	ldrb.w	r3, [sl]
 8010566:	2b2a      	cmp	r3, #42	@ 0x2a
 8010568:	d015      	beq.n	8010596 <_svfiprintf_r+0xfa>
 801056a:	9a07      	ldr	r2, [sp, #28]
 801056c:	4654      	mov	r4, sl
 801056e:	2000      	movs	r0, #0
 8010570:	f04f 0c0a 	mov.w	ip, #10
 8010574:	4621      	mov	r1, r4
 8010576:	f811 3b01 	ldrb.w	r3, [r1], #1
 801057a:	3b30      	subs	r3, #48	@ 0x30
 801057c:	2b09      	cmp	r3, #9
 801057e:	d94b      	bls.n	8010618 <_svfiprintf_r+0x17c>
 8010580:	b1b0      	cbz	r0, 80105b0 <_svfiprintf_r+0x114>
 8010582:	9207      	str	r2, [sp, #28]
 8010584:	e014      	b.n	80105b0 <_svfiprintf_r+0x114>
 8010586:	eba0 0308 	sub.w	r3, r0, r8
 801058a:	fa09 f303 	lsl.w	r3, r9, r3
 801058e:	4313      	orrs	r3, r2
 8010590:	9304      	str	r3, [sp, #16]
 8010592:	46a2      	mov	sl, r4
 8010594:	e7d2      	b.n	801053c <_svfiprintf_r+0xa0>
 8010596:	9b03      	ldr	r3, [sp, #12]
 8010598:	1d19      	adds	r1, r3, #4
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	9103      	str	r1, [sp, #12]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	bfbb      	ittet	lt
 80105a2:	425b      	neglt	r3, r3
 80105a4:	f042 0202 	orrlt.w	r2, r2, #2
 80105a8:	9307      	strge	r3, [sp, #28]
 80105aa:	9307      	strlt	r3, [sp, #28]
 80105ac:	bfb8      	it	lt
 80105ae:	9204      	strlt	r2, [sp, #16]
 80105b0:	7823      	ldrb	r3, [r4, #0]
 80105b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80105b4:	d10a      	bne.n	80105cc <_svfiprintf_r+0x130>
 80105b6:	7863      	ldrb	r3, [r4, #1]
 80105b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80105ba:	d132      	bne.n	8010622 <_svfiprintf_r+0x186>
 80105bc:	9b03      	ldr	r3, [sp, #12]
 80105be:	1d1a      	adds	r2, r3, #4
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	9203      	str	r2, [sp, #12]
 80105c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105c8:	3402      	adds	r4, #2
 80105ca:	9305      	str	r3, [sp, #20]
 80105cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010690 <_svfiprintf_r+0x1f4>
 80105d0:	7821      	ldrb	r1, [r4, #0]
 80105d2:	2203      	movs	r2, #3
 80105d4:	4650      	mov	r0, sl
 80105d6:	f7ef fdfb 	bl	80001d0 <memchr>
 80105da:	b138      	cbz	r0, 80105ec <_svfiprintf_r+0x150>
 80105dc:	9b04      	ldr	r3, [sp, #16]
 80105de:	eba0 000a 	sub.w	r0, r0, sl
 80105e2:	2240      	movs	r2, #64	@ 0x40
 80105e4:	4082      	lsls	r2, r0
 80105e6:	4313      	orrs	r3, r2
 80105e8:	3401      	adds	r4, #1
 80105ea:	9304      	str	r3, [sp, #16]
 80105ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105f0:	4824      	ldr	r0, [pc, #144]	@ (8010684 <_svfiprintf_r+0x1e8>)
 80105f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105f6:	2206      	movs	r2, #6
 80105f8:	f7ef fdea 	bl	80001d0 <memchr>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	d036      	beq.n	801066e <_svfiprintf_r+0x1d2>
 8010600:	4b21      	ldr	r3, [pc, #132]	@ (8010688 <_svfiprintf_r+0x1ec>)
 8010602:	bb1b      	cbnz	r3, 801064c <_svfiprintf_r+0x1b0>
 8010604:	9b03      	ldr	r3, [sp, #12]
 8010606:	3307      	adds	r3, #7
 8010608:	f023 0307 	bic.w	r3, r3, #7
 801060c:	3308      	adds	r3, #8
 801060e:	9303      	str	r3, [sp, #12]
 8010610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010612:	4433      	add	r3, r6
 8010614:	9309      	str	r3, [sp, #36]	@ 0x24
 8010616:	e76a      	b.n	80104ee <_svfiprintf_r+0x52>
 8010618:	fb0c 3202 	mla	r2, ip, r2, r3
 801061c:	460c      	mov	r4, r1
 801061e:	2001      	movs	r0, #1
 8010620:	e7a8      	b.n	8010574 <_svfiprintf_r+0xd8>
 8010622:	2300      	movs	r3, #0
 8010624:	3401      	adds	r4, #1
 8010626:	9305      	str	r3, [sp, #20]
 8010628:	4619      	mov	r1, r3
 801062a:	f04f 0c0a 	mov.w	ip, #10
 801062e:	4620      	mov	r0, r4
 8010630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010634:	3a30      	subs	r2, #48	@ 0x30
 8010636:	2a09      	cmp	r2, #9
 8010638:	d903      	bls.n	8010642 <_svfiprintf_r+0x1a6>
 801063a:	2b00      	cmp	r3, #0
 801063c:	d0c6      	beq.n	80105cc <_svfiprintf_r+0x130>
 801063e:	9105      	str	r1, [sp, #20]
 8010640:	e7c4      	b.n	80105cc <_svfiprintf_r+0x130>
 8010642:	fb0c 2101 	mla	r1, ip, r1, r2
 8010646:	4604      	mov	r4, r0
 8010648:	2301      	movs	r3, #1
 801064a:	e7f0      	b.n	801062e <_svfiprintf_r+0x192>
 801064c:	ab03      	add	r3, sp, #12
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	462a      	mov	r2, r5
 8010652:	4b0e      	ldr	r3, [pc, #56]	@ (801068c <_svfiprintf_r+0x1f0>)
 8010654:	a904      	add	r1, sp, #16
 8010656:	4638      	mov	r0, r7
 8010658:	f7fd fe88 	bl	800e36c <_printf_float>
 801065c:	1c42      	adds	r2, r0, #1
 801065e:	4606      	mov	r6, r0
 8010660:	d1d6      	bne.n	8010610 <_svfiprintf_r+0x174>
 8010662:	89ab      	ldrh	r3, [r5, #12]
 8010664:	065b      	lsls	r3, r3, #25
 8010666:	f53f af2d 	bmi.w	80104c4 <_svfiprintf_r+0x28>
 801066a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801066c:	e72c      	b.n	80104c8 <_svfiprintf_r+0x2c>
 801066e:	ab03      	add	r3, sp, #12
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	462a      	mov	r2, r5
 8010674:	4b05      	ldr	r3, [pc, #20]	@ (801068c <_svfiprintf_r+0x1f0>)
 8010676:	a904      	add	r1, sp, #16
 8010678:	4638      	mov	r0, r7
 801067a:	f7fe f90f 	bl	800e89c <_printf_i>
 801067e:	e7ed      	b.n	801065c <_svfiprintf_r+0x1c0>
 8010680:	08011ca0 	.word	0x08011ca0
 8010684:	08011caa 	.word	0x08011caa
 8010688:	0800e36d 	.word	0x0800e36d
 801068c:	080103e5 	.word	0x080103e5
 8010690:	08011ca6 	.word	0x08011ca6

08010694 <__sflush_r>:
 8010694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801069c:	0716      	lsls	r6, r2, #28
 801069e:	4605      	mov	r5, r0
 80106a0:	460c      	mov	r4, r1
 80106a2:	d454      	bmi.n	801074e <__sflush_r+0xba>
 80106a4:	684b      	ldr	r3, [r1, #4]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	dc02      	bgt.n	80106b0 <__sflush_r+0x1c>
 80106aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	dd48      	ble.n	8010742 <__sflush_r+0xae>
 80106b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106b2:	2e00      	cmp	r6, #0
 80106b4:	d045      	beq.n	8010742 <__sflush_r+0xae>
 80106b6:	2300      	movs	r3, #0
 80106b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80106bc:	682f      	ldr	r7, [r5, #0]
 80106be:	6a21      	ldr	r1, [r4, #32]
 80106c0:	602b      	str	r3, [r5, #0]
 80106c2:	d030      	beq.n	8010726 <__sflush_r+0x92>
 80106c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80106c6:	89a3      	ldrh	r3, [r4, #12]
 80106c8:	0759      	lsls	r1, r3, #29
 80106ca:	d505      	bpl.n	80106d8 <__sflush_r+0x44>
 80106cc:	6863      	ldr	r3, [r4, #4]
 80106ce:	1ad2      	subs	r2, r2, r3
 80106d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80106d2:	b10b      	cbz	r3, 80106d8 <__sflush_r+0x44>
 80106d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80106d6:	1ad2      	subs	r2, r2, r3
 80106d8:	2300      	movs	r3, #0
 80106da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106dc:	6a21      	ldr	r1, [r4, #32]
 80106de:	4628      	mov	r0, r5
 80106e0:	47b0      	blx	r6
 80106e2:	1c43      	adds	r3, r0, #1
 80106e4:	89a3      	ldrh	r3, [r4, #12]
 80106e6:	d106      	bne.n	80106f6 <__sflush_r+0x62>
 80106e8:	6829      	ldr	r1, [r5, #0]
 80106ea:	291d      	cmp	r1, #29
 80106ec:	d82b      	bhi.n	8010746 <__sflush_r+0xb2>
 80106ee:	4a2a      	ldr	r2, [pc, #168]	@ (8010798 <__sflush_r+0x104>)
 80106f0:	410a      	asrs	r2, r1
 80106f2:	07d6      	lsls	r6, r2, #31
 80106f4:	d427      	bmi.n	8010746 <__sflush_r+0xb2>
 80106f6:	2200      	movs	r2, #0
 80106f8:	6062      	str	r2, [r4, #4]
 80106fa:	04d9      	lsls	r1, r3, #19
 80106fc:	6922      	ldr	r2, [r4, #16]
 80106fe:	6022      	str	r2, [r4, #0]
 8010700:	d504      	bpl.n	801070c <__sflush_r+0x78>
 8010702:	1c42      	adds	r2, r0, #1
 8010704:	d101      	bne.n	801070a <__sflush_r+0x76>
 8010706:	682b      	ldr	r3, [r5, #0]
 8010708:	b903      	cbnz	r3, 801070c <__sflush_r+0x78>
 801070a:	6560      	str	r0, [r4, #84]	@ 0x54
 801070c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801070e:	602f      	str	r7, [r5, #0]
 8010710:	b1b9      	cbz	r1, 8010742 <__sflush_r+0xae>
 8010712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010716:	4299      	cmp	r1, r3
 8010718:	d002      	beq.n	8010720 <__sflush_r+0x8c>
 801071a:	4628      	mov	r0, r5
 801071c:	f7ff f9e0 	bl	800fae0 <_free_r>
 8010720:	2300      	movs	r3, #0
 8010722:	6363      	str	r3, [r4, #52]	@ 0x34
 8010724:	e00d      	b.n	8010742 <__sflush_r+0xae>
 8010726:	2301      	movs	r3, #1
 8010728:	4628      	mov	r0, r5
 801072a:	47b0      	blx	r6
 801072c:	4602      	mov	r2, r0
 801072e:	1c50      	adds	r0, r2, #1
 8010730:	d1c9      	bne.n	80106c6 <__sflush_r+0x32>
 8010732:	682b      	ldr	r3, [r5, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d0c6      	beq.n	80106c6 <__sflush_r+0x32>
 8010738:	2b1d      	cmp	r3, #29
 801073a:	d001      	beq.n	8010740 <__sflush_r+0xac>
 801073c:	2b16      	cmp	r3, #22
 801073e:	d11e      	bne.n	801077e <__sflush_r+0xea>
 8010740:	602f      	str	r7, [r5, #0]
 8010742:	2000      	movs	r0, #0
 8010744:	e022      	b.n	801078c <__sflush_r+0xf8>
 8010746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801074a:	b21b      	sxth	r3, r3
 801074c:	e01b      	b.n	8010786 <__sflush_r+0xf2>
 801074e:	690f      	ldr	r7, [r1, #16]
 8010750:	2f00      	cmp	r7, #0
 8010752:	d0f6      	beq.n	8010742 <__sflush_r+0xae>
 8010754:	0793      	lsls	r3, r2, #30
 8010756:	680e      	ldr	r6, [r1, #0]
 8010758:	bf08      	it	eq
 801075a:	694b      	ldreq	r3, [r1, #20]
 801075c:	600f      	str	r7, [r1, #0]
 801075e:	bf18      	it	ne
 8010760:	2300      	movne	r3, #0
 8010762:	eba6 0807 	sub.w	r8, r6, r7
 8010766:	608b      	str	r3, [r1, #8]
 8010768:	f1b8 0f00 	cmp.w	r8, #0
 801076c:	dde9      	ble.n	8010742 <__sflush_r+0xae>
 801076e:	6a21      	ldr	r1, [r4, #32]
 8010770:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010772:	4643      	mov	r3, r8
 8010774:	463a      	mov	r2, r7
 8010776:	4628      	mov	r0, r5
 8010778:	47b0      	blx	r6
 801077a:	2800      	cmp	r0, #0
 801077c:	dc08      	bgt.n	8010790 <__sflush_r+0xfc>
 801077e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010786:	81a3      	strh	r3, [r4, #12]
 8010788:	f04f 30ff 	mov.w	r0, #4294967295
 801078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010790:	4407      	add	r7, r0
 8010792:	eba8 0800 	sub.w	r8, r8, r0
 8010796:	e7e7      	b.n	8010768 <__sflush_r+0xd4>
 8010798:	dfbffffe 	.word	0xdfbffffe

0801079c <_fflush_r>:
 801079c:	b538      	push	{r3, r4, r5, lr}
 801079e:	690b      	ldr	r3, [r1, #16]
 80107a0:	4605      	mov	r5, r0
 80107a2:	460c      	mov	r4, r1
 80107a4:	b913      	cbnz	r3, 80107ac <_fflush_r+0x10>
 80107a6:	2500      	movs	r5, #0
 80107a8:	4628      	mov	r0, r5
 80107aa:	bd38      	pop	{r3, r4, r5, pc}
 80107ac:	b118      	cbz	r0, 80107b6 <_fflush_r+0x1a>
 80107ae:	6a03      	ldr	r3, [r0, #32]
 80107b0:	b90b      	cbnz	r3, 80107b6 <_fflush_r+0x1a>
 80107b2:	f7fe fa1f 	bl	800ebf4 <__sinit>
 80107b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d0f3      	beq.n	80107a6 <_fflush_r+0xa>
 80107be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80107c0:	07d0      	lsls	r0, r2, #31
 80107c2:	d404      	bmi.n	80107ce <_fflush_r+0x32>
 80107c4:	0599      	lsls	r1, r3, #22
 80107c6:	d402      	bmi.n	80107ce <_fflush_r+0x32>
 80107c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107ca:	f7fe fb2a 	bl	800ee22 <__retarget_lock_acquire_recursive>
 80107ce:	4628      	mov	r0, r5
 80107d0:	4621      	mov	r1, r4
 80107d2:	f7ff ff5f 	bl	8010694 <__sflush_r>
 80107d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80107d8:	07da      	lsls	r2, r3, #31
 80107da:	4605      	mov	r5, r0
 80107dc:	d4e4      	bmi.n	80107a8 <_fflush_r+0xc>
 80107de:	89a3      	ldrh	r3, [r4, #12]
 80107e0:	059b      	lsls	r3, r3, #22
 80107e2:	d4e1      	bmi.n	80107a8 <_fflush_r+0xc>
 80107e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107e6:	f7fe fb1d 	bl	800ee24 <__retarget_lock_release_recursive>
 80107ea:	e7dd      	b.n	80107a8 <_fflush_r+0xc>

080107ec <memmove>:
 80107ec:	4288      	cmp	r0, r1
 80107ee:	b510      	push	{r4, lr}
 80107f0:	eb01 0402 	add.w	r4, r1, r2
 80107f4:	d902      	bls.n	80107fc <memmove+0x10>
 80107f6:	4284      	cmp	r4, r0
 80107f8:	4623      	mov	r3, r4
 80107fa:	d807      	bhi.n	801080c <memmove+0x20>
 80107fc:	1e43      	subs	r3, r0, #1
 80107fe:	42a1      	cmp	r1, r4
 8010800:	d008      	beq.n	8010814 <memmove+0x28>
 8010802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010806:	f803 2f01 	strb.w	r2, [r3, #1]!
 801080a:	e7f8      	b.n	80107fe <memmove+0x12>
 801080c:	4402      	add	r2, r0
 801080e:	4601      	mov	r1, r0
 8010810:	428a      	cmp	r2, r1
 8010812:	d100      	bne.n	8010816 <memmove+0x2a>
 8010814:	bd10      	pop	{r4, pc}
 8010816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801081a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801081e:	e7f7      	b.n	8010810 <memmove+0x24>

08010820 <_sbrk_r>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	4d06      	ldr	r5, [pc, #24]	@ (801083c <_sbrk_r+0x1c>)
 8010824:	2300      	movs	r3, #0
 8010826:	4604      	mov	r4, r0
 8010828:	4608      	mov	r0, r1
 801082a:	602b      	str	r3, [r5, #0]
 801082c:	f7f4 f9fc 	bl	8004c28 <_sbrk>
 8010830:	1c43      	adds	r3, r0, #1
 8010832:	d102      	bne.n	801083a <_sbrk_r+0x1a>
 8010834:	682b      	ldr	r3, [r5, #0]
 8010836:	b103      	cbz	r3, 801083a <_sbrk_r+0x1a>
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	bd38      	pop	{r3, r4, r5, pc}
 801083c:	20005038 	.word	0x20005038

08010840 <__assert_func>:
 8010840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010842:	4614      	mov	r4, r2
 8010844:	461a      	mov	r2, r3
 8010846:	4b09      	ldr	r3, [pc, #36]	@ (801086c <__assert_func+0x2c>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4605      	mov	r5, r0
 801084c:	68d8      	ldr	r0, [r3, #12]
 801084e:	b954      	cbnz	r4, 8010866 <__assert_func+0x26>
 8010850:	4b07      	ldr	r3, [pc, #28]	@ (8010870 <__assert_func+0x30>)
 8010852:	461c      	mov	r4, r3
 8010854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010858:	9100      	str	r1, [sp, #0]
 801085a:	462b      	mov	r3, r5
 801085c:	4905      	ldr	r1, [pc, #20]	@ (8010874 <__assert_func+0x34>)
 801085e:	f000 f86f 	bl	8010940 <fiprintf>
 8010862:	f000 f87f 	bl	8010964 <abort>
 8010866:	4b04      	ldr	r3, [pc, #16]	@ (8010878 <__assert_func+0x38>)
 8010868:	e7f4      	b.n	8010854 <__assert_func+0x14>
 801086a:	bf00      	nop
 801086c:	20000020 	.word	0x20000020
 8010870:	08011cf6 	.word	0x08011cf6
 8010874:	08011cc8 	.word	0x08011cc8
 8010878:	08011cbb 	.word	0x08011cbb

0801087c <_calloc_r>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	fba1 5402 	umull	r5, r4, r1, r2
 8010882:	b93c      	cbnz	r4, 8010894 <_calloc_r+0x18>
 8010884:	4629      	mov	r1, r5
 8010886:	f7ff f99f 	bl	800fbc8 <_malloc_r>
 801088a:	4606      	mov	r6, r0
 801088c:	b928      	cbnz	r0, 801089a <_calloc_r+0x1e>
 801088e:	2600      	movs	r6, #0
 8010890:	4630      	mov	r0, r6
 8010892:	bd70      	pop	{r4, r5, r6, pc}
 8010894:	220c      	movs	r2, #12
 8010896:	6002      	str	r2, [r0, #0]
 8010898:	e7f9      	b.n	801088e <_calloc_r+0x12>
 801089a:	462a      	mov	r2, r5
 801089c:	4621      	mov	r1, r4
 801089e:	f7fe fa42 	bl	800ed26 <memset>
 80108a2:	e7f5      	b.n	8010890 <_calloc_r+0x14>

080108a4 <__ascii_mbtowc>:
 80108a4:	b082      	sub	sp, #8
 80108a6:	b901      	cbnz	r1, 80108aa <__ascii_mbtowc+0x6>
 80108a8:	a901      	add	r1, sp, #4
 80108aa:	b142      	cbz	r2, 80108be <__ascii_mbtowc+0x1a>
 80108ac:	b14b      	cbz	r3, 80108c2 <__ascii_mbtowc+0x1e>
 80108ae:	7813      	ldrb	r3, [r2, #0]
 80108b0:	600b      	str	r3, [r1, #0]
 80108b2:	7812      	ldrb	r2, [r2, #0]
 80108b4:	1e10      	subs	r0, r2, #0
 80108b6:	bf18      	it	ne
 80108b8:	2001      	movne	r0, #1
 80108ba:	b002      	add	sp, #8
 80108bc:	4770      	bx	lr
 80108be:	4610      	mov	r0, r2
 80108c0:	e7fb      	b.n	80108ba <__ascii_mbtowc+0x16>
 80108c2:	f06f 0001 	mvn.w	r0, #1
 80108c6:	e7f8      	b.n	80108ba <__ascii_mbtowc+0x16>

080108c8 <_realloc_r>:
 80108c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108cc:	4680      	mov	r8, r0
 80108ce:	4615      	mov	r5, r2
 80108d0:	460c      	mov	r4, r1
 80108d2:	b921      	cbnz	r1, 80108de <_realloc_r+0x16>
 80108d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108d8:	4611      	mov	r1, r2
 80108da:	f7ff b975 	b.w	800fbc8 <_malloc_r>
 80108de:	b92a      	cbnz	r2, 80108ec <_realloc_r+0x24>
 80108e0:	f7ff f8fe 	bl	800fae0 <_free_r>
 80108e4:	2400      	movs	r4, #0
 80108e6:	4620      	mov	r0, r4
 80108e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108ec:	f000 f841 	bl	8010972 <_malloc_usable_size_r>
 80108f0:	4285      	cmp	r5, r0
 80108f2:	4606      	mov	r6, r0
 80108f4:	d802      	bhi.n	80108fc <_realloc_r+0x34>
 80108f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80108fa:	d8f4      	bhi.n	80108e6 <_realloc_r+0x1e>
 80108fc:	4629      	mov	r1, r5
 80108fe:	4640      	mov	r0, r8
 8010900:	f7ff f962 	bl	800fbc8 <_malloc_r>
 8010904:	4607      	mov	r7, r0
 8010906:	2800      	cmp	r0, #0
 8010908:	d0ec      	beq.n	80108e4 <_realloc_r+0x1c>
 801090a:	42b5      	cmp	r5, r6
 801090c:	462a      	mov	r2, r5
 801090e:	4621      	mov	r1, r4
 8010910:	bf28      	it	cs
 8010912:	4632      	movcs	r2, r6
 8010914:	f7fe fa87 	bl	800ee26 <memcpy>
 8010918:	4621      	mov	r1, r4
 801091a:	4640      	mov	r0, r8
 801091c:	f7ff f8e0 	bl	800fae0 <_free_r>
 8010920:	463c      	mov	r4, r7
 8010922:	e7e0      	b.n	80108e6 <_realloc_r+0x1e>

08010924 <__ascii_wctomb>:
 8010924:	4603      	mov	r3, r0
 8010926:	4608      	mov	r0, r1
 8010928:	b141      	cbz	r1, 801093c <__ascii_wctomb+0x18>
 801092a:	2aff      	cmp	r2, #255	@ 0xff
 801092c:	d904      	bls.n	8010938 <__ascii_wctomb+0x14>
 801092e:	228a      	movs	r2, #138	@ 0x8a
 8010930:	601a      	str	r2, [r3, #0]
 8010932:	f04f 30ff 	mov.w	r0, #4294967295
 8010936:	4770      	bx	lr
 8010938:	700a      	strb	r2, [r1, #0]
 801093a:	2001      	movs	r0, #1
 801093c:	4770      	bx	lr
	...

08010940 <fiprintf>:
 8010940:	b40e      	push	{r1, r2, r3}
 8010942:	b503      	push	{r0, r1, lr}
 8010944:	4601      	mov	r1, r0
 8010946:	ab03      	add	r3, sp, #12
 8010948:	4805      	ldr	r0, [pc, #20]	@ (8010960 <fiprintf+0x20>)
 801094a:	f853 2b04 	ldr.w	r2, [r3], #4
 801094e:	6800      	ldr	r0, [r0, #0]
 8010950:	9301      	str	r3, [sp, #4]
 8010952:	f000 f83f 	bl	80109d4 <_vfiprintf_r>
 8010956:	b002      	add	sp, #8
 8010958:	f85d eb04 	ldr.w	lr, [sp], #4
 801095c:	b003      	add	sp, #12
 801095e:	4770      	bx	lr
 8010960:	20000020 	.word	0x20000020

08010964 <abort>:
 8010964:	b508      	push	{r3, lr}
 8010966:	2006      	movs	r0, #6
 8010968:	f000 fa08 	bl	8010d7c <raise>
 801096c:	2001      	movs	r0, #1
 801096e:	f7f4 f8e3 	bl	8004b38 <_exit>

08010972 <_malloc_usable_size_r>:
 8010972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010976:	1f18      	subs	r0, r3, #4
 8010978:	2b00      	cmp	r3, #0
 801097a:	bfbc      	itt	lt
 801097c:	580b      	ldrlt	r3, [r1, r0]
 801097e:	18c0      	addlt	r0, r0, r3
 8010980:	4770      	bx	lr

08010982 <__sfputc_r>:
 8010982:	6893      	ldr	r3, [r2, #8]
 8010984:	3b01      	subs	r3, #1
 8010986:	2b00      	cmp	r3, #0
 8010988:	b410      	push	{r4}
 801098a:	6093      	str	r3, [r2, #8]
 801098c:	da08      	bge.n	80109a0 <__sfputc_r+0x1e>
 801098e:	6994      	ldr	r4, [r2, #24]
 8010990:	42a3      	cmp	r3, r4
 8010992:	db01      	blt.n	8010998 <__sfputc_r+0x16>
 8010994:	290a      	cmp	r1, #10
 8010996:	d103      	bne.n	80109a0 <__sfputc_r+0x1e>
 8010998:	f85d 4b04 	ldr.w	r4, [sp], #4
 801099c:	f000 b932 	b.w	8010c04 <__swbuf_r>
 80109a0:	6813      	ldr	r3, [r2, #0]
 80109a2:	1c58      	adds	r0, r3, #1
 80109a4:	6010      	str	r0, [r2, #0]
 80109a6:	7019      	strb	r1, [r3, #0]
 80109a8:	4608      	mov	r0, r1
 80109aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <__sfputs_r>:
 80109b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109b2:	4606      	mov	r6, r0
 80109b4:	460f      	mov	r7, r1
 80109b6:	4614      	mov	r4, r2
 80109b8:	18d5      	adds	r5, r2, r3
 80109ba:	42ac      	cmp	r4, r5
 80109bc:	d101      	bne.n	80109c2 <__sfputs_r+0x12>
 80109be:	2000      	movs	r0, #0
 80109c0:	e007      	b.n	80109d2 <__sfputs_r+0x22>
 80109c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109c6:	463a      	mov	r2, r7
 80109c8:	4630      	mov	r0, r6
 80109ca:	f7ff ffda 	bl	8010982 <__sfputc_r>
 80109ce:	1c43      	adds	r3, r0, #1
 80109d0:	d1f3      	bne.n	80109ba <__sfputs_r+0xa>
 80109d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080109d4 <_vfiprintf_r>:
 80109d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d8:	460d      	mov	r5, r1
 80109da:	b09d      	sub	sp, #116	@ 0x74
 80109dc:	4614      	mov	r4, r2
 80109de:	4698      	mov	r8, r3
 80109e0:	4606      	mov	r6, r0
 80109e2:	b118      	cbz	r0, 80109ec <_vfiprintf_r+0x18>
 80109e4:	6a03      	ldr	r3, [r0, #32]
 80109e6:	b90b      	cbnz	r3, 80109ec <_vfiprintf_r+0x18>
 80109e8:	f7fe f904 	bl	800ebf4 <__sinit>
 80109ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109ee:	07d9      	lsls	r1, r3, #31
 80109f0:	d405      	bmi.n	80109fe <_vfiprintf_r+0x2a>
 80109f2:	89ab      	ldrh	r3, [r5, #12]
 80109f4:	059a      	lsls	r2, r3, #22
 80109f6:	d402      	bmi.n	80109fe <_vfiprintf_r+0x2a>
 80109f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109fa:	f7fe fa12 	bl	800ee22 <__retarget_lock_acquire_recursive>
 80109fe:	89ab      	ldrh	r3, [r5, #12]
 8010a00:	071b      	lsls	r3, r3, #28
 8010a02:	d501      	bpl.n	8010a08 <_vfiprintf_r+0x34>
 8010a04:	692b      	ldr	r3, [r5, #16]
 8010a06:	b99b      	cbnz	r3, 8010a30 <_vfiprintf_r+0x5c>
 8010a08:	4629      	mov	r1, r5
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f000 f938 	bl	8010c80 <__swsetup_r>
 8010a10:	b170      	cbz	r0, 8010a30 <_vfiprintf_r+0x5c>
 8010a12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a14:	07dc      	lsls	r4, r3, #31
 8010a16:	d504      	bpl.n	8010a22 <_vfiprintf_r+0x4e>
 8010a18:	f04f 30ff 	mov.w	r0, #4294967295
 8010a1c:	b01d      	add	sp, #116	@ 0x74
 8010a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a22:	89ab      	ldrh	r3, [r5, #12]
 8010a24:	0598      	lsls	r0, r3, #22
 8010a26:	d4f7      	bmi.n	8010a18 <_vfiprintf_r+0x44>
 8010a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a2a:	f7fe f9fb 	bl	800ee24 <__retarget_lock_release_recursive>
 8010a2e:	e7f3      	b.n	8010a18 <_vfiprintf_r+0x44>
 8010a30:	2300      	movs	r3, #0
 8010a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a34:	2320      	movs	r3, #32
 8010a36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a3e:	2330      	movs	r3, #48	@ 0x30
 8010a40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010bf0 <_vfiprintf_r+0x21c>
 8010a44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a48:	f04f 0901 	mov.w	r9, #1
 8010a4c:	4623      	mov	r3, r4
 8010a4e:	469a      	mov	sl, r3
 8010a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a54:	b10a      	cbz	r2, 8010a5a <_vfiprintf_r+0x86>
 8010a56:	2a25      	cmp	r2, #37	@ 0x25
 8010a58:	d1f9      	bne.n	8010a4e <_vfiprintf_r+0x7a>
 8010a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8010a5e:	d00b      	beq.n	8010a78 <_vfiprintf_r+0xa4>
 8010a60:	465b      	mov	r3, fp
 8010a62:	4622      	mov	r2, r4
 8010a64:	4629      	mov	r1, r5
 8010a66:	4630      	mov	r0, r6
 8010a68:	f7ff ffa2 	bl	80109b0 <__sfputs_r>
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	f000 80a7 	beq.w	8010bc0 <_vfiprintf_r+0x1ec>
 8010a72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a74:	445a      	add	r2, fp
 8010a76:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a78:	f89a 3000 	ldrb.w	r3, [sl]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f000 809f 	beq.w	8010bc0 <_vfiprintf_r+0x1ec>
 8010a82:	2300      	movs	r3, #0
 8010a84:	f04f 32ff 	mov.w	r2, #4294967295
 8010a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a8c:	f10a 0a01 	add.w	sl, sl, #1
 8010a90:	9304      	str	r3, [sp, #16]
 8010a92:	9307      	str	r3, [sp, #28]
 8010a94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a98:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a9a:	4654      	mov	r4, sl
 8010a9c:	2205      	movs	r2, #5
 8010a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010aa2:	4853      	ldr	r0, [pc, #332]	@ (8010bf0 <_vfiprintf_r+0x21c>)
 8010aa4:	f7ef fb94 	bl	80001d0 <memchr>
 8010aa8:	9a04      	ldr	r2, [sp, #16]
 8010aaa:	b9d8      	cbnz	r0, 8010ae4 <_vfiprintf_r+0x110>
 8010aac:	06d1      	lsls	r1, r2, #27
 8010aae:	bf44      	itt	mi
 8010ab0:	2320      	movmi	r3, #32
 8010ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ab6:	0713      	lsls	r3, r2, #28
 8010ab8:	bf44      	itt	mi
 8010aba:	232b      	movmi	r3, #43	@ 0x2b
 8010abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ac4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ac6:	d015      	beq.n	8010af4 <_vfiprintf_r+0x120>
 8010ac8:	9a07      	ldr	r2, [sp, #28]
 8010aca:	4654      	mov	r4, sl
 8010acc:	2000      	movs	r0, #0
 8010ace:	f04f 0c0a 	mov.w	ip, #10
 8010ad2:	4621      	mov	r1, r4
 8010ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ad8:	3b30      	subs	r3, #48	@ 0x30
 8010ada:	2b09      	cmp	r3, #9
 8010adc:	d94b      	bls.n	8010b76 <_vfiprintf_r+0x1a2>
 8010ade:	b1b0      	cbz	r0, 8010b0e <_vfiprintf_r+0x13a>
 8010ae0:	9207      	str	r2, [sp, #28]
 8010ae2:	e014      	b.n	8010b0e <_vfiprintf_r+0x13a>
 8010ae4:	eba0 0308 	sub.w	r3, r0, r8
 8010ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8010aec:	4313      	orrs	r3, r2
 8010aee:	9304      	str	r3, [sp, #16]
 8010af0:	46a2      	mov	sl, r4
 8010af2:	e7d2      	b.n	8010a9a <_vfiprintf_r+0xc6>
 8010af4:	9b03      	ldr	r3, [sp, #12]
 8010af6:	1d19      	adds	r1, r3, #4
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	9103      	str	r1, [sp, #12]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	bfbb      	ittet	lt
 8010b00:	425b      	neglt	r3, r3
 8010b02:	f042 0202 	orrlt.w	r2, r2, #2
 8010b06:	9307      	strge	r3, [sp, #28]
 8010b08:	9307      	strlt	r3, [sp, #28]
 8010b0a:	bfb8      	it	lt
 8010b0c:	9204      	strlt	r2, [sp, #16]
 8010b0e:	7823      	ldrb	r3, [r4, #0]
 8010b10:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b12:	d10a      	bne.n	8010b2a <_vfiprintf_r+0x156>
 8010b14:	7863      	ldrb	r3, [r4, #1]
 8010b16:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b18:	d132      	bne.n	8010b80 <_vfiprintf_r+0x1ac>
 8010b1a:	9b03      	ldr	r3, [sp, #12]
 8010b1c:	1d1a      	adds	r2, r3, #4
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	9203      	str	r2, [sp, #12]
 8010b22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b26:	3402      	adds	r4, #2
 8010b28:	9305      	str	r3, [sp, #20]
 8010b2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c00 <_vfiprintf_r+0x22c>
 8010b2e:	7821      	ldrb	r1, [r4, #0]
 8010b30:	2203      	movs	r2, #3
 8010b32:	4650      	mov	r0, sl
 8010b34:	f7ef fb4c 	bl	80001d0 <memchr>
 8010b38:	b138      	cbz	r0, 8010b4a <_vfiprintf_r+0x176>
 8010b3a:	9b04      	ldr	r3, [sp, #16]
 8010b3c:	eba0 000a 	sub.w	r0, r0, sl
 8010b40:	2240      	movs	r2, #64	@ 0x40
 8010b42:	4082      	lsls	r2, r0
 8010b44:	4313      	orrs	r3, r2
 8010b46:	3401      	adds	r4, #1
 8010b48:	9304      	str	r3, [sp, #16]
 8010b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b4e:	4829      	ldr	r0, [pc, #164]	@ (8010bf4 <_vfiprintf_r+0x220>)
 8010b50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b54:	2206      	movs	r2, #6
 8010b56:	f7ef fb3b 	bl	80001d0 <memchr>
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	d03f      	beq.n	8010bde <_vfiprintf_r+0x20a>
 8010b5e:	4b26      	ldr	r3, [pc, #152]	@ (8010bf8 <_vfiprintf_r+0x224>)
 8010b60:	bb1b      	cbnz	r3, 8010baa <_vfiprintf_r+0x1d6>
 8010b62:	9b03      	ldr	r3, [sp, #12]
 8010b64:	3307      	adds	r3, #7
 8010b66:	f023 0307 	bic.w	r3, r3, #7
 8010b6a:	3308      	adds	r3, #8
 8010b6c:	9303      	str	r3, [sp, #12]
 8010b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b70:	443b      	add	r3, r7
 8010b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b74:	e76a      	b.n	8010a4c <_vfiprintf_r+0x78>
 8010b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b7a:	460c      	mov	r4, r1
 8010b7c:	2001      	movs	r0, #1
 8010b7e:	e7a8      	b.n	8010ad2 <_vfiprintf_r+0xfe>
 8010b80:	2300      	movs	r3, #0
 8010b82:	3401      	adds	r4, #1
 8010b84:	9305      	str	r3, [sp, #20]
 8010b86:	4619      	mov	r1, r3
 8010b88:	f04f 0c0a 	mov.w	ip, #10
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b92:	3a30      	subs	r2, #48	@ 0x30
 8010b94:	2a09      	cmp	r2, #9
 8010b96:	d903      	bls.n	8010ba0 <_vfiprintf_r+0x1cc>
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d0c6      	beq.n	8010b2a <_vfiprintf_r+0x156>
 8010b9c:	9105      	str	r1, [sp, #20]
 8010b9e:	e7c4      	b.n	8010b2a <_vfiprintf_r+0x156>
 8010ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	e7f0      	b.n	8010b8c <_vfiprintf_r+0x1b8>
 8010baa:	ab03      	add	r3, sp, #12
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	462a      	mov	r2, r5
 8010bb0:	4b12      	ldr	r3, [pc, #72]	@ (8010bfc <_vfiprintf_r+0x228>)
 8010bb2:	a904      	add	r1, sp, #16
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f7fd fbd9 	bl	800e36c <_printf_float>
 8010bba:	4607      	mov	r7, r0
 8010bbc:	1c78      	adds	r0, r7, #1
 8010bbe:	d1d6      	bne.n	8010b6e <_vfiprintf_r+0x19a>
 8010bc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010bc2:	07d9      	lsls	r1, r3, #31
 8010bc4:	d405      	bmi.n	8010bd2 <_vfiprintf_r+0x1fe>
 8010bc6:	89ab      	ldrh	r3, [r5, #12]
 8010bc8:	059a      	lsls	r2, r3, #22
 8010bca:	d402      	bmi.n	8010bd2 <_vfiprintf_r+0x1fe>
 8010bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010bce:	f7fe f929 	bl	800ee24 <__retarget_lock_release_recursive>
 8010bd2:	89ab      	ldrh	r3, [r5, #12]
 8010bd4:	065b      	lsls	r3, r3, #25
 8010bd6:	f53f af1f 	bmi.w	8010a18 <_vfiprintf_r+0x44>
 8010bda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bdc:	e71e      	b.n	8010a1c <_vfiprintf_r+0x48>
 8010bde:	ab03      	add	r3, sp, #12
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	462a      	mov	r2, r5
 8010be4:	4b05      	ldr	r3, [pc, #20]	@ (8010bfc <_vfiprintf_r+0x228>)
 8010be6:	a904      	add	r1, sp, #16
 8010be8:	4630      	mov	r0, r6
 8010bea:	f7fd fe57 	bl	800e89c <_printf_i>
 8010bee:	e7e4      	b.n	8010bba <_vfiprintf_r+0x1e6>
 8010bf0:	08011ca0 	.word	0x08011ca0
 8010bf4:	08011caa 	.word	0x08011caa
 8010bf8:	0800e36d 	.word	0x0800e36d
 8010bfc:	080109b1 	.word	0x080109b1
 8010c00:	08011ca6 	.word	0x08011ca6

08010c04 <__swbuf_r>:
 8010c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c06:	460e      	mov	r6, r1
 8010c08:	4614      	mov	r4, r2
 8010c0a:	4605      	mov	r5, r0
 8010c0c:	b118      	cbz	r0, 8010c16 <__swbuf_r+0x12>
 8010c0e:	6a03      	ldr	r3, [r0, #32]
 8010c10:	b90b      	cbnz	r3, 8010c16 <__swbuf_r+0x12>
 8010c12:	f7fd ffef 	bl	800ebf4 <__sinit>
 8010c16:	69a3      	ldr	r3, [r4, #24]
 8010c18:	60a3      	str	r3, [r4, #8]
 8010c1a:	89a3      	ldrh	r3, [r4, #12]
 8010c1c:	071a      	lsls	r2, r3, #28
 8010c1e:	d501      	bpl.n	8010c24 <__swbuf_r+0x20>
 8010c20:	6923      	ldr	r3, [r4, #16]
 8010c22:	b943      	cbnz	r3, 8010c36 <__swbuf_r+0x32>
 8010c24:	4621      	mov	r1, r4
 8010c26:	4628      	mov	r0, r5
 8010c28:	f000 f82a 	bl	8010c80 <__swsetup_r>
 8010c2c:	b118      	cbz	r0, 8010c36 <__swbuf_r+0x32>
 8010c2e:	f04f 37ff 	mov.w	r7, #4294967295
 8010c32:	4638      	mov	r0, r7
 8010c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c36:	6823      	ldr	r3, [r4, #0]
 8010c38:	6922      	ldr	r2, [r4, #16]
 8010c3a:	1a98      	subs	r0, r3, r2
 8010c3c:	6963      	ldr	r3, [r4, #20]
 8010c3e:	b2f6      	uxtb	r6, r6
 8010c40:	4283      	cmp	r3, r0
 8010c42:	4637      	mov	r7, r6
 8010c44:	dc05      	bgt.n	8010c52 <__swbuf_r+0x4e>
 8010c46:	4621      	mov	r1, r4
 8010c48:	4628      	mov	r0, r5
 8010c4a:	f7ff fda7 	bl	801079c <_fflush_r>
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d1ed      	bne.n	8010c2e <__swbuf_r+0x2a>
 8010c52:	68a3      	ldr	r3, [r4, #8]
 8010c54:	3b01      	subs	r3, #1
 8010c56:	60a3      	str	r3, [r4, #8]
 8010c58:	6823      	ldr	r3, [r4, #0]
 8010c5a:	1c5a      	adds	r2, r3, #1
 8010c5c:	6022      	str	r2, [r4, #0]
 8010c5e:	701e      	strb	r6, [r3, #0]
 8010c60:	6962      	ldr	r2, [r4, #20]
 8010c62:	1c43      	adds	r3, r0, #1
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d004      	beq.n	8010c72 <__swbuf_r+0x6e>
 8010c68:	89a3      	ldrh	r3, [r4, #12]
 8010c6a:	07db      	lsls	r3, r3, #31
 8010c6c:	d5e1      	bpl.n	8010c32 <__swbuf_r+0x2e>
 8010c6e:	2e0a      	cmp	r6, #10
 8010c70:	d1df      	bne.n	8010c32 <__swbuf_r+0x2e>
 8010c72:	4621      	mov	r1, r4
 8010c74:	4628      	mov	r0, r5
 8010c76:	f7ff fd91 	bl	801079c <_fflush_r>
 8010c7a:	2800      	cmp	r0, #0
 8010c7c:	d0d9      	beq.n	8010c32 <__swbuf_r+0x2e>
 8010c7e:	e7d6      	b.n	8010c2e <__swbuf_r+0x2a>

08010c80 <__swsetup_r>:
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	4b29      	ldr	r3, [pc, #164]	@ (8010d28 <__swsetup_r+0xa8>)
 8010c84:	4605      	mov	r5, r0
 8010c86:	6818      	ldr	r0, [r3, #0]
 8010c88:	460c      	mov	r4, r1
 8010c8a:	b118      	cbz	r0, 8010c94 <__swsetup_r+0x14>
 8010c8c:	6a03      	ldr	r3, [r0, #32]
 8010c8e:	b90b      	cbnz	r3, 8010c94 <__swsetup_r+0x14>
 8010c90:	f7fd ffb0 	bl	800ebf4 <__sinit>
 8010c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c98:	0719      	lsls	r1, r3, #28
 8010c9a:	d422      	bmi.n	8010ce2 <__swsetup_r+0x62>
 8010c9c:	06da      	lsls	r2, r3, #27
 8010c9e:	d407      	bmi.n	8010cb0 <__swsetup_r+0x30>
 8010ca0:	2209      	movs	r2, #9
 8010ca2:	602a      	str	r2, [r5, #0]
 8010ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ca8:	81a3      	strh	r3, [r4, #12]
 8010caa:	f04f 30ff 	mov.w	r0, #4294967295
 8010cae:	e033      	b.n	8010d18 <__swsetup_r+0x98>
 8010cb0:	0758      	lsls	r0, r3, #29
 8010cb2:	d512      	bpl.n	8010cda <__swsetup_r+0x5a>
 8010cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010cb6:	b141      	cbz	r1, 8010cca <__swsetup_r+0x4a>
 8010cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cbc:	4299      	cmp	r1, r3
 8010cbe:	d002      	beq.n	8010cc6 <__swsetup_r+0x46>
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	f7fe ff0d 	bl	800fae0 <_free_r>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8010cca:	89a3      	ldrh	r3, [r4, #12]
 8010ccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010cd0:	81a3      	strh	r3, [r4, #12]
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	6063      	str	r3, [r4, #4]
 8010cd6:	6923      	ldr	r3, [r4, #16]
 8010cd8:	6023      	str	r3, [r4, #0]
 8010cda:	89a3      	ldrh	r3, [r4, #12]
 8010cdc:	f043 0308 	orr.w	r3, r3, #8
 8010ce0:	81a3      	strh	r3, [r4, #12]
 8010ce2:	6923      	ldr	r3, [r4, #16]
 8010ce4:	b94b      	cbnz	r3, 8010cfa <__swsetup_r+0x7a>
 8010ce6:	89a3      	ldrh	r3, [r4, #12]
 8010ce8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010cf0:	d003      	beq.n	8010cfa <__swsetup_r+0x7a>
 8010cf2:	4621      	mov	r1, r4
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	f000 f883 	bl	8010e00 <__smakebuf_r>
 8010cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cfe:	f013 0201 	ands.w	r2, r3, #1
 8010d02:	d00a      	beq.n	8010d1a <__swsetup_r+0x9a>
 8010d04:	2200      	movs	r2, #0
 8010d06:	60a2      	str	r2, [r4, #8]
 8010d08:	6962      	ldr	r2, [r4, #20]
 8010d0a:	4252      	negs	r2, r2
 8010d0c:	61a2      	str	r2, [r4, #24]
 8010d0e:	6922      	ldr	r2, [r4, #16]
 8010d10:	b942      	cbnz	r2, 8010d24 <__swsetup_r+0xa4>
 8010d12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010d16:	d1c5      	bne.n	8010ca4 <__swsetup_r+0x24>
 8010d18:	bd38      	pop	{r3, r4, r5, pc}
 8010d1a:	0799      	lsls	r1, r3, #30
 8010d1c:	bf58      	it	pl
 8010d1e:	6962      	ldrpl	r2, [r4, #20]
 8010d20:	60a2      	str	r2, [r4, #8]
 8010d22:	e7f4      	b.n	8010d0e <__swsetup_r+0x8e>
 8010d24:	2000      	movs	r0, #0
 8010d26:	e7f7      	b.n	8010d18 <__swsetup_r+0x98>
 8010d28:	20000020 	.word	0x20000020

08010d2c <_raise_r>:
 8010d2c:	291f      	cmp	r1, #31
 8010d2e:	b538      	push	{r3, r4, r5, lr}
 8010d30:	4605      	mov	r5, r0
 8010d32:	460c      	mov	r4, r1
 8010d34:	d904      	bls.n	8010d40 <_raise_r+0x14>
 8010d36:	2316      	movs	r3, #22
 8010d38:	6003      	str	r3, [r0, #0]
 8010d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3e:	bd38      	pop	{r3, r4, r5, pc}
 8010d40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d42:	b112      	cbz	r2, 8010d4a <_raise_r+0x1e>
 8010d44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d48:	b94b      	cbnz	r3, 8010d5e <_raise_r+0x32>
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	f000 f830 	bl	8010db0 <_getpid_r>
 8010d50:	4622      	mov	r2, r4
 8010d52:	4601      	mov	r1, r0
 8010d54:	4628      	mov	r0, r5
 8010d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d5a:	f000 b817 	b.w	8010d8c <_kill_r>
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d00a      	beq.n	8010d78 <_raise_r+0x4c>
 8010d62:	1c59      	adds	r1, r3, #1
 8010d64:	d103      	bne.n	8010d6e <_raise_r+0x42>
 8010d66:	2316      	movs	r3, #22
 8010d68:	6003      	str	r3, [r0, #0]
 8010d6a:	2001      	movs	r0, #1
 8010d6c:	e7e7      	b.n	8010d3e <_raise_r+0x12>
 8010d6e:	2100      	movs	r1, #0
 8010d70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d74:	4620      	mov	r0, r4
 8010d76:	4798      	blx	r3
 8010d78:	2000      	movs	r0, #0
 8010d7a:	e7e0      	b.n	8010d3e <_raise_r+0x12>

08010d7c <raise>:
 8010d7c:	4b02      	ldr	r3, [pc, #8]	@ (8010d88 <raise+0xc>)
 8010d7e:	4601      	mov	r1, r0
 8010d80:	6818      	ldr	r0, [r3, #0]
 8010d82:	f7ff bfd3 	b.w	8010d2c <_raise_r>
 8010d86:	bf00      	nop
 8010d88:	20000020 	.word	0x20000020

08010d8c <_kill_r>:
 8010d8c:	b538      	push	{r3, r4, r5, lr}
 8010d8e:	4d07      	ldr	r5, [pc, #28]	@ (8010dac <_kill_r+0x20>)
 8010d90:	2300      	movs	r3, #0
 8010d92:	4604      	mov	r4, r0
 8010d94:	4608      	mov	r0, r1
 8010d96:	4611      	mov	r1, r2
 8010d98:	602b      	str	r3, [r5, #0]
 8010d9a:	f7f3 febd 	bl	8004b18 <_kill>
 8010d9e:	1c43      	adds	r3, r0, #1
 8010da0:	d102      	bne.n	8010da8 <_kill_r+0x1c>
 8010da2:	682b      	ldr	r3, [r5, #0]
 8010da4:	b103      	cbz	r3, 8010da8 <_kill_r+0x1c>
 8010da6:	6023      	str	r3, [r4, #0]
 8010da8:	bd38      	pop	{r3, r4, r5, pc}
 8010daa:	bf00      	nop
 8010dac:	20005038 	.word	0x20005038

08010db0 <_getpid_r>:
 8010db0:	f7f3 beaa 	b.w	8004b08 <_getpid>

08010db4 <__swhatbuf_r>:
 8010db4:	b570      	push	{r4, r5, r6, lr}
 8010db6:	460c      	mov	r4, r1
 8010db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dbc:	2900      	cmp	r1, #0
 8010dbe:	b096      	sub	sp, #88	@ 0x58
 8010dc0:	4615      	mov	r5, r2
 8010dc2:	461e      	mov	r6, r3
 8010dc4:	da0d      	bge.n	8010de2 <__swhatbuf_r+0x2e>
 8010dc6:	89a3      	ldrh	r3, [r4, #12]
 8010dc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010dcc:	f04f 0100 	mov.w	r1, #0
 8010dd0:	bf14      	ite	ne
 8010dd2:	2340      	movne	r3, #64	@ 0x40
 8010dd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010dd8:	2000      	movs	r0, #0
 8010dda:	6031      	str	r1, [r6, #0]
 8010ddc:	602b      	str	r3, [r5, #0]
 8010dde:	b016      	add	sp, #88	@ 0x58
 8010de0:	bd70      	pop	{r4, r5, r6, pc}
 8010de2:	466a      	mov	r2, sp
 8010de4:	f000 f848 	bl	8010e78 <_fstat_r>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	dbec      	blt.n	8010dc6 <__swhatbuf_r+0x12>
 8010dec:	9901      	ldr	r1, [sp, #4]
 8010dee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010df2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010df6:	4259      	negs	r1, r3
 8010df8:	4159      	adcs	r1, r3
 8010dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010dfe:	e7eb      	b.n	8010dd8 <__swhatbuf_r+0x24>

08010e00 <__smakebuf_r>:
 8010e00:	898b      	ldrh	r3, [r1, #12]
 8010e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e04:	079d      	lsls	r5, r3, #30
 8010e06:	4606      	mov	r6, r0
 8010e08:	460c      	mov	r4, r1
 8010e0a:	d507      	bpl.n	8010e1c <__smakebuf_r+0x1c>
 8010e0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e10:	6023      	str	r3, [r4, #0]
 8010e12:	6123      	str	r3, [r4, #16]
 8010e14:	2301      	movs	r3, #1
 8010e16:	6163      	str	r3, [r4, #20]
 8010e18:	b003      	add	sp, #12
 8010e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e1c:	ab01      	add	r3, sp, #4
 8010e1e:	466a      	mov	r2, sp
 8010e20:	f7ff ffc8 	bl	8010db4 <__swhatbuf_r>
 8010e24:	9f00      	ldr	r7, [sp, #0]
 8010e26:	4605      	mov	r5, r0
 8010e28:	4639      	mov	r1, r7
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	f7fe fecc 	bl	800fbc8 <_malloc_r>
 8010e30:	b948      	cbnz	r0, 8010e46 <__smakebuf_r+0x46>
 8010e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e36:	059a      	lsls	r2, r3, #22
 8010e38:	d4ee      	bmi.n	8010e18 <__smakebuf_r+0x18>
 8010e3a:	f023 0303 	bic.w	r3, r3, #3
 8010e3e:	f043 0302 	orr.w	r3, r3, #2
 8010e42:	81a3      	strh	r3, [r4, #12]
 8010e44:	e7e2      	b.n	8010e0c <__smakebuf_r+0xc>
 8010e46:	89a3      	ldrh	r3, [r4, #12]
 8010e48:	6020      	str	r0, [r4, #0]
 8010e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e4e:	81a3      	strh	r3, [r4, #12]
 8010e50:	9b01      	ldr	r3, [sp, #4]
 8010e52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e56:	b15b      	cbz	r3, 8010e70 <__smakebuf_r+0x70>
 8010e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f000 f81d 	bl	8010e9c <_isatty_r>
 8010e62:	b128      	cbz	r0, 8010e70 <__smakebuf_r+0x70>
 8010e64:	89a3      	ldrh	r3, [r4, #12]
 8010e66:	f023 0303 	bic.w	r3, r3, #3
 8010e6a:	f043 0301 	orr.w	r3, r3, #1
 8010e6e:	81a3      	strh	r3, [r4, #12]
 8010e70:	89a3      	ldrh	r3, [r4, #12]
 8010e72:	431d      	orrs	r5, r3
 8010e74:	81a5      	strh	r5, [r4, #12]
 8010e76:	e7cf      	b.n	8010e18 <__smakebuf_r+0x18>

08010e78 <_fstat_r>:
 8010e78:	b538      	push	{r3, r4, r5, lr}
 8010e7a:	4d07      	ldr	r5, [pc, #28]	@ (8010e98 <_fstat_r+0x20>)
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	4604      	mov	r4, r0
 8010e80:	4608      	mov	r0, r1
 8010e82:	4611      	mov	r1, r2
 8010e84:	602b      	str	r3, [r5, #0]
 8010e86:	f7f3 fea7 	bl	8004bd8 <_fstat>
 8010e8a:	1c43      	adds	r3, r0, #1
 8010e8c:	d102      	bne.n	8010e94 <_fstat_r+0x1c>
 8010e8e:	682b      	ldr	r3, [r5, #0]
 8010e90:	b103      	cbz	r3, 8010e94 <_fstat_r+0x1c>
 8010e92:	6023      	str	r3, [r4, #0]
 8010e94:	bd38      	pop	{r3, r4, r5, pc}
 8010e96:	bf00      	nop
 8010e98:	20005038 	.word	0x20005038

08010e9c <_isatty_r>:
 8010e9c:	b538      	push	{r3, r4, r5, lr}
 8010e9e:	4d06      	ldr	r5, [pc, #24]	@ (8010eb8 <_isatty_r+0x1c>)
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	4608      	mov	r0, r1
 8010ea6:	602b      	str	r3, [r5, #0]
 8010ea8:	f7f3 fea6 	bl	8004bf8 <_isatty>
 8010eac:	1c43      	adds	r3, r0, #1
 8010eae:	d102      	bne.n	8010eb6 <_isatty_r+0x1a>
 8010eb0:	682b      	ldr	r3, [r5, #0]
 8010eb2:	b103      	cbz	r3, 8010eb6 <_isatty_r+0x1a>
 8010eb4:	6023      	str	r3, [r4, #0]
 8010eb6:	bd38      	pop	{r3, r4, r5, pc}
 8010eb8:	20005038 	.word	0x20005038

08010ebc <_init>:
 8010ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ebe:	bf00      	nop
 8010ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ec2:	bc08      	pop	{r3}
 8010ec4:	469e      	mov	lr, r3
 8010ec6:	4770      	bx	lr

08010ec8 <_fini>:
 8010ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eca:	bf00      	nop
 8010ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ece:	bc08      	pop	{r3}
 8010ed0:	469e      	mov	lr, r3
 8010ed2:	4770      	bx	lr
